/*
 *    This file is part of CasADi.
 *
 *    CasADi -- A symbolic framework for dynamic optimization.
 *    Copyright (C) 2010-2014 Joel Andersson, Joris Gillis, Moritz Diehl,
 *                            K.U. Leuven. All rights reserved.
 *    Copyright (C) 2011-2014 Greg Horn
 *
 *    CasADi is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *
 *    CasADi is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with CasADi; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

/** All edits to this file will be lost - autogenerated by misc/autogencode.py */
#ifndef SCHEMES_HELPERS_HPP
#define SCHEMES_HELPERS_HPP
#include <vector>
#include <string>
#include <utility>
#include <map>
namespace casadi {

/// Input arguments of an ODE/DAE function
///
/// \copydoc scheme_DAEInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > daeIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  std::string s[] = {"x", "z", "p", "t"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+4);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'daeIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an DAE function
///
/// \copydoc scheme_DAEOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > daeOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  std::string s[] = {"ode", "alg", "quad"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+3);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'daeOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an ODE/DAE backward integration function
///
/// \copydoc scheme_RDAEInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > rdaeIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M(),
    const std::string &n6 ="", const M &x6 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  if (!n6.empty()) m[n6]=x6;
  std::string s[] = {"rx", "rz", "rp", "x", "z", "p", "t"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+7);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'rdaeIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an ODE/DAE backward integration function
///
/// \copydoc scheme_RDAEOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > rdaeOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  std::string s[] = {"ode", "alg", "quad"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+3);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'rdaeOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an integrator
///
/// \copydoc scheme_IntegratorInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > integratorIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  std::string s[] = {"x0", "p", "z0", "rx0", "rp", "rz0"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+6);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'integratorIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an integrator
///
/// \copydoc scheme_IntegratorOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > integratorOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  std::string s[] = {"xf", "qf", "zf", "rxf", "rqf", "rzf"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+6);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'integratorOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an NLP objective gradient function
///
/// \copydoc scheme_GradFInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > gradFIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  std::string s[] = {"x", "p"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+2);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'gradFIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an NLP objective gradient function
///
/// \copydoc scheme_GradFOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > gradFOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  std::string s[] = {"grad", "f", "g"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+3);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'gradFOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an NLP Jacobian function
///
/// \copydoc scheme_JacGInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > jacGIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  std::string s[] = {"x", "p"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+2);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'jacGIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an NLP Jacobian function
///
/// \copydoc scheme_JacGOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > jacGOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  std::string s[] = {"jac", "f", "g"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+3);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'jacGOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an NLP Hessian function
///
/// \copydoc scheme_HessLagInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > hessLagIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  std::string s[] = {"x", "p", "lam_f", "lam_g"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+4);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'hessLagIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an NLP Solver
///
/// \copydoc scheme_NlpSolverOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > nlpSolverOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  std::string s[] = {"x", "f", "g", "lam_x", "lam_g", "lam_p"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+6);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'nlpSolverOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of a linear solver
///
/// \copydoc scheme_LinsolInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > linsolIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  std::string s[] = {"A", "B"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+2);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'linsolIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of a linear solver
///
/// \copydoc scheme_LinsolOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > linsolOut(
    const std::string &n0 ="", const M &x0 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  std::string s[] = {"X"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+1);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'linsolOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
} // namespace casadi
#endif //SCHEMES_HELPERS_HPP

