/*
 *    This file is part of CasADi.
 *
 *    CasADi -- A symbolic framework for dynamic optimization.
 *    Copyright (C) 2010-2014 Joel Andersson, Joris Gillis, Moritz Diehl,
 *                            K.U. Leuven. All rights reserved.
 *    Copyright (C) 2011-2014 Greg Horn
 *
 *    CasADi is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *
 *    CasADi is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with CasADi; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

/** All edits to this file will be lost - autogenerated by misc/autogencode.py */
#ifndef SCHEMES_HELPERS_HPP
#define SCHEMES_HELPERS_HPP
#include <vector>
#include <string>
#include <utility>
#include <map>
#include "io_scheme_vector.hpp"
namespace casadi {

/// Input arguments of a \e cle solver
///
/// \copydoc scheme_CLEInput
template<class M>
IOSchemeVector<M> cleIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M()) {
  std::vector<M> ret(2);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_CLEInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in CLEInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "a, v");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_CLEInput));
}
template<class M>
std::vector<M> cleIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_CLEInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_CLEInput, arg_s1))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of a \e cle solver
///
/// \copydoc scheme_CLEOutput
template<class M>
IOSchemeVector<M> cleOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M()) {
  std::vector<M> ret(1);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_CLEOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in CLEOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "p");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_CLEOutput));
}
template<class M>
std::vector<M> cleOut(const std::vector<M>& args,
    const std::string &arg_s0="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_CLEOutput, arg_s0))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Structure specification of a CLE
///
/// \copydoc scheme_CleStruct
template<class M>
IOSchemeVector<M> cleStruct(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M()) {
  std::vector<M> ret(3);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_CleStruct, it->first);
    if (n==-1)
      casadi_error("Keyword error in CleStruct: '" << it->first
        << "' is not recognized. Available keywords are: "
        "a, v, c");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_CleStruct));
}
template<class M>
std::vector<M> cleStruct(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_CleStruct, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_CleStruct, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_CleStruct, arg_s2))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of an ODE/DAE function
///
/// \copydoc scheme_ControlledDAEInput
template<class M>
IOSchemeVector<M> controldaeIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M(),
    const std::string &arg_s6 ="", const M &arg_m6 =M(),
    const std::string &arg_s7 ="", const M &arg_m7 =M(),
    const std::string &arg_s8 ="", const M &arg_m8 =M()) {
  std::vector<M> ret(9);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  if (arg_s6 != "") arg.insert(make_pair(arg_s6, arg_m6));
  if (arg_s7 != "") arg.insert(make_pair(arg_s7, arg_m7));
  if (arg_s8 != "") arg.insert(make_pair(arg_s8, arg_m8));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_ControlledDAEInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in ControlledDAEInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "t, x, z, p, u, u_interp, x_major, t0, tf");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_ControlledDAEInput));
}
template<class M>
std::vector<M> controldaeIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="",
    const std::string &arg_s6="",
    const std::string &arg_s7="",
    const std::string &arg_s8="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_ControlledDAEInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_ControlledDAEInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_ControlledDAEInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_ControlledDAEInput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_ControlledDAEInput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_ControlledDAEInput, arg_s5))); // NOLINT(whitespace/line_length)
  if (arg_s6 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_ControlledDAEInput, arg_s6))); // NOLINT(whitespace/line_length)
  if (arg_s7 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_ControlledDAEInput, arg_s7))); // NOLINT(whitespace/line_length)
  if (arg_s8 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_ControlledDAEInput, arg_s8))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of a control simulator
///
/// \copydoc scheme_ControlSimulatorInput
template<class M>
IOSchemeVector<M> controlsimulatorIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M()) {
  std::vector<M> ret(3);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_ControlSimulatorInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in ControlSimulatorInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x0, p, u");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_ControlSimulatorInput));
}
template<class M>
std::vector<M> controlsimulatorIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_ControlSimulatorInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_ControlSimulatorInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_ControlSimulatorInput, arg_s2))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of a \e dle solver
///
/// \copydoc scheme_DLEInput
template<class M>
IOSchemeVector<M> dleIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M()) {
  std::vector<M> ret(2);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_DLEInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in DLEInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "a, v");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_DLEInput));
}
template<class M>
std::vector<M> dleIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DLEInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DLEInput, arg_s1))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of a \e dle solver
///
/// \copydoc scheme_DLEOutput
template<class M>
IOSchemeVector<M> dleOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M()) {
  std::vector<M> ret(1);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_DLEOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in DLEOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "p");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_DLEOutput));
}
template<class M>
std::vector<M> dleOut(const std::vector<M>& args,
    const std::string &arg_s0="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DLEOutput, arg_s0))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Structure specification of a DLE
///
/// \copydoc scheme_DleStruct
template<class M>
IOSchemeVector<M> dleStruct(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M()) {
  std::vector<M> ret(2);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_DleStruct, it->first);
    if (n==-1)
      casadi_error("Keyword error in DleStruct: '" << it->first
        << "' is not recognized. Available keywords are: "
        "a, v");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_DleStruct));
}
template<class M>
std::vector<M> dleStruct(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DleStruct, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DleStruct, arg_s1))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of a \e dple solver
///
/// \copydoc scheme_DPLEInput
template<class M>
IOSchemeVector<M> dpleIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M()) {
  std::vector<M> ret(2);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_DPLEInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in DPLEInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "a, v");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_DPLEInput));
}
template<class M>
std::vector<M> dpleIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DPLEInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DPLEInput, arg_s1))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of a \e dple solver
///
/// \copydoc scheme_DPLEOutput
template<class M>
IOSchemeVector<M> dpleOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M()) {
  std::vector<M> ret(1);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_DPLEOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in DPLEOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "p");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_DPLEOutput));
}
template<class M>
std::vector<M> dpleOut(const std::vector<M>& args,
    const std::string &arg_s0="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DPLEOutput, arg_s0))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Structure specification of a DPLE
///
/// \copydoc scheme_DpleVecStruct
template<class M>
IOSchemeVector<M> dpleStruct(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M()) {
  std::vector<M> ret(2);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_DpleVecStruct, it->first);
    if (n==-1)
      casadi_error("Keyword error in DpleVecStruct: '" << it->first
        << "' is not recognized. Available keywords are: "
        "a, v");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_DpleVecStruct));
}
template<class M>
std::vector<M> dpleStruct(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DpleVecStruct, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DpleVecStruct, arg_s1))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of an Homotopy NLP function
///
/// \copydoc scheme_HNLPInput
template<class M>
IOSchemeVector<M> hnlpIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M()) {
  std::vector<M> ret(3);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_HNLPInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in HNLPInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x, p, tau");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_HNLPInput));
}
template<class M>
std::vector<M> hnlpIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_HNLPInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_HNLPInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_HNLPInput, arg_s2))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of an ODE/DAE function
///
/// \copydoc scheme_DAEInput
template<class M>
IOSchemeVector<M> daeIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M()) {
  std::vector<M> ret(4);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_DAEInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in DAEInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x, z, p, t");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_DAEInput));
}
template<class M>
std::vector<M> daeIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DAEInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DAEInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DAEInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DAEInput, arg_s3))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of an DAE function
///
/// \copydoc scheme_DAEOutput
template<class M>
IOSchemeVector<M> daeOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M()) {
  std::vector<M> ret(3);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_DAEOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in DAEOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "ode, alg, quad");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_DAEOutput));
}
template<class M>
std::vector<M> daeOut(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DAEOutput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DAEOutput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_DAEOutput, arg_s2))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of an ODE/DAE backward integration function
///
/// \copydoc scheme_RDAEInput
template<class M>
IOSchemeVector<M> rdaeIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M(),
    const std::string &arg_s6 ="", const M &arg_m6 =M()) {
  std::vector<M> ret(7);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  if (arg_s6 != "") arg.insert(make_pair(arg_s6, arg_m6));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_RDAEInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in RDAEInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "rx, rz, rp, x, z, p, t");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_RDAEInput));
}
template<class M>
std::vector<M> rdaeIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="",
    const std::string &arg_s6="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_RDAEInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_RDAEInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_RDAEInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_RDAEInput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_RDAEInput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_RDAEInput, arg_s5))); // NOLINT(whitespace/line_length)
  if (arg_s6 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_RDAEInput, arg_s6))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of an ODE/DAE backward integration function
///
/// \copydoc scheme_RDAEOutput
template<class M>
IOSchemeVector<M> rdaeOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M()) {
  std::vector<M> ret(3);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_RDAEOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in RDAEOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "ode, alg, quad");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_RDAEOutput));
}
template<class M>
std::vector<M> rdaeOut(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_RDAEOutput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_RDAEOutput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_RDAEOutput, arg_s2))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of an integrator
///
/// \copydoc scheme_IntegratorInput
template<class M>
IOSchemeVector<M> integratorIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M()) {
  std::vector<M> ret(6);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_IntegratorInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in IntegratorInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x0, p, z0, rx0, rp, rz0");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_IntegratorInput));
}
template<class M>
std::vector<M> integratorIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_IntegratorInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_IntegratorInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_IntegratorInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_IntegratorInput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_IntegratorInput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_IntegratorInput, arg_s5))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of an integrator
///
/// \copydoc scheme_IntegratorOutput
template<class M>
IOSchemeVector<M> integratorOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M()) {
  std::vector<M> ret(6);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_IntegratorOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in IntegratorOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "xf, qf, zf, rxf, rqf, rzf");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_IntegratorOutput));
}
template<class M>
std::vector<M> integratorOut(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_IntegratorOutput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_IntegratorOutput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_IntegratorOutput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_IntegratorOutput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_IntegratorOutput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_IntegratorOutput, arg_s5))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of a linear solver
///
/// \copydoc scheme_LinsolInput
template<class M>
IOSchemeVector<M> linsolIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M()) {
  std::vector<M> ret(2);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_LinsolInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in LinsolInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "A, B");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_LinsolInput));
}
template<class M>
std::vector<M> linsolIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LinsolInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LinsolInput, arg_s1))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of a linear solver
///
/// \copydoc scheme_LinsolOutput
template<class M>
IOSchemeVector<M> linsolOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M()) {
  std::vector<M> ret(1);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_LinsolOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in LinsolOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "X");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_LinsolOutput));
}
template<class M>
std::vector<M> linsolOut(const std::vector<M>& args,
    const std::string &arg_s0="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LinsolOutput, arg_s0))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of a LP problem
///
/// \copydoc scheme_LpSolverInput
template<class M>
IOSchemeVector<M> lpIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M()) {
  std::vector<M> ret(6);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_LpSolverInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in LpSolverInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "c, a, lba, uba, lbx, ubx");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_LpSolverInput));
}
template<class M>
std::vector<M> lpIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LpSolverInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LpSolverInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LpSolverInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LpSolverInput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LpSolverInput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LpSolverInput, arg_s5))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of an LP Solver
///
/// \copydoc scheme_LpSolverOutput
template<class M>
IOSchemeVector<M> lpOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M()) {
  std::vector<M> ret(4);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_LpSolverOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in LpSolverOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x, cost, lam_a, lam_x");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_LpSolverOutput));
}
template<class M>
std::vector<M> lpOut(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LpSolverOutput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LpSolverOutput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LpSolverOutput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LpSolverOutput, arg_s3))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Structure specification of an LP
///
/// \copydoc scheme_LPStruct
template<class M>
IOSchemeVector<M> lpStruct(
    const std::string &arg_s0 ="", const M &arg_m0 =M()) {
  std::vector<M> ret(1);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_LPStruct, it->first);
    if (n==-1)
      casadi_error("Keyword error in LPStruct: '" << it->first
        << "' is not recognized. Available keywords are: "
        "a");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_LPStruct));
}
template<class M>
std::vector<M> lpStruct(const std::vector<M>& args,
    const std::string &arg_s0="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LPStruct, arg_s0))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of a \e dle solver
///
/// \copydoc scheme_LR_DLEInput
template<class M>
IOSchemeVector<M> lrdleIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M()) {
  std::vector<M> ret(4);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_LR_DLEInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in LR_DLEInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "a, v, c, h");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_LR_DLEInput));
}
template<class M>
std::vector<M> lrdleIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LR_DLEInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LR_DLEInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LR_DLEInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LR_DLEInput, arg_s3))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of a \e dle solver
///
/// \copydoc scheme_LR_DLEOutput
template<class M>
IOSchemeVector<M> lrdleOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M()) {
  std::vector<M> ret(1);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_LR_DLEOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in LR_DLEOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "y");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_LR_DLEOutput));
}
template<class M>
std::vector<M> lrdleOut(const std::vector<M>& args,
    const std::string &arg_s0="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LR_DLEOutput, arg_s0))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Structure specification of a DLE
///
/// \copydoc scheme_LrDleStruct
template<class M>
IOSchemeVector<M> lrdleStruct(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M()) {
  std::vector<M> ret(4);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_LrDleStruct, it->first);
    if (n==-1)
      casadi_error("Keyword error in LrDleStruct: '" << it->first
        << "' is not recognized. Available keywords are: "
        "a, v, c, h");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_LrDleStruct));
}
template<class M>
std::vector<M> lrdleStruct(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LrDleStruct, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LrDleStruct, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LrDleStruct, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LrDleStruct, arg_s3))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of a \e dple solver
///
/// \copydoc scheme_LR_DPLEInput
template<class M>
IOSchemeVector<M> lrdpleIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M()) {
  std::vector<M> ret(4);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_LR_DPLEInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in LR_DPLEInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "a, v, c, h");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_LR_DPLEInput));
}
template<class M>
std::vector<M> lrdpleIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LR_DPLEInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LR_DPLEInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LR_DPLEInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LR_DPLEInput, arg_s3))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of a \e dple solver
///
/// \copydoc scheme_LR_DPLEOutput
template<class M>
IOSchemeVector<M> lrdpleOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M()) {
  std::vector<M> ret(1);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_LR_DPLEOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in LR_DPLEOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "y");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_LR_DPLEOutput));
}
template<class M>
std::vector<M> lrdpleOut(const std::vector<M>& args,
    const std::string &arg_s0="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LR_DPLEOutput, arg_s0))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Structure specification of a DPLE
///
/// \copydoc scheme_LrDpleVecStruct
template<class M>
IOSchemeVector<M> lrdpleStruct(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M()) {
  std::vector<M> ret(4);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_LrDpleVecStruct, it->first);
    if (n==-1)
      casadi_error("Keyword error in LrDpleVecStruct: '" << it->first
        << "' is not recognized. Available keywords are: "
        "a, v, c, h");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_LrDpleVecStruct));
}
template<class M>
std::vector<M> lrdpleStruct(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LrDpleVecStruct, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LrDpleVecStruct, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LrDpleVecStruct, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_LrDpleVecStruct, arg_s3))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of an NLP function
///
/// \copydoc scheme_NLPInput
template<class M>
IOSchemeVector<M> nlpIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M()) {
  std::vector<M> ret(2);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_NLPInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in NLPInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x, p");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_NLPInput));
}
template<class M>
std::vector<M> nlpIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NLPInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NLPInput, arg_s1))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of an NLP function
///
/// \copydoc scheme_NLPOutput
template<class M>
IOSchemeVector<M> nlpOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M()) {
  std::vector<M> ret(2);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_NLPOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in NLPOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "f, g");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_NLPOutput));
}
template<class M>
std::vector<M> nlpOut(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NLPOutput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NLPOutput, arg_s1))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of an NLP objective gradient function
///
/// \copydoc scheme_GradFInput
template<class M>
IOSchemeVector<M> gradFIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M()) {
  std::vector<M> ret(2);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_GradFInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in GradFInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x, p");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_GradFInput));
}
template<class M>
std::vector<M> gradFIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_GradFInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_GradFInput, arg_s1))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of an NLP objective gradient function
///
/// \copydoc scheme_GradFOutput
template<class M>
IOSchemeVector<M> gradFOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M()) {
  std::vector<M> ret(3);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_GradFOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in GradFOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "grad, f, g");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_GradFOutput));
}
template<class M>
std::vector<M> gradFOut(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_GradFOutput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_GradFOutput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_GradFOutput, arg_s2))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of an NLP Jacobian function
///
/// \copydoc scheme_JacGInput
template<class M>
IOSchemeVector<M> jacGIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M()) {
  std::vector<M> ret(2);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_JacGInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in JacGInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x, p");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_JacGInput));
}
template<class M>
std::vector<M> jacGIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_JacGInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_JacGInput, arg_s1))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of an NLP Jacobian function
///
/// \copydoc scheme_JacGOutput
template<class M>
IOSchemeVector<M> jacGOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M()) {
  std::vector<M> ret(3);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_JacGOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in JacGOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "jac, f, g");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_JacGOutput));
}
template<class M>
std::vector<M> jacGOut(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_JacGOutput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_JacGOutput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_JacGOutput, arg_s2))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of an NLP Hessian function
///
/// \copydoc scheme_HessLagInput
template<class M>
IOSchemeVector<M> hessLagIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M()) {
  std::vector<M> ret(4);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_HessLagInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in HessLagInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x, p, lam_f, lam_g");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_HessLagInput));
}
template<class M>
std::vector<M> hessLagIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_HessLagInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_HessLagInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_HessLagInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_HessLagInput, arg_s3))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of an NLP Hessian function
///
/// \copydoc scheme_HessLagOutput
template<class M>
IOSchemeVector<M> hessLagOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M()) {
  std::vector<M> ret(5);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_HessLagOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in HessLagOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "hess, f, g, grad_x, grad_p");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_HessLagOutput));
}
template<class M>
std::vector<M> hessLagOut(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_HessLagOutput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_HessLagOutput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_HessLagOutput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_HessLagOutput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_HessLagOutput, arg_s4))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of an NLP Solver
///
/// \copydoc scheme_NlpSolverInput
template<class M>
IOSchemeVector<M> nlpSolverIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M(),
    const std::string &arg_s6 ="", const M &arg_m6 =M(),
    const std::string &arg_s7 ="", const M &arg_m7 =M()) {
  std::vector<M> ret(8);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  if (arg_s6 != "") arg.insert(make_pair(arg_s6, arg_m6));
  if (arg_s7 != "") arg.insert(make_pair(arg_s7, arg_m7));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_NlpSolverInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in NlpSolverInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x0, p, lbx, ubx, lbg, ubg, lam_x0, lam_g0");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_NlpSolverInput));
}
template<class M>
std::vector<M> nlpSolverIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="",
    const std::string &arg_s6="",
    const std::string &arg_s7="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NlpSolverInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NlpSolverInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NlpSolverInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NlpSolverInput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NlpSolverInput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NlpSolverInput, arg_s5))); // NOLINT(whitespace/line_length)
  if (arg_s6 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NlpSolverInput, arg_s6))); // NOLINT(whitespace/line_length)
  if (arg_s7 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NlpSolverInput, arg_s7))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of an NLP Solver
///
/// \copydoc scheme_NlpSolverOutput
template<class M>
IOSchemeVector<M> nlpSolverOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M()) {
  std::vector<M> ret(6);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_NlpSolverOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in NlpSolverOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x, f, g, lam_x, lam_g, lam_p");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_NlpSolverOutput));
}
template<class M>
std::vector<M> nlpSolverOut(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NlpSolverOutput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NlpSolverOutput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NlpSolverOutput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NlpSolverOutput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NlpSolverOutput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_NlpSolverOutput, arg_s5))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of a QP problem
///
/// \copydoc scheme_QcqpSolverInput
template<class M>
IOSchemeVector<M> qcqpIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M(),
    const std::string &arg_s6 ="", const M &arg_m6 =M(),
    const std::string &arg_s7 ="", const M &arg_m7 =M(),
    const std::string &arg_s8 ="", const M &arg_m8 =M(),
    const std::string &arg_s9 ="", const M &arg_m9 =M(),
    const std::string &arg_s10 ="", const M &arg_m10 =M(),
    const std::string &arg_s11 ="", const M &arg_m11 =M()) {
  std::vector<M> ret(12);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  if (arg_s6 != "") arg.insert(make_pair(arg_s6, arg_m6));
  if (arg_s7 != "") arg.insert(make_pair(arg_s7, arg_m7));
  if (arg_s8 != "") arg.insert(make_pair(arg_s8, arg_m8));
  if (arg_s9 != "") arg.insert(make_pair(arg_s9, arg_m9));
  if (arg_s10 != "") arg.insert(make_pair(arg_s10, arg_m10));
  if (arg_s11 != "") arg.insert(make_pair(arg_s11, arg_m11));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_QcqpSolverInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in QcqpSolverInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "h, g, p, q, r, a, lba, uba, lbx, ubx, x0, lam_x0");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_QcqpSolverInput));
}
template<class M>
std::vector<M> qcqpIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="",
    const std::string &arg_s6="",
    const std::string &arg_s7="",
    const std::string &arg_s8="",
    const std::string &arg_s9="",
    const std::string &arg_s10="",
    const std::string &arg_s11="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverInput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverInput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverInput, arg_s5))); // NOLINT(whitespace/line_length)
  if (arg_s6 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverInput, arg_s6))); // NOLINT(whitespace/line_length)
  if (arg_s7 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverInput, arg_s7))); // NOLINT(whitespace/line_length)
  if (arg_s8 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverInput, arg_s8))); // NOLINT(whitespace/line_length)
  if (arg_s9 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverInput, arg_s9))); // NOLINT(whitespace/line_length)
  if (arg_s10 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverInput, arg_s10))); // NOLINT(whitespace/line_length)
  if (arg_s11 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverInput, arg_s11))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of an QP Solver
///
/// \copydoc scheme_QcqpSolverOutput
template<class M>
IOSchemeVector<M> qcqpOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M()) {
  std::vector<M> ret(4);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_QcqpSolverOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in QcqpSolverOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x, cost, lam_a, lam_x");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_QcqpSolverOutput));
}
template<class M>
std::vector<M> qcqpOut(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverOutput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverOutput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverOutput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QcqpSolverOutput, arg_s3))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Structure specification of a QP
///
/// \copydoc scheme_QCQPStruct
template<class M>
IOSchemeVector<M> qcqpStruct(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M()) {
  std::vector<M> ret(3);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_QCQPStruct, it->first);
    if (n==-1)
      casadi_error("Keyword error in QCQPStruct: '" << it->first
        << "' is not recognized. Available keywords are: "
        "h, p, a");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_QCQPStruct));
}
template<class M>
std::vector<M> qcqpStruct(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QCQPStruct, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QCQPStruct, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QCQPStruct, arg_s2))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of a QP problem
///
/// \copydoc scheme_QpSolverInput
template<class M>
IOSchemeVector<M> qpIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M(),
    const std::string &arg_s6 ="", const M &arg_m6 =M(),
    const std::string &arg_s7 ="", const M &arg_m7 =M(),
    const std::string &arg_s8 ="", const M &arg_m8 =M()) {
  std::vector<M> ret(9);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  if (arg_s6 != "") arg.insert(make_pair(arg_s6, arg_m6));
  if (arg_s7 != "") arg.insert(make_pair(arg_s7, arg_m7));
  if (arg_s8 != "") arg.insert(make_pair(arg_s8, arg_m8));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_QpSolverInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in QpSolverInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "h, g, a, lba, uba, lbx, ubx, x0, lam_x0");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_QpSolverInput));
}
template<class M>
std::vector<M> qpIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="",
    const std::string &arg_s6="",
    const std::string &arg_s7="",
    const std::string &arg_s8="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QpSolverInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QpSolverInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QpSolverInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QpSolverInput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QpSolverInput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QpSolverInput, arg_s5))); // NOLINT(whitespace/line_length)
  if (arg_s6 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QpSolverInput, arg_s6))); // NOLINT(whitespace/line_length)
  if (arg_s7 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QpSolverInput, arg_s7))); // NOLINT(whitespace/line_length)
  if (arg_s8 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QpSolverInput, arg_s8))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of an QP Solver
///
/// \copydoc scheme_QpSolverOutput
template<class M>
IOSchemeVector<M> qpOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M()) {
  std::vector<M> ret(4);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_QpSolverOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in QpSolverOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x, cost, lam_a, lam_x");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_QpSolverOutput));
}
template<class M>
std::vector<M> qpOut(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QpSolverOutput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QpSolverOutput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QpSolverOutput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QpSolverOutput, arg_s3))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Structure specification of a QP
///
/// \copydoc scheme_QPStruct
template<class M>
IOSchemeVector<M> qpStruct(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M()) {
  std::vector<M> ret(2);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_QPStruct, it->first);
    if (n==-1)
      casadi_error("Keyword error in QPStruct: '" << it->first
        << "' is not recognized. Available keywords are: "
        "h, a");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_QPStruct));
}
template<class M>
std::vector<M> qpStruct(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QPStruct, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_QPStruct, arg_s1))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of a SDP problem
///
/// \copydoc scheme_SDPInput
template<class M>
IOSchemeVector<M> sdpIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M(),
    const std::string &arg_s6 ="", const M &arg_m6 =M(),
    const std::string &arg_s7 ="", const M &arg_m7 =M()) {
  std::vector<M> ret(8);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  if (arg_s6 != "") arg.insert(make_pair(arg_s6, arg_m6));
  if (arg_s7 != "") arg.insert(make_pair(arg_s7, arg_m7));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_SDPInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in SDPInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "f, c, g, a, lba, uba, lbx, ubx");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_SDPInput));
}
template<class M>
std::vector<M> sdpIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="",
    const std::string &arg_s6="",
    const std::string &arg_s7="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPInput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPInput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPInput, arg_s5))); // NOLINT(whitespace/line_length)
  if (arg_s6 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPInput, arg_s6))); // NOLINT(whitespace/line_length)
  if (arg_s7 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPInput, arg_s7))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of an SDP Solver
///
/// \copydoc scheme_SDPOutput
template<class M>
IOSchemeVector<M> sdpOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M(),
    const std::string &arg_s6 ="", const M &arg_m6 =M()) {
  std::vector<M> ret(7);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  if (arg_s6 != "") arg.insert(make_pair(arg_s6, arg_m6));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_SDPOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in SDPOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x, p, dual, cost, dual_cost, lam_a, lam_x");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_SDPOutput));
}
template<class M>
std::vector<M> sdpOut(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="",
    const std::string &arg_s6="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPOutput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPOutput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPOutput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPOutput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPOutput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPOutput, arg_s5))); // NOLINT(whitespace/line_length)
  if (arg_s6 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPOutput, arg_s6))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Structure specification of an SDP
///
/// \copydoc scheme_SDPStruct
template<class M>
IOSchemeVector<M> sdpStruct(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M()) {
  std::vector<M> ret(3);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_SDPStruct, it->first);
    if (n==-1)
      casadi_error("Keyword error in SDPStruct: '" << it->first
        << "' is not recognized. Available keywords are: "
        "f, g, a");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_SDPStruct));
}
template<class M>
std::vector<M> sdpStruct(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPStruct, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPStruct, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDPStruct, arg_s2))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of a SDQP problem
///
/// \copydoc scheme_SDQPInput
template<class M>
IOSchemeVector<M> sdqpIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M(),
    const std::string &arg_s6 ="", const M &arg_m6 =M(),
    const std::string &arg_s7 ="", const M &arg_m7 =M(),
    const std::string &arg_s8 ="", const M &arg_m8 =M()) {
  std::vector<M> ret(9);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  if (arg_s6 != "") arg.insert(make_pair(arg_s6, arg_m6));
  if (arg_s7 != "") arg.insert(make_pair(arg_s7, arg_m7));
  if (arg_s8 != "") arg.insert(make_pair(arg_s8, arg_m8));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_SDQPInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in SDQPInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "h, c, f, g, a, lba, uba, lbx, ubx");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_SDQPInput));
}
template<class M>
std::vector<M> sdqpIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="",
    const std::string &arg_s6="",
    const std::string &arg_s7="",
    const std::string &arg_s8="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPInput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPInput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPInput, arg_s5))); // NOLINT(whitespace/line_length)
  if (arg_s6 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPInput, arg_s6))); // NOLINT(whitespace/line_length)
  if (arg_s7 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPInput, arg_s7))); // NOLINT(whitespace/line_length)
  if (arg_s8 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPInput, arg_s8))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of an SDQP Solver
///
/// \copydoc scheme_SDQPOutput
template<class M>
IOSchemeVector<M> sdqpOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M(),
    const std::string &arg_s6 ="", const M &arg_m6 =M()) {
  std::vector<M> ret(7);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  if (arg_s6 != "") arg.insert(make_pair(arg_s6, arg_m6));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_SDQPOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in SDQPOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x, p, dual, cost, dual_cost, lam_a, lam_x");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_SDQPOutput));
}
template<class M>
std::vector<M> sdqpOut(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="",
    const std::string &arg_s6="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPOutput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPOutput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPOutput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPOutput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPOutput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPOutput, arg_s5))); // NOLINT(whitespace/line_length)
  if (arg_s6 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPOutput, arg_s6))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Structure specification of an SDQP
///
/// \copydoc scheme_SDQPStruct
template<class M>
IOSchemeVector<M> sdqpStruct(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M()) {
  std::vector<M> ret(4);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_SDQPStruct, it->first);
    if (n==-1)
      casadi_error("Keyword error in SDQPStruct: '" << it->first
        << "' is not recognized. Available keywords are: "
        "h, f, g, a");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_SDQPStruct));
}
template<class M>
std::vector<M> sdqpStruct(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPStruct, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPStruct, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPStruct, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SDQPStruct, arg_s3))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of a SOCP problem
///
/// \copydoc scheme_SOCPInput
template<class M>
IOSchemeVector<M> socpIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M(),
    const std::string &arg_s6 ="", const M &arg_m6 =M(),
    const std::string &arg_s7 ="", const M &arg_m7 =M(),
    const std::string &arg_s8 ="", const M &arg_m8 =M(),
    const std::string &arg_s9 ="", const M &arg_m9 =M()) {
  std::vector<M> ret(10);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  if (arg_s6 != "") arg.insert(make_pair(arg_s6, arg_m6));
  if (arg_s7 != "") arg.insert(make_pair(arg_s7, arg_m7));
  if (arg_s8 != "") arg.insert(make_pair(arg_s8, arg_m8));
  if (arg_s9 != "") arg.insert(make_pair(arg_s9, arg_m9));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_SOCPInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in SOCPInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "g, h, e, f, c, a, lba, uba, lbx, ubx");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_SOCPInput));
}
template<class M>
std::vector<M> socpIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="",
    const std::string &arg_s6="",
    const std::string &arg_s7="",
    const std::string &arg_s8="",
    const std::string &arg_s9="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPInput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPInput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPInput, arg_s5))); // NOLINT(whitespace/line_length)
  if (arg_s6 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPInput, arg_s6))); // NOLINT(whitespace/line_length)
  if (arg_s7 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPInput, arg_s7))); // NOLINT(whitespace/line_length)
  if (arg_s8 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPInput, arg_s8))); // NOLINT(whitespace/line_length)
  if (arg_s9 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPInput, arg_s9))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Output arguments of an SOCP Solver
///
/// \copydoc scheme_SOCPOutput
template<class M>
IOSchemeVector<M> socpOut(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M()) {
  std::vector<M> ret(4);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_SOCPOutput, it->first);
    if (n==-1)
      casadi_error("Keyword error in SOCPOutput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "x, cost, lam_a, lam_x");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_SOCPOutput));
}
template<class M>
std::vector<M> socpOut(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPOutput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPOutput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPOutput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPOutput, arg_s3))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Structure specification of an SOCP
///
/// \copydoc scheme_SOCPStruct
template<class M>
IOSchemeVector<M> socpStruct(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M()) {
  std::vector<M> ret(2);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_SOCPStruct, it->first);
    if (n==-1)
      casadi_error("Keyword error in SOCPStruct: '" << it->first
        << "' is not recognized. Available keywords are: "
        "g, a");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_SOCPStruct));
}
template<class M>
std::vector<M> socpStruct(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPStruct, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_SOCPStruct, arg_s1))); // NOLINT(whitespace/line_length)
  return ret;

}
/// Input arguments of a QP problem
///
/// \copydoc scheme_StabilizedQpSolverInput
template<class M>
IOSchemeVector<M> stabilizedQpIn(
    const std::string &arg_s0 ="", const M &arg_m0 =M(),
    const std::string &arg_s1 ="", const M &arg_m1 =M(),
    const std::string &arg_s2 ="", const M &arg_m2 =M(),
    const std::string &arg_s3 ="", const M &arg_m3 =M(),
    const std::string &arg_s4 ="", const M &arg_m4 =M(),
    const std::string &arg_s5 ="", const M &arg_m5 =M(),
    const std::string &arg_s6 ="", const M &arg_m6 =M(),
    const std::string &arg_s7 ="", const M &arg_m7 =M(),
    const std::string &arg_s8 ="", const M &arg_m8 =M(),
    const std::string &arg_s9 ="", const M &arg_m9 =M(),
    const std::string &arg_s10 ="", const M &arg_m10 =M(),
    const std::string &arg_s11 ="", const M &arg_m11 =M()) {
  std::vector<M> ret(12);
  std::map<std::string, M> arg;
  if (arg_s0 != "") arg.insert(make_pair(arg_s0, arg_m0));
  if (arg_s1 != "") arg.insert(make_pair(arg_s1, arg_m1));
  if (arg_s2 != "") arg.insert(make_pair(arg_s2, arg_m2));
  if (arg_s3 != "") arg.insert(make_pair(arg_s3, arg_m3));
  if (arg_s4 != "") arg.insert(make_pair(arg_s4, arg_m4));
  if (arg_s5 != "") arg.insert(make_pair(arg_s5, arg_m5));
  if (arg_s6 != "") arg.insert(make_pair(arg_s6, arg_m6));
  if (arg_s7 != "") arg.insert(make_pair(arg_s7, arg_m7));
  if (arg_s8 != "") arg.insert(make_pair(arg_s8, arg_m8));
  if (arg_s9 != "") arg.insert(make_pair(arg_s9, arg_m9));
  if (arg_s10 != "") arg.insert(make_pair(arg_s10, arg_m10));
  if (arg_s11 != "") arg.insert(make_pair(arg_s11, arg_m11));
  typedef typename std::map<std::string, M>::const_iterator it_type;
  for (it_type it = arg.begin(); it != arg.end(); it++) {
    int n = getSchemeEntryEnum(SCHEME_StabilizedQpSolverInput, it->first);
    if (n==-1)
      casadi_error("Keyword error in StabilizedQpSolverInput: '" << it->first
        << "' is not recognized. Available keywords are: "
        "h, g, a, lba, uba, lbx, ubx, x0, lam_x0, muR, muE, mu");  // NOLINT(whitespace/line_length)
    ret[n] = it->second;
  }
  return IOSchemeVector<M>(ret, IOScheme(SCHEME_StabilizedQpSolverInput));
}
template<class M>
std::vector<M> stabilizedQpIn(const std::vector<M>& args,
    const std::string &arg_s0="",
    const std::string &arg_s1="",
    const std::string &arg_s2="",
    const std::string &arg_s3="",
    const std::string &arg_s4="",
    const std::string &arg_s5="",
    const std::string &arg_s6="",
    const std::string &arg_s7="",
    const std::string &arg_s8="",
    const std::string &arg_s9="",
    const std::string &arg_s10="",
    const std::string &arg_s11="") {
  std::vector<M> ret;
  if (arg_s0 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_StabilizedQpSolverInput, arg_s0))); // NOLINT(whitespace/line_length)
  if (arg_s1 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_StabilizedQpSolverInput, arg_s1))); // NOLINT(whitespace/line_length)
  if (arg_s2 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_StabilizedQpSolverInput, arg_s2))); // NOLINT(whitespace/line_length)
  if (arg_s3 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_StabilizedQpSolverInput, arg_s3))); // NOLINT(whitespace/line_length)
  if (arg_s4 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_StabilizedQpSolverInput, arg_s4))); // NOLINT(whitespace/line_length)
  if (arg_s5 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_StabilizedQpSolverInput, arg_s5))); // NOLINT(whitespace/line_length)
  if (arg_s6 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_StabilizedQpSolverInput, arg_s6))); // NOLINT(whitespace/line_length)
  if (arg_s7 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_StabilizedQpSolverInput, arg_s7))); // NOLINT(whitespace/line_length)
  if (arg_s8 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_StabilizedQpSolverInput, arg_s8))); // NOLINT(whitespace/line_length)
  if (arg_s9 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_StabilizedQpSolverInput, arg_s9))); // NOLINT(whitespace/line_length)
  if (arg_s10 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_StabilizedQpSolverInput, arg_s10))); // NOLINT(whitespace/line_length)
  if (arg_s11 != "") ret.push_back(args.at(getSchemeEntryEnum(SCHEME_StabilizedQpSolverInput, arg_s11))); // NOLINT(whitespace/line_length)
  return ret;

}
} // namespace casadi
#endif //SCHEMES_HELPERS_HPP

