/*
 *    This file is part of CasADi.
 *
 *    CasADi -- A symbolic framework for dynamic optimization.
 *    Copyright (C) 2010-2014 Joel Andersson, Joris Gillis, Moritz Diehl,
 *                            K.U. Leuven. All rights reserved.
 *    Copyright (C) 2011-2014 Greg Horn
 *
 *    CasADi is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *
 *    CasADi is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with CasADi; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */


#ifndef CASADI_QP_SOLVER_HPP
#define CASADI_QP_SOLVER_HPP

#include "function.hpp"

//#include "../autogenerated.hpp"


/** \defgroup QpSolver_doc

  Solves the following strictly convex problem:

  \verbatim
  min          1/2 x' H x + g' x
   x

  subject to
              LBA <= A x <= UBA
              LBX <= x   <= UBX

      with :
        H sparse (n x n) positive definite
        g dense  (n x 1)

      n: number of decision variables (x)
      nc: number of constraints (A)

  \endverbatim

  If H is not positive-definite, the solver should throw an error.

*/
namespace casadi {

  // Forward declaration of internal class
  class QpSolverInternal;

  /** \brief QpSolver


      @copydoc QpSolver_doc

      \generalsection{QpSolver}
      \pluginssection{QpSolver}

      \author Joel Andersson
      \date 2010
  */
  class CASADI_EXPORT QpSolver : public Function {
  public:

    /// Default constructor
    QpSolver();

    /** \brief Constructor (new syntax, includes initialization)
     *  \param name \pluginargument{QpSolver}
     *  \param st \structargument{QP}
     */
    QpSolver(const std::string& name, const std::string& solver,
             const std::map<std::string, Sparsity>& st, const Dict& opts=Dict());

    /// Access functions of the node
    QpSolverInternal* operator->();
    const QpSolverInternal* operator->() const;

    /// Check if a particular cast is allowed
    static bool test_cast(const SharedObjectNode* ptr);

#ifndef SWIG
    /// Check if a plugin is available
    static bool hasPlugin(const std::string& name);

    /// Explicitly load a plugin dynamically
    static void loadPlugin(const std::string& name);

    /// Get solver specific documentation
    static std::string doc(const std::string& name);
#endif // SWIG
  };

} // namespace casadi

#endif // CASADI_QP_SOLVER_HPP
