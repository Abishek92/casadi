/*
 *    This file is part of CasADi.
 *
 *    CasADi -- A symbolic framework for dynamic optimization.
 *    Copyright (C) 2010-2014 Joel Andersson, Joris Gillis, Moritz Diehl,
 *                            K.U. Leuven. All rights reserved.
 *    Copyright (C) 2011-2014 Greg Horn
 *
 *    CasADi is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *
 *    CasADi is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with CasADi; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */


#include "nlpsol.hpp"
#include "casadi/core/timing.hpp"

using namespace std;
namespace casadi {

  Nlpsol::Nlpsol(const std::string& name, const XProblem& nlp)
    : FunctionInternal(name), nlp2_(nlp) {

    // Options available in all NLP solvers
    addOption("expand",             OT_BOOLEAN,  false,
              "Expand the NLP function in terms of scalar operations, i.e. MX->SX");
    addOption("hess_lag",            OT_FUNCTION,       GenericType(),
              "Function for calculating the Hessian of the Lagrangian (autogenerated by default)");
    addOption("hess_lag_options",   OT_DICT,           GenericType(),
              "Options for the autogenerated Hessian of the Lagrangian.");
    addOption("grad_lag",           OT_FUNCTION,       GenericType(),
              "Function for calculating the gradient of the Lagrangian (autogenerated by default)");
    addOption("grad_lag_options",   OT_DICT,           GenericType(),
              "Options for the autogenerated gradient of the Lagrangian.");
    addOption("jac_g",              OT_FUNCTION,       GenericType(),
              "Function for calculating the Jacobian of the constraints "
              "(autogenerated by default)");
    addOption("jac_g_options",      OT_DICT,           GenericType(),
              "Options for the autogenerated Jacobian of the constraints.");
    addOption("grad_f",             OT_FUNCTION,       GenericType(),
              "Function for calculating the gradient of the objective "
              "(column, autogenerated by default)");
    addOption("grad_f_options",     OT_DICT,           GenericType(),
              "Options for the autogenerated gradient of the objective.");
    addOption("jac_f",              OT_FUNCTION,       GenericType(),
              "Function for calculating the Jacobian of the objective "
              "(sparse row, autogenerated by default)");
    addOption("jac_f_options",     OT_DICT,           GenericType(),
              "Options for the autogenerated Jacobian of the objective.");
    addOption("iteration_callback", OT_FUNCTION, GenericType(),
              "A function that will be called at each iteration with the solver as input. "
              "Check documentation of Callback.");
    addOption("iteration_callback_step", OT_INTEGER,         1,
              "Only call the callback function every few iterations.");
    addOption("iteration_callback_ignore_errors", OT_BOOLEAN, false,
              "If set to true, errors thrown by iteration_callback will be ignored.");
    addOption("ignore_check_vec",   OT_BOOLEAN,  false,
              "If set to true, the input shape of F will not be checked.");
    addOption("warn_initial_bounds", OT_BOOLEAN,  false,
              "Warn if the initial guess does not satisfy LBX and UBX");
    addOption("eval_errors_fatal", OT_BOOLEAN, false,
              "When errors occur during evaluation of f,g,...,"
              "stop the iterations");
    addOption("verbose_init", OT_BOOLEAN, false,
              "Print out timing information about "
              "the different stages of initialization");

    addOption("defaults_recipes",    OT_STRINGVECTOR, GenericType(), "",
                                                       "qp", true);

    // Enable string notation for IO
    ischeme_ = Function::nlpsol_in();
    oscheme_ = Function::nlpsol_out();

    // Make the ref object a non-refence counted pointer to this (as reference counting would
    // prevent deletion of the object)
    ref_.assignNodeNoCount(this);

    if (nlp.is_sx) {
      nlp_ = Nlpsol::problem2fun<SX>(nlp);
    } else {
      nlp_ = Nlpsol::problem2fun<MX>(nlp);
    }
  }

  Nlpsol::~Nlpsol() {
    // Explicitly remove the pointer to this (as the counter would otherwise be decreased)
    ref_.assignNodeNoCount(0);
  }

  Sparsity Nlpsol::get_sparsity_in(int ind) const {
    switch (static_cast<NlpsolInput>(ind)) {
    case NLPSOL_X0:
    case NLPSOL_LBX:
    case NLPSOL_UBX:
    case NLPSOL_LAM_X0:
      return get_sparsity_out(NLPSOL_X);
    case NLPSOL_LBG:
    case NLPSOL_UBG:
    case NLPSOL_LAM_G0:
      return get_sparsity_out(NLPSOL_G);
    case NLPSOL_P:
      return get_sparsity_out(NLPSOL_P);
    case NLPSOL_NUM_IN: break;
    }
    return Sparsity();
  }

  Sparsity Nlpsol::get_sparsity_out(int ind) const {
    switch (static_cast<NlpsolOutput>(ind)) {
    case NLPSOL_F:
      return Sparsity::scalar();
    case NLPSOL_X:
    case NLPSOL_LAM_X:
      return nlp_.sparsity_in(NL_X);
    case NLPSOL_LAM_G:
    case NLPSOL_G:
      return nlp_.sparsity_out(NL_G);
    case NLPSOL_LAM_P:
      return nlp_.sparsity_in(NL_P);
    case NLPSOL_NUM_OUT: break;
    }
    return Sparsity();
  }

  void Nlpsol::init() {
    casadi_assert_message(nlp_.n_in()==NL_NUM_IN,
                          "The NLP function must have exactly two input");
    casadi_assert_message(nlp_.n_out()==NL_NUM_OUT,
                          "The NLP function must have exactly two outputs");

    // Sparsity patterns
    const Sparsity& x_sparsity = nlp_.sparsity_in(NL_X);
    const Sparsity& p_sparsity = nlp_.sparsity_in(NL_P);
    const Sparsity& g_sparsity = nlp_.sparsity_out(NL_G);

    // Get dimensions
    nx_ = x_sparsity.nnz();
    np_ = p_sparsity.nnz();
    ng_ = g_sparsity.nnz();

    // Allocate space for inputs
    ibuf_.resize(NLPSOL_NUM_IN);
    input(NLPSOL_X0)       =  DMatrix::zeros(x_sparsity);
    input(NLPSOL_LBX)      = -DMatrix::inf(x_sparsity);
    input(NLPSOL_UBX)      =  DMatrix::inf(x_sparsity);
    input(NLPSOL_LBG)      = -DMatrix::inf(g_sparsity);
    input(NLPSOL_UBG)      =  DMatrix::inf(g_sparsity);
    input(NLPSOL_LAM_X0)   =  DMatrix::zeros(x_sparsity);
    input(NLPSOL_LAM_G0)   =  DMatrix::zeros(g_sparsity);
    input(NLPSOL_P)        =  DMatrix::zeros(p_sparsity);

    // Allocate space for outputs
    obuf_.resize(NLPSOL_NUM_OUT);
    output(NLPSOL_X)       = DMatrix::zeros(x_sparsity);
    output(NLPSOL_F)       = DMatrix::zeros(1);
    output(NLPSOL_LAM_X)   = DMatrix::zeros(x_sparsity);
    output(NLPSOL_LAM_G)   = DMatrix::zeros(g_sparsity);
    output(NLPSOL_LAM_P)   = DMatrix::zeros(p_sparsity);
    output(NLPSOL_G)       = DMatrix::zeros(g_sparsity);

    // Call the initialization method of the base class
    const bool verbose_init = option("verbose_init");
    if (verbose_init)
      userOut() << "Initializing base class...";
    const timer time0 = getTimerTime();
    FunctionInternal::init();
    const diffTime diff = diffTimers(getTimerTime(), time0);
    stats_["base class init time"] = diffToDict(diff);
    if (verbose_init)
      userOut() << "Initialized base class in " << diff.user << " seconds.";

    // Find out if we are to expand the NLP in terms of scalar operations
    bool expand = option("expand");
    if (expand) {
      log("Expanding NLP in scalar operations");
      Function f = nlp_.expand(nlp_.name());
      f.copyOptions(nlp_, true);
      f.init();
      nlp_ = f;
    }

    if (hasSetOption("iteration_callback")) {
      fcallback_ = option("iteration_callback");

      // Consistency checks
      casadi_assert(!fcallback_.isNull());
      casadi_assert(fcallback_.n_in()==NLPSOL_NUM_OUT);
      casadi_assert(fcallback_.n_out()==1);
      casadi_assert(fcallback_.input(NLPSOL_X).size()==x_sparsity.size());
      casadi_assert(fcallback_.input(NLPSOL_F).is_scalar());
      casadi_assert(fcallback_.input(NLPSOL_LAM_X).size()==x_sparsity.size());
      casadi_assert(fcallback_.input(NLPSOL_LAM_G).size()==g_sparsity.size());
      casadi_assert(fcallback_.input(NLPSOL_LAM_P).size()==p_sparsity.size());
      casadi_assert(fcallback_.input(NLPSOL_G).size()==g_sparsity.size());
    }

    callback_step_ = option("iteration_callback_step");
    eval_errors_fatal_ = option("eval_errors_fatal");

  }

  void Nlpsol::checkInitialBounds() {
    const std::vector<double>& x0 = input(NLPSOL_X0).data();
    const std::vector<double>& lbx = input(NLPSOL_LBX).data();
    const std::vector<double>& ubx = input(NLPSOL_UBX).data();
    const std::vector<double>& lbg = input(NLPSOL_LBG).data();
    const std::vector<double>& ubg = input(NLPSOL_UBG).data();
    const double inf = std::numeric_limits<double>::infinity();

    // Detect ill-posed problems (simple bounds)
    bool violated = false;
    for (int i=0; !violated && i<nx_; ++i)
      violated = lbx[i]==inf || lbx[i]>ubx[i] || ubx[i]==-inf;
    casadi_assert_message(!violated, "Ill-posed problem detected (x bounds)");

    // Detect ill-posed problems (nonlinear bounds)
    for (int i=0; !violated && i<ng_; ++i)
      violated = lbg[i]==inf || lbg[i]>ubg[i] || ubg[i]==-inf;
    casadi_assert_message(!violated, "Ill-posed problem detected (g bounds)");

    // Warn if initial condition violates bounds
    if (static_cast<bool>(option("warn_initial_bounds"))) {
      for (int k=0; !violated && k<nx_; ++k) violated = x0[k]>ubx[k] || x0[k]<lbx[k];
      if (violated) casadi_warning("Nlpsol: The initial guess does not satisfy LBX and UBX. "
                                   "Option 'warn_initial_bounds' controls this warning.");
    }
  }


  void Nlpsol::reportConstraints(std::ostream &stream) {

    stream << "Reporting NLP constraints" << endl;
    FunctionInternal::reportConstraints(stream, output(NLPSOL_X), input(NLPSOL_LBX),
                                        input(NLPSOL_UBX), "decision bounds");
    double tol = 1e-8;
    if (hasOption("constr_viol_tol")) tol = option("constr_viol_tol");
    FunctionInternal::reportConstraints(stream, output(NLPSOL_G), input(NLPSOL_LBG),
                                        input(NLPSOL_UBG), "constraints", tol);
  }

  Function& Nlpsol::gradF() {
    if (gradF_.isNull()) {
      gradF_ = getGradF();
    }
    return gradF_;
  }

  Function& Nlpsol::jacF() {
    if (jacF_.isNull()) {
      jacF_ = getJacF();
    }
    return jacF_;
  }

  Function Nlpsol::getJacF() {
    Function jacF;
    if (hasSetOption("jac_f")) {
      jacF = option("jac_f");
    } else {
      log("Generating objective jacobian");
      const bool verbose_init = option("verbose_init");
      if (verbose_init)
        userOut() << "Generating objective Jacobian...";
      const timer time0 = getTimerTime();
      jacF = nlp_.jacobian(NL_X, NL_F);
      const diffTime diff = diffTimers(getTimerTime(), time0);
      stats_["objective jacobian gen time"] = diffToDict(diff);
      if (verbose_init)
        userOut() << "Generated objective Jacobian in " << diff.user << " seconds.";
      log("Jacobian function generated");
    }
    if (hasSetOption("jac_f_options")) {
      jacF.setOption(option("jac_f_options"));
    }
    jacF.init();
    casadi_assert_message(jacF.n_in()==GRADF_NUM_IN,
                          "Wrong number of inputs to the gradient function. "
                          "Note: The gradient signature was changed in #544");
    casadi_assert_message(jacF.n_out()==GRADF_NUM_OUT,
                          "Wrong number of outputs to the gradient function. "
                          "Note: The gradient signature was changed in #544");
    log("Objective gradient function initialized");
    return jacF;
  }

  Function Nlpsol::getGradF() {
    Function gradF;
    if (hasSetOption("grad_f")) {
      gradF = option("grad_f");
    } else {
      log("Generating objective gradient");
      const bool verbose_init = option("verbose_init");
      if (verbose_init)
        userOut() << "Generating objective gradient...";
      const timer time0 = getTimerTime();
      gradF = nlp_.gradient(NL_X, NL_F);
      const diffTime diff = diffTimers(getTimerTime(), time0);
      stats_["objective gradient gen time"] = diffToDict(diff);
      if (verbose_init)
        userOut() << "Generated objective gradient in " << diff.user << " seconds.";
      log("Gradient function generated");
    }
    if (hasSetOption("grad_f_options")) {
      gradF.setOption(option("grad_f_options"));
    }
    gradF.init();
    casadi_assert_message(gradF.n_in()==GRADF_NUM_IN,
                          "Wrong number of inputs to the gradient function. "
                          "Note: The gradient signature was changed in #544");
    casadi_assert_message(gradF.n_out()==GRADF_NUM_OUT,
                          "Wrong number of outputs to the gradient function. "
                          "Note: The gradient signature was changed in #544");
    log("Objective gradient function initialized");
    return gradF;
  }

  Function& Nlpsol::jacG() {
    if (jacG_.isNull()) {
      jacG_ = getJacG();
    }
    return jacG_;
  }

  Function Nlpsol::getJacG() {
    Function jacG;

    // Return null if no constraints
    if (ng_==0) return jacG;

    if (hasSetOption("jac_g")) {
      jacG = option("jac_g");
    } else {
      log("Generating constraint Jacobian");
      const bool verbose_init = option("verbose_init");
      if (verbose_init)
        userOut() << "Generating constraint Jacobian...";
      const timer time0 = getTimerTime();
      jacG = nlp_.jacobian(NL_X, NL_G);
      const diffTime diff = diffTimers(getTimerTime(), time0);
      stats_["constraint jacobian gen time"] = diffToDict(diff);
      if (verbose_init)
        userOut() << "Generated constraint Jacobian in " << diff.user << " seconds.";
      log("Jacobian function generated");
    }
    if (hasSetOption("jac_g_options")) {
      jacG.setOption(option("jac_g_options"));
    }
    jacG.init();
    casadi_assert_message(jacG.n_in()==JACG_NUM_IN,
                          "Wrong number of inputs to the Jacobian function. "
                          "Note: The Jacobian signature was changed in #544");
    casadi_assert_message(jacG.n_out()==JACG_NUM_OUT,
                          "Wrong number of outputs to the Jacobian function. "
                          "Note: The Jacobian signature was changed in #544");
    log("Jacobian function initialized");
    return jacG;
  }

  Function& Nlpsol::gradLag() {
    if (gradLag_.isNull()) {
      gradLag_ = getGradLag();
    }
    return gradLag_;
  }

  Function Nlpsol::getGradLag() {
    Function gradLag;
    if (hasSetOption("grad_lag")) {
      gradLag = option("grad_lag");
    } else {
      log("Generating/retrieving Lagrangian gradient function");
      const bool verbose_init = option("verbose_init");
      if (verbose_init)
        userOut() << "Generating/retrieving Lagrangian gradient function...";
      const timer time0 = getTimerTime();
      gradLag = nlp_.derivative(0, 1);
      const diffTime diff = diffTimers(getTimerTime(), time0);
      stats_["grad lag gen time"] = diffToDict(diff);
      if (verbose_init)
        userOut() << "Generated/retrieved Lagrangien gradient in "
                  << diff.user << " seconds.";
      log("Gradient function generated");
    }
    if (hasSetOption("grad_lag_options")) {
      gradLag.setOption(option("grad_lag_options"));
    }
    gradLag.init();
    log("Gradient function initialized");
    return gradLag;
  }

  Function& Nlpsol::hessLag() {
    if (hessLag_.isNull()) {
      hessLag_ = getHessLag();
    }
    return hessLag_;
  }

  Function Nlpsol::getHessLag() {
    Function hessLag;
    if (hasSetOption("hess_lag")) {
      hessLag = option("hess_lag");
    } else {
      Function& gradLag = this->gradLag();
      log("Generating Hessian of the Lagrangian");
      const bool verbose_init = option("verbose_init");
      if (verbose_init)
        userOut() << "Generating Hessian of the Lagrangian...";
      const timer time0 = getTimerTime();
      hessLag = gradLag.jacobian(NL_X, NL_NUM_OUT+NL_X, false, true);
      const diffTime diff = diffTimers(getTimerTime(), time0);
      stats_["hess lag gen time"] = diffToDict(diff);
      if (verbose_init)
        userOut() << "Generated Hessian of the Lagrangian in "
                  << diff.user << " seconds.";
      log("Hessian function generated");
    }
    if (hasSetOption("hess_lag_options")) {
      hessLag.setOption(option("hess_lag_options"));
    }
    hessLag.init();
    casadi_assert_message(hessLag.n_in()==HESSLAG_NUM_IN,
                          "Wrong number of inputs to the Hessian function. ");
    casadi_assert_message(hessLag.n_out()==HESSLAG_NUM_OUT,
                          "Wrong number of outputs to the Hessian function. ");
    log("Hessian function initialized");
    return hessLag;
  }

  Sparsity& Nlpsol::spHessLag() {
    if (spHessLag_.isNull()) {
      spHessLag_ = getSpHessLag();
    }
    return spHessLag_;
  }

  Sparsity Nlpsol::getSpHessLag() {
    Sparsity spHessLag;
    if (false /*hasSetOption("hess_lag_sparsity")*/) {
      // NOTE: No such option yet, need support for GenericType(Sparsity)
      //spHessLag = option("hess_lag_sparsity");
    } else {
      Function& gradLag = this->gradLag();
      log("Generating Hessian of the Lagrangian sparsity pattern");
      const bool verbose_init = option("verbose_init");
      if (verbose_init)
        userOut() << "Generating Hessian of the Lagrangian sparsity pattern...";
      const timer time0 = getTimerTime();
      spHessLag = gradLag.sparsity_jac(NL_X, NL_NUM_OUT+NL_X, false, true);
      const diffTime diff = diffTimers(getTimerTime(), time0);
      stats_["hess lag sparsity time"] = diffToDict(diff);
      if (verbose_init)
        userOut() << "Generated Hessian of the Lagrangian sparsity pattern in "
                  << diff.user << " seconds.";
      log("Hessian sparsity pattern generated");
    }
    return spHessLag;
  }

  void Nlpsol::checkInputs() const {
    for (int i=0;i<input(NLPSOL_LBX).nnz();++i) {
      casadi_assert_message(input(NLPSOL_LBX).at(i)<=input(NLPSOL_UBX).at(i),
                            "LBX[i] <= UBX[i] was violated for i=" << i
                            << ". Got LBX[i]=" << input(NLPSOL_LBX).at(i)
                            << " and UBX[i]=" << input(NLPSOL_UBX).at(i));
    }
    for (int i=0;i<input(NLPSOL_LBG).nnz();++i) {
      casadi_assert_message(input(NLPSOL_LBG).at(i)<=input(NLPSOL_UBG).at(i),
                            "LBG[i] <= UBG[i] was violated for i=" << i
                            << ". Got LBG[i]=" << input(NLPSOL_LBG).at(i)
                            << " and UBG[i]=" << input(NLPSOL_UBG).at(i));
    }
  }

  std::map<std::string, Nlpsol::Plugin> Nlpsol::solvers_;

  const std::string Nlpsol::infix_ = "nlpsol";

  DMatrix Nlpsol::getReducedHessian() {
    casadi_error("Nlpsol::getReducedHessian not defined for class "
                 << typeid(*this).name());
    return DMatrix();
  }

  void Nlpsol::setOptionsFromFile(const std::string & file) {
    casadi_error("Nlpsol::setOptionsFromFile not defined for class "
                 << typeid(*this).name());
  }

  const double& Nlpsol::default_in(int ind) const {
    switch (ind) {
    case NLPSOL_LBX:
    case NLPSOL_LBG:
      return default_minf();
    case NLPSOL_UBX:
    case NLPSOL_UBG:
      return default_inf();
    default:
      return default_zero();
    }
  }

} // namespace casadi
