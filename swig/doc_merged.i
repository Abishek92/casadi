
// File: index.xml

// File: classcasadi_1_1Adaptor.xml
%feature("docstring") casadi::Adaptor "[INTERNAL]  A helper class for a
Solver that delegates work to another solver.

Joris Gillis

C++ includes: adaptor.hpp ";

%feature("docstring") casadi::Adaptor::addOptions "[INTERNAL]  Add options
that are common to all Adaptor classes.

";


// File: classcasadi_1_1Assertion.xml


// File: classcasadi_1_1BinaryMX.xml


// File: classcasadi_1_1BinarySX.xml


// File: classcasadi_1_1Callback.xml
%feature("docstring") casadi::Callback::isInit "

Is initialized?

";

%feature("docstring") casadi::Callback::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::Callback::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Callback::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Callback "

Callback.

In C++, supply a CallbackCPtr function pointer When the callback function
returns a non-zero integer, the host is signalled of a problem. E.g. an
NlpSolver may halt iterations if the Callback is something else than 0

In python, supply a callable, annotated with pycallback decorator

C++ includes: functor.hpp ";

%feature("docstring") casadi::Callback::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Callback::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Callback::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Callback::Callback "

>  casadi::Callback::Callback()
------------------------------------------------------------------------

Default constructor.

>  casadi::Callback::Callback(CallbackCPtr ptr)
------------------------------------------------------------------------

Construct from C pointer.

";

%feature("docstring") casadi::Callback::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Callback::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::Callback::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::Callback::print "

Print a description of the object.

";

%feature("docstring") casadi::Callback::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Callback::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::Callback::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Callback::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Callback::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Callback::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";


// File: classcasadi_1_1CallFunction.xml


// File: classcasadi_1_1casadi__limits.xml
%feature("docstring") casadi::casadi_limits "

casadi_limits class

The following class, which acts as a complements to the standard
numeric_limits class, allows specifying certain properties of scalar
objects. The template can be specialized for e.g. symbolic scalars Joel
Andersson

C++ includes: casadi_limits.hpp ";


// File: classcasadi_1_1casadi__limits_3_01SXElement_01_4.xml
%feature("docstring") casadi::casadi_limits< SXElement > " [INTERNAL] C++
includes: sx_element.hpp ";


// File: classcasadi_1_1CasadiException.xml
%feature("docstring") casadi::CasadiException::what "throw () Display
error.

";

%feature("docstring") casadi::CasadiException::CasadiException "

>  casadi::CasadiException::CasadiException()
------------------------------------------------------------------------

Default constructor.

>  casadi::CasadiException::CasadiException(const std::string &msg)
------------------------------------------------------------------------

Form message string.

";

%feature("docstring") casadi::CasadiException "

Casadi exception class.

Joel Andersson

C++ includes: casadi_exception.hpp ";

%feature("docstring") casadi::CasadiException::~CasadiException "throw ()
Destructor.

";


// File: classcasadi_1_1CasadiMeta.xml
%feature("docstring") casadi::CasadiMeta "

Collects global CasADi meta information.

Joris Gillis

C++ includes: casadi_meta.hpp ";


// File: classcasadi_1_1CasadiOptions.xml
%feature("docstring") casadi::CasadiOptions "

Collects global CasADi options.

Note to developers: use sparingly. Global options are - in general - a
rather bad idea

this class must never be instantiated. Access its static members directly
Joris Gillis

C++ includes: casadi_options.hpp ";


// File: classcasadi_1_1CLEInputIOSchemeVector.xml
%feature("docstring") casadi::CLEInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::CLEInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::CLEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::CLEInputIOSchemeVector "[INTERNAL]  Helper
function for 'CLEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::CLEInputIOSchemeVector::CLEInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") casadi::CLEInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::CLEInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::CLEInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::CLEInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1CLEOutputIOSchemeVector.xml
%feature("docstring") casadi::CLEOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::CLEOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::CLEOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::CLEOutputIOSchemeVector "[INTERNAL]  Helper
function for 'CLEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::CLEOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
casadi::CLEOutputIOSchemeVector::CLEOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::CLEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::CLEOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::CLEOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1CleSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::CleSolver::checkInputs " [INTERNAL]  Check if the numerical values
of the supplied bounds make sense.

";

%feature("docstring") casadi::CleSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::CleSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::CleSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::CleSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::CleSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::CleSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::CleSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::CleSolver::getOption "

get an option value

";

%feature("docstring") casadi::CleSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::CleSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CleSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::CleSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::CleSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::CleSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::CleSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::CleSolver::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::CleSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::CleSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::CleSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::CleSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::CleSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CleSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::CleSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::CleSolver::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::CleSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::CleSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::CleSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::CleSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CleSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::CleSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::CleSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::CleSolver::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::CleSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::CleSolver::printStats "

Print solver statistics.

";

%feature("docstring") casadi::CleSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CleSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::CleSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::CleSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CleSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CleSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::CleSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::CleSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::CleSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CleSolver::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::CleSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::CleSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::CleSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::CleSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::CleSolver::CleSolver "

>  casadi::CleSolver::CleSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::CleSolver::CleSolver(const std::string &name, const CleStructure &st)
------------------------------------------------------------------------

CleSolver solver factory.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- simple

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
CleSolver.doc(\"myextraplugin\")

st:

Problem structure.>Struct scheme: casadi::CleStruct ( = 3) [cleStruct]

+--------------+-------+------------------------------------+
|  Full name   | Short |            Description             |
+==============+=======+====================================+
| Cle_STRUCT_A | a     | The matrix A .                     |
+--------------+-------+------------------------------------+
| Cle_STRUCT_V | v     | The matrix V .                     |
+--------------+-------+------------------------------------+
| Cle_STRUCT_C | c     | The matrix C (defaults to unity) . |
+--------------+-------+------------------------------------+

";

%feature("docstring") casadi::CleSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CleSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::CleSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::CleSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CleSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::CleSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::CleSolver::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::CleSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::CleSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CleSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::CleSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CleSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::CleSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::CleSolver::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::CleSolver::matchingFwdSeed "[INTERNAL]  Check
if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::CleSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CleSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::CleSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::CleSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::CleSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::CleSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CleSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::CleSolver::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::CleSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CleSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CleSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::CleSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::CleSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CleSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::CleSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::CleSolver::clone "

Clone.

";

%feature("docstring") casadi::CleSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CleSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::CleSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::CleSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::CleSolver "

Base class for Discrete Lyapunov Equation Solvers.

Given matrices $A$ and symmetric $V$



::

  A in R^(n x n)
  V in S^n
  



finds $P$ that satisfies:



::

  0 = A P  + P A' + V
  



General information
===================



>Input scheme: casadi::CLEInput (CLE_NUM_IN = 2) [cleIn]

+-----------+-------+-------------+
| Full name | Short | Description |
+===========+=======+=============+
| CLE_A     | a     | A matrix .  |
+-----------+-------+-------------+
| CLE_V     | v     | V matrix .  |
+-----------+-------+-------------+

>Output scheme: casadi::CLEOutput (CLE_NUM_OUT = 1) [cleOut]

+-----------+-------+-------------------+
| Full name | Short |    Description    |
+===========+=======+===================+
| CLE_P     | p     | Lyapunov matrix . |
+-----------+-------+-------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | casadi::CleI |
|              |              |              | unstability  | nternal      |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| error_unstab | OT_BOOLEAN   | false        | Throw an     | casadi::CleI |
| le           |              |              | exception    | nternal      |
|              |              |              | when it is   |              |
|              |              |              | detected     |              |
|              |              |              | that         |              |
|              |              |              | Product(A_i, |              |
|              |              |              | i=N..1) has  |              |
|              |              |              | eigenvalues  |              |
|              |              |              | greater than |              |
|              |              |              | 1-eps_unstab |              |
|              |              |              | le           |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pos_def      | OT_BOOLEAN   | false        | Assume P     | casadi::CleI |
|              |              |              | positive     | nternal      |
|              |              |              | definite     |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- simple

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
CleSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

simple
------



Solving the Discrete Lyapunov Equations with a regular LinearSolver

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| linear_solver   | OT_STRING       | GenericType()   | User-defined    |
|                 |                 |                 | linear solver   |
|                 |                 |                 | class. Needed   |
|                 |                 |                 | for             |
|                 |                 |                 | sensitivities.  |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver_o | OT_DICTIONARY   | GenericType()   | Options to be   |
| ptions          |                 |                 | passed to the   |
|                 |                 |                 | linear solver.  |
+-----------------+-----------------+-----------------+-----------------+

--------------------------------------------------------------------------------



Joris Gillis
Diagrams
--------



C++ includes: cle_solver.hpp ";

%feature("docstring") casadi::CleSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::CleSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::CleSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::CleSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CleSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::CleSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::CleSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CleSolver::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::CleSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CleSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::CleSolver::matchingAdjSeed "[INTERNAL]  Check
if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::CleSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::CleSolver::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::CleSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::CleSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::CleSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::CleSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CleSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::CleSolver::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::CleSolver::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::CleSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::CleSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::CleSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::CleSolver::call "

Evaluate the function symbolically or numerically.

";


// File: singletoncasadi_1_1CleStructIOSchemeVector.xml
%feature("docstring") casadi::CleStructIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::CleStructIOSchemeVector "[INTERNAL]  Helper
function for 'CleStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::CleStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::CleStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::CleStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::CleStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::CleStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::CleStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
casadi::CleStructIOSchemeVector::CleStructIOSchemeVector "[INTERNAL] ";


// File: classcasadi_1_1CodeGenerator.xml
%feature("docstring") casadi::CodeGenerator::flush "[INTERNAL]  Flush
generated file to a stream.

";

%feature("docstring") casadi::CodeGenerator::addInclude "[INTERNAL]  Add an
include file optionally using a relative path \"...\" instead of an absolute
path <...>

";

%feature("docstring") casadi::CodeGenerator "[INTERNAL] C++ includes:
code_generator.hpp ";

%feature("docstring") casadi::CodeGenerator::addDependency "[INTERNAL]  Add
a dependent function.

";

%feature("docstring") casadi::CodeGenerator::addAuxiliary "[INTERNAL]  Add
a built-in auxiliary function.

";

%feature("docstring") casadi::CodeGenerator::getConstant "

>  int casadi::CodeGenerator::getConstant(const std::vector< double > &v, bool allow_adding=false)
------------------------------------------------------------------------
[INTERNAL] 
Get or add a constant.

>  int casadi::CodeGenerator::getConstant(const std::vector< int > &v, bool allow_adding=false)
------------------------------------------------------------------------
[INTERNAL] 
Get or add an integer constant.

";

%feature("docstring") casadi::CodeGenerator::getDependency "[INTERNAL]  Get
the index of an existing dependency.

";

%feature("docstring") casadi::CodeGenerator::addSparsity "[INTERNAL]  Add
an include file optionally using a relative path \"...\" instead of an
absolute path <...>

";

%feature("docstring") casadi::CodeGenerator::copyVector "[INTERNAL]  Copy a
vector to another.

";

%feature("docstring") casadi::CodeGenerator::getSparsity "[INTERNAL]  Get
the index of an existing sparsity pattern.

";

%feature("docstring") casadi::CodeGenerator::casadi_dot "[INTERNAL]
Codegen casadi_dot.

";


// File: classcasadi_1_1CollocationIntegrator.xml


// File: classcasadi_1_1Concat.xml


// File: classcasadi_1_1Constant.xml


// File: classcasadi_1_1ConstantDMatrix.xml


// File: classcasadi_1_1ConstantMX.xml


// File: classcasadi_1_1ConstantSX.xml


// File: classcasadi_1_1ControlledDAEInputIOSchemeVector.xml
%feature("docstring") casadi::ControlledDAEInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring")
casadi::ControlledDAEInputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector::__getitem__
"[INTERNAL] ";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
casadi::ControlledDAEInputIOSchemeVector::ControlledDAEInputIOSchemeVector "[INTERNAL] ";

%feature("docstring")
casadi::ControlledDAEInputIOSchemeVector::getDescription "[INTERNAL]
Return a string with a description (for SWIG)

";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector "[INTERNAL]
Helper function for 'ControlledDAEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector::__len__ "[INTERNAL] ";


// File: classcasadi_1_1ControlSimulator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::ControlSimulator::hasOption "

check if there is an option str

";

%feature("docstring") casadi::ControlSimulator::checkArg "[INTERNAL]  Check
if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::ControlSimulator::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::ControlSimulator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::ControlSimulator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::ControlSimulator::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::ControlSimulator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::ControlSimulator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::ControlSimulator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::ControlSimulator::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::ControlSimulator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::ControlSimulator::matchingRes "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::ControlSimulator::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::ControlSimulator::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::ControlSimulator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::ControlSimulator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::ControlSimulator::matchingArg "[INTERNAL]
Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::ControlSimulator::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::ControlSimulator::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::ControlSimulator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::ControlSimulator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::ControlSimulator::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::ControlSimulator::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::ControlSimulator::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::ControlSimulator::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::ControlSimulator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::ControlSimulator::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::ControlSimulator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::ControlSimulator::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::ControlSimulator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::ControlSimulator::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::ControlSimulator::getOption "

get an option value

";

%feature("docstring") casadi::ControlSimulator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::ControlSimulator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::ControlSimulator::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::ControlSimulator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ControlSimulator::checkFwdSeed "[INTERNAL]
Check forward mode seeds dimensions.

";

%feature("docstring") casadi::ControlSimulator::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::ControlSimulator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::ControlSimulator::print "

Print a description of the object.

";

%feature("docstring") casadi::ControlSimulator::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::ControlSimulator::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::ControlSimulator::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::ControlSimulator "

Piecewise Simulation class.

A ControlSimulator can be seen as a chain of Simulators whereby some
parameters change from one Simulator to the next.

These changing parameters can typically be interpreted as \"controls\" in
the context of dynamic optimization.

We discriminate between the following time steps: Major time-steps. These
are the time steps provided by the supplied grid. Controls are constant
inbetween major time-steps  Minor time-steps. These are time steps linearly
interpolated from one major time-step to the next. The option 'nf' regulates
how many minor time-steps are taken.  Integration time-steps. Time steps
that the supplied integrator might choose to integrate the continuous
dynamics. They are not important what ControlSimulator is concerned.  np
Number of parameters nu Number of controls ns The number of major grid
points, as supplied in the constructor nf The number of minor grid points
per major interval

Joris Gillis

>Input scheme: casadi::ControlSimulatorInput (CONTROLSIMULATOR_NUM_IN = 3) [controlsimulatorIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROLSIMULATOR_X0    | x0                     | Differential or        |
|                        |                        | algebraic state at t0  |
|                        |                        | (dimension nx-by-1) .  |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_P     | p                      | Parameters that are    |
|                        |                        | fixed over the entire  |
|                        |                        | horizon (dimension np- |
|                        |                        | by-1) .                |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_U     | u                      | Parameters that change |
|                        |                        | over the integration   |
|                        |                        | intervals (dimension   |
|                        |                        | nu-by-(ns-1)) .        |
+------------------------+------------------------+------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| control_endp | OT_BOOLEAN   | false        | Include a    | casadi::Cont |
| oint         |              |              | control      | rolSimulator |
|              |              |              | value at the | Internal     |
|              |              |              | end of the   |              |
|              |              |              | simulation   |              |
|              |              |              | domain. Used |              |
|              |              |              | for interpol |              |
|              |              |              | ation.       |              |
+--------------+--------------+--------------+--------------+--------------+
| control_inte | OT_STRING    | \"none\"       | none|nearest | casadi::Cont |
| rpolation    |              |              | |linear      | rolSimulator |
|              |              |              |              | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| integrator   | OT_STRING    | GenericType( | An           | casadi::Cont |
|              |              | )            | integrator   | rolSimulator |
|              |              |              | creator      | Internal     |
|              |              |              | function     |              |
+--------------+--------------+--------------+--------------+--------------+
| integrator_o | OT_DICTIONAR | GenericType( | Options to   | casadi::Cont |
| ptions       | Y            | )            | be passed to | rolSimulator |
|              |              |              | the          | Internal     |
|              |              |              | integrator   |              |
+--------------+--------------+--------------+--------------+--------------+
| minor_grid   | OT_INTEGERVE | GenericType( | The local    | casadi::Cont |
|              | CTOR         | )            | grid used on | rolSimulator |
|              |              |              | each major   | Internal     |
|              |              |              | interval,    |              |
|              |              |              | with time    |              |
|              |              |              | normalized   |              |
|              |              |              | to 1. By     |              |
|              |              |              | default,     |              |
|              |              |              | option 'nf'  |              |
|              |              |              | is used to   |              |
|              |              |              | construct a  |              |
|              |              |              | linearly     |              |
|              |              |              | spaced grid. |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nf           | OT_INTEGER   | 1            | Number of    | casadi::Cont |
|              |              |              | minor        | rolSimulator |
|              |              |              | grained      | Internal     |
|              |              |              | integration  |              |
|              |              |              | steps per    |              |
|              |              |              | major        |              |
|              |              |              | interval.    |              |
|              |              |              | nf>0 must    |              |
|              |              |              | hold. This   |              |
|              |              |              | option is    |              |
|              |              |              | not used     |              |
|              |              |              | when         |              |
|              |              |              | 'minor_grid' |              |
|              |              |              | is provided. |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| simulator_op | OT_DICTIONAR | GenericType( | Options to   | casadi::Cont |
| tions        | Y            | )            | be passed to | rolSimulator |
|              |              |              | the          | Internal     |
|              |              |              | simulator    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams
--------



C++ includes: control_simulator.hpp ";

%feature("docstring") casadi::ControlSimulator::isInit "

Is initialized?

";

%feature("docstring") casadi::ControlSimulator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::ControlSimulator::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::ControlSimulator::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::ControlSimulator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::ControlSimulator::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::ControlSimulator::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::ControlSimulator::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::ControlSimulator::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::ControlSimulator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::ControlSimulator::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ControlSimulator::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::ControlSimulator::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::ControlSimulator::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::ControlSimulator::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::ControlSimulator::isNull "

Is a null pointer?

";

%feature("docstring") casadi::ControlSimulator::checkRes "[INTERNAL]  Check
if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::ControlSimulator::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ControlSimulator::repr "

Print a representation of the object.

";

%feature("docstring") casadi::ControlSimulator::evaluate "

Evaluate.

";

%feature("docstring") casadi::ControlSimulator::getMajorIndex "

Get the index i such that gridminor[i] == gridmajor

";

%feature("docstring") casadi::ControlSimulator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::ControlSimulator::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::ControlSimulator::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::ControlSimulator::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::ControlSimulator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::ControlSimulator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::ControlSimulator::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::ControlSimulator::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::ControlSimulator::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ControlSimulator::getMinorT "

Get the (minor) time grid The length is (ns-1)*nf + 1

";

%feature("docstring") casadi::ControlSimulator::getMinorU "

Get the controls, sampled on the minor timescale. Number of rows is
(ns-1)*nf.

";

%feature("docstring") casadi::ControlSimulator::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::ControlSimulator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::ControlSimulator::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::ControlSimulator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::ControlSimulator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ControlSimulator::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::ControlSimulator::ControlSimulator "

>  casadi::ControlSimulator::ControlSimulator()
------------------------------------------------------------------------

Default constructor.

>  casadi::ControlSimulator::ControlSimulator(const Function &dae, const Function &output_fcn, const std::vector< double > &grid)
------------------------------------------------------------------------

Creates a piecewise simulator.

Parameters:
-----------

ffcn:  Continuous time dynamics, an casadi::Function with the following
mapping:

>Input scheme: casadi::ControlledDAEInput (CONTROL_DAE_NUM_IN = 9) [controldaeIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROL_DAE_T          | t                      | Global physical time.  |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X          | x                      | State vector           |
|                        |                        | (dimension nx-by-1).   |
|                        |                        | Should have the same   |
|                        |                        | amount of non-zeros as |
|                        |                        | DAEOutput:DAE_RES      |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_Z          | z                      | Algebraic state vector |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_P          | p                      | Parameter vector       |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U          | u                      | Control vector         |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U_INTERP   | u_interp               | Control vector,        |
|                        |                        | linearly interpolated  |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X_MAJOR    | x_major                | State vector           |
|                        |                        | (dimension nx-by-1) at |
|                        |                        | the last major time-   |
|                        |                        | step .                 |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_T0         | t0                     | Time at start of       |
|                        |                        | control interval       |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_TF         | tf                     | Time at end of control |
|                        |                        | interval (1-by-1) .    |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 3) [daeOut]

+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

output_fcn:  output function which maps ControlledDAEInput or DAEInput to n
outputs.

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 4) [daeIn]

+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Input scheme: casadi::ControlledDAEInput (CONTROL_DAE_NUM_IN = 9) [controldaeIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROL_DAE_T          | t                      | Global physical time.  |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X          | x                      | State vector           |
|                        |                        | (dimension nx-by-1).   |
|                        |                        | Should have the same   |
|                        |                        | amount of non-zeros as |
|                        |                        | DAEOutput:DAE_RES      |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_Z          | z                      | Algebraic state vector |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_P          | p                      | Parameter vector       |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U          | u                      | Control vector         |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U_INTERP   | u_interp               | Control vector,        |
|                        |                        | linearly interpolated  |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X_MAJOR    | x_major                | State vector           |
|                        |                        | (dimension nx-by-1) at |
|                        |                        | the last major time-   |
|                        |                        | step .                 |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_T0         | t0                     | Time at start of       |
|                        |                        | control interval       |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_TF         | tf                     | Time at end of control |
|                        |                        | interval (1-by-1) .    |
+------------------------+------------------------+------------------------+

Parameters:
-----------

grid:  the major time grid

>  casadi::ControlSimulator::ControlSimulator(const Function &dae, const std::vector< double > &grid)
------------------------------------------------------------------------

Output function equal to the state.

";

%feature("docstring") casadi::ControlSimulator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::ControlSimulator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::ControlSimulator::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

";

%feature("docstring") casadi::ControlSimulator::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::ControlSimulator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::ControlSimulator::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::ControlSimulator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::ControlSimulator::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::ControlSimulator::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::ControlSimulator::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::ControlSimulator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::ControlSimulator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::ControlSimulator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::ControlSimulator::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::ControlSimulator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::ControlSimulator::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::ControlSimulator::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::ControlSimulator::checkAdjSeed "[INTERNAL]
Check reverse mode seeds dimensions.

";

%feature("docstring") casadi::ControlSimulator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::ControlSimulator::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::ControlSimulator::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::ControlSimulator::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::ControlSimulator::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::ControlSimulator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::ControlSimulator::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::ControlSimulator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::ControlSimulator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::ControlSimulator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::ControlSimulator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";


// File: classcasadi_1_1ControlSimulatorInputIOSchemeVector.xml
%feature("docstring") casadi::ControlSimulatorInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::ControlSimulatorInputIOSchemeVector::ControlSimulatorInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") casadi::ControlSimulatorInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::ControlSimulatorInputIOSchemeVector "[INTERNAL]  Helper function for 'ControlSimulatorInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::ControlSimulatorInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::ControlSimulatorInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
casadi::ControlSimulatorInputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring")
casadi::ControlSimulatorInputIOSchemeVector::getDescription "[INTERNAL]
Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::ControlSimulatorInputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1CustomEvaluate.xml
%feature("docstring") casadi::CustomEvaluate::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::CustomEvaluate::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::CustomEvaluate::CustomEvaluate "

>  casadi::CustomEvaluate::CustomEvaluate()
------------------------------------------------------------------------

Default constructor.

>  casadi::CustomEvaluate::CustomEvaluate(CustomEvaluateCPtr ptr)
------------------------------------------------------------------------

Construct from C pointer.

";

%feature("docstring") casadi::CustomEvaluate::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::CustomEvaluate::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::CustomEvaluate::isInit "

Is initialized?

";

%feature("docstring") casadi::CustomEvaluate::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::CustomEvaluate::isNull "

Is a null pointer?

";

%feature("docstring") casadi::CustomEvaluate::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::CustomEvaluate::print "

Print a description of the object.

";

%feature("docstring") casadi::CustomEvaluate "

CustomEvaluate.

In C++, supply a CustomEvaluateCPtr function pointer

In python, supply a callable, annotated with pyevaluate decorator

C++ includes: functor.hpp ";

%feature("docstring") casadi::CustomEvaluate::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::CustomEvaluate::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::CustomEvaluate::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::CustomEvaluate::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::CustomEvaluate::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::CustomEvaluate::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::CustomEvaluate::repr "

Print a representation of the object.

";

%feature("docstring") casadi::CustomEvaluate::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";


// File: classcasadi_1_1CustomFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::CustomFunction::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::CustomFunction::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::CustomFunction::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::CustomFunction::repr "

Print a representation of the object.

";

%feature("docstring") casadi::CustomFunction::checkFwdSeed "[INTERNAL]
Check forward mode seeds dimensions.

";

%feature("docstring") casadi::CustomFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CustomFunction::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::CustomFunction::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::CustomFunction::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::CustomFunction::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CustomFunction::hasOption "

check if there is an option str

";

%feature("docstring") casadi::CustomFunction::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::CustomFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::CustomFunction::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::CustomFunction::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::CustomFunction::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

";

%feature("docstring") casadi::CustomFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::CustomFunction::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CustomFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CustomFunction::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::CustomFunction::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::CustomFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::CustomFunction::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CustomFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::CustomFunction::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::CustomFunction::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::CustomFunction::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::CustomFunction::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::CustomFunction::getOption "

get an option value

";

%feature("docstring") casadi::CustomFunction::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CustomFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::CustomFunction::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::CustomFunction::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::CustomFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::CustomFunction::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::CustomFunction::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::CustomFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CustomFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CustomFunction::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::CustomFunction::checkAdjSeed "[INTERNAL]
Check reverse mode seeds dimensions.

";

%feature("docstring") casadi::CustomFunction::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::CustomFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::CustomFunction::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::CustomFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::CustomFunction::isInit "

Is initialized?

";

%feature("docstring") casadi::CustomFunction::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::CustomFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::CustomFunction::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::CustomFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CustomFunction::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CustomFunction::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::CustomFunction::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::CustomFunction::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::CustomFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::CustomFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::CustomFunction "

Interface to a custom function.

Joel Andersson

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams
--------



C++ includes: custom_function.hpp ";

%feature("docstring") casadi::CustomFunction::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CustomFunction::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::CustomFunction::CustomFunction "

>  casadi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const std::vector< Sparsity > &inputscheme, const std::vector< Sparsity > &outputscheme)

>  casadi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const IOSchemeVector< Sparsity > &inputscheme, const std::vector< Sparsity > &outputscheme)

>  casadi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const std::vector< Sparsity > &inputscheme, const IOSchemeVector< Sparsity > &outputscheme)

>  casadi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const IOSchemeVector< Sparsity > &inputscheme, const IOSchemeVector< Sparsity > &outputscheme)
------------------------------------------------------------------------

Create a function with input/output schemes given.

>  casadi::CustomFunction::CustomFunction()
------------------------------------------------------------------------

default constructor

>  casadi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn)
------------------------------------------------------------------------

Create a function, user sets inputs outputs manually.

";

%feature("docstring") casadi::CustomFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CustomFunction::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::CustomFunction::matchingArg "[INTERNAL]
Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::CustomFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CustomFunction::evaluate "

Evaluate.

";

%feature("docstring") casadi::CustomFunction::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CustomFunction::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::CustomFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CustomFunction::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::CustomFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::CustomFunction::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CustomFunction::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::CustomFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CustomFunction::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::CustomFunction::checkRes "[INTERNAL]  Check
if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::CustomFunction::matchingRes "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::CustomFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::CustomFunction::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::CustomFunction::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::CustomFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::CustomFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CustomFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::CustomFunction::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::CustomFunction::checkArg "[INTERNAL]  Check
if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::CustomFunction::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::CustomFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::CustomFunction::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CustomFunction::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::CustomFunction::print "

Print a description of the object.

";

%feature("docstring") casadi::CustomFunction::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::CustomFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::CustomFunction::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::CustomFunction::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::CustomFunction::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::CustomFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::CustomFunction::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::CustomFunction::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::CustomFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::CustomFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::CustomFunction::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CustomFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::CustomFunction::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::CustomFunction::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CustomFunction::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::CustomFunction::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::CustomFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::CustomFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::CustomFunction::isNull "

Is a null pointer?

";

%feature("docstring") casadi::CustomFunction::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::CustomFunction::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";


// File: classcasadi_1_1DAEInputIOSchemeVector.xml
%feature("docstring") casadi::DAEInputIOSchemeVector::DAEInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") casadi::DAEInputIOSchemeVector "[INTERNAL]  Helper
function for 'DAEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::DAEInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DAEInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::DAEInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::DAEInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::DAEInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::DAEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::DAEInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1DAEOutputIOSchemeVector.xml
%feature("docstring")
casadi::DAEOutputIOSchemeVector::DAEOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::DAEOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DAEOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::DAEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::DAEOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::DAEOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DAEOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::DAEOutputIOSchemeVector "[INTERNAL]  Helper
function for 'DAEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::DAEOutputIOSchemeVector::__len__ "[INTERNAL]
";


// File: classcasadi_1_1DenseIO.xml
%feature("docstring") casadi::DenseIO::writeOutputs "[INTERNAL]  Write the
dense outputs to the sparse outputs.

";

%feature("docstring") casadi::DenseIO::readInputs "[INTERNAL]  Read the
sparse inputs into the dense inputs.

";

%feature("docstring") casadi::DenseIO "[INTERNAL]  A helper class for
Functions that work on dense Inputs/Outputs.

Joris Gillis

C++ includes: dense_io.hpp ";

%feature("docstring") casadi::DenseIO::inputD "[INTERNAL] ";

%feature("docstring") casadi::DenseIO::init "[INTERNAL]  Initialize.

";

%feature("docstring") casadi::DenseIO::outputD "[INTERNAL] ";


// File: classcasadi_1_1DenseMultiplication.xml


// File: classcasadi_1_1DenseTranspose.xml


// File: classcasadi_1_1DerivativeGenerator.xml
%feature("docstring") casadi::DerivativeGenerator::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::DerivativeGenerator::DerivativeGenerator "

>  casadi::DerivativeGenerator::DerivativeGenerator()
------------------------------------------------------------------------

Default constructor.

>  casadi::DerivativeGenerator::DerivativeGenerator(DerivativeGeneratorCPtr ptr)
------------------------------------------------------------------------

Construct from C pointer.

";

%feature("docstring") casadi::DerivativeGenerator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::DerivativeGenerator::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::DerivativeGenerator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DerivativeGenerator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::DerivativeGenerator::repr "

Print a representation of the object.

";

%feature("docstring") casadi::DerivativeGenerator::isInit "

Is initialized?

";

%feature("docstring") casadi::DerivativeGenerator "

Derivative Generator Functor.

In C++, supply a DerivativeGeneratorCPtr function pointer

In python, supply a callable, annotated with derivativegenerator decorator

C++ includes: functor.hpp ";

%feature("docstring") casadi::DerivativeGenerator::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::DerivativeGenerator::isNull "

Is a null pointer?

";

%feature("docstring") casadi::DerivativeGenerator::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::DerivativeGenerator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DerivativeGenerator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::DerivativeGenerator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::DerivativeGenerator::print "

Print a description of the object.

";

%feature("docstring") casadi::DerivativeGenerator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::DerivativeGenerator::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::DerivativeGenerator::swap "[INTERNAL]  Swap
content with another instance.

";


// File: classcasadi_1_1Determinant.xml


// File: classcasadi_1_1Diagcat.xml


// File: classcasadi_1_1Diagsplit.xml


// File: classcasadi_1_1DLEInputIOSchemeVector.xml
%feature("docstring") casadi::DLEInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DLEInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::DLEInputIOSchemeVector "[INTERNAL]  Helper
function for 'DLEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::DLEInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::DLEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::DLEInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::DLEInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::DLEInputIOSchemeVector::DLEInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") casadi::DLEInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1DLEOutputIOSchemeVector.xml
%feature("docstring") casadi::DLEOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::DLEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::DLEOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::DLEOutputIOSchemeVector "[INTERNAL]  Helper
function for 'DLEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::DLEOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::DLEOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DLEOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::DLEOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")
casadi::DLEOutputIOSchemeVector::DLEOutputIOSchemeVector "[INTERNAL] ";


// File: classcasadi_1_1DleSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring") casadi::DleSolver::isNull
"

Is a null pointer?

";

%feature("docstring") casadi::DleSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::DleSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::DleSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::DleSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::DleSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::DleSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::DleSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::DleSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::DleSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::DleSolver::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::DleSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::DleSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::DleSolver::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::DleSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::DleSolver::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::DleSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::DleSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::DleSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::DleSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::DleSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::DleSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DleSolver::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::DleSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::DleSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::DleSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::DleSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::DleSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::DleSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::DleSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::DleSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::DleSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::DleSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::DleSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::DleSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::DleSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::DleSolver::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::DleSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::DleSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DleSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::DleSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::DleSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DleSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::DleSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::DleSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::DleSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::DleSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::DleSolver::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::DleSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::DleSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::DleSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::DleSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DleSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::DleSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DleSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::DleSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::DleSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DleSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::DleSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::DleSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::DleSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::DleSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::DleSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::DleSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::DleSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::DleSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::DleSolver::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::DleSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::DleSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::DleSolver::matchingAdjSeed "[INTERNAL]  Check
if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::DleSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::DleSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::DleSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::DleSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::DleSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DleSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::DleSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::DleSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::DleSolver::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::DleSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::DleSolver::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::DleSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::DleSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::DleSolver::getOption "

get an option value

";

%feature("docstring") casadi::DleSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::DleSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::DleSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::DleSolver::clone "

Clone.

";

%feature("docstring") casadi::DleSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::DleSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::DleSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DleSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::DleSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DleSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::DleSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::DleSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::DleSolver::printStats "

Print solver statistics.

";

%feature("docstring") casadi::DleSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::DleSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::DleSolver::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::DleSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::DleSolver::matchingFwdSeed "[INTERNAL]  Check
if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::DleSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::DleSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::DleSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::DleSolver::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::DleSolver "

Base class for Discrete Lyapunov Equation Solvers.

Given matrices $A$ and symmetric $V$



::

  A in R^(n x n)
  V in S^n
  



finds $P$ that satisfies:



::

  P = A P A' + V
  



General information
===================



>Input scheme: casadi::DLEInput (DLE_NUM_IN = 2) [dleIn]

+-----------+-------+-------------+
| Full name | Short | Description |
+===========+=======+=============+
| DLE_A     | a     | A matrix .  |
+-----------+-------+-------------+
| DLE_V     | v     | V matrix .  |
+-----------+-------+-------------+

>Output scheme: casadi::DLEOutput (DLE_NUM_OUT = 1) [dleOut]

+-----------+-------+-------------+
| Full name | Short | Description |
+===========+=======+=============+
| DLE_P     | p     | P matrix .  |
+-----------+-------+-------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | casadi::DleI |
|              |              |              | unstability  | nternal      |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| error_unstab | OT_BOOLEAN   | false        | Throw an     | casadi::DleI |
| le           |              |              | exception    | nternal      |
|              |              |              | when it is   |              |
|              |              |              | detected     |              |
|              |              |              | that         |              |
|              |              |              | Product(A_i, |              |
|              |              |              | i=N..1) has  |              |
|              |              |              | eigenvalues  |              |
|              |              |              | greater than |              |
|              |              |              | 1-eps_unstab |              |
|              |              |              | le           |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pos_def      | OT_BOOLEAN   | false        | Assume P     | casadi::DleI |
|              |              |              | positive     | nternal      |
|              |              |              | definite     |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- dple

- lrdle

- fixed_smith

- simple

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
DleSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

dple
----



Solving the Discrete Lyapunov Equations with Periodic Solver

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

lrdle
-----



>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

fixed_smith
-----------



Solving the Discrete Lyapunov Equations with a fixed number of smith
iterations.

This plugin uses Smith iterations.

Th basic idea is to exploit the fact that the discrete algebraic Lyapunov
operator f(X) = AXA^T + V has a fixed point when A is stable.

The pure Smith iterations are:



::

  X_{-1} = 0
  X_0 = V
  k = 0
  while ||X_k - X_{k-1} || < do
    X_{k+1} = A X_k A^T + V
    k += 1
  end
  
  P = X_k
  



With frequency doubling, we have:



::

  X_{-1} = 0
  X_0 = V
  V_0 = V
  A_0 = A
  k = 0
  while ||X_k - X_{k-1} || < do
    X_{k+1} = A_k X_k A_k^T + V_k
    V_{k+1} = A_k V_k A_k^T + V_k
    A_{k+1} = A_k A_k
    k += 1
  end
  
  P = X_k
  



>List of available options

+---------------+------------+---------+----------------------------+
|      Id       |    Type    | Default |        Description         |
+===============+============+=========+============================+
| freq_doubling | OT_BOOLEAN | false   | Use frequency doubling     |
+---------------+------------+---------+----------------------------+
| iter          | OT_INTEGER | 100     | Number of Smith iterations |
+---------------+------------+---------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

simple
------



Solving the Discrete Lyapunov Equations with a regular LinearSolver

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| compressed_solv | OT_BOOLEAN      | true            | When a system   |
| e               |                 |                 | with sparse rhs |
|                 |                 |                 | arises,         |
|                 |                 |                 | compress toa    |
|                 |                 |                 | smaller system  |
|                 |                 |                 | with dense rhs. |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver   | OT_STRING       | GenericType()   | User-defined    |
|                 |                 |                 | linear solver   |
|                 |                 |                 | class. Needed   |
|                 |                 |                 | for             |
|                 |                 |                 | sensitivities.  |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver_o | OT_DICTIONARY   | GenericType()   | Options to be   |
| ptions          |                 |                 | passed to the   |
|                 |                 |                 | linear solver.  |
+-----------------+-----------------+-----------------+-----------------+

--------------------------------------------------------------------------------



Joris Gillis
Diagrams
--------



C++ includes: dle_solver.hpp ";

%feature("docstring") casadi::DleSolver::DleSolver "

>  casadi::DleSolver::DleSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::DleSolver::DleSolver(const std::string &name, const DleStructure &st)
------------------------------------------------------------------------

DleSolver solver factory.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- dple

- lrdle

- fixed_smith

- simple

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
DleSolver.doc(\"myextraplugin\")

st:

Problem structure.>Struct scheme: casadi::DleStruct ( = 2) [dleStruct]

+--------------+-------+----------------+
|  Full name   | Short |  Description   |
+==============+=======+================+
| Dle_STRUCT_A | a     | The matrix A . |
+--------------+-------+----------------+
| Dle_STRUCT_V | v     | The matrix V . |
+--------------+-------+----------------+

";

%feature("docstring") casadi::DleSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::DleSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";


// File: singletoncasadi_1_1DleStructIOSchemeVector.xml
%feature("docstring") casadi::DleStructIOSchemeVector "[INTERNAL]  Helper
function for 'DleStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::DleStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DleStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::DleStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::DleStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DleStructIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::DleStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring")
casadi::DleStructIOSchemeVector::DleStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::DleStructIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1DleToDple.xml


// File: classcasadi_1_1DleToLrDle.xml


// File: classcasadi_1_1DPLEInputIOSchemeVector.xml
%feature("docstring") casadi::DPLEInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::DPLEInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::DPLEInputIOSchemeVector "[INTERNAL]  Helper
function for 'DPLEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::DPLEInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DPLEInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::DPLEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
casadi::DPLEInputIOSchemeVector::DPLEInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::DPLEInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::DPLEInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1DPLEOutputIOSchemeVector.xml
%feature("docstring") casadi::DPLEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::DPLEOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::DPLEOutputIOSchemeVector "[INTERNAL]  Helper
function for 'DPLEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::DPLEOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DPLEOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DPLEOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::DPLEOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::DPLEOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")
casadi::DPLEOutputIOSchemeVector::DPLEOutputIOSchemeVector "[INTERNAL] ";


// File: classcasadi_1_1DpleSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::DpleSolver::replaceArg " [INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::DpleSolver::printStats "

Print solver statistics.

";

%feature("docstring") casadi::DpleSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DpleSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::DpleSolver::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::DpleSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::DpleSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::DpleSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::DpleSolver::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::DpleSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::DpleSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DpleSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::DpleSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::DpleSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::DpleSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DpleSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::DpleSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::DpleSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DpleSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::DpleSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::DpleSolver::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::DpleSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::DpleSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::DpleSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::DpleSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::DpleSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::DpleSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::DpleSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DpleSolver::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::DpleSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::DpleSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::DpleSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::DpleSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::DpleSolver::getOption "

get an option value

";

%feature("docstring") casadi::DpleSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::DpleSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::DpleSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::DpleSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::DpleSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::DpleSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::DpleSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DpleSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::DpleSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::DpleSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::DpleSolver::clone "

Clone.

";

%feature("docstring") casadi::DpleSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::DpleSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::DpleSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::DpleSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::DpleSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::DpleSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::DpleSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DpleSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::DpleSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::DpleSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::DpleSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::DpleSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::DpleSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::DpleSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::DpleSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::DpleSolver::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::DpleSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::DpleSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::DpleSolver::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::DpleSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::DpleSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::DpleSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::DpleSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::DpleSolver::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::DpleSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::DpleSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::DpleSolver::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::DpleSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::DpleSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::DpleSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::DpleSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::DpleSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::DpleSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::DpleSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::DpleSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::DpleSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::DpleSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::DpleSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::DpleSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DpleSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::DpleSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::DpleSolver::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::DpleSolver "

Base class for Discrete Periodic Lyapunov Equation Solvers.

Given matrices $A_k$ and symmetric $V_k, k = 0..K-1$



::

  A_k in R^(n x n)
  V_k in R^n
  



provides all of $P_k$ that satisfy:



::

  P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k
  P_k+1 = A_k*P_k*A_k' + V_k  for k = 1..K-1
  



General information
===================



>Input scheme: casadi::DPLEInput (DPLE_NUM_IN = 2) [dpleIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_A                 | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | diagcat otherwise) .   |
+------------------------+------------------------+------------------------+
| DPLE_V                 | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | diagcat otherwise) .   |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::DPLEOutput (DPLE_NUM_OUT = 1) [dpleOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_P                 | p                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, diagcat     |
|                        |                        | otherwise) (Cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| const_dim    | OT_BOOLEAN   | true         | Assume       | casadi::Dple |
|              |              |              | constant     | Internal     |
|              |              |              | dimension of |              |
|              |              |              | P            |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | casadi::Dple |
|              |              |              | unstability  | Internal     |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| error_unstab | OT_BOOLEAN   | false        | Throw an     | casadi::Dple |
| le           |              |              | exception    | Internal     |
|              |              |              | when it is   |              |
|              |              |              | detected     |              |
|              |              |              | that         |              |
|              |              |              | Product(A_i, |              |
|              |              |              | i=N..1) has  |              |
|              |              |              | eigenvalues  |              |
|              |              |              | greater than |              |
|              |              |              | 1-eps_unstab |              |
|              |              |              | le           |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pos_def      | OT_BOOLEAN   | false        | Assume P     | casadi::Dple |
|              |              |              | positive     | Internal     |
|              |              |              | definite     |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- slicot

- condensing

- lrdple

- lifting

- simple

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
DpleSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

slicot
------



An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Uses Periodic Schur Decomposition ('psd') and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| linear_solver   | OT_STRING       | GenericType()   | User-defined    |
|                 |                 |                 | linear solver   |
|                 |                 |                 | class. Needed   |
|                 |                 |                 | for             |
|                 |                 |                 | sensitivities.  |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver_o | OT_DICTIONARY   | GenericType()   | Options to be   |
| ptions          |                 |                 | passed to the   |
|                 |                 |                 | linear solver.  |
+-----------------+-----------------+-----------------+-----------------+
| psd_num_zero    | OT_REAL         | 0.000           | Numerical zero  |
|                 |                 |                 | used in         |
|                 |                 |                 | Periodic Schur  |
|                 |                 |                 | decomposition   |
|                 |                 |                 | with            |
|                 |                 |                 | slicot.This     |
|                 |                 |                 | option is       |
|                 |                 |                 | needed when     |
|                 |                 |                 | your systems    |
|                 |                 |                 | has Floquet     |
|                 |                 |                 | multiplierszero |
|                 |                 |                 | or close to     |
|                 |                 |                 | zero            |
+-----------------+-----------------+-----------------+-----------------+

>List of available stats

+----------------+
|       Id       |
+================+
| t_linear_solve |
+----------------+
| t_psd          |
+----------------+
| t_total        |
+----------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

condensing
----------



Solving the Discrete Periodic Lyapunov Equations by condensing the entire
period to a single Discrete Lyapunov Equation

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

lrdple
------



Solving the Low-Rank Discrete Lyapunov Equations with a Low-Rank Discrete
Lyapunov Equations Solver

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

lifting
-------



Solving the Discrete Periodic Lyapunov Equations by lifting the entire
period to a single Discrete Lyapunov Equation

>List of available options

+------+-----------+---------+-----------------------------------+
|  Id  |   Type    | Default |            Description            |
+======+===========+=========+===================================+
| form | OT_STRING | \"A\"     | The form of the lifting (A:0|B:1) |
+------+-----------+---------+-----------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

simple
------



Solving the Discrete Periodic Lyapunov Equations with a regular LinearSolver

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| linear_solver   | OT_STRING       | GenericType()   | User-defined    |
|                 |                 |                 | linear solver   |
|                 |                 |                 | class. Needed   |
|                 |                 |                 | for             |
|                 |                 |                 | sensitivities.  |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver_o | OT_DICTIONARY   | GenericType()   | Options to be   |
| ptions          |                 |                 | passed to the   |
|                 |                 |                 | linear solver.  |
+-----------------+-----------------+-----------------+-----------------+

--------------------------------------------------------------------------------



Joris Gillis
Diagrams
--------



C++ includes: dple_solver.hpp ";

%feature("docstring") casadi::DpleSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::DpleSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::DpleSolver::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::DpleSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::DpleSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::DpleSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::DpleSolver::DpleSolver "

>  casadi::DpleSolver::DpleSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::DpleSolver::DpleSolver(const std::string &name, const DpleStructure &st)
------------------------------------------------------------------------

DpleSolver solver factory.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- slicot

- condensing

- lrdple

- lifting

- simple

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
DpleSolver.doc(\"myextraplugin\")

st:

Problem structure.

>  casadi::DpleSolver::DpleSolver(const std::string &name, const std::vector< Sparsity > &A, const std::vector< Sparsity > &V)
------------------------------------------------------------------------

Older constructor.

";

%feature("docstring") casadi::DpleSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::DpleSolver::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::DpleSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::DpleSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::DpleSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::DpleSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::DpleSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::DpleSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::DpleSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::DpleSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::DpleSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::DpleSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DpleSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::DpleSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::DpleSolver::callForward "

Create call to (cached) derivative function, forward mode.

";


// File: classcasadi_1_1DpleToLrDple.xml


// File: singletoncasadi_1_1DpleVecStructIOSchemeVector.xml
%feature("docstring") casadi::DpleVecStructIOSchemeVector "[INTERNAL]
Helper function for 'DpleVecStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::DpleVecStructIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DpleVecStructIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::DpleVecStructIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::DpleVecStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
casadi::DpleVecStructIOSchemeVector::DpleVecStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::DpleVecStructIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::DpleVecStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DpleVecStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classcasadi_1_1ExternalFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::ExternalFunction::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::ExternalFunction::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::ExternalFunction::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::ExternalFunction::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::ExternalFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::ExternalFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::ExternalFunction::checkFwdSeed "[INTERNAL]
Check forward mode seeds dimensions.

";

%feature("docstring") casadi::ExternalFunction::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::ExternalFunction::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::ExternalFunction::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::ExternalFunction::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::ExternalFunction::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::ExternalFunction::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::ExternalFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::ExternalFunction::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ExternalFunction::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::ExternalFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::ExternalFunction::matchingArg "[INTERNAL]
Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::ExternalFunction::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::ExternalFunction::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ExternalFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::ExternalFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::ExternalFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::ExternalFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ExternalFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::ExternalFunction::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::ExternalFunction::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::ExternalFunction::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::ExternalFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::ExternalFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::ExternalFunction::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::ExternalFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::ExternalFunction::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::ExternalFunction::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::ExternalFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::ExternalFunction::checkArg "[INTERNAL]  Check
if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::ExternalFunction::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::ExternalFunction::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::ExternalFunction::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::ExternalFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::ExternalFunction::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::ExternalFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::ExternalFunction::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::ExternalFunction::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::ExternalFunction::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::ExternalFunction::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::ExternalFunction::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::ExternalFunction "

Interface for a function that is not implemented by CasADi symbolics.

Joel Andersson

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams
--------



C++ includes: external_function.hpp ";

%feature("docstring") casadi::ExternalFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::ExternalFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::ExternalFunction::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ExternalFunction::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::ExternalFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::ExternalFunction::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::ExternalFunction::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::ExternalFunction::isInit "

Is initialized?

";

%feature("docstring") casadi::ExternalFunction::hasOption "

check if there is an option str

";

%feature("docstring") casadi::ExternalFunction::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::ExternalFunction::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::ExternalFunction::matchingRes "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::ExternalFunction::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::ExternalFunction::isNull "

Is a null pointer?

";

%feature("docstring") casadi::ExternalFunction::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::ExternalFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::ExternalFunction::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::ExternalFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::ExternalFunction::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::ExternalFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::ExternalFunction::checkRes "[INTERNAL]  Check
if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::ExternalFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::ExternalFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::ExternalFunction::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::ExternalFunction::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::ExternalFunction::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::ExternalFunction::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::ExternalFunction::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::ExternalFunction::evaluate "

Evaluate.

";

%feature("docstring") casadi::ExternalFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::ExternalFunction::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::ExternalFunction::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::ExternalFunction::getOption "

get an option value

";

%feature("docstring") casadi::ExternalFunction::print "

Print a description of the object.

";

%feature("docstring") casadi::ExternalFunction::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::ExternalFunction::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::ExternalFunction::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::ExternalFunction::ExternalFunction "

>  casadi::ExternalFunction::ExternalFunction()
------------------------------------------------------------------------

CONSTRUCTORS:

default constructor

>  casadi::ExternalFunction::ExternalFunction(const std::string &bin_name)
------------------------------------------------------------------------

Create an empty function.

";

%feature("docstring") casadi::ExternalFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::ExternalFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ExternalFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::ExternalFunction::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::ExternalFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::ExternalFunction::checkAdjSeed "[INTERNAL]
Check reverse mode seeds dimensions.

";

%feature("docstring") casadi::ExternalFunction::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::ExternalFunction::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::ExternalFunction::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::ExternalFunction::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::ExternalFunction::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

";

%feature("docstring") casadi::ExternalFunction::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::ExternalFunction::repr "

Print a representation of the object.

";

%feature("docstring") casadi::ExternalFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::ExternalFunction::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::ExternalFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::ExternalFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::ExternalFunction::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::ExternalFunction::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::ExternalFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::ExternalFunction::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::ExternalFunction::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::ExternalFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";


// File: classcasadi_1_1FixedStepIntegrator.xml


// File: classcasadi_1_1Function.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::Function::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Function::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Function::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Function::hasOption "

check if there is an option str

";

%feature("docstring") casadi::Function::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Function::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::Function::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Function::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Function::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Function::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::Function::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::Function::getOption "

get an option value

";

%feature("docstring") casadi::Function::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::Function::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") casadi::Function::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::Function::matchingAdjSeed "[INTERNAL]  Check
if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::Function::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Function::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::Function::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Function::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::Function::matchingFwdSeed "[INTERNAL]  Check
if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::Function::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::Function::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::Function::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Function::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::Function::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::Function::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::Function::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Function::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::Function::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::Function::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::Function::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::Function::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::Function::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::Function::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::Function::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::Function::Function "

default constructor

";

%feature("docstring") casadi::Function::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::Function::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Function::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Function::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Function::isInit "

Is initialized?

";

%feature("docstring") casadi::Function::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Function::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Function::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::Function::~Function "

Destructor.

";

%feature("docstring") casadi::Function::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::Function::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::Function::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Function::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Function::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::Function::print "

Print a description of the object.

";

%feature("docstring") casadi::Function::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::Function::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::Function::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Function::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::Function::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::Function::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") casadi::Function::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::Function::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::Function::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Function::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::Function::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::Function::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Function::evaluate "

Evaluate.

";

%feature("docstring") casadi::Function::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Function::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Function::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::Function::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::Function::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::Function::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::Function::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Function::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Function::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::Function::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::Function::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Function::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Function "

General function.

A general function $f$ in casadi can be multi-input, multi-output. Number of
inputs: nin getNumInputs() Number of outputs: nout getNumOutputs()  We can
view this function as a being composed of a ( nin, nout) grid of single-
input, single-output primitive functions. Each such primitive function $f_
{i, j} \\\\forall i \\\\in [0, nin-1], j \\\\in [0, nout-1]$ can map as
$\\\\mathbf {R}^{n, m}\\\\to\\\\mathbf{R}^{p, q}$, in which n, m, p, q can
take different values for every (i, j) pair.  When passing input, you
specify which partition $i$ is active. You pass the numbers vectorized, as a
vector of size $(n*m)$. When requesting output, you specify which partition
$j$ is active. You get the numbers vectorized, as a vector of size $(p*q)$.
To calculate Jacobians, you need to have $(m=1, q=1)$.

Write the Jacobian as $J_ {i, j} = \\\\nabla f_{i, j} = \\\\frac
{\\\\partial f_{i, j}(\\\\vec{x})}{\\\\partial \\\\vec{x}}$.

We have the following relationships for function mapping from a row vector
to a row vector:

$ \\\\vec {s}_f = \\\\nabla f_{i, j} . \\\\vec{v}$ $ \\\\vec {s}_a =
(\\\\nabla f_{i, j})^T . \\\\vec{w}$

Some quantities in these formulas must be transposed: input col: transpose $
\\\\vec {v} $ and $\\\\vec{s}_a$ output col: transpose $ \\\\vec {w} $ and
$\\\\vec{s}_f$  NOTE: Functions are allowed to modify their input arguments
when evaluating: implicitFunction, IDAS solver Further releases may disallow
this.

Joel Andersson

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors

+---------+--------------------------+
|   Id    |         Used in          |
+=========+==========================+
| inputs  | casadi::FunctionInternal |
+---------+--------------------------+
| outputs | casadi::FunctionInternal |
+---------+--------------------------+

Diagrams
--------



C++ includes: function.hpp ";

%feature("docstring") casadi::Function::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::Function::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::Function::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::Function::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Function::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::Function::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Function::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::Function::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::Function::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::Function::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Function::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::Function::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Function::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::Function::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::Function::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::Function::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::Function::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Function::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Function::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::Function::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::Function::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Function::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Function::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::Function::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Function::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::Function::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::Function::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Function::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Function::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::Function::outputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Function::getDescription "

Return a string with a description (for SWIG)

";


// File: classcasadi_1_1Functor.xml
%feature("docstring") casadi::Functor::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Functor::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::Functor::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::Functor::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Functor::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Functor::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Functor "

Functor.

Joris Gillis

C++ includes: functor.hpp ";

%feature("docstring") casadi::Functor::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::Functor::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Functor::print "

Print a description of the object.

";

%feature("docstring") casadi::Functor::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Functor::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Functor::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::Functor::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Functor::isInit "

Is initialized?

";

%feature("docstring") casadi::Functor::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Functor::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Functor::clone "[INTERNAL]  Deep copy.

";


// File: classcasadi_1_1GenericExpression.xml
%feature("docstring") pow "

Power (elementwise for matrix types)

";

%feature("docstring") cosh "

Hyperbolic cosine.

";

%feature("docstring") fmin "

Minimum of two values.

";

%feature("docstring") acosh "

Arc hyperbolic cosine.

";

%feature("docstring") tan "

Tangent.

";

%feature("docstring") asin "

Arc sine.

";

%feature("docstring") log "

Natural logarithm.

";

%feature("docstring") fabs "

Absolute value, C syntax.

";

%feature("docstring") floor "

Round down to nearest integer.

";

%feature("docstring") atanh "

Arc hyperbolic tangent.

";

%feature("docstring") sqrt "

Square root.

";

%feature("docstring") abs "

Absolute value, C++ syntax.

";

%feature("docstring") log10 "

10-base logarithm

";

%feature("docstring") sin "

Sine.

";

%feature("docstring") asinh "

Arc hyperbolic sine.

";

%feature("docstring") fmod "

Modulo.

";

%feature("docstring") atan "

Arc tangent.

";

%feature("docstring") fmax "

Maximum of two values.

";

%feature("docstring") casadi::GenericExpression::zz_gt "

No need to have both < and >

";

%feature("docstring") ceil "

Round up to nearest integer.

";

%feature("docstring") sinh "

Hyperbolic sine.

";

%feature("docstring") iszero "

check if the matrix is 0 (note that false negative answers are possible)

";

%feature("docstring") casadi::GenericExpression::__truediv__ "

Division (with __future__.division in effect)

";

%feature("docstring") sign "

Sign function (note sign(nan) == nan, sign(0) == 0)

";

%feature("docstring") casadi::GenericExpression::zz_ge "

No need to have both <= and >=.

";

%feature("docstring") cos "

Cosine.

";

%feature("docstring") tanh "

Hyperbolic tangent.

";

%feature("docstring") casadi::GenericExpression "

Expression interface.

This is a common base class for SX, MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom. Joel Andersson

C++ includes: generic_expression.hpp ";

%feature("docstring") atan2 "

Arctan2.

";

%feature("docstring") erf "

Error function.

";

%feature("docstring") exp "

Natural exponential function (elementwise for matrix types)

";

%feature("docstring") isEqual "

Check if two nodes are equivalent up to a given depth. Depth=0 checks if the
expressions are identical, i.e. points to the same node.

a = x*x b = x*x

a.isEqual(b, 0) will return false, but a.isEqual(b, 1) will return true

";

%feature("docstring") acos "

Arc cosine.

";

%feature("docstring") casadi::GenericExpression::__mldivide__ "

Matrix division from left.

";


// File: classcasadi_1_1GenericMatrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") casadi::GenericMatrix::zz_triu "

Accessed by friend functions.

";

%feature("docstring") casadi::GenericMatrix::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") quad_form "

>  MatType quad_form(const MatType &X, const MatType &A)
------------------------------------------------------------------------

Calculate quadratic form X^T A X.

>  MatType quad_form(const MatType &X)
------------------------------------------------------------------------

Calculate quadratic form X^T X.

";

%feature("docstring") casadi::GenericMatrix::sym "

>  static MatType casadi::GenericMatrix< MatType >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static MatType casadi::GenericMatrix< MatType >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  MatType casadi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  std::vector< MatType > casadi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<MatType > casadi::GenericMatrix< MatType >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  std::vector< std::vector< MatType > > casadi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<MatType> > casadi::GenericMatrix< MatType >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") casadi::GenericMatrix::numel "

>  int casadi::GenericMatrix< MatType >::numel() const 
------------------------------------------------------------------------

Get the number of elements.

>  int casadi::GenericMatrix< MatType >::numel(int i) const 
------------------------------------------------------------------------

Get the number of elements in slice (cf. MATLAB)

";

%feature("docstring") nullspace "

Computes the nullspace of a matrix A.

Finds Z m-by-(m-n) such that AZ = 0 with A n-by-m with m > n

Assumes A is full rank

Inspired by Numerical Methods in Scientific Computing by Ake Bjorck

";

%feature("docstring") casadi::GenericMatrix::sparsity "

Get the sparsity pattern.

";

%feature("docstring") sumAll "

Return summation of all elements.

";

%feature("docstring") casadi::GenericMatrix::zz_tril2symm "

Accessed by friend functions.

";

%feature("docstring") casadi::GenericMatrix::isScalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::GenericMatrix::shape "

Get the shape.

";

%feature("docstring") triu2symm "

Convert a upper triangular matrix to a symmetric one.

";

%feature("docstring") casadi::GenericMatrix::zz_sprank "

Accessed by friend functions.

";

%feature("docstring") sum_square "

Calculate some of squares: sum_ij X_ij^2.

";

%feature("docstring") unite "

Unite two matrices no overlapping sparsity.

";

%feature("docstring") casadi::GenericMatrix::sparsityRef "[INTERNAL]
Access the sparsity, make a copy if there are multiple references to it.

";

%feature("docstring") casadi::GenericMatrix::dimString "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring") casadi::GenericMatrix::zz_tril "

Accessed by friend functions.

";

%feature("docstring") casadi::GenericMatrix::zz_norm_0_mul "

Accessed by friend functions.

";

%feature("docstring") sumCols "

Return a col-wise summation of elements.

";

%feature("docstring") polyval "

Evaluate a polynomial with coefficients p in x.

";

%feature("docstring") casadi::GenericMatrix::zz_triu2symm "

Accessed by friend functions.

";

%feature("docstring") norm_1 "

1-norm

";

%feature("docstring") norm_2 "

2-norm

";

%feature("docstring") casadi::GenericMatrix::sizeL "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::GenericMatrix::zz_densify "

Accessed by friend functions.

";

%feature("docstring") cross "

Matlab's cross command.

";

%feature("docstring") inner_prod "

Inner product of two matrices Equals.

with x and y matrices of the same dimension

";

%feature("docstring") casadi::GenericMatrix::colind "

>  const int* casadi::GenericMatrix< MatType >::colind() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity pattern. See the Sparsity class for details.

>  int casadi::GenericMatrix< MatType >::colind(int col) const 
------------------------------------------------------------------------

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::GenericMatrix::sizeU "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::GenericMatrix::size "

>  int casadi::GenericMatrix< MatType >::size() const 
------------------------------------------------------------------------

DEPRECATED: Alias for nnz.

See:   nnz()

>  int casadi::GenericMatrix< MatType >::size(SparsityType sp) const 
------------------------------------------------------------------------

Get the number if non-zeros for a given sparsity pattern.

";

%feature("docstring") casadi::GenericMatrix "

Matrix base class.

This is a common base class for MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom.  The class is designed with the idea that
\"everything is a matrix\", that is, also scalars and vectors. This
philosophy makes it easy to use and to interface in particularly with Python
and Matlab/Octave.  The syntax tries to stay as close as possible to the
ublas syntax when it comes to vector/matrix operations.  Index starts with
0. Index vec happens as follows: (rr, cc) -> k = rr+cc*size1() Vectors are
column vectors.  The storage format is Compressed Column Storage (CCS),
similar to that used for sparse matrices in Matlab, but unlike this format,
we do allow for elements to be structurally non-zero but numerically zero.
The sparsity pattern, which is reference counted and cached, can be accessed
with Sparsity& sparsity() Joel Andersson

C++ includes: generic_matrix.hpp ";

%feature("docstring") casadi::GenericMatrix::zz_repmat "";

%feature("docstring") casadi::GenericMatrix::zz_cross "

Accessed by friend functions.

";

%feature("docstring") inv "

Matrix inverse (experimental)

";

%feature("docstring") casadi::GenericMatrix::sizeD "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") casadi::GenericMatrix::isDense "

Check if the matrix expression is dense.

";

%feature("docstring") if_else "

Check if expression depends on the argument The argument must be symbolic.

Branching on MX nodes Ternary operator, \"cond ? if_true : if_false\"

";

%feature("docstring") trace "

Matrix trace.

";

%feature("docstring") casadi::GenericMatrix::isSquare "

Check if the matrix expression is square.

";

%feature("docstring") casadi::GenericMatrix::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") casadi::GenericMatrix::getColind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::GenericMatrix::zz_blocksplit "";

%feature("docstring") norm_F "

Frobenius norm.

";

%feature("docstring") linspace "

Matlab's linspace command.

";

%feature("docstring") casadi::GenericMatrix::sparse "

Create a sparse matrix with all zeros DEPRECATED: Use MatType(nrow, ncol)
instead.

";

%feature("docstring") casadi::GenericMatrix::find "

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.find() A[k] will contain the elements of A that are non-zero in B

";

%feature("docstring") casadi::GenericMatrix::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") diag "

Get the diagonal of a matrix or construct a diagonal When the input is
square, the diagonal elements are returned. If the input is vector- like, a
diagonal matrix is constructed with it.

";

%feature("docstring") densify "

Make the matrix dense if not already.

";

%feature("docstring") casadi::GenericMatrix::isRowVector "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring") casadi::GenericMatrix::zz_linspace "

Accessed by friend functions.

";

%feature("docstring") casadi::GenericMatrix::getRow "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::GenericMatrix::zz_quad_form "

Accessed by friend functions.

";

%feature("docstring") casadi::GenericMatrix::isEmpty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::GenericMatrix::isTril "

Check if the matrix is lower triangular.

";

%feature("docstring") det "

Matrix determinant (experimental)

";

%feature("docstring") norm_inf "

Infinity-norm.

";

%feature("docstring") casadi::GenericMatrix::isVector "

Check if the matrix is a column vector (i.e. size2()==1) Optionally, checks
if either row or column vector.

";

%feature("docstring") casadi::GenericMatrix::nnz "

Get the number of (structural) non-zero elements.

";

%feature("docstring") tril2symm "

Convert a lower triangular matrix to a symmetric one.

";

%feature("docstring") casadi::GenericMatrix::zz_sum_square "

Accessed by friend functions.

";

%feature("docstring") outer_prod "

Take the outer product of two vectors Equals.

with x and y vectors

";

%feature("docstring") casadi::GenericMatrix::zz_vec "";

%feature("docstring") casadi::GenericMatrix::row "

>  const int* casadi::GenericMatrix< MatType >::row() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity pattern. See the Sparsity class for details.

>  int casadi::GenericMatrix< MatType >::row(int el) const 
------------------------------------------------------------------------

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::GenericMatrix::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring") casadi::GenericMatrix::isTriu "

Check if the matrix is upper triangular.

";

%feature("docstring") sumRows "

Return a row-wise summation of elements.

";


// File: classcasadi_1_1GenericType.xml
%feature("docstring") casadi::GenericType::isDouble "

Is a double?

";

%feature("docstring") casadi::GenericType::isBool "

Is boolean?

";

%feature("docstring") casadi::GenericType::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::GenericType::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::GenericType::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::GenericType::toIntVectorVector "

>  const std::vector< std::vector<int> >& casadi::GenericType::toIntVectorVector() const 
------------------------------------------------------------------------

Convert to vector of ints.

>  std::vector< std::vector<int> >& casadi::GenericType::toIntVectorVector()
------------------------------------------------------------------------
[INTERNAL] 
Convert to vector of ints.

";

%feature("docstring") casadi::GenericType::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::GenericType::print "

Print a description of the object.

";

%feature("docstring") casadi::GenericType::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::GenericType::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::GenericType::isString "

Is a string?

";

%feature("docstring") casadi::GenericType::toFunction "

Convert to shared object.

";

%feature("docstring") casadi::GenericType::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::GenericType::isDoubleVector "

Is a vector of doubles?

";

%feature("docstring") casadi::GenericType "

Generic data type.

Joel Andersson

C++ includes: generic_type.hpp ";

%feature("docstring") casadi::GenericType::isEmptyVector "

Is an empty vector?

";

%feature("docstring") casadi::GenericType::isSharedObject "

Is a shared object?

";

%feature("docstring") casadi::GenericType::getType "";

%feature("docstring") casadi::GenericType::isIntVectorVector "

Is a vector of vector of ints?

";

%feature("docstring") casadi::GenericType::isNull "

Is a null pointer?

";

%feature("docstring") casadi::GenericType::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::GenericType::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::GenericType::isInt "

Is an integer?

";

%feature("docstring") casadi::GenericType::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::GenericType::can_cast_to "";

%feature("docstring") casadi::GenericType::isInit "

Is initialized?

";

%feature("docstring") casadi::GenericType::toStringVector "

Convert to vector of strings.

";

%feature("docstring") casadi::GenericType::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::GenericType::toSharedObject "

Convert to shared object.

";

%feature("docstring") casadi::GenericType::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::GenericType::isDictionary "

Is a shared object?

";

%feature("docstring") casadi::GenericType::toDoubleVector "

>  const std::vector<double>& casadi::GenericType::toDoubleVector() const 
------------------------------------------------------------------------

Convert to vector of doubles.

>  std::vector<double>& casadi::GenericType::toDoubleVector()
------------------------------------------------------------------------
[INTERNAL] 
Convert to vector of doubles.

";

%feature("docstring") casadi::GenericType::toInt "

Convert to int.

";

%feature("docstring") casadi::GenericType::repr "

Print a representation of the object.

";

%feature("docstring") casadi::GenericType::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::GenericType::toBool "

Convert to boolean.

";

%feature("docstring") casadi::GenericType::isFunction "

Is a shared object?

";

%feature("docstring") casadi::GenericType::is_a "[INTERNAL]  Check if it is
of a certain type (implementation in generic_type_internal.hpp)

";

%feature("docstring") casadi::GenericType::GenericType "

>  casadi::GenericType::GenericType(void *ptr)
------------------------------------------------------------------------
[INTERNAL]

>  casadi::GenericType::GenericType(const DerivativeGenerator &c)
------------------------------------------------------------------------

Creator functions.

";

%feature("docstring") casadi::GenericType::toString "

Convert to string.

";

%feature("docstring") casadi::GenericType::isStringVector "

Is a vector of strings.

";

%feature("docstring") casadi::GenericType::toVoidPointer "

Convert to void pointer.

";

%feature("docstring") casadi::GenericType::isIntVector "

Is a vector of ints?

";

%feature("docstring") casadi::GenericType::toIntVector "

>  const std::vector<int>& casadi::GenericType::toIntVector() const 
------------------------------------------------------------------------

Convert to vector of ints.

>  std::vector<int>& casadi::GenericType::toIntVector()
------------------------------------------------------------------------
[INTERNAL] 
Convert to vector of ints.

";

%feature("docstring") casadi::GenericType::toDouble "

Convert to double.

";

%feature("docstring") casadi::GenericType::toDictionary "

>  const Dictionary& casadi::GenericType::toDictionary() const 
------------------------------------------------------------------------

Convert to Dictionary.

>  Dictionary& casadi::GenericType::toDictionary()
------------------------------------------------------------------------
[INTERNAL] 
Convert to Dictionary.

";

%feature("docstring") casadi::GenericType::get_description "

Get a description of the object's type.

";


// File: classcasadi_1_1GetNonzeros.xml


// File: classcasadi_1_1GetNonzerosSlice.xml


// File: classcasadi_1_1GetNonzerosSlice2.xml


// File: classcasadi_1_1GetNonzerosVector.xml


// File: classcasadi_1_1GradFInputIOSchemeVector.xml
%feature("docstring") casadi::GradFInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::GradFInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::GradFInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::GradFInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::GradFInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::GradFInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::GradFInputIOSchemeVector "[INTERNAL]  Helper
function for 'GradFInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::GradFInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
casadi::GradFInputIOSchemeVector::GradFInputIOSchemeVector "[INTERNAL] ";


// File: classcasadi_1_1GradFOutputIOSchemeVector.xml
%feature("docstring") casadi::GradFOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::GradFOutputIOSchemeVector "[INTERNAL]  Helper
function for 'GradFOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::GradFOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::GradFOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::GradFOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::GradFOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring")
casadi::GradFOutputIOSchemeVector::GradFOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::GradFOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::GradFOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";


// File: classcasadi_1_1HessLagInputIOSchemeVector.xml
%feature("docstring") casadi::HessLagInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::HessLagInputIOSchemeVector "[INTERNAL]
Helper function for 'HessLagInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::HessLagInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::HessLagInputIOSchemeVector::HessLagInputIOSchemeVector "[INTERNAL]
";

%feature("docstring") casadi::HessLagInputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::HessLagInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::HessLagInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::HessLagInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::HessLagInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";


// File: classcasadi_1_1HessLagOutputIOSchemeVector.xml
%feature("docstring") casadi::HessLagOutputIOSchemeVector "[INTERNAL]
Helper function for 'HessLagOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::HessLagOutputIOSchemeVector::HessLagOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classcasadi_1_1HNLPInputIOSchemeVector.xml
%feature("docstring") casadi::HNLPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::HNLPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::HNLPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::HNLPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::HNLPInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::HNLPInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::HNLPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::HNLPInputIOSchemeVector "[INTERNAL]  Helper
function for 'HNLPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::HNLPInputIOSchemeVector::HNLPInputIOSchemeVector "[INTERNAL] ";


// File: classcasadi_1_1HomotopyNlpSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::HomotopyNlpSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::HomotopyNlpSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::HomotopyNlpSolver::HomotopyNlpSolver "

Default constructor.

";

%feature("docstring") casadi::HomotopyNlpSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::HomotopyNlpSolver::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::HomotopyNlpSolver::checkFwdSeed "[INTERNAL]
Check forward mode seeds dimensions.

";

%feature("docstring") casadi::HomotopyNlpSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::HomotopyNlpSolver::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::HomotopyNlpSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::HomotopyNlpSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::HomotopyNlpSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::HomotopyNlpSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::HomotopyNlpSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::HomotopyNlpSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::HomotopyNlpSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::HomotopyNlpSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::HomotopyNlpSolver::checkArg "[INTERNAL]
Check if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::HomotopyNlpSolver::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::HomotopyNlpSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::HomotopyNlpSolver::matchingRes "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::HomotopyNlpSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::HomotopyNlpSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::HomotopyNlpSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::HomotopyNlpSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::HomotopyNlpSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::HomotopyNlpSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::HomotopyNlpSolver::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::HomotopyNlpSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::HomotopyNlpSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::HomotopyNlpSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::HomotopyNlpSolver::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::HomotopyNlpSolver::matchingFwdSeed "[INTERNAL]  Check if there are 0-by-0 forward seeds that needs to be
replaced.

";

%feature("docstring") casadi::HomotopyNlpSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::HomotopyNlpSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::HomotopyNlpSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::HomotopyNlpSolver::matchingArg "[INTERNAL]
Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::HomotopyNlpSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::HomotopyNlpSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::HomotopyNlpSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::HomotopyNlpSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::HomotopyNlpSolver::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::HomotopyNlpSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::HomotopyNlpSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::HomotopyNlpSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::HomotopyNlpSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::HomotopyNlpSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::HomotopyNlpSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::HomotopyNlpSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::HomotopyNlpSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::HomotopyNlpSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::HomotopyNlpSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::HomotopyNlpSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::HomotopyNlpSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::HomotopyNlpSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::HomotopyNlpSolver::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

";

%feature("docstring") casadi::HomotopyNlpSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::HomotopyNlpSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::HomotopyNlpSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::HomotopyNlpSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::HomotopyNlpSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::HomotopyNlpSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::HomotopyNlpSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::HomotopyNlpSolver::getOption "

get an option value

";

%feature("docstring") casadi::HomotopyNlpSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::HomotopyNlpSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::HomotopyNlpSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::HomotopyNlpSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::HomotopyNlpSolver::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::HomotopyNlpSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::HomotopyNlpSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::HomotopyNlpSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::HomotopyNlpSolver::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::HomotopyNlpSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::HomotopyNlpSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::HomotopyNlpSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::HomotopyNlpSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::HomotopyNlpSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::HomotopyNlpSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::HomotopyNlpSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::HomotopyNlpSolver::checkAdjSeed "[INTERNAL]
Check reverse mode seeds dimensions.

";

%feature("docstring") casadi::HomotopyNlpSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::HomotopyNlpSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::HomotopyNlpSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::HomotopyNlpSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::HomotopyNlpSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::HomotopyNlpSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::HomotopyNlpSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::HomotopyNlpSolver "

Base class for Homotopy NLP Solvers.

Solves the following parametric nonlinear program (NLP):

::

  min          F(x, p, tau)
   x
  
  subject to
              LBX <=   x    <= UBX
              LBG <= G(x, p) <= UBG
                         p  == P
  
      nx: number of decision variables
      ng: number of constraints
      np: number of parameters
  



In a homotopy from tau = 0 to tau = 1.

General information
===================



>Input scheme: casadi::NlpSolverInput (NLP_SOLVER_NUM_IN = 8) [nlpSolverIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NlpSolverOutput (NLP_SOLVER_NUM_OUT = 6) [nlpSolverOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | casadi::Homo |
|              |              |              | NLP function | topyNLPInter |
|              |              |              | in terms of  | nal          |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- simple

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
HomotopyNlpSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

simple
------



>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| nlp_solver      | OT_STRING       | GenericType()   | The NLP solver  |
|                 |                 |                 | to be used by   |
|                 |                 |                 | the Homotopy    |
|                 |                 |                 | solver          |
+-----------------+-----------------+-----------------+-----------------+
| nlp_solver_opti | OT_DICTIONARY   | GenericType()   | Options to be   |
| ons             |                 |                 | passed to the   |
|                 |                 |                 | Homotopy solver |
+-----------------+-----------------+-----------------+-----------------+
| num_steps       | OT_INTEGER      | 10              | Take this many  |
|                 |                 |                 | steps to go     |
|                 |                 |                 | from tau=0 to   |
|                 |                 |                 | tau=1.          |
+-----------------+-----------------+-----------------+-----------------+

--------------------------------------------------------------------------------



Joris Gillis
Diagrams
--------



C++ includes: homotopy_nlp_solver.hpp ";

%feature("docstring") casadi::HomotopyNlpSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::HomotopyNlpSolver::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::HomotopyNlpSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::HomotopyNlpSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::HomotopyNlpSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::HomotopyNlpSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::HomotopyNlpSolver::matchingAdjSeed "[INTERNAL]  Check if there are 0-by-0 reverse seeds that needs to be
replaced.

";

%feature("docstring") casadi::HomotopyNlpSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::HomotopyNlpSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::HomotopyNlpSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::HomotopyNlpSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::HomotopyNlpSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::HomotopyNlpSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::HomotopyNlpSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::HomotopyNlpSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::HomotopyNlpSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::HomotopyNlpSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::HomotopyNlpSolver::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::HomotopyNlpSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::HomotopyNlpSolver::checkRes "[INTERNAL]
Check if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::HomotopyNlpSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";


// File: classcasadi_1_1Horzcat.xml


// File: classcasadi_1_1Horzsplit.xml


// File: classcasadi_1_1ImplicitFixedStepIntegrator.xml


// File: classcasadi_1_1ImplicitFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::ImplicitFunction::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::ImplicitFunction::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::ImplicitFunction::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::ImplicitFunction::hasOption "

check if there is an option str

";

%feature("docstring") casadi::ImplicitFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::ImplicitFunction::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::ImplicitFunction::checkFwdSeed "[INTERNAL]
Check forward mode seeds dimensions.

";

%feature("docstring") casadi::ImplicitFunction::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::ImplicitFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::ImplicitFunction::matchingArg "[INTERNAL]
Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::ImplicitFunction::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::ImplicitFunction::getOption "

get an option value

";

%feature("docstring") casadi::ImplicitFunction::checkArg "[INTERNAL]  Check
if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::ImplicitFunction::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::ImplicitFunction::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::ImplicitFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::ImplicitFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::ImplicitFunction::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::ImplicitFunction::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::ImplicitFunction::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ImplicitFunction::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::ImplicitFunction::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::ImplicitFunction::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::ImplicitFunction::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::ImplicitFunction::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::ImplicitFunction::ImplicitFunction "

>  casadi::ImplicitFunction::ImplicitFunction()
------------------------------------------------------------------------

Default constructor.

>  casadi::ImplicitFunction::ImplicitFunction(const std::string &name, const Function &f, const Function &jac=Function(), const LinearSolver &linsol=LinearSolver())
------------------------------------------------------------------------

Create an implicit function solver.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- kinsol

- nlp

- newton

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
ImplicitFunction.doc(\"myextraplugin\")

f:   Function mapping from (n+1) inputs to 1 output

";

%feature("docstring") casadi::ImplicitFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::ImplicitFunction::checkRes "[INTERNAL]  Check
if output arguments have correct length and dimensions.

";

%feature("docstring") casadi::ImplicitFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::ImplicitFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::ImplicitFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ImplicitFunction::print "

Print a description of the object.

";

%feature("docstring") casadi::ImplicitFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::ImplicitFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::ImplicitFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::ImplicitFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::ImplicitFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::ImplicitFunction::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::ImplicitFunction::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ImplicitFunction "

Abstract base class for the implicit function classes.

The equation:

F(z, x1, x2, ..., xn) == 0

where d_F/dz is invertible, implicitly defines the equation:

z := G(x1, x2, ..., xn)

F should be an Function mapping from (n+1) inputs to m outputs. The first
output is the residual that should be zero.

ImplicitFunction (G) is an Function mapping from n inputs to m outputs. n
may be zero. The first output is the solved for z.

You can provide an initial guess for z by setting output(0) of
ImplicitFunction.

General information
===================



>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| constraints  | OT_INTEGERVE | GenericType( | Constrain    | casadi::Impl |
|              | CTOR         | )            | the          | icitFunction |
|              |              |              | unknowns. 0  | Internal     |
|              |              |              | (default):   |              |
|              |              |              | no           |              |
|              |              |              | constraint   |              |
|              |              |              | on ui, 1: ui |              |
|              |              |              | >= 0.0, -1:  |              |
|              |              |              | ui <= 0.0,   |              |
|              |              |              | 2: ui > 0.0, |              |
|              |              |              | -2: ui <     |              |
|              |              |              | 0.0.         |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_inp | OT_INTEGER   | 0            | Index of the | casadi::Impl |
| ut           |              |              | input that   | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_out | OT_INTEGER   | 0            | Index of the | casadi::Impl |
| put          |              |              | output that  | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| jacobian_fun | OT_FUNCTION  | GenericType( | Function     | casadi::Impl |
| ction        |              | )            | object for   | icitFunction |
|              |              |              | calculating  | Internal     |
|              |              |              | the Jacobian |              |
|              |              |              | (autogenerat |              |
|              |              |              | ed by        |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | \"csparse\"    | User-defined | casadi::Impl |
| r            |              |              | linear       | icitFunction |
|              |              |              | solver       | Internal     |
|              |              |              | class.       |              |
|              |              |              | Needed for s |              |
|              |              |              | ensitivities |              |
|              |              |              | .            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_FUNCTION  | GenericType( | Function     | casadi::Impl |
| r_function   |              | )            | object for   | icitFunction |
|              |              |              | solving the  | Internal     |
|              |              |              | linearized   |              |
|              |              |              | problem (aut |              |
|              |              |              | ogenerated   |              |
|              |              |              | by default)  |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | casadi::Impl |
| r_options    | Y            | )            | be passed to | icitFunction |
|              |              |              | the linear   | Internal     |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- kinsol

- nlp

- newton

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
ImplicitFunction.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

kinsol
------



KINSOL interface from the Sundials suite

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| abstol          | OT_REAL         | 0.000           | Stopping        |
|                 |                 |                 | criterion       |
|                 |                 |                 | tolerance       |
+-----------------+-----------------+-----------------+-----------------+
| disable_interna | OT_BOOLEAN      | false           | Disable KINSOL  |
| l_warnings      |                 |                 | internal        |
|                 |                 |                 | warning         |
|                 |                 |                 | messages        |
+-----------------+-----------------+-----------------+-----------------+
| exact_jacobian  | OT_BOOLEAN      | true            |                 |
+-----------------+-----------------+-----------------+-----------------+
| f_scale         | OT_REALVECTOR   |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| iterative_solve | OT_STRING       | \"gmres\"         | gmres|bcgstab|t |
| r               |                 |                 | fqmr            |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver_t | OT_STRING       | \"dense\"         | dense|banded|it |
| ype             |                 |                 | erative|user_de |
|                 |                 |                 | fined           |
+-----------------+-----------------+-----------------+-----------------+
| lower_bandwidth | OT_INTEGER      |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| max_iter        | OT_INTEGER      | 0               | Maximum number  |
|                 |                 |                 | of Newton       |
|                 |                 |                 | iterations.     |
|                 |                 |                 | Putting 0 sets  |
|                 |                 |                 | the default     |
|                 |                 |                 | value of        |
|                 |                 |                 | KinSol.         |
+-----------------+-----------------+-----------------+-----------------+
| max_krylov      | OT_INTEGER      | 0               |                 |
+-----------------+-----------------+-----------------+-----------------+
| pretype         | OT_STRING       | \"none\"          | (none|left|righ |
|                 |                 |                 | t|both)         |
+-----------------+-----------------+-----------------+-----------------+
| strategy        | OT_STRING       | \"none\"          | Globalization   |
|                 |                 |                 | strategy (none| |
|                 |                 |                 | linesearch)     |
+-----------------+-----------------+-----------------+-----------------+
| u_scale         | OT_REALVECTOR   |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| upper_bandwidth | OT_INTEGER      |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| use_preconditio | OT_BOOLEAN      | false           | precondition an |
| ner             |                 |                 | iterative       |
|                 |                 |                 | solver          |
+-----------------+-----------------+-----------------+-----------------+

>List of available monitors

+-----------+
|    Id     |
+===========+
| eval_djac |
+-----------+
| eval_f    |
+-----------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

nlp
---



Use an NlpSolver as ImplicitFunction solver

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

>List of available stats

+--------------+
|      Id      |
+==============+
| solver_stats |
+--------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

newton
------



Implements simple newton iterations to solve an implicit function.

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| abstol          | OT_REAL         | 0.000           | Stopping        |
|                 |                 |                 | criterion       |
|                 |                 |                 | tolerance on    |
|                 |                 |                 | max(|F|)        |
+-----------------+-----------------+-----------------+-----------------+
| abstolStep      | OT_REAL         | 0.000           | Stopping        |
|                 |                 |                 | criterion       |
|                 |                 |                 | tolerance on    |
|                 |                 |                 | step size       |
+-----------------+-----------------+-----------------+-----------------+
| max_iter        | OT_INTEGER      | 1000            | Maximum number  |
|                 |                 |                 | of Newton       |
|                 |                 |                 | iterations to   |
|                 |                 |                 | perform before  |
|                 |                 |                 | returning.      |
+-----------------+-----------------+-----------------+-----------------+
| print_iteration | OT_BOOLEAN      | false           | Print           |
|                 |                 |                 | information     |
|                 |                 |                 | about each      |
|                 |                 |                 | iteration       |
+-----------------+-----------------+-----------------+-----------------+

>List of available monitors

+----------+
|    Id    |
+==========+
| F        |
+----------+
| J        |
+----------+
| normF    |
+----------+
| step     |
+----------+
| stepsize |
+----------+

>List of available stats

+---------------+
|      Id       |
+===============+
| iter          |
+---------------+
| return_status |
+---------------+

--------------------------------------------------------------------------------



Joel Andersson
Diagrams
--------



C++ includes: implicit_function.hpp ";

%feature("docstring") casadi::ImplicitFunction::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::ImplicitFunction::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::ImplicitFunction::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::ImplicitFunction::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::ImplicitFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::ImplicitFunction::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::ImplicitFunction::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::ImplicitFunction::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::ImplicitFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::ImplicitFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::ImplicitFunction::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::ImplicitFunction::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::ImplicitFunction::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::ImplicitFunction::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::ImplicitFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ImplicitFunction::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::ImplicitFunction::repr "

Print a representation of the object.

";

%feature("docstring") casadi::ImplicitFunction::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::ImplicitFunction::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::ImplicitFunction::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::ImplicitFunction::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::ImplicitFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::ImplicitFunction::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::ImplicitFunction::getLinsol "

Access linear solver.

";

%feature("docstring") casadi::ImplicitFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::ImplicitFunction::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::ImplicitFunction::isInit "

Is initialized?

";

%feature("docstring") casadi::ImplicitFunction::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::ImplicitFunction::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::ImplicitFunction::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::ImplicitFunction::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::ImplicitFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::ImplicitFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::ImplicitFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::ImplicitFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::ImplicitFunction::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::ImplicitFunction::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::ImplicitFunction::getF "

Access F.

";

%feature("docstring") casadi::ImplicitFunction::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

";

%feature("docstring") casadi::ImplicitFunction::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::ImplicitFunction::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::ImplicitFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::ImplicitFunction::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::ImplicitFunction::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::ImplicitFunction::evaluate "

Evaluate.

";

%feature("docstring") casadi::ImplicitFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::ImplicitFunction::isNull "

Is a null pointer?

";

%feature("docstring") casadi::ImplicitFunction::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::ImplicitFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::ImplicitFunction::getJac "

Access Jacobian.

";

%feature("docstring") casadi::ImplicitFunction::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::ImplicitFunction::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::ImplicitFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::ImplicitFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::ImplicitFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::ImplicitFunction::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::ImplicitFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::ImplicitFunction::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::ImplicitFunction::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::ImplicitFunction::matchingRes "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::ImplicitFunction::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ImplicitFunction::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::ImplicitFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::ImplicitFunction::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::ImplicitFunction::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::ImplicitFunction::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::ImplicitFunction::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::ImplicitFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::ImplicitFunction::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::ImplicitFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::ImplicitFunction::checkAdjSeed "[INTERNAL]
Check reverse mode seeds dimensions.

";

%feature("docstring") casadi::ImplicitFunction::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";


// File: classcasadi_1_1InfSX.xml


// File: classcasadi_1_1InnerProd.xml


// File: classcasadi_1_1IntegerSX.xml


// File: classcasadi_1_1Integrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring") casadi::Integrator::swap
" [INTERNAL]  Swap content with another instance.

";

%feature("docstring") casadi::Integrator::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Integrator::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::Integrator::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::Integrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::Integrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::Integrator::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Integrator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::Integrator::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::Integrator::hasOption "

check if there is an option str

";

%feature("docstring") casadi::Integrator::clone "

Clone.

";

%feature("docstring") casadi::Integrator::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::Integrator::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::Integrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Integrator::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::Integrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::Integrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::Integrator::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::Integrator::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::Integrator::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Integrator::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Integrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::Integrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Integrator::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Integrator::resetB "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring") casadi::Integrator::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Integrator::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::Integrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Integrator::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Integrator::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Integrator::getDAE "

Get the DAE.

";

%feature("docstring") casadi::Integrator::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::Integrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::Integrator::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::Integrator::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Integrator::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Integrator::getOption "

get an option value

";

%feature("docstring") casadi::Integrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Integrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Integrator::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::Integrator::Integrator "

>  casadi::Integrator::Integrator()
------------------------------------------------------------------------

Default constructor.

>  casadi::Integrator::Integrator(const std::string &name, const Function &f, const Function &g=Function())
------------------------------------------------------------------------

Integrator factory.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- cvodes

- idas

- collocation

- oldcollocation

- rk

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Integrator.doc(\"myextraplugin\")

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 4) [daeIn]

+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 3) [daeOut]

+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

g:  backwards system

>Input scheme: casadi::RDAEInput (RDAE_NUM_IN = 7) [rdaeIn]

+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: casadi::RDAEOutput (RDAE_NUM_OUT = 3) [rdaeOut]

+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring") casadi::Integrator::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Integrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::Integrator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Integrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::Integrator::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::Integrator::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Integrator::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::Integrator::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::Integrator "

Base class for integrators.

Integrator abstract base class

Solves an initial value problem (IVP) coupled to a terminal value problem
with differential equation given as an implicit ODE coupled to an algebraic
equation and a set of quadratures:

::

   Initial conditions at t=t0
   x(t0)  = x0
   q(t0)  = 0
  
   Forward integration from t=t0 to t=tf
   der(x) = function(x, z, p, t)                  Forward ODE
   0 = fz(x, z, p, t)                  Forward algebraic equations
   der(q) = fq(x, z, p, t)                  Forward quadratures
  
   Terminal conditions at t=tf
   rx(tf)  = rx0
   rq(tf)  = 0
  
   Backward integration from t=tf to t=t0
   der(rx) = gx(rx, rz, rp, x, z, p, t)        Backward ODE
   0 = gz(rx, rz, rp, x, z, p, t)        Backward algebraic equations
   der(rq) = gq(rx, rz, rp, x, z, p, t)        Backward quadratures
  
   where we assume that both the forward and backwards integrations are index-1
   (i.e. dfz/dz, dgz/drz are invertible) and furthermore that
   gx, gz and gq have a linear dependency on rx, rz and rp.



The Integrator class provides some additional functionality, such as getting
the value of the state and/or sensitivities at certain time points.

General information
===================



>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 6) [integratorIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 6) [integratorOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | casadi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | casadi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | casadi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | casadi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | casadi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- cvodes

- idas

- collocation

- oldcollocation

- rk

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Integrator.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

cvodes
------



Interface to CVodes from the Sundials suite.

A call to evaluate will integrate to the end.

You can retrieve the entire state trajectory as follows, after the evaluate
call: Call reset. Then call integrate(t_i) and getOuput for a series of
times t_i.

Note: depending on the dimension and structure of your problem, you may
experience a dramatic speed-up by using a sparse linear solver:



::

     intg.setOption(\"linear_solver\",\"csparse\")
     intg.setOption(\"linear_solver_type\",\"user_defined\")



>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| abstol          | OT_REAL         | 0.000           | Absolute        |
|                 |                 |                 | tolerence for   |
|                 |                 |                 | the IVP         |
|                 |                 |                 | solution        |
+-----------------+-----------------+-----------------+-----------------+
| abstolB         | OT_REAL         | GenericType()   | Absolute        |
|                 |                 |                 | tolerence for   |
|                 |                 |                 | the adjoint     |
|                 |                 |                 | sensitivity     |
|                 |                 |                 | solution        |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to abstol]      |
+-----------------+-----------------+-----------------+-----------------+
| disable_interna | OT_BOOLEAN      | false           | Disable CVodes  |
| l_warnings      |                 |                 | internal        |
|                 |                 |                 | warning         |
|                 |                 |                 | messages        |
+-----------------+-----------------+-----------------+-----------------+
| exact_jacobian  | OT_BOOLEAN      | true            | Use exact       |
|                 |                 |                 | Jacobian        |
|                 |                 |                 | information for |
|                 |                 |                 | the forward     |
|                 |                 |                 | integration     |
+-----------------+-----------------+-----------------+-----------------+
| exact_jacobianB | OT_BOOLEAN      | GenericType()   | Use exact       |
|                 |                 |                 | Jacobian        |
|                 |                 |                 | information for |
|                 |                 |                 | the backward    |
|                 |                 |                 | integration     |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to              |
|                 |                 |                 | exact_jacobian] |
+-----------------+-----------------+-----------------+-----------------+
| finite_differen | OT_BOOLEAN      | false           | Use finite      |
| ce_fsens        |                 |                 | differences to  |
|                 |                 |                 | approximate the |
|                 |                 |                 | forward         |
|                 |                 |                 | sensitivity     |
|                 |                 |                 | equations (if   |
|                 |                 |                 | AD is not       |
|                 |                 |                 | available)      |
+-----------------+-----------------+-----------------+-----------------+
| fsens_abstol    | OT_REAL         | GenericType()   | Absolute        |
|                 |                 |                 | tolerence for   |
|                 |                 |                 | the forward     |
|                 |                 |                 | sensitivity     |
|                 |                 |                 | solution        |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to abstol]      |
+-----------------+-----------------+-----------------+-----------------+
| fsens_all_at_on | OT_BOOLEAN      | true            | Calculate all   |
| ce              |                 |                 | right hand      |
|                 |                 |                 | sides of the    |
|                 |                 |                 | sensitivity     |
|                 |                 |                 | equations at    |
|                 |                 |                 | once            |
+-----------------+-----------------+-----------------+-----------------+
| fsens_err_con   | OT_BOOLEAN      | true            | include the     |
|                 |                 |                 | forward         |
|                 |                 |                 | sensitivities   |
|                 |                 |                 | in all error    |
|                 |                 |                 | controls        |
+-----------------+-----------------+-----------------+-----------------+
| fsens_reltol    | OT_REAL         | GenericType()   | Relative        |
|                 |                 |                 | tolerence for   |
|                 |                 |                 | the forward     |
|                 |                 |                 | sensitivity     |
|                 |                 |                 | solution        |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to reltol]      |
+-----------------+-----------------+-----------------+-----------------+
| fsens_scaling_f | OT_REALVECTOR   | GenericType()   | Scaling factor  |
| actors          |                 |                 | for the         |
|                 |                 |                 | components if   |
|                 |                 |                 | finite          |
|                 |                 |                 | differences is  |
|                 |                 |                 | used            |
+-----------------+-----------------+-----------------+-----------------+
| fsens_sensitivi | OT_INTEGERVECTO | GenericType()   | Specifies which |
| y_parameters    | R               |                 | components will |
|                 |                 |                 | be used when    |
|                 |                 |                 | estimating the  |
|                 |                 |                 | sensitivity     |
|                 |                 |                 | equations       |
+-----------------+-----------------+-----------------+-----------------+
| interpolation_t | OT_STRING       | \"hermite\"       | Type of         |
| ype             |                 |                 | interpolation   |
|                 |                 |                 | for the adjoint |
|                 |                 |                 | sensitivities ( |
|                 |                 |                 | hermite|polynom |
|                 |                 |                 | ial)            |
+-----------------+-----------------+-----------------+-----------------+
| iterative_solve | OT_STRING       | \"gmres\"         | (gmres|bcgstab| |
| r               |                 |                 | tfqmr)          |
+-----------------+-----------------+-----------------+-----------------+
| iterative_solve | OT_STRING       | GenericType()   | (gmres|bcgstab| |
| rB              |                 |                 | tfqmr)          |
+-----------------+-----------------+-----------------+-----------------+
| linear_multiste | OT_STRING       | \"bdf\"           | Integrator      |
| p_method        |                 |                 | scheme          |
|                 |                 |                 | (bdf|adams)     |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver   | OT_STRING       | GenericType()   | A custom linear |
|                 |                 |                 | solver creator  |
|                 |                 |                 | function        |
+-----------------+-----------------+-----------------+-----------------+
| linear_solverB  | OT_STRING       | GenericType()   | A custom linear |
|                 |                 |                 | solver creator  |
|                 |                 |                 | function for    |
|                 |                 |                 | backwards       |
|                 |                 |                 | integration     |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to              |
|                 |                 |                 | linear_solver]  |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver_o | OT_DICTIONARY   | GenericType()   | Options to be   |
| ptions          |                 |                 | passed to the   |
|                 |                 |                 | linear solver   |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver_o | OT_DICTIONARY   | GenericType()   | Options to be   |
| ptionsB         |                 |                 | passed to the   |
|                 |                 |                 | linear solver   |
|                 |                 |                 | for backwards   |
|                 |                 |                 | integration     |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to linear_solve |
|                 |                 |                 | r_options]      |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver_t | OT_STRING       | \"dense\"         | (user_defined|d |
| ype             |                 |                 | ense|banded|ite |
|                 |                 |                 | rative)         |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver_t | OT_STRING       | GenericType()   | (user_defined|d |
| ypeB            |                 |                 | ense|banded|ite |
|                 |                 |                 | rative)         |
+-----------------+-----------------+-----------------+-----------------+
| lower_bandwidth | OT_INTEGER      | GenericType()   | Lower band-     |
|                 |                 |                 | width of banded |
|                 |                 |                 | Jacobian        |
|                 |                 |                 | (estimations)   |
+-----------------+-----------------+-----------------+-----------------+
| lower_bandwidth | OT_INTEGER      | GenericType()   | lower band-     |
| B               |                 |                 | width of banded |
|                 |                 |                 | jacobians for   |
|                 |                 |                 | backward        |
|                 |                 |                 | integration     |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to lower_bandwi |
|                 |                 |                 | dth]            |
+-----------------+-----------------+-----------------+-----------------+
| max_krylov      | OT_INTEGER      | 10              | Maximum Krylov  |
|                 |                 |                 | subspace size   |
+-----------------+-----------------+-----------------+-----------------+
| max_krylovB     | OT_INTEGER      | GenericType()   | Maximum krylov  |
|                 |                 |                 | subspace size   |
+-----------------+-----------------+-----------------+-----------------+
| max_multistep_o | OT_INTEGER      | 5               |                 |
| rder            |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| max_num_steps   | OT_INTEGER      | 10000           | Maximum number  |
|                 |                 |                 | of integrator   |
|                 |                 |                 | steps           |
+-----------------+-----------------+-----------------+-----------------+
| nonlinear_solve | OT_STRING       | \"newton\"        | (newton|functio |
| r_iteration     |                 |                 | nal)            |
+-----------------+-----------------+-----------------+-----------------+
| pretype         | OT_STRING       | \"none\"          | (none|left|righ |
|                 |                 |                 | t|both)         |
+-----------------+-----------------+-----------------+-----------------+
| pretypeB        | OT_STRING       | GenericType()   | (none|left|righ |
|                 |                 |                 | t|both)         |
+-----------------+-----------------+-----------------+-----------------+
| quad_err_con    | OT_BOOLEAN      | false           | Should the      |
|                 |                 |                 | quadratures     |
|                 |                 |                 | affect the step |
|                 |                 |                 | size control    |
+-----------------+-----------------+-----------------+-----------------+
| reltol          | OT_REAL         | 0.000           | Relative        |
|                 |                 |                 | tolerence for   |
|                 |                 |                 | the IVP         |
|                 |                 |                 | solution        |
+-----------------+-----------------+-----------------+-----------------+
| reltolB         | OT_REAL         | GenericType()   | Relative        |
|                 |                 |                 | tolerence for   |
|                 |                 |                 | the adjoint     |
|                 |                 |                 | sensitivity     |
|                 |                 |                 | solution        |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to reltol]      |
+-----------------+-----------------+-----------------+-----------------+
| sensitivity_met | OT_STRING       | \"simultaneous\"  | (simultaneous|s |
| hod             |                 |                 | taggered)       |
+-----------------+-----------------+-----------------+-----------------+
| steps_per_check | OT_INTEGER      | 20              | Number of steps |
| point           |                 |                 | between two     |
|                 |                 |                 | consecutive     |
|                 |                 |                 | checkpoints     |
+-----------------+-----------------+-----------------+-----------------+
| stop_at_end     | OT_BOOLEAN      | true            | Stop the        |
|                 |                 |                 | integrator at   |
|                 |                 |                 | the end of the  |
|                 |                 |                 | interval        |
+-----------------+-----------------+-----------------+-----------------+
| upper_bandwidth | OT_INTEGER      | GenericType()   | Upper band-     |
|                 |                 |                 | width of banded |
|                 |                 |                 | Jacobian        |
|                 |                 |                 | (estimations)   |
+-----------------+-----------------+-----------------+-----------------+
| upper_bandwidth | OT_INTEGER      | GenericType()   | Upper band-     |
| B               |                 |                 | width of banded |
|                 |                 |                 | jacobians for   |
|                 |                 |                 | backward        |
|                 |                 |                 | integration     |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to upper_bandwi |
|                 |                 |                 | dth]            |
+-----------------+-----------------+-----------------+-----------------+
| use_preconditio | OT_BOOLEAN      | false           | Precondition an |
| ner             |                 |                 | iterative       |
|                 |                 |                 | solver          |
+-----------------+-----------------+-----------------+-----------------+
| use_preconditio | OT_BOOLEAN      | GenericType()   | Precondition an |
| nerB            |                 |                 | iterative       |
|                 |                 |                 | solver for the  |
|                 |                 |                 | backwards       |
|                 |                 |                 | problem         |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to use_precondi |
|                 |                 |                 | tioner]         |
+-----------------+-----------------+-----------------+-----------------+

>List of available monitors

+---------+
|   Id    |
+=========+
| djacB   |
+---------+
| psetupB |
+---------+
| res     |
+---------+
| resB    |
+---------+
| resQB   |
+---------+
| reset   |
+---------+

>List of available stats

+-------------+
|     Id      |
+=============+
| nlinsetups  |
+-------------+
| nlinsetupsB |
+-------------+
| nsteps      |
+-------------+
| nstepsB     |
+-------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

idas
----



Interface to IDAS from the Sundials suite.

Note: depending on the dimension and structure of your problem, you may
experience a dramatic speed-up by using a sparse linear solver:



::

     intg.setOption(\"linear_solver\",\"csparse\")
     intg.setOption(\"linear_solver_type\",\"user_defined\")



>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| abstol          | OT_REAL         | 0.000           | Absolute        |
|                 |                 |                 | tolerence for   |
|                 |                 |                 | the IVP         |
|                 |                 |                 | solution        |
+-----------------+-----------------+-----------------+-----------------+
| abstolB         | OT_REAL         | GenericType()   | Absolute        |
|                 |                 |                 | tolerence for   |
|                 |                 |                 | the adjoint     |
|                 |                 |                 | sensitivity     |
|                 |                 |                 | solution        |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to abstol]      |
+-----------------+-----------------+-----------------+-----------------+
| abstolv         | OT_REALVECTOR   |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| calc_ic         | OT_BOOLEAN      | true            | Use IDACalcIC   |
|                 |                 |                 | to get          |
|                 |                 |                 | consistent      |
|                 |                 |                 | initial         |
|                 |                 |                 | conditions.     |
+-----------------+-----------------+-----------------+-----------------+
| calc_icB        | OT_BOOLEAN      | GenericType()   | Use IDACalcIC   |
|                 |                 |                 | to get          |
|                 |                 |                 | consistent      |
|                 |                 |                 | initial         |
|                 |                 |                 | conditions for  |
|                 |                 |                 | backwards       |
|                 |                 |                 | system          |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to calc_ic].    |
+-----------------+-----------------+-----------------+-----------------+
| cj_scaling      | OT_BOOLEAN      | false           | IDAS scaling on |
|                 |                 |                 | cj for the      |
|                 |                 |                 | user-defined    |
|                 |                 |                 | linear solver   |
|                 |                 |                 | module          |
+-----------------+-----------------+-----------------+-----------------+
| disable_interna | OT_BOOLEAN      | false           | Disable IDAS    |
| l_warnings      |                 |                 | internal        |
|                 |                 |                 | warning         |
|                 |                 |                 | messages        |
+-----------------+-----------------+-----------------+-----------------+
| exact_jacobian  | OT_BOOLEAN      | true            | Use exact       |
|                 |                 |                 | Jacobian        |
|                 |                 |                 | information for |
|                 |                 |                 | the forward     |
|                 |                 |                 | integration     |
+-----------------+-----------------+-----------------+-----------------+
| exact_jacobianB | OT_BOOLEAN      | GenericType()   | Use exact       |
|                 |                 |                 | Jacobian        |
|                 |                 |                 | information for |
|                 |                 |                 | the backward    |
|                 |                 |                 | integration     |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to              |
|                 |                 |                 | exact_jacobian] |
+-----------------+-----------------+-----------------+-----------------+
| extra_fsens_cal | OT_BOOLEAN      | false           | Call calc ic an |
| c_ic            |                 |                 | extra time,     |
|                 |                 |                 | with fsens=0    |
+-----------------+-----------------+-----------------+-----------------+
| finite_differen | OT_BOOLEAN      | false           | Use finite      |
| ce_fsens        |                 |                 | differences to  |
|                 |                 |                 | approximate the |
|                 |                 |                 | forward         |
|                 |                 |                 | sensitivity     |
|                 |                 |                 | equations (if   |
|                 |                 |                 | AD is not       |
|                 |                 |                 | available)      |
+-----------------+-----------------+-----------------+-----------------+
| first_time      | OT_REAL         | GenericType()   | First requested |
|                 |                 |                 | time as a       |
|                 |                 |                 | fraction of the |
|                 |                 |                 | time interval   |
+-----------------+-----------------+-----------------+-----------------+
| fsens_abstol    | OT_REAL         | GenericType()   | Absolute        |
|                 |                 |                 | tolerence for   |
|                 |                 |                 | the forward     |
|                 |                 |                 | sensitivity     |
|                 |                 |                 | solution        |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to abstol]      |
+-----------------+-----------------+-----------------+-----------------+
| fsens_abstolv   | OT_REALVECTOR   |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| fsens_err_con   | OT_BOOLEAN      | true            | include the     |
|                 |                 |                 | forward         |
|                 |                 |                 | sensitivities   |
|                 |                 |                 | in all error    |
|                 |                 |                 | controls        |
+-----------------+-----------------+-----------------+-----------------+
| fsens_reltol    | OT_REAL         | GenericType()   | Relative        |
|                 |                 |                 | tolerence for   |
|                 |                 |                 | the forward     |
|                 |                 |                 | sensitivity     |
|                 |                 |                 | solution        |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to reltol]      |
+-----------------+-----------------+-----------------+-----------------+
| fsens_scaling_f | OT_REALVECTOR   | GenericType()   | Scaling factor  |
| actors          |                 |                 | for the         |
|                 |                 |                 | components if   |
|                 |                 |                 | finite          |
|                 |                 |                 | differences is  |
|                 |                 |                 | used            |
+-----------------+-----------------+-----------------+-----------------+
| fsens_sensitivi | OT_INTEGERVECTO | GenericType()   | Specifies which |
| y_parameters    | R               |                 | components will |
|                 |                 |                 | be used when    |
|                 |                 |                 | estimating the  |
|                 |                 |                 | sensitivity     |
|                 |                 |                 | equations       |
+-----------------+-----------------+-----------------+-----------------+
| init_xdot       | OT_REALVECTOR   | GenericType()   | Initial values  |
|                 |                 |                 | for the state   |
|                 |                 |                 | derivatives     |
+-----------------+-----------------+-----------------+-----------------+
| interpolation_t | OT_STRING       | \"hermite\"       | Type of         |
| ype             |                 |                 | interpolation   |
|                 |                 |                 | for the adjoint |
|                 |                 |                 | sensitivities ( |
|                 |                 |                 | hermite|polynom |
|                 |                 |                 | ial)            |
+-----------------+-----------------+-----------------+-----------------+
| iterative_solve | OT_STRING       | \"gmres\"         | (gmres|bcgstab| |
| r               |                 |                 | tfqmr)          |
+-----------------+-----------------+-----------------+-----------------+
| iterative_solve | OT_STRING       | GenericType()   | (gmres|bcgstab| |
| rB              |                 |                 | tfqmr)          |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver   | OT_STRING       | GenericType()   | A custom linear |
|                 |                 |                 | solver creator  |
|                 |                 |                 | function        |
+-----------------+-----------------+-----------------+-----------------+
| linear_solverB  | OT_STRING       | GenericType()   | A custom linear |
|                 |                 |                 | solver creator  |
|                 |                 |                 | function for    |
|                 |                 |                 | backwards       |
|                 |                 |                 | integration     |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to              |
|                 |                 |                 | linear_solver]  |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver_o | OT_DICTIONARY   | GenericType()   | Options to be   |
| ptions          |                 |                 | passed to the   |
|                 |                 |                 | linear solver   |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver_o | OT_DICTIONARY   | GenericType()   | Options to be   |
| ptionsB         |                 |                 | passed to the   |
|                 |                 |                 | linear solver   |
|                 |                 |                 | for backwards   |
|                 |                 |                 | integration     |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to linear_solve |
|                 |                 |                 | r_options]      |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver_t | OT_STRING       | \"dense\"         | (user_defined|d |
| ype             |                 |                 | ense|banded|ite |
|                 |                 |                 | rative)         |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver_t | OT_STRING       | GenericType()   | (user_defined|d |
| ypeB            |                 |                 | ense|banded|ite |
|                 |                 |                 | rative)         |
+-----------------+-----------------+-----------------+-----------------+
| lower_bandwidth | OT_INTEGER      | GenericType()   | Lower band-     |
|                 |                 |                 | width of banded |
|                 |                 |                 | Jacobian        |
|                 |                 |                 | (estimations)   |
+-----------------+-----------------+-----------------+-----------------+
| lower_bandwidth | OT_INTEGER      | GenericType()   | lower band-     |
| B               |                 |                 | width of banded |
|                 |                 |                 | jacobians for   |
|                 |                 |                 | backward        |
|                 |                 |                 | integration     |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to lower_bandwi |
|                 |                 |                 | dth]            |
+-----------------+-----------------+-----------------+-----------------+
| max_krylov      | OT_INTEGER      | 10              | Maximum Krylov  |
|                 |                 |                 | subspace size   |
+-----------------+-----------------+-----------------+-----------------+
| max_krylovB     | OT_INTEGER      | GenericType()   | Maximum krylov  |
|                 |                 |                 | subspace size   |
+-----------------+-----------------+-----------------+-----------------+
| max_multistep_o | OT_INTEGER      | 5               |                 |
| rder            |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| max_num_steps   | OT_INTEGER      | 10000           | Maximum number  |
|                 |                 |                 | of integrator   |
|                 |                 |                 | steps           |
+-----------------+-----------------+-----------------+-----------------+
| max_step_size   | OT_REAL         | 0               | Maximim step    |
|                 |                 |                 | size            |
+-----------------+-----------------+-----------------+-----------------+
| pretype         | OT_STRING       | \"none\"          | (none|left|righ |
|                 |                 |                 | t|both)         |
+-----------------+-----------------+-----------------+-----------------+
| pretypeB        | OT_STRING       | GenericType()   | (none|left|righ |
|                 |                 |                 | t|both)         |
+-----------------+-----------------+-----------------+-----------------+
| quad_err_con    | OT_BOOLEAN      | false           | Should the      |
|                 |                 |                 | quadratures     |
|                 |                 |                 | affect the step |
|                 |                 |                 | size control    |
+-----------------+-----------------+-----------------+-----------------+
| reltol          | OT_REAL         | 0.000           | Relative        |
|                 |                 |                 | tolerence for   |
|                 |                 |                 | the IVP         |
|                 |                 |                 | solution        |
+-----------------+-----------------+-----------------+-----------------+
| reltolB         | OT_REAL         | GenericType()   | Relative        |
|                 |                 |                 | tolerence for   |
|                 |                 |                 | the adjoint     |
|                 |                 |                 | sensitivity     |
|                 |                 |                 | solution        |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to reltol]      |
+-----------------+-----------------+-----------------+-----------------+
| sensitivity_met | OT_STRING       | \"simultaneous\"  | (simultaneous|s |
| hod             |                 |                 | taggered)       |
+-----------------+-----------------+-----------------+-----------------+
| steps_per_check | OT_INTEGER      | 20              | Number of steps |
| point           |                 |                 | between two     |
|                 |                 |                 | consecutive     |
|                 |                 |                 | checkpoints     |
+-----------------+-----------------+-----------------+-----------------+
| stop_at_end     | OT_BOOLEAN      | true            | Stop the        |
|                 |                 |                 | integrator at   |
|                 |                 |                 | the end of the  |
|                 |                 |                 | interval        |
+-----------------+-----------------+-----------------+-----------------+
| suppress_algebr | OT_BOOLEAN      | false           | Suppress        |
| aic             |                 |                 | algebraic       |
|                 |                 |                 | variables in    |
|                 |                 |                 | the error       |
|                 |                 |                 | testing         |
+-----------------+-----------------+-----------------+-----------------+
| upper_bandwidth | OT_INTEGER      | GenericType()   | Upper band-     |
|                 |                 |                 | width of banded |
|                 |                 |                 | Jacobian        |
|                 |                 |                 | (estimations)   |
+-----------------+-----------------+-----------------+-----------------+
| upper_bandwidth | OT_INTEGER      | GenericType()   | Upper band-     |
| B               |                 |                 | width of banded |
|                 |                 |                 | jacobians for   |
|                 |                 |                 | backward        |
|                 |                 |                 | integration     |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to upper_bandwi |
|                 |                 |                 | dth]            |
+-----------------+-----------------+-----------------+-----------------+
| use_preconditio | OT_BOOLEAN      | false           | Precondition an |
| ner             |                 |                 | iterative       |
|                 |                 |                 | solver          |
+-----------------+-----------------+-----------------+-----------------+
| use_preconditio | OT_BOOLEAN      | GenericType()   | Precondition an |
| nerB            |                 |                 | iterative       |
|                 |                 |                 | solver for the  |
|                 |                 |                 | backwards       |
|                 |                 |                 | problem         |
|                 |                 |                 | [default: equal |
|                 |                 |                 | to use_precondi |
|                 |                 |                 | tioner]         |
+-----------------+-----------------+-----------------+-----------------+

>List of available monitors

+--------------------------+
|            Id            |
+==========================+
| bjacB                    |
+--------------------------+
| correctInitialConditions |
+--------------------------+
| jtimesB                  |
+--------------------------+
| psetup                   |
+--------------------------+
| psetupB                  |
+--------------------------+
| psolveB                  |
+--------------------------+
| res                      |
+--------------------------+
| resB                     |
+--------------------------+
| resS                     |
+--------------------------+
| rhsQB                    |
+--------------------------+

>List of available stats

+-------------+
|     Id      |
+=============+
| nlinsetups  |
+-------------+
| nlinsetupsB |
+-------------+
| nsteps      |
+-------------+
| nstepsB     |
+-------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

collocation
-----------



Fixed-step implicit Runge-Kutta integrator ODE/DAE integrator based on
collocation schemes

The method is still under development

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| collocation_sch | OT_STRING       | \"radau\"         | Collocation     |
| eme             |                 |                 | scheme (radau|l |
|                 |                 |                 | egendre)        |
+-----------------+-----------------+-----------------+-----------------+
| implicit_solver | OT_STRING       | GenericType()   | An implicit     |
|                 |                 |                 | function solver |
+-----------------+-----------------+-----------------+-----------------+
| implicit_solver | OT_DICTIONARY   | GenericType()   | Options to be   |
| _options        |                 |                 | passed to the   |
|                 |                 |                 | NLP Solver      |
+-----------------+-----------------+-----------------+-----------------+
| interpolation_o | OT_INTEGER      | 3               | Order of the    |
| rder            |                 |                 | interpolating   |
|                 |                 |                 | polynomials     |
+-----------------+-----------------+-----------------+-----------------+
| number_of_finit | OT_INTEGER      | 20              | Number of       |
| e_elements      |                 |                 | finite elements |
+-----------------+-----------------+-----------------+-----------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

oldcollocation
--------------



Collocation integrator ODE/DAE integrator based on collocation

The method is still under development

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| collocation_sch | OT_STRING       | \"radau\"         | Collocation     |
| eme             |                 |                 | scheme (radau|l |
|                 |                 |                 | egendre)        |
+-----------------+-----------------+-----------------+-----------------+
| expand_f        | OT_BOOLEAN      | false           | Expand the      |
|                 |                 |                 | ODE/DAE         |
|                 |                 |                 | residual        |
|                 |                 |                 | function in an  |
|                 |                 |                 | SX graph        |
+-----------------+-----------------+-----------------+-----------------+
| expand_q        | OT_BOOLEAN      | false           | Expand the      |
|                 |                 |                 | quadrature      |
|                 |                 |                 | function in an  |
|                 |                 |                 | SX graph        |
+-----------------+-----------------+-----------------+-----------------+
| hotstart        | OT_BOOLEAN      | true            | Initialize the  |
|                 |                 |                 | trajectory at   |
|                 |                 |                 | the previous    |
|                 |                 |                 | solution        |
+-----------------+-----------------+-----------------+-----------------+
| implicit_solver | OT_STRING       | GenericType()   | An implicit     |
|                 |                 |                 | function solver |
+-----------------+-----------------+-----------------+-----------------+
| implicit_solver | OT_DICTIONARY   | GenericType()   | Options to be   |
| _options        |                 |                 | passed to the   |
|                 |                 |                 | implicit solver |
+-----------------+-----------------+-----------------+-----------------+
| interpolation_o | OT_INTEGER      | 3               | Order of the    |
| rder            |                 |                 | interpolating   |
|                 |                 |                 | polynomials     |
+-----------------+-----------------+-----------------+-----------------+
| number_of_finit | OT_INTEGER      | 20              | Number of       |
| e_elements      |                 |                 | finite elements |
+-----------------+-----------------+-----------------+-----------------+
| startup_integra | OT_STRING       | GenericType()   | An ODE/DAE      |
| tor             |                 |                 | integrator that |
|                 |                 |                 | can be used to  |
|                 |                 |                 | generate a      |
|                 |                 |                 | startup         |
|                 |                 |                 | trajectory      |
+-----------------+-----------------+-----------------+-----------------+
| startup_integra | OT_DICTIONARY   | GenericType()   | Options to be   |
| tor_options     |                 |                 | passed to the   |
|                 |                 |                 | startup         |
|                 |                 |                 | integrator      |
+-----------------+-----------------+-----------------+-----------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

rk --



Fixed-step explicit Runge-Kutta integrator for ODEs Currently implements
RK4.

The method is still under development

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| number_of_finit | OT_INTEGER      | 20              | Number of       |
| e_elements      |                 |                 | finite elements |
+-----------------+-----------------+-----------------+-----------------+

--------------------------------------------------------------------------------



Joel Andersson
Diagrams
--------



C++ includes: integrator.hpp ";

%feature("docstring") casadi::Integrator::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Integrator::setStopTime "

Set a stop time for the forward integration.

";

%feature("docstring") casadi::Integrator::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::Integrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::Integrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::Integrator::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::Integrator::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::Integrator::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::Integrator::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::Integrator::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Integrator::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::Integrator::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::Integrator::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::Integrator::evaluate "

Evaluate.

";

%feature("docstring") casadi::Integrator::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::Integrator::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Integrator::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Integrator::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Integrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") casadi::Integrator::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Integrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Integrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::Integrator::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Integrator::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::Integrator::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Integrator::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::Integrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Integrator::isInit "

Is initialized?

";

%feature("docstring") casadi::Integrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::Integrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::Integrator::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Integrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Integrator::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::Integrator::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Integrator::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::Integrator::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::Integrator::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::Integrator::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::Integrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::Integrator::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Integrator::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Integrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Integrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") casadi::Integrator::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Integrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::Integrator::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::Integrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::Integrator::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::Integrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") casadi::Integrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Integrator::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::Integrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::Integrator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::Integrator::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::Integrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::Integrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") casadi::Integrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::Integrator::printStats "

Print solver statistics.

";

%feature("docstring") casadi::Integrator::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Integrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Integrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::Integrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::Integrator::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::Integrator::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::Integrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Integrator::print "

Print a description of the object.

";

%feature("docstring") casadi::Integrator::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";


// File: classcasadi_1_1IntegratorInputIOSchemeVector.xml
%feature("docstring") casadi::IntegratorInputIOSchemeVector "[INTERNAL]
Helper function for 'IntegratorInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
casadi::IntegratorInputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::IntegratorInputIOSchemeVector::IntegratorInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::__len__ "[INTERNAL] ";


// File: classcasadi_1_1IntegratorOutputIOSchemeVector.xml
%feature("docstring") casadi::IntegratorOutputIOSchemeVector "[INTERNAL]
Helper function for 'IntegratorOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::IntegratorOutputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")
casadi::IntegratorOutputIOSchemeVector::IntegratorOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";


// File: classcasadi_1_1Inverse.xml


// File: classcasadi_1_1IOScheme.xml
%feature("docstring") casadi::IOScheme::describeOutput "

Describe the index as an output.

";

%feature("docstring") casadi::IOScheme::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::IOScheme::describe "

Describe the index.

";

%feature("docstring") casadi::IOScheme::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::IOScheme::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::IOScheme::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::IOScheme::entry "

Get the entry name by index.

";

%feature("docstring") casadi::IOScheme::index "

Get index by entry name.

";

%feature("docstring") casadi::IOScheme::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::IOScheme "

Class with mapping between names and indices.

Joris Gillis

C++ includes: io_scheme.hpp ";

%feature("docstring") casadi::IOScheme::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::IOScheme::repr "

>  void casadi::IOScheme::repr(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a representation of the object.

>  void casadi::SharedObject::repr(std::ostream &stream=CASADI_COUT, bool trailing_newline=true) const 
------------------------------------------------------------------------

Print a representation of the object.

";

%feature("docstring") casadi::IOScheme::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::IOScheme::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::IOScheme::compatibleSize "

Check whether this scheme is compatible with the given size.

";

%feature("docstring") casadi::IOScheme::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::IOScheme::entryEnum "

Get the entry enum name by index.

";

%feature("docstring") casadi::IOScheme::isInit "

Is initialized?

";

%feature("docstring") casadi::IOScheme::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::IOScheme::fromVector "";

%feature("docstring") casadi::IOScheme::print "

>  void casadi::IOScheme::print(std::ostream &stream=std::cout) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description of the object.

>  void casadi::SharedObject::print(std::ostream &stream=CASADI_COUT, bool trailing_newline=true) const 
------------------------------------------------------------------------

Print a description of the object.

";

%feature("docstring") casadi::IOScheme::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::IOScheme::isNull "

Is a null pointer?

";

%feature("docstring") casadi::IOScheme::IOScheme "

>  casadi::IOScheme::IOScheme()
------------------------------------------------------------------------

Default constructor.

>  casadi::IOScheme::IOScheme(InputOutputScheme scheme)
------------------------------------------------------------------------

Constructor with enum.

>  casadi::IOScheme::IOScheme(const std::vector< std::string > &entries, const std::vector< std::string > &descriptions=std::vector< std::string >())
------------------------------------------------------------------------

Constructor with entry names.

";

%feature("docstring") casadi::IOScheme::name "

Name of the scheme.

";

%feature("docstring") casadi::IOScheme::describeInput "

Describe the index as an input.

";

%feature("docstring") casadi::IOScheme::size "

Number of entries.

";

%feature("docstring") casadi::IOScheme::entryNames "

List available entries.

";

%feature("docstring") casadi::IOScheme::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::IOScheme::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::IOScheme::known "

Check whether the scheme is known.

";

%feature("docstring") casadi::IOScheme::entryLabel "

Get the entry label by index If scheme is unknown, returns the index as a
string.

";


// File: classcasadi_1_1IOSchemeVector.xml


// File: classcasadi_1_1IpoptUserClass.xml
%feature("docstring") casadi::IpoptUserClass::get_starting_point "[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring") casadi::IpoptUserClass::finalize_solution "[INTERNAL]
This method is called when the algorithm is complete so the TNLP can
store/write the solution

";

%feature("docstring") casadi::IpoptUserClass "[INTERNAL] C++ includes:
ipopt_nlp.hpp ";

%feature("docstring")
casadi::IpoptUserClass::get_list_of_nonlinear_variables "[INTERNAL]
Specify which variables that appear in the Hessian

";

%feature("docstring") casadi::IpoptUserClass::eval_grad_f "[INTERNAL]
Method to return the gradient of the objective

";

%feature("docstring") casadi::IpoptUserClass::get_var_con_metadata "[INTERNAL]  Allows setting information about variables and constraints

";

%feature("docstring") casadi::IpoptUserClass::~IpoptUserClass "[INTERNAL]
";

%feature("docstring") casadi::IpoptUserClass::eval_g "[INTERNAL]  Method to
return the constraint residuals

";

%feature("docstring") casadi::IpoptUserClass::get_nlp_info "[INTERNAL]
Method to return some info about the nlp

";

%feature("docstring") casadi::IpoptUserClass::eval_f "[INTERNAL]  Method to
return the objective value

";

%feature("docstring")
casadi::IpoptUserClass::get_number_of_nonlinear_variables "[INTERNAL]
Specify the number of variables that appear in the Hessian

";

%feature("docstring") casadi::IpoptUserClass::eval_jac_g "[INTERNAL]
Method to return: 1) The structure of the Jacobian (if \"values\" is NULL)
2) The values of the Jacobian (if \"values\" is not NULL)

";

%feature("docstring") casadi::IpoptUserClass::finalize_metadata "[INTERNAL]
Retrieve information about variables and constraints

";

%feature("docstring") casadi::IpoptUserClass::get_bounds_info "[INTERNAL]
Method to return the bounds for my problem

";

%feature("docstring") casadi::IpoptUserClass::eval_h "[INTERNAL]  Method to
return: 1) The structure of the hessian of the Lagrangian (if \"values\" is
NULL) 2) The values of the hessian of the Lagrangian (if \"values\" is not
NULL)

";

%feature("docstring") casadi::IpoptUserClass::intermediate_callback "[INTERNAL]  This method is called at every iteration

";

%feature("docstring") casadi::IpoptUserClass::IpoptUserClass "[INTERNAL] ";


// File: classcasadi_1_1JacGInputIOSchemeVector.xml
%feature("docstring") casadi::JacGInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::JacGInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::JacGInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
casadi::JacGInputIOSchemeVector::JacGInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::JacGInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::JacGInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::JacGInputIOSchemeVector "[INTERNAL]  Helper
function for 'JacGInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::JacGInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::JacGInputIOSchemeVector::vector "[INTERNAL]
";


// File: classcasadi_1_1JacGOutputIOSchemeVector.xml
%feature("docstring") casadi::JacGOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::JacGOutputIOSchemeVector "[INTERNAL]  Helper
function for 'JacGOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::JacGOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::JacGOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::JacGOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::JacGOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::JacGOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
casadi::JacGOutputIOSchemeVector::JacGOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::JacGOutputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1LapackLuDense.xml


// File: classcasadi_1_1LapackQrDense.xml


// File: classcasadi_1_1LinearSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::LinearSolver::outputSchemeEntry " [INTERNAL]  Find the index for a
string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LinearSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::LinearSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LinearSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::LinearSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LinearSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::LinearSolver::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::LinearSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::LinearSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::LinearSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::LinearSolver::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::LinearSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::LinearSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::LinearSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::LinearSolver::LinearSolver "

>  casadi::LinearSolver::LinearSolver()
------------------------------------------------------------------------
[INTERNAL] 
Default (empty) constructor

>  casadi::LinearSolver::LinearSolver(const Sparsity &sp, int nrhs=1)
------------------------------------------------------------------------

Create a linear solver given a sparsity pattern (creates a dummy solver
only)

>  casadi::LinearSolver::LinearSolver(const std::string &name, const Sparsity &sp, int nrhs=1)
------------------------------------------------------------------------

Create a linear solver given a sparsity pattern.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- csparsecholesky

- csparse

- lapacklu

- lapackqr

- symbolicqr

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
LinearSolver.doc(\"myextraplugin\")

";

%feature("docstring") casadi::LinearSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LinearSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LinearSolver::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::LinearSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::LinearSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::LinearSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::LinearSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::LinearSolver::matchingRes "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::LinearSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::LinearSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::LinearSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LinearSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::LinearSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LinearSolver::prepare "

Factorize the matrix.

";

%feature("docstring") casadi::LinearSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::LinearSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::LinearSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LinearSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::LinearSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LinearSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::LinearSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::LinearSolver::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::LinearSolver::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::LinearSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::LinearSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::LinearSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::LinearSolver::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::LinearSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::LinearSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::LinearSolver::solveL "

Solve the system of equations Lx = b Only when a Cholesky factorization is
available.

";

%feature("docstring") casadi::LinearSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::LinearSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LinearSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::LinearSolver::prepared "

Check if prepared.

";

%feature("docstring") casadi::LinearSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::LinearSolver::getOption "

get an option value

";

%feature("docstring") casadi::LinearSolver::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::LinearSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::LinearSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LinearSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::LinearSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LinearSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::LinearSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::LinearSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::LinearSolver::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::LinearSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::LinearSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::LinearSolver "

Base class for the linear solver classes.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

The usual procedure to use LinearSolver is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

General information
===================



>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 2) [linsolIn]

+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 1) [linsolOut]

+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- csparsecholesky

- csparse

- lapacklu

- lapackqr

- symbolicqr

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
LinearSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

csparsecholesky
---------------



LinearSolver with CSparseCholesky Interface

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

csparse
-------



LinearSolver with CSparse Interface

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

lapacklu
--------



This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

>List of available options

+-----------------------------+------------+---------+-------------+
|             Id              |    Type    | Default | Description |
+=============================+============+=========+=============+
| allow_equilibration_failure | OT_BOOLEAN | false   |             |
+-----------------------------+------------+---------+-------------+
| equilibration               | OT_BOOLEAN | true    |             |
+-----------------------------+------------+---------+-------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

lapackqr
--------



This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

symbolicqr
----------



LinearSolver based on QR factorization with sparsity pattern based
reordering without partial pivoting

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| codegen         | OT_BOOLEAN      | false           | C-code          |
|                 |                 |                 | generation      |
+-----------------+-----------------+-----------------+-----------------+
| compiler        | OT_STRING       | \"gcc -fPIC -O2\" | Compiler        |
|                 |                 |                 | command to be   |
|                 |                 |                 | used for        |
|                 |                 |                 | compiling       |
|                 |                 |                 | generated code  |
+-----------------+-----------------+-----------------+-----------------+

--------------------------------------------------------------------------------



Joel Andersson
Diagrams
--------



C++ includes: linear_solver.hpp ";

%feature("docstring") casadi::LinearSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LinearSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::LinearSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::LinearSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LinearSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::LinearSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::LinearSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::LinearSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::LinearSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::LinearSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::LinearSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LinearSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::LinearSolver::getFactorizationSparsity "

Obtain a symbolic Cholesky factorization Only for Cholesky solvers.

";

%feature("docstring") casadi::LinearSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::LinearSolver::matchingArg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::LinearSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::LinearSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::LinearSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LinearSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LinearSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LinearSolver::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::LinearSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::LinearSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LinearSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::LinearSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::LinearSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::LinearSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::LinearSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::LinearSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::LinearSolver::spSolve "[INTERNAL]  Propagate
sparsity through a linear solve

";

%feature("docstring") casadi::LinearSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::LinearSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LinearSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::LinearSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::LinearSolver::solve "

>  void casadi::LinearSolver::solve(bool transpose=false)
------------------------------------------------------------------------

Solve the system of equations, internal vector.

>  void casadi::LinearSolver::solve(double *x, int nrhs=1, bool transpose=false)
------------------------------------------------------------------------
[INTERNAL] 
 Solve the factorized system of equations.

>  MX casadi::LinearSolver::solve(const MX &A, const MX &B, bool transpose=false)
------------------------------------------------------------------------

Create a solve node.

";

%feature("docstring") casadi::LinearSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::LinearSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::LinearSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::LinearSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::LinearSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::LinearSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::LinearSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LinearSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::LinearSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::LinearSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::LinearSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LinearSolver::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::LinearSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::LinearSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LinearSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::LinearSolver::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::LinearSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::LinearSolver::getFactorization "

Obtain a numeric Cholesky factorization Only for Cholesky solvers.

";


// File: classcasadi_1_1LinsolInputIOSchemeVector.xml
%feature("docstring") casadi::LinsolInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LinsolInputIOSchemeVector "[INTERNAL]  Helper
function for 'LinsolInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::LinsolInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::LinsolInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LinsolInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::LinsolInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring")
casadi::LinsolInputIOSchemeVector::LinsolInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::LinsolInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::LinsolInputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1LinsolOutputIOSchemeVector.xml
%feature("docstring") casadi::LinsolOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")
casadi::LinsolOutputIOSchemeVector::LinsolOutputIOSchemeVector "[INTERNAL]
";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LinsolOutputIOSchemeVector "[INTERNAL]
Helper function for 'LinsolOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::vector "[INTERNAL] ";


// File: classcasadi_1_1LpSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::LpSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LpSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LpSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::LpSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::LpSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::LpSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::LpSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::LpSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::LpSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::LpSolver::LpSolver "

>  casadi::LpSolver::LpSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::LpSolver::LpSolver(const std::string &name, const LPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- qp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
LpSolver.doc(\"myextraplugin\")

st:

Problem structure.>Struct scheme: casadi::LPStruct ( = 1) [lpStruct]

+-------------+-------+------------------------+
|  Full name  | Short |      Description       |
+=============+=======+========================+
| LP_STRUCT_A | a     | The matrix A: sparse . |
+-------------+-------+------------------------+

";

%feature("docstring") casadi::LpSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::LpSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::LpSolver::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::LpSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::LpSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::LpSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::LpSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LpSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::LpSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::LpSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LpSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::LpSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::LpSolver::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") casadi::LpSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::LpSolver::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::LpSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LpSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::LpSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::LpSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::LpSolver::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::LpSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::LpSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::LpSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::LpSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::LpSolver::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::LpSolver::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::LpSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::LpSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LpSolver::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::LpSolver::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::LpSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::LpSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LpSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::LpSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LpSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::LpSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::LpSolver::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::LpSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::LpSolver::getOption "

get an option value

";

%feature("docstring") casadi::LpSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LpSolver::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::LpSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::LpSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::LpSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::LpSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LpSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::LpSolver::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") casadi::LpSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::LpSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::LpSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::LpSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::LpSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LpSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LpSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::LpSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::LpSolver::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::LpSolver "

LpSolver.

Solves the following linear problem:



::

  min          c' x
  x
  
  subject to
  LBA <= A x <= UBA
  LBX <= x   <= UBX
  
  with x ( n x 1)
  c ( n x 1 )
  A sparse matrix ( nc x n)
  LBA, UBA dense vector (nc x 1)
  LBX, UBX dense vector (n x 1)
  
  n: number of decision variables (x)
  nc: number of constraints (A)



General information
===================



>Input scheme: casadi::LpSolverInput (LP_SOLVER_NUM_IN = 6) [lpIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_C            | c                      | The vector c: dense (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| LP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::LpSolverOutput (LP_SOLVER_NUM_OUT = 4) [lpOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| LP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- qp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
LpSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

qp --



Solve LPs using a QpSolver

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

>List of available stats

+-----------------+
|       Id        |
+=================+
| qp_solver_stats |
+-----------------+

--------------------------------------------------------------------------------



Joris Gillis
Diagrams
--------



C++ includes: lp_solver.hpp ";

%feature("docstring") casadi::LpSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::LpSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::LpSolver::matchingFwdSeed "[INTERNAL]  Check
if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::LpSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::LpSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LpSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LpSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::LpSolver::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::LpSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::LpSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::LpSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::LpSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::LpSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::LpSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::LpSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::LpSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::LpSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::LpSolver::outputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LpSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::LpSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::LpSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LpSolver::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::LpSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LpSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::LpSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::LpSolver::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::LpSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::LpSolver::matchingAdjSeed "[INTERNAL]  Check
if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::LpSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::LpSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LpSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LpSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::LpSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::LpSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::LpSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::LpSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LpSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::LpSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::LpSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LpSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LpSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::LpSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";


// File: classcasadi_1_1LpSolverInputIOSchemeVector.xml
%feature("docstring") casadi::LpSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
casadi::LpSolverInputIOSchemeVector::LpSolverInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::LpSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::LpSolverInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::LpSolverInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LpSolverInputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LpSolverInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::LpSolverInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::LpSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'LpSolverInput'

C++ includes: schemes_helpers.hpp ";


// File: classcasadi_1_1LpSolverOutputIOSchemeVector.xml
%feature("docstring") casadi::LpSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LpSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'LpSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::LpSolverOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
casadi::LpSolverOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return
a string with a representation (for SWIG)

";

%feature("docstring") casadi::LpSolverOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LpSolverOutputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::LpSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")
casadi::LpSolverOutputIOSchemeVector::LpSolverOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::LpSolverOutputIOSchemeVector::vector "[INTERNAL] ";


// File: singletoncasadi_1_1LPStructIOSchemeVector.xml
%feature("docstring") casadi::LPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::LPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::LPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LPStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::LPStructIOSchemeVector "[INTERNAL]  Helper
function for 'LPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::LPStructIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::LPStructIOSchemeVector::LPStructIOSchemeVector
"[INTERNAL] ";


// File: classcasadi_1_1LpToQp.xml


// File: classcasadi_1_1LR__DLEInputIOSchemeVector.xml
%feature("docstring") casadi::LR_DLEInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::LR_DLEInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::LR_DLEInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::LR_DLEInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LR_DLEInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LR_DLEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LR_DLEInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::LR_DLEInputIOSchemeVector "[INTERNAL]  Helper
function for 'LR_DLEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::LR_DLEInputIOSchemeVector::LR_DLEInputIOSchemeVector "[INTERNAL] ";


// File: classcasadi_1_1LR__DLEOutputIOSchemeVector.xml
%feature("docstring") casadi::LR_DLEOutputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LR_DLEOutputIOSchemeVector "[INTERNAL]
Helper function for 'LR_DLEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::LR_DLEOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LR_DLEOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::LR_DLEOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::LR_DLEOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring")
casadi::LR_DLEOutputIOSchemeVector::LR_DLEOutputIOSchemeVector "[INTERNAL]
";

%feature("docstring") casadi::LR_DLEOutputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::LR_DLEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1LR__DPLEInputIOSchemeVector.xml
%feature("docstring")
casadi::LR_DPLEInputIOSchemeVector::LR_DPLEInputIOSchemeVector "[INTERNAL]
";

%feature("docstring") casadi::LR_DPLEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LR_DPLEInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::LR_DPLEInputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LR_DPLEInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::LR_DPLEInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::LR_DPLEInputIOSchemeVector "[INTERNAL]
Helper function for 'LR_DPLEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::LR_DPLEInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LR_DPLEInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classcasadi_1_1LR__DPLEOutputIOSchemeVector.xml
%feature("docstring") casadi::LR_DPLEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
casadi::LR_DPLEOutputIOSchemeVector::LR_DPLEOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::LR_DPLEOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::LR_DPLEOutputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::LR_DPLEOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LR_DPLEOutputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LR_DPLEOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::LR_DPLEOutputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::LR_DPLEOutputIOSchemeVector "[INTERNAL]
Helper function for 'LR_DPLEOutput'

C++ includes: schemes_helpers.hpp ";


// File: classcasadi_1_1LrDleSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::LrDleSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::LrDleSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::LrDleSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::LrDleSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::LrDleSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::LrDleSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::LrDleSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::LrDleSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::LrDleSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::LrDleSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LrDleSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::LrDleSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LrDleSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LrDleSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LrDleSolver::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::LrDleSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::LrDleSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::LrDleSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::LrDleSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::LrDleSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::LrDleSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LrDleSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::LrDleSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LrDleSolver::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::LrDleSolver::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::LrDleSolver::LrDleSolver "

>  casadi::LrDleSolver::LrDleSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::LrDleSolver::LrDleSolver(const std::string &name, const LrDleStructure &st)
------------------------------------------------------------------------

LrDleSolver solver factory.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- fixed_smith

- dle

- lrdple

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
LrDleSolver.doc(\"myextraplugin\")

st:

Problem structure.>Struct scheme: casadi::LrDleStruct ( = 4) [lrdleStruct]

+-----------------+-------+----------------------------------------+
|    Full name    | Short |              Description               |
+=================+=======+========================================+
| LR_DLE_STRUCT_A | a     | The matrix A .                         |
+-----------------+-------+----------------------------------------+
| LR_DLE_STRUCT_V | v     | The matrix V .                         |
+-----------------+-------+----------------------------------------+
| LR_DLE_STRUCT_C | c     | The matrix C (defaults to unity) .     |
+-----------------+-------+----------------------------------------+
| LR_DLE_STRUCT_H | h     | H matrix: horizontal stack of all Hi . |
+-----------------+-------+----------------------------------------+

";

%feature("docstring") casadi::LrDleSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::LrDleSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::LrDleSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::LrDleSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::LrDleSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::LrDleSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::LrDleSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::LrDleSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::LrDleSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LrDleSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::LrDleSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::LrDleSolver::getOption "

get an option value

";

%feature("docstring") casadi::LrDleSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::LrDleSolver::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::LrDleSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::LrDleSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LrDleSolver::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::LrDleSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::LrDleSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::LrDleSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::LrDleSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::LrDleSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::LrDleSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LrDleSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::LrDleSolver::printStats "

Print solver statistics.

";

%feature("docstring") casadi::LrDleSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LrDleSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::LrDleSolver::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::LrDleSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::LrDleSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::LrDleSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LrDleSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::LrDleSolver::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::LrDleSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::LrDleSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LrDleSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::LrDleSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::LrDleSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::LrDleSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::LrDleSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LrDleSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LrDleSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::LrDleSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::LrDleSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LrDleSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::LrDleSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::LrDleSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::LrDleSolver::matchingArg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::LrDleSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::LrDleSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LrDleSolver::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::LrDleSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::LrDleSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::LrDleSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::LrDleSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LrDleSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::LrDleSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::LrDleSolver::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::LrDleSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::LrDleSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::LrDleSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::LrDleSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::LrDleSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::LrDleSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::LrDleSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LrDleSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::LrDleSolver::matchingRes "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::LrDleSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::LrDleSolver "

Base class for Low-rank Discrete Lyapunov Equation Solvers.



::

  A in R^(n x n)
  V in S^m
  C in R^(n x m)
  Hi in R^(n x Hsi)
  



finds $P$ that satisfies:



::

  P = A P A' + C V C'
  



and outputs

Yi = Hi^T P Hi

General information
===================



>Input scheme: casadi::LR_DLEInput (LR_DLE_NUM_IN = 4) [lrdleIn]

+-----------+-------+----------------------------------------+
| Full name | Short |              Description               |
+===========+=======+========================================+
| LR_DLE_A  | a     | A matrix .                             |
+-----------+-------+----------------------------------------+
| LR_DLE_V  | v     | V matrix .                             |
+-----------+-------+----------------------------------------+
| LR_DLE_C  | c     | C matrix .                             |
+-----------+-------+----------------------------------------+
| LR_DLE_H  | h     | H matrix: horizontal stack of all Hi . |
+-----------+-------+----------------------------------------+

>Output scheme: casadi::LR_DLEOutput (LR_DLE_NUM_OUT = 1) [lrdleOut]

+-----------+-------+---------------------------------+
| Full name | Short |           Description           |
+===========+=======+=================================+
| LR_DLE_Y  | y     | Y matrix, block diagonal form . |
+-----------+-------+---------------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | casadi::LrDl |
|              |              |              | unstability  | eInternal    |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| error_unstab | OT_BOOLEAN   | false        | Throw an     | casadi::LrDl |
| le           |              |              | exception    | eInternal    |
|              |              |              | when it is   |              |
|              |              |              | detected     |              |
|              |              |              | that         |              |
|              |              |              | Product(A_i, |              |
|              |              |              | i=N..1) has  |              |
|              |              |              | eigenvalues  |              |
|              |              |              | greater than |              |
|              |              |              | 1-eps_unstab |              |
|              |              |              | le           |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pos_def      | OT_BOOLEAN   | false        | Assume P     | casadi::LrDl |
|              |              |              | positive     | eInternal    |
|              |              |              | definite     |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- fixed_smith

- dle

- lrdple

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
LrDleSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

fixed_smith
-----------



Solving the Discrete Lyapunov Equations with a regular LinearSolver

>List of available options

+------+------------+---------+----------------------------+
|  Id  |    Type    | Default |        Description         |
+======+============+=========+============================+
| iter | OT_INTEGER | 100     | Number of Smith iterations |
+------+------------+---------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

dle
---



Solving the Discrete Lyapunov Equations with a Low-rank Discrete Lyapunov
Equations solver

Solving the Low-Rank Discrete Lyapunov Equations with a regular Discrete
Lyapunov Equations solver

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

lrdple
------



Solving the low-rank Periodic Discrete Lyapunov Equations with a low- rank
discrete Lyapunov solver

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| dple            | OT_DICTIONARY   | GenericType()   | Options to be   |
|                 |                 |                 | passed to the   |
|                 |                 |                 | DPLE solver.    |
+-----------------+-----------------+-----------------+-----------------+
| dple_solver     | OT_STRING       | GenericType()   | User-defined    |
|                 |                 |                 | DPLE solver     |
|                 |                 |                 | class.          |
+-----------------+-----------------+-----------------+-----------------+

--------------------------------------------------------------------------------



Joris Gillis
Diagrams
--------



C++ includes: lr_dle_solver.hpp ";

%feature("docstring") casadi::LrDleSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::LrDleSolver::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::LrDleSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::LrDleSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LrDleSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::LrDleSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::LrDleSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LrDleSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::LrDleSolver::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::LrDleSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::LrDleSolver::clone "

Clone.

";

%feature("docstring") casadi::LrDleSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::LrDleSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LrDleSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LrDleSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";


// File: singletoncasadi_1_1LrDleStructIOSchemeVector.xml
%feature("docstring") casadi::LrDleStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
casadi::LrDleStructIOSchemeVector::LrDleStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::LrDleStructIOSchemeVector "[INTERNAL]  Helper
function for 'LrDleStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::LrDleStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::LrDleStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LrDleStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LrDleStructIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::LrDleStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::LrDleStructIOSchemeVector::__len__ "[INTERNAL] ";


// File: classcasadi_1_1LrDleToDle.xml


// File: classcasadi_1_1LrDpleSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::LrDpleSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::LrDpleSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LrDpleSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::LrDpleSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LrDpleSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LrDpleSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::LrDpleSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::LrDpleSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::LrDpleSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LrDpleSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::LrDpleSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::LrDpleSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LrDpleSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LrDpleSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::LrDpleSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::LrDpleSolver::LrDpleSolver "

>  casadi::LrDpleSolver::LrDpleSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::LrDpleSolver::LrDpleSolver(const std::string &name, const LrDpleStructure &st)
------------------------------------------------------------------------

LrDpleSolver solver factory.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- lifting

- dple

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
LrDpleSolver.doc(\"myextraplugin\")

st:

Problem structure.

";

%feature("docstring") casadi::LrDpleSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::LrDpleSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::LrDpleSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::LrDpleSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::LrDpleSolver::printStats "

Print solver statistics.

";

%feature("docstring") casadi::LrDpleSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::LrDpleSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LrDpleSolver::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::LrDpleSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::LrDpleSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::LrDpleSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::LrDpleSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::LrDpleSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::LrDpleSolver::matchingRes "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::LrDpleSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::LrDpleSolver::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::LrDpleSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LrDpleSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LrDpleSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::LrDpleSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::LrDpleSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::LrDpleSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::LrDpleSolver::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::LrDpleSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::LrDpleSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::LrDpleSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::LrDpleSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::LrDpleSolver::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::LrDpleSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LrDpleSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LrDpleSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::LrDpleSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::LrDpleSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::LrDpleSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LrDpleSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::LrDpleSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::LrDpleSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::LrDpleSolver::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::LrDpleSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::LrDpleSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::LrDpleSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::LrDpleSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::LrDpleSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::LrDpleSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::LrDpleSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LrDpleSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LrDpleSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::LrDpleSolver::getOption "

get an option value

";

%feature("docstring") casadi::LrDpleSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::LrDpleSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::LrDpleSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LrDpleSolver::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::LrDpleSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::LrDpleSolver::clone "

Clone.

";

%feature("docstring") casadi::LrDpleSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::LrDpleSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LrDpleSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::LrDpleSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LrDpleSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::LrDpleSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::LrDpleSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LrDpleSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::LrDpleSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LrDpleSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::LrDpleSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LrDpleSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::LrDpleSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::LrDpleSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::LrDpleSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::LrDpleSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::LrDpleSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::LrDpleSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::LrDpleSolver::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::LrDpleSolver::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::LrDpleSolver::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::LrDpleSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::LrDpleSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LrDpleSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::LrDpleSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::LrDpleSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::LrDpleSolver::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::LrDpleSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::LrDpleSolver "

Base class for Discrete Periodic Lyapunov Equation Solvers.

Given matrices $A_k$ and symmetric $V_k, k = 0..K-1$



::

  A_k in R^(n x n)
  V_k in R^n
  



provides all of $P_k$ that satisfy:



::

  P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k
  P_k+1 = A_k*P_k*A_k' + V_k  for k = 1..K-1
  



General information
===================



>Input scheme: casadi::LR_DPLEInput (LR_DPLE_NUM_IN = 4) [lrdpleIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LR_DPLE_A              | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | diagcat otherwise) .   |
+------------------------+------------------------+------------------------+
| LR_DPLE_V              | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | diagcat otherwise) .   |
+------------------------+------------------------+------------------------+
| LR_DPLE_C              | c                      | C matrix .             |
+------------------------+------------------------+------------------------+
| LR_DPLE_H              | h                      | H matrix: horizontal   |
|                        |                        | stack of all Hi .      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::LR_DPLEOutput (LR_DPLE_NUM_OUT = 1) [lrdpleOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LR_DPLE_Y              | y                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, diagcat     |
|                        |                        | otherwise) (Cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| const_dim    | OT_BOOLEAN   | true         | Assume       | casadi::LrDp |
|              |              |              | constant     | leInternal   |
|              |              |              | dimension of |              |
|              |              |              | P            |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | casadi::LrDp |
|              |              |              | unstability  | leInternal   |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| error_unstab | OT_BOOLEAN   | false        | Throw an     | casadi::LrDp |
| le           |              |              | exception    | leInternal   |
|              |              |              | when it is   |              |
|              |              |              | detected     |              |
|              |              |              | that         |              |
|              |              |              | Product(A_i, |              |
|              |              |              | i=N..1) has  |              |
|              |              |              | eigenvalues  |              |
|              |              |              | greater than |              |
|              |              |              | 1-eps_unstab |              |
|              |              |              | le           |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pos_def      | OT_BOOLEAN   | false        | Assume P     | casadi::LrDp |
|              |              |              | positive     | leInternal   |
|              |              |              | definite     |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- lifting

- dple

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
LrDpleSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

lifting
-------



Solving the Discrete Periodic Lyapunov Equations by lifting the entire
period to a single Discrete Lyapunov Equation

>List of available options

+------+-----------+---------+-----------------------------------+
|  Id  |   Type    | Default |            Description            |
+======+===========+=========+===================================+
| form | OT_STRING | \"A\"     | The form of the lifting (A:0|B:1) |
+------+-----------+---------+-----------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

dple
----



Solving the Low-Rank Discrete Lyapunov Equations with a Low-Rank Discrete
Lyapunov Equations Solver

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

--------------------------------------------------------------------------------



Joris Gillis
Diagrams
--------



C++ includes: lr_dple_solver.hpp ";

%feature("docstring") casadi::LrDpleSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LrDpleSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::LrDpleSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::LrDpleSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::LrDpleSolver::matchingArg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::LrDpleSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::LrDpleSolver::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::LrDpleSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::LrDpleSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::LrDpleSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::LrDpleSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";


// File: classcasadi_1_1LrDpleToDple.xml


// File: classcasadi_1_1LrDpleToLrDle.xml


// File: singletoncasadi_1_1LrDpleVecStructIOSchemeVector.xml
%feature("docstring") casadi::LrDpleVecStructIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LrDpleVecStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LrDpleVecStructIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::LrDpleVecStructIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::LrDpleVecStructIOSchemeVector "[INTERNAL]
Helper function for 'LrDpleVecStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::LrDpleVecStructIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")
casadi::LrDpleVecStructIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring")
casadi::LrDpleVecStructIOSchemeVector::LrDpleVecStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::LrDpleVecStructIOSchemeVector::vector "[INTERNAL] ";


// File: singletoncasadi_1_1Matrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") all "

Returns true only if every element in the matrix is true.

";

%feature("docstring") casadi::Matrix::getIntValue "

Get double value (only if integer constant)

";

%feature("docstring") casadi::Matrix::__truediv__ "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Matrix::zz_solve "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::getNZ "

>  void casadi::Matrix< DataType >::getNZ(double &val) const

>  void casadi::Matrix< DataType >::getNZ(double *val) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the elements numerically.

>  void casadi::Matrix< DataType >::getNZ(std::vector< double > &output_m) const 
------------------------------------------------------------------------

Get the elements numerically.

>  void casadi::Matrix< DataType >::getNZ(Matrix< DataType > &output_m, bool ind1, const Slice &k) const

>  void casadi::Matrix< DataType >::getNZ(Matrix< DataType > &output_m, bool ind1, const Matrix< int > &k) const 
------------------------------------------------------------------------

Get a set of nonzeros

>  void casadi::Matrix< DataType >::getNZ(double *val, int len, int stride1, int stride2) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Matrix::zz_atanh "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_gt "

No need to have both < and >

";

%feature("docstring") casadi::Matrix::zz_nullspace "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_erf "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::hasNZ "

Returns true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring") casadi::Matrix::set "

>  void casadi::Matrix< DataType >::set(double val)

>  void casadi::Matrix< DataType >::set(const double *val, bool tr=false)

>  void casadi::Matrix< DataType >::set(const std::vector< double > &val, bool tr=false)
------------------------------------------------------------------------

Get the elements numerically.

>  void casadi::Matrix< DataType >::set(const Matrix< DataType > &m, bool ind1, const Slice &rr)

>  void casadi::Matrix< DataType >::set(const Matrix< DataType > &m, bool ind1, const Matrix< int > &rr)

>  void casadi::Matrix< DataType >::set(const Matrix< DataType > &m, bool ind1, const Sparsity &sp)
------------------------------------------------------------------------

Set a submatrix, single argument

>  void casadi::Matrix< DataType >::set(const Matrix< DataType > &m, bool ind1, const Slice &rr, const Slice &cc)

>  void casadi::Matrix< DataType >::set(const Matrix< DataType > &m, bool ind1, const Slice &rr, const Matrix< int > &cc)

>  void casadi::Matrix< DataType >::set(const Matrix< DataType > &m, bool ind1, const Matrix< int > &rr, const Slice &cc)

>  void casadi::Matrix< DataType >::set(const Matrix< DataType > &m, bool ind1, const Matrix< int > &rr, const Matrix< int > &cc)
------------------------------------------------------------------------

Set a submatrix, two arguments

>  void casadi::Matrix< DataType >::set(const Matrix< DataType > &val)
------------------------------------------------------------------------

Set all the entries without changing sparsity pattern.

";

%feature("docstring") casadi::Matrix::zz_gradient "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::nnz "

Get the number of (structural) non-zero elements.

";

%feature("docstring") casadi::Matrix::isDense "

Check if the matrix expression is dense.

";

%feature("docstring") casadi::Matrix::zz_acosh "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_inner_prod "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::getDep "

Get expressions of the children of the expression Only defined if symbolic
scalar. Wraps SXElement SXElement::getDep(int ch=0) const.

";

%feature("docstring") casadi::Matrix::get "

>  void casadi::Matrix< DataType >::get(double &val) const

>  void casadi::Matrix< DataType >::get(double *val, bool tr=false) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the elements numerically.

>  void casadi::Matrix< DataType >::get(std::vector< double > &output_m) const 
------------------------------------------------------------------------

Get the elements numerically.

>  void casadi::Matrix< DataType >::get(Matrix< DataType > &output_m, bool ind1, const Slice &rr) const

>  void casadi::Matrix< DataType >::get(Matrix< DataType > &output_m, bool ind1, const Matrix< int > &rr) const

>  void casadi::Matrix< DataType >::get(Matrix< DataType > &output_m, bool ind1, const Sparsity &sp) const 
------------------------------------------------------------------------

Get a submatrix, single argument

>  void casadi::Matrix< DataType >::get(Matrix< DataType > &output_m, bool ind1, const Slice &rr, const Slice &cc) const

>  void casadi::Matrix< DataType >::get(Matrix< DataType > &output_m, bool ind1, const Slice &rr, const Matrix< int > &cc) const

>  void casadi::Matrix< DataType >::get(Matrix< DataType > &output_m, bool ind1, const Matrix< int > &rr, const Slice &cc) const

>  void casadi::Matrix< DataType >::get(Matrix< DataType > &output_m, bool ind1, const Matrix< int > &rr, const Matrix< int > &cc) const 
------------------------------------------------------------------------

Get a submatrix, two arguments

>  void casadi::Matrix< DataType >::get(Matrix< DataType > &val) const 
------------------------------------------------------------------------
[INTERNAL] 
Get all the entries without changing sparsity pattern.

>  void casadi::Matrix< DataType >::get(double *val, int len, int stride1, int stride2, SparsityType sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the non-zero elements, strided array.

";

%feature("docstring") casadi::Matrix::data "

>  std::vector< DataType > & casadi::Matrix< DataType >::data()
------------------------------------------------------------------------
[INTERNAL] 
Access the non-zero elements.

>  const std::vector< DataType > & casadi::Matrix< DataType >::data() const 
------------------------------------------------------------------------
[INTERNAL] 
Const access the non-zero elements.

";

%feature("docstring") casadi::Matrix::zz_atan "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_trace "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::__copysign__ "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_densify "

Accessed by friend functions.

";

%feature("docstring") casadi::Matrix::sparse "

Create a sparse matrix with all zeros DEPRECATED: Use MatType(nrow, ncol)
instead.

";

%feature("docstring") casadi::Matrix::zz_all "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_jacobianTimesVector "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_mpower "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::isZero "

check if the matrix is 0 (note that false negative answers are possible)

";

%feature("docstring") casadi::Matrix::zz_plus "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_rectangle "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::getElement "[INTERNAL]  get an
element, do not allocate

";

%feature("docstring") casadi::Matrix::isIdentity "

check if the matrix is an identity matrix (note that false negative answers
are possible)

";

%feature("docstring") casadi::Matrix::zz_diag "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") adj "

Matrix adjoint.

";

%feature("docstring") casadi::Matrix::setNZ "

>  void casadi::Matrix< DataType >::setNZ(double val)

>  void casadi::Matrix< DataType >::setNZ(const double *val)

>  void casadi::Matrix< DataType >::setNZ(const std::vector< double > &val)
------------------------------------------------------------------------

Set the elements numerically.

>  void casadi::Matrix< DataType >::setNZ(const Matrix< DataType > &m, bool ind1, const Slice &k)

>  void casadi::Matrix< DataType >::setNZ(const Matrix< DataType > &m, bool ind1, const Matrix< int > &k)
------------------------------------------------------------------------

Set a set of nonzeros

";

%feature("docstring") casadi::Matrix::zz_rdivide "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_sparsify "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::getSym "

>  void casadi::Matrix< DataType >::getSym(double *val) const 
------------------------------------------------------------------------
[INTERNAL] 
Get upper triangular elements.

>  void casadi::Matrix< DataType >::getSym(std::vector< double > &output_m) const 
------------------------------------------------------------------------

Get upper triangular elements.

";

%feature("docstring") casadi::Matrix::unary "[INTERNAL]  Create nodes by
their ID.

";

%feature("docstring") casadi::Matrix::zz_getMinor "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_det "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::sparsityRef "[INTERNAL]  Access the
sparsity, make a copy if there are multiple references to it.

";

%feature("docstring") casadi::Matrix::numel "

>  int casadi::GenericMatrix< Matrix< DataType >  >::numel() const
------------------------------------------------------------------------

Get the number of elements.

>  int casadi::GenericMatrix< Matrix< DataType >  >::numel(int i) const
------------------------------------------------------------------------

Get the number of elements in slice (cf. MATLAB)

";

%feature("docstring") casadi::Matrix::zz_horzsplit "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") qr "

QR factorization using the modified Gram-Schmidt algorithm More stable than
the classical Gram-Schmidt, but may break down if the rows of A are nearly
linearly dependent See J. Demmel: Applied Numerical Linear Algebra
(algorithm 3.1.). Note that in SWIG, Q and R are returned by value.

";

%feature("docstring") casadi::Matrix::zz_sinh "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_printCompact "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_triu2symm "

Accessed by friend functions.

";

%feature("docstring") casadi::Matrix::toSlice "

>  Slice casadi::Matrix< DataType >::toSlice(bool ind1=false) const 
------------------------------------------------------------------------

Convert to Slice (only for IMatrix)

";

%feature("docstring") casadi::Matrix::find "

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.find() A[k] will contain the elements of A that are non-zero in B

";

%feature("docstring") getMinor "

Get the (i,j) minor matrix.

";

%feature("docstring") casadi::Matrix::zz_log "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::borArrayBV "[INTERNAL]  Bitwise or
the non-zero elements, array.

";

%feature("docstring") casadi::Matrix::triplet "";

%feature("docstring") casadi::Matrix::zz_kron "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_substituteInPlace "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::print "

Print a description of the object.

";

%feature("docstring") norm_inf_mul "

Inf-norm of a Matrix-Matrix product

";

%feature("docstring") casadi::Matrix::end "[INTERNAL] ";

%feature("docstring") casadi::Matrix::zz_taylor "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_isEqual "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_repmat "";

%feature("docstring") casadi::Matrix::zz_countNodes "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::sparsity "[INTERNAL]  Const access
the sparsity - reference to data member.

";

%feature("docstring") casadi::Matrix::isCommutative "

Check whether a binary SX is commutative.

Only defined if symbolic scalar.

";

%feature("docstring") casadi::Matrix::zz_vertcat "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_any "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::makeDense "[INTERNAL]  Make the
matrix dense.

";

%feature("docstring") casadi::Matrix::isScalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::Matrix::zz_poly_coeff "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::isTril "

Check if the matrix is lower triangular.

";

%feature("docstring") casadi::Matrix::isSlice "

>  bool casadi::Matrix< DataType >::isSlice(bool ind1=false) const 
------------------------------------------------------------------------

Is the Matrix a Slice (only for IMatrix)

";

%feature("docstring") casadi::Matrix::appendColumns "

Append a matrix horizontally.

";

%feature("docstring") casadi::Matrix::rend "[INTERNAL] ";

%feature("docstring") casadi::Matrix::isTriu "

Check if the matrix is upper triangular.

";

%feature("docstring") casadi::Matrix::zz_sqrt "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::setArrayBV "[INTERNAL]  Bitwise set
the non-zero elements, array.

";

%feature("docstring") casadi::Matrix::isSquare "

Check if the matrix expression is square.

";

%feature("docstring") casadi::Matrix::setPrecision "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") casadi::Matrix::zz_qr "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_and "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") cofactor "

Get the (i,j) cofactor matrix.

";

%feature("docstring") casadi::Matrix::zz_norm_0_mul "

Accessed by friend functions.

";

%feature("docstring") casadi::Matrix::zz_extractShared "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_ceil "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_linspace "

Accessed by friend functions.

";

%feature("docstring") casadi::Matrix::printSparse "

Print sparse matrix style.

";

%feature("docstring") casadi::Matrix::zz_norm_F "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::sanityCheck "

Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") casadi::Matrix::setScientific "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") casadi::Matrix::T "

Transpose the matrix.

";

%feature("docstring") casadi::Matrix::zz_exp "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::clear "";

%feature("docstring") casadi::Matrix::nonzeros_int "

Get all nonzeros.

";

%feature("docstring") casadi::Matrix::remove "

Remove columns and rows Remove/delete rows and/or columns of a matrix.

";

%feature("docstring") casadi::Matrix::zz_diagsplit "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") sparsify "

Make a matrix sparse by removing numerical zeros.

";

%feature("docstring") casadi::Matrix::zz_asinh "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_gauss_quadrature "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::getValue "

>  double casadi::Matrix< DataType >::getValue() const 
------------------------------------------------------------------------

Get double value (only if constant)

>  double casadi::Matrix< DataType >::getValue(int k) const 
------------------------------------------------------------------------

Get double value (particular nonzero)

";

%feature("docstring") casadi::Matrix::zz_sumAll "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::isOne "

check if the matrix is 1 (note that false negative answers are possible)

";

%feature("docstring") casadi::Matrix::isVector "

Check if the matrix is a column vector (i.e. size2()==1) Optionally, checks
if either row or column vector.

";

%feature("docstring") casadi::Matrix::zz_sum_square "

Accessed by friend functions.

";

%feature("docstring") casadi::Matrix::makeSparse "

Make a matrix sparse by removing numerical zeros smaller in absolute value
than a specified tolerance.

";

%feature("docstring") casadi::Matrix::zz_floor "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::__mrdivide__ "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_norm_2 "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_norm_1 "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::printScalar "

Print scalar.

";

%feature("docstring") casadi::Matrix::zz_norm_inf "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::erase "

>  void casadi::Matrix< DataType >::erase(const std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false)
------------------------------------------------------------------------

Erase a submatrix (leaving structural zeros in its place) Erase rows and/or
columns of a matrix.

>  void casadi::Matrix< DataType >::erase(const std::vector< int > &rr, bool ind1=false)
------------------------------------------------------------------------

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

";

%feature("docstring") casadi::Matrix::dimString "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring") casadi::Matrix::getBV "[INTERNAL]  Bitwise set,
reinterpreting the data as a bvec_t array

";

%feature("docstring") casadi::Matrix::inf "

create a matrix with all inf

";

%feature("docstring") casadi::Matrix::scalar_matrix "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") casadi::Matrix::getBand "[INTERNAL]  Save the result
to the LAPACK banded format see LAPACK documentation kl: The number of
subdiagonals in res ku: The number of superdiagonals in res ldres: The
leading dimension in res res: The number of superdiagonals.

";

%feature("docstring") casadi::Matrix::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring") casadi::Matrix::isSymbolicSparse "

Check if symbolic Sparse matrices can return true if all non-zero elements
are symbolic.

";

%feature("docstring") casadi::Matrix::zz_asin "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::addSub "

Add a submatrix to an existing matrix (TODO: remove memory allocation)

";

%feature("docstring") casadi::Matrix::back "[INTERNAL] ";

%feature("docstring") casadi::Matrix::zz_erfinv "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_vertsplit "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::Matrix "

>  casadi::Matrix< DataType >::Matrix()
------------------------------------------------------------------------

constructors

empty 0-by-0 matrix constructor

>  casadi::Matrix< DataType >::Matrix(const Matrix< DataType > &m)
------------------------------------------------------------------------

Copy constructor.

>  casadi::Matrix< DataType >::Matrix(int nrow, int ncol)
------------------------------------------------------------------------

Create a sparse matrix with all structural zeros.

>  casadi::Matrix< DataType >::Matrix(const std::pair< int, int > &rc)
------------------------------------------------------------------------
[INTERNAL] 
Create a sparse matrix with all structural zeros.

>  casadi::Matrix< DataType >::Matrix(const Sparsity &sp)
------------------------------------------------------------------------

Sparse matrix with a given sparsity and zero entries Alias for
Matrix::zeros(sparsity)

>  casadi::Matrix< DataType >::Matrix(const Sparsity &sp, const Matrix< DataType > &d)
------------------------------------------------------------------------

Construct matrix with a given sparsity and nonzeros.

>  casadi::Matrix< DataType >::Matrix(double val)
------------------------------------------------------------------------

This constructor enables implicit type conversion from a numeric type.

>  casadi::Matrix< DataType >::Matrix(const std::vector< std::vector< double > > &m)
------------------------------------------------------------------------

Dense matrix constructor with data given as vector of vectors.

>  casadi::Matrix< DataType >::Matrix(const Matrix< A > &x)
------------------------------------------------------------------------

Create a matrix from another matrix with a different entry type Assumes that
the scalar conversion is valid.

>  casadi::Matrix< DataType >::Matrix(const std::vector< A > &x)
------------------------------------------------------------------------

Create an expression from a vector.

>  casadi::Matrix< DataType >::Matrix(const std::vector< DataType > &x)
------------------------------------------------------------------------
[INTERNAL] 
Construct from a vector.

>  casadi::Matrix< DataType >::Matrix(const Sparsity &sp, const DataType &val, bool dummy)
------------------------------------------------------------------------
[INTERNAL] 
Sparse matrix with a given sparsity with all values same.

>  casadi::Matrix< DataType >::Matrix(const Sparsity &sp, const std::vector< DataType > &d, bool dummy)
------------------------------------------------------------------------
[INTERNAL] 
Sparse matrix with a given sparsity and non-zero elements.

";

%feature("docstring") casadi::Matrix::row "

>  const int* casadi::GenericMatrix< Matrix< DataType >  >::row() const
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity pattern. See the Sparsity class for details.

>  int casadi::GenericMatrix< Matrix< DataType >  >::row(int el) const
------------------------------------------------------------------------

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::Matrix::zz_norm_inf_mul "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_unite "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") casadi::Matrix::zz_ne "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::isConstant "

Check if the matrix is constant (note that false negative answers are
possible)

";

%feature("docstring") casadi::Matrix::setZeroBV "[INTERNAL]  Bitwise set,
reinterpreting the data as a bvec_t array

";

%feature("docstring") casadi::Matrix::getNdeps "

Get the number of dependencies of a binary SXElement Only defined if
symbolic scalar.

";

%feature("docstring") casadi::Matrix::reserve "";

%feature("docstring") casadi::Matrix "

Sparse matrix class. SX and DMatrix are specializations.

General sparse matrix class that is designed with the idea that \"everything
is a matrix\", that is, also scalars and vectors. This philosophy makes it
easy to use and to interface in particularly with Python and Matlab/Octave.
Index starts with 0. Index vec happens as follows: (rr, cc) -> k =
rr+cc*size1() Vectors are column vectors.  The storage format is Compressed
Column Storage (CCS), similar to that used for sparse matrices in Matlab,
but unlike this format, we do allow for elements to be structurally non-zero
but numerically zero.  Matrix<DataType> is polymorphic with a
std::vector<DataType> that contain all non-identical-zero elements. The
sparsity can be accessed with Sparsity& sparsity() Joel Andersson

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::Matrix::zz_pw_lin "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::getRow "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::Matrix::setValue "

>  void casadi::Matrix< DataType >::setValue(double m)
------------------------------------------------------------------------

Set double value (only if constant)

>  void casadi::Matrix< DataType >::setValue(double m, int k)
------------------------------------------------------------------------

Set double value (particular nonzero)

";

%feature("docstring") casadi::Matrix::setZero "

Set all elements to zero.

";

%feature("docstring") casadi::Matrix::isMinusOne "

check if the matrix is -1 (note that false negative answers are possible)

";

%feature("docstring") casadi::Matrix::printVector "

Print vector-style.

";

%feature("docstring") casadi::Matrix::isRegular "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring") casadi::Matrix::zz_cos "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_tanh "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::__constpow__ "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::borBV "[INTERNAL]  Bitwise or,
reinterpreting the data as a bvec_t array

";

%feature("docstring") casadi::Matrix::zz_tan "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::nonzeros "

Get all nonzeros.

";

%feature("docstring") casadi::Matrix::zz_mtimes "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::colind "

>  const int* casadi::GenericMatrix< Matrix< DataType >  >::colind() const
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity pattern. See the Sparsity class for details.

>  int casadi::GenericMatrix< Matrix< DataType >  >::colind(int col) const
------------------------------------------------------------------------

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::Matrix::zz_pinv "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::isLeaf "

Check if SX is a leaf of the SX graph.

Only defined if symbolic scalar.

";

%feature("docstring") casadi::Matrix::zz_polyval "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") project "

Create a new matrix with a given sparsity pattern but with the nonzeros
taken from an existing matrix.

";

%feature("docstring") casadi::Matrix::hasNonStructuralZeros "

Check if the matrix has any zero entries which are not structural zeros.

";

%feature("docstring") casadi::Matrix::matrix_scalar "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") casadi::Matrix::nan "

create a matrix with all nan

";

%feature("docstring") casadi::Matrix::zz_or "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_tril2symm "

Accessed by friend functions.

";

%feature("docstring") casadi::Matrix::zz_quad_form "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Matrix::zz_getOperatorRepresentation "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::at "

>  const DataType& casadi::Matrix< DataType >::at(int k) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a non-zero element.

>  DataType& casadi::Matrix< DataType >::at(int k)
------------------------------------------------------------------------
[INTERNAL] 
Access a non-zero element.

";

%feature("docstring") casadi::Matrix::shape "

Get the shape.

";

%feature("docstring") casadi::Matrix::zz_min "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::isSmooth "

Check if smooth.

";

%feature("docstring") casadi::Matrix::zz_eig_symbolic "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_reshape "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_blocksplit "";

%feature("docstring") casadi::Matrix::front "

>  reference casadi::Matrix< DataType >::front()
------------------------------------------------------------------------
[INTERNAL] 
Get references to beginning and end.

>  const_reference casadi::Matrix< DataType >::front() const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Matrix::setSym "

Set upper triangular elements.

";

%feature("docstring") casadi::Matrix::zz_spy "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::sizeD "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") casadi::Matrix::zz_tangent "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::size "

>  int casadi::GenericMatrix< Matrix< DataType >  >::size() const
------------------------------------------------------------------------

DEPRECATED: Alias for nnz.

See:   nnz()

>  int casadi::GenericMatrix< Matrix< DataType >  >::size(SparsityType sp) const
------------------------------------------------------------------------

Get the number if non-zeros for a given sparsity pattern.

";

%feature("docstring") casadi::Matrix::zz_ramp "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_project "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_sumRows "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_substitute "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_heaviside "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::toScalar "[INTERNAL]  Convert to
scalar type.

";

%feature("docstring") casadi::Matrix::zz_max "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_jacobian "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::__nonzero__ "

>  bool casadi::Matrix< DataType >::__nonzero__() const 
------------------------------------------------------------------------

Returns the truth value of a Matrix.

>  bool casadi::Matrix< SXElement >::__nonzero__() const
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Matrix::zz_dependsOn "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::isEmpty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::Matrix::zz_getSymbols "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_pw_const "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_lt "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::setAll "[INTERNAL]  Set all elements
to a value.

";

%feature("docstring") casadi::Matrix::getColind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::Matrix::zz_expand "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::isSymbolic "

Check if symbolic (Dense) Sparse matrices invariable return false.

";

%feature("docstring") casadi::Matrix::zz_acos "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") casadi::Matrix::zz_cross "

Accessed by friend functions.

";

%feature("docstring") casadi::Matrix::zz_power "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_le "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_triangle "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::getArrayBV "[INTERNAL]  Bitwise get
the non-zero elements, array.

";

%feature("docstring") casadi::Matrix::zz_abs "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_minus "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_log10 "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_poly_roots "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_not "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::resize "";

%feature("docstring") casadi::Matrix::zz_sign "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::getSparsity "

Get an owning reference to the sparsity pattern.

";

%feature("docstring") casadi::Matrix::setSparse "

Set sparse.

";

%feature("docstring") any "

Returns true if any element in the matrix is true.

";

%feature("docstring") casadi::Matrix::zz_ge "

No need to have both <= and >=.

";

%feature("docstring") casadi::Matrix::getName "

Get name (only if symbolic scalar)

";

%feature("docstring") casadi::Matrix::printme "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::elem "

>  const DataType & casadi::Matrix< DataType >::elem(int rr, int cc=0) const 
------------------------------------------------------------------------
[INTERNAL] 
get an element

>  DataType & casadi::Matrix< DataType >::elem(int rr, int cc=0)
------------------------------------------------------------------------
[INTERNAL] 
get a reference to an element

";

%feature("docstring") casadi::Matrix::zz_atan2 "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_vec "";

%feature("docstring") casadi::Matrix::zz_vecNZ "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_horzcat "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_triu "

Accessed by friend functions.

";

%feature("docstring") casadi::Matrix::isRowVector "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring") casadi::Matrix::setBV "[INTERNAL]  Bitwise set,
reinterpreting the data as a bvec_t array

";

%feature("docstring") casadi::Matrix::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring") casadi::Matrix::zz_sprank "

Accessed by friend functions.

";

%feature("docstring") casadi::Matrix::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") casadi::Matrix::ptr "

>  DataType* casadi::Matrix< DataType >::ptr()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the data

>  const DataType* casadi::Matrix< DataType >::ptr() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the data.

";

%feature("docstring") casadi::Matrix::zz_cofactor "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::setWidth "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") casadi::Matrix::zz_cosh "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::getElementHash "

Returns a number that is unique for a given symbolic scalar.

Only defined if symbolic scalar.

";

%feature("docstring") casadi::Matrix::zz_eq "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_tril "

Accessed by friend functions.

";

%feature("docstring") casadi::Matrix::sym "

>  static Matrix< DataType >  casadi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static Matrix< DataType >  casadi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  static Matrix< DataType >  casadi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  static std::vector<Matrix< DataType >  > casadi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<Matrix< DataType >  > casadi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  static std::vector<std::vector<Matrix< DataType > > > casadi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<Matrix< DataType > > > casadi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") casadi::Matrix::zz_mtaylor "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_outer_prod "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::matrix_matrix "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") casadi::Matrix::binary "[INTERNAL]  Create nodes by
their ID.

";

%feature("docstring") casadi::Matrix::isInteger "

Check if the matrix is integer-valued (note that false negative answers are
possible)

";

%feature("docstring") casadi::Matrix::__mldivide__ "

Matrix division from left.

";

%feature("docstring") casadi::Matrix::sizeU "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::Matrix::zz_hessian "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_mod "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_blockcat "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_diagcat "

Construct a matrix with given block on the diagonal.

";

%feature("docstring") casadi::Matrix::sizeL "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::Matrix::zz_sin "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::append "

Append a matrix vertically (NOTE: only efficient if vector)

";

%feature("docstring") casadi::Matrix::zz_if_else_zero "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_inv "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_times "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_adj "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::zz_simplify "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::zz_sumCols "

Operations called by the corresponding friend functions, MATLAB naming
convention

";

%feature("docstring") casadi::Matrix::printDense "

Print dense matrix-stype.

";

%feature("docstring") casadi::Matrix::begin "

>  iterator casadi::Matrix< DataType >::begin()
------------------------------------------------------------------------
[INTERNAL] 
Get iterators to beginning and end.

>  const_iterator casadi::Matrix< DataType >::begin() const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Matrix::rbegin "[INTERNAL] ";

%feature("docstring") casadi::Matrix::zz_if_else "

Functions called by the corresponding friend functions MATLAB naming

";

%feature("docstring") casadi::Matrix::getRepresentation "

Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1MinusInfSX.xml


// File: classcasadi_1_1MinusOneSX.xml


// File: classcasadi_1_1MultipleOutput.xml


// File: classcasadi_1_1Multiplication.xml


// File: classcasadi_1_1MX.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") casadi::MX::isUnary "

Is unary operation.

";

%feature("docstring") casadi::MX::__constpow__ "";

%feature("docstring") casadi::MX::zz_asinh "";

%feature("docstring") casadi::MX::sizeL "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::MX "

MX - Matrix expression.

The MX class is used to build up trees made up from MXNodes. It is a more
general graph representation than the scalar expression, SX, and much less
efficient for small objects. On the other hand, the class allows much more
general operations than does SX, in particular matrix valued operations and
calls to arbitrary differentiable functions.

The MX class is designed to have identical syntax with the Matrix<> template
class, and uses Matrix<double> as its internal representation of the values
at a node. By keeping the syntaxes identical, it is possible to switch from
one class to the other, as well as inlining MX functions to SXElement
functions.

Note that an operation is always \"lazy\", making a matrix multiplication
will create a matrix multiplication node, not perform the actual
multiplication.

Joel Andersson

C++ includes: mx.hpp ";

%feature("docstring") casadi::MX::zz_sumAll "";

%feature("docstring") casadi::MX::zz_diag "";

%feature("docstring") casadi::MX::sizeD "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") casadi::MX::dimString "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring") casadi::MX::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::MX::__copysign__ "";

%feature("docstring") casadi::MX::zz_sin "";

%feature("docstring") casadi::MX::erase "

>  void casadi::MX::erase(const std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false)
------------------------------------------------------------------------

Erase a submatrix (leaving structural zeros in its place) Erase rows and/or
columns of a matrix.

>  void casadi::MX::erase(const std::vector< int > &rr, bool ind1=false)
------------------------------------------------------------------------

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

";

%feature("docstring") casadi::MX::getNumOutputs "

Number of outputs.

";

%feature("docstring") casadi::MX::zz_plus "

all binary operations

";

%feature("docstring") casadi::MX::printPtr "[INTERNAL]  Print the pointer
to the internal class

";

%feature("docstring") casadi::MX::zz_reshape "";

%feature("docstring") casadi::MX::zz_norm_0_mul "

Accessed by friend functions.

";

%feature("docstring") casadi::MX::zz_polyval "";

%feature("docstring") casadi::MX::zz_det "";

%feature("docstring") casadi::MX::attachAssert "

returns itself, but with an assertion attached

If y does not evaluate to 1, a runtime error is raised

";

%feature("docstring") casadi::MX::zz_mod "";

%feature("docstring") casadi::MX::zz_log10 "";

%feature("docstring") casadi::MX::find "

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.find() A[k] will contain the elements of A that are non-zero in B

";

%feature("docstring") casadi::MX::append "

Append a matrix vertically (NOTE: only efficient if vector)

";

%feature("docstring") casadi::MX::zz_sprank "

Accessed by friend functions.

";

%feature("docstring") casadi::MX::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::MX::set "

>  void casadi::MX::set(const MX &m, bool ind1, const Slice &rr)

>  void casadi::MX::set(const MX &m, bool ind1, const Matrix< int > &rr)

>  void casadi::MX::set(const MX &m, bool ind1, const Sparsity &sp)
------------------------------------------------------------------------

Set a submatrix, single argument

";

%feature("docstring") casadi::MX::getTemp "[INTERNAL]  Get the temporary
variable

";

%feature("docstring") casadi::MX::zz_if_else_zero "";

%feature("docstring") casadi::MX::zz_norm_1 "";

%feature("docstring") casadi::MX::binary "

Create nodes by their ID.

";

%feature("docstring") casadi::MX::zz_and "";

%feature("docstring") casadi::MX::sparsity "[INTERNAL]  Get the sparsity
pattern.

";

%feature("docstring") casadi::MX::zz_cos "";

%feature("docstring") casadi::MX::zz_tanh "";

%feature("docstring") casadi::MX::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") casadi::MX::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") casadi::MX::assertInit "[INTERNAL]  Assert that it is
initialized

";

%feature("docstring") casadi::MX::zz_gradient "";

%feature("docstring") casadi::MX::isMultiplication "

Check if multiplication.

";

%feature("docstring") casadi::MX::zz_minus "";

%feature("docstring") casadi::MX::~MX "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::MX::isConstant "

Check if constant.

";

%feature("docstring") casadi::MX::zz_quad_form "

Accessed by friend functions.

";

%feature("docstring") casadi::MX::zz_erf "";

%feature("docstring") casadi::MX::zz_sum_square "

Accessed by friend functions.

";

%feature("docstring") casadi::MX::zz_printCompact "";

%feature("docstring") casadi::MX::zz_ne "";

%feature("docstring") casadi::MX::sizeU "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::MX::isEvaluationOutput "

Check if evaluation output.

";

%feature("docstring") casadi::MX::assignNode "[INTERNAL]  Assign the node
to a node class pointer (or null)

";

%feature("docstring") casadi::MX::zz_asin "";

%feature("docstring") casadi::MX::isInit "

Is initialized?

";

%feature("docstring") casadi::MX::sparse "

Create a sparse matrix with all zeros DEPRECATED: Use MatType(nrow, ncol)
instead.

";

%feature("docstring") casadi::MX::zz_hessian "";

%feature("docstring") casadi::MX::zz_gt "

No need to have both < and >

";

%feature("docstring") casadi::MX::zz_cross "

Accessed by friend functions.

";

%feature("docstring") casadi::MX::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring") casadi::MX::zz_repmat "";

%feature("docstring") casadi::MX::zz_sinh "";

%feature("docstring") casadi::MX::zz_vecNZ "";

%feature("docstring") casadi::MX::isDense "

Check if the matrix expression is dense.

";

%feature("docstring") casadi::MX::zz_densify "

Accessed by friend functions.

";

%feature("docstring") casadi::MX::getSparsity "

Get an owning reference to the sparsity pattern.

";

%feature("docstring") casadi::MX::isIdentity "

check if identity

";

%feature("docstring") casadi::MX::isMinusOne "

check if zero (note that false negative answers are possible)

";

%feature("docstring") casadi::MX::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::MX::inf "

create a matrix with all inf

";

%feature("docstring") casadi::MX::zz_norm_2 "";

%feature("docstring") casadi::MX::isSymbolicSparse "

check if all nonzeros are symbolic (this function is currently identical to
isSymbolic)

";

%feature("docstring") casadi::MX::getCount "[INTERNAL]  Get the reference
count.

";

%feature("docstring") casadi::MX::zz_isEqual "

>  bool casadi::MX::zz_isEqual(const MXNode *y, int depth=0) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::MX::getColind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::constpow "";

%feature("docstring") casadi::MX::colind "

>  const int* casadi::GenericMatrix< MX  >::colind() const
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity pattern. See the Sparsity class for details.

>  int casadi::GenericMatrix< MX  >::colind(int col) const
------------------------------------------------------------------------

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::print "

Print a description of the object.

";

%feature("docstring") casadi::MX::zz_tril "

Accessed by friend functions.

";

%feature("docstring") casadi::MX::getName "

Get the name.

";

%feature("docstring") casadi::MX::zz_solve "";

%feature("docstring") casadi::MX::zz_norm_F "";

%feature("docstring") casadi::MX::isRegular "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring") casadi::MX::getDep "

Get the nth dependency as MX.

";

%feature("docstring") casadi::MX::zz_times "";

%feature("docstring") casadi::MX::zz_ge "

No need to have both <= and >=.

";

%feature("docstring") casadi::MX::zz_sign "";

%feature("docstring") casadi::MX::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::MX::zz_atan "";

%feature("docstring") casadi::MX::zz_not "";

%feature("docstring") casadi::MX::zz_triu2symm "

Accessed by friend functions.

";

%feature("docstring") casadi::MX::zz_dependsOn "";

%feature("docstring") casadi::MX::zz_triu "

Accessed by friend functions.

";

%feature("docstring") casadi::MX::nnz "

Get the number of (structural) non-zero elements.

";

%feature("docstring") casadi::MX::__truediv__ "";

%feature("docstring") casadi::MX::isScalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::MX::setSparse "

Set sparse.

";

%feature("docstring") casadi::MX::zz_rdivide "";

%feature("docstring") casadi::MX::isTril "

Check if the matrix is lower triangular.

";

%feature("docstring") casadi::MX::zz_mtimes "";

%feature("docstring") casadi::MX::isRowVector "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring") casadi::MX::isZero "

check if zero (note that false negative answers are possible)

";

%feature("docstring") casadi::MX::zz_nullspace "";

%feature("docstring") casadi::MX::getValue "

Get the value (only for scalar constant nodes)

";

%feature("docstring") casadi::MX::zz_ceil "";

%feature("docstring") casadi::MX::getEvaluationOutput "

Get the index of evaluation output - only valid when isEvaluationoutput() is
true.

";

%feature("docstring") casadi::MX::zz_jacobian "";

%feature("docstring") casadi::MX::zz_power "";

%feature("docstring") casadi::MX::__mrdivide__ "";

%feature("docstring") casadi::MX::appendColumns "

Append a matrix horizontally.

";

%feature("docstring") casadi::MX::zz_outer_prod "";

%feature("docstring") casadi::MX::zz_tril2symm "

Accessed by friend functions.

";

%feature("docstring") casadi::MX::zz_blocksplit "";

%feature("docstring") casadi::MX::zz_inv "";

%feature("docstring") casadi::MX::__hash__ "

Returns a number that is unique for a given MXNode. If the MX does not point
to any node, 0 is returned.

";

%feature("docstring") casadi::MX::getOutput "

Get an output.

";

%feature("docstring") casadi::MX::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") casadi::MX::makeDense "

Make the matrix dense.

";

%feature("docstring") casadi::MX::size "

>  int casadi::GenericMatrix< MX  >::size() const
------------------------------------------------------------------------

DEPRECATED: Alias for nnz.

See:   nnz()

>  int casadi::GenericMatrix< MX  >::size(SparsityType sp) const
------------------------------------------------------------------------

Get the number if non-zeros for a given sparsity pattern.

";

%feature("docstring") casadi::MX::T "

Transpose the matrix.

";

%feature("docstring") casadi::MX::zz_atanh "";

%feature("docstring") casadi::MX::printme "";

%feature("docstring") casadi::MX::zz_kron "";

%feature("docstring") casadi::MX::lift "

Lift an expression.

";

%feature("docstring") casadi::MX::nan "

create a matrix with all nan

";

%feature("docstring") casadi::MX::zz_or "";

%feature("docstring") casadi::MX::isTranspose "

Is the expression a transpose?

";

%feature("docstring") casadi::MX::row "

>  const int* casadi::GenericMatrix< MX  >::row() const
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity pattern. See the Sparsity class for details.

>  int casadi::GenericMatrix< MX  >::row(int el) const
------------------------------------------------------------------------

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::assignNodeNoCount "[INTERNAL]  Assign the
node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::MX::zz_horzsplit "";

%feature("docstring") casadi::MX::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::MX::zz_diagsplit "";

%feature("docstring") casadi::MX::at "

>  const MX casadi::MX::at(int k) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a non-zero element, with bounds checking.

>  NonZeros<MX, int> casadi::MX::at(int k)
------------------------------------------------------------------------
[INTERNAL] 
Access a non-zero element, with bounds checking.

";

%feature("docstring") casadi::MX::isCommutative "

Check if commutative operation.

";

%feature("docstring") casadi::MX::zz_log "";

%feature("docstring") casadi::MX::zz_atan2 "";

%feature("docstring") casadi::MX::numel "

>  int casadi::GenericMatrix< MX  >::numel() const
------------------------------------------------------------------------

Get the number of elements.

>  int casadi::GenericMatrix< MX  >::numel(int i) const
------------------------------------------------------------------------

Get the number of elements in slice (cf. MATLAB)

";

%feature("docstring") casadi::MX::zz_eq "";

%feature("docstring") casadi::MX::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring") casadi::MX::sym "

>  static MX  casadi::GenericMatrix< MX  >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static MX  casadi::GenericMatrix< MX  >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  static MX  casadi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  static std::vector<MX  > casadi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<MX  > casadi::GenericMatrix< MX  >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  static std::vector<std::vector<MX > > casadi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<MX > > casadi::GenericMatrix< MX  >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") casadi::MX::isVector "

Check if the matrix is a column vector (i.e. size2()==1) Optionally, checks
if either row or column vector.

";

%feature("docstring") casadi::MX::isSquare "

Check if the matrix expression is square.

";

%feature("docstring") casadi::MX::zz_norm_inf "";

%feature("docstring") casadi::MX::setNZ "

Set a set of nonzeros

";

%feature("docstring") casadi::MX::isSymbolic "

Check if symbolic.

";

%feature("docstring") casadi::MX::zz_graph_substitute "";

%feature("docstring") casadi::MX::isOne "

check if zero (note that false negative answers are possible)

";

%feature("docstring") casadi::MX::get "

>  void casadi::MX::get(MX &output_m, bool ind1, const Slice &rr) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Matrix< int > &rr) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Sparsity &sp) const 
------------------------------------------------------------------------

Get a submatrix, single argument

>  void casadi::MX::get(MX &output_m, bool ind1, const Slice &rr, const Slice &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Slice &rr, const Matrix< int > &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Matrix< int > &rr, const Slice &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Matrix< int > &rr, const Matrix< int > &cc) const 
------------------------------------------------------------------------

Get a submatrix, two arguments

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::MX::zz_tangent "";

%feature("docstring") casadi::MX::isTriu "

Check if the matrix is upper triangular.

";

%feature("docstring") casadi::MX::zz_abs "";

%feature("docstring") casadi::MX::repr "

Print a representation of the object.

";

%feature("docstring") casadi::MX::getFunction "

Get function.

";

%feature("docstring") casadi::MX::isEmpty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::MX::addToSum "

Add an expression to the expression if the expression is non-empty,
otherwise assign.

";

%feature("docstring") casadi::MX::zz_vec "";

%feature("docstring") casadi::MX::zz_acos "";

%feature("docstring") casadi::MX::zz_trace "";

%feature("docstring") casadi::MX::__nonzero__ "

Returns the truth value of an MX expression.

";

%feature("docstring") casadi::MX::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::MX::zz_getOperatorRepresentation "";

%feature("docstring") casadi::MX::zz_acosh "";

%feature("docstring") casadi::MX::zz_countNodes "";

%feature("docstring") casadi::MX::isNull "

Is a null pointer?

";

%feature("docstring") casadi::MX::zz_linspace "

Accessed by friend functions.

";

%feature("docstring") casadi::MX::zz_tan "";

%feature("docstring") casadi::MX::zz_cosh "";

%feature("docstring") casadi::MX::sparsityRef "[INTERNAL]  Access the
sparsity, make a copy if there are multiple references to it.

";

%feature("docstring") casadi::MX::zz_floor "";

%feature("docstring") casadi::MX::MX "

>  casadi::MX::MX()
------------------------------------------------------------------------

Default constructor.

>  casadi::MX::MX(int nrow, int ncol)
------------------------------------------------------------------------

Create a sparse matrix with all structural zeros.

>  casadi::MX::MX(const std::pair< int, int > &rc)
------------------------------------------------------------------------
[INTERNAL] 
Create a sparse matrix with all structural zeros.

>  casadi::MX::MX(const Sparsity &sp)
------------------------------------------------------------------------

Sparse matrix with a given sparsity and zero entries Same as
MX::zeros(sparsity)

>  casadi::MX::MX(const Sparsity &sp, const MX &val)
------------------------------------------------------------------------

Construct matrix with a given sparsity and nonzeros.

>  casadi::MX::MX(double x)
------------------------------------------------------------------------

Create scalar constant (also implicit type conversion)

>  casadi::MX::MX(const MX &x)
------------------------------------------------------------------------

Copy constructor.

>  casadi::MX::MX(const std::vector< double > &x)
------------------------------------------------------------------------

Create vector constant (also implicit type conversion)

>  casadi::MX::MX(const Matrix< double > &x)
------------------------------------------------------------------------

Create sparse matrix constant (also implicit type conversion)

>  casadi::MX::MX(const Sparsity &sp, int val, bool dummy)
------------------------------------------------------------------------
[INTERNAL] 
Construct constant matrix with a given sparsity and all.

>  casadi::MX::MX(const Sparsity &sp, double val, bool dummy)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::MX::zz_sumRows "";

%feature("docstring") casadi::MX::isBinary "

Is binary operation.

";

%feature("docstring") casadi::MX::zz_inner_prod "";

%feature("docstring") casadi::MX::getOp "

Get operation type.

";

%feature("docstring") casadi::MX::zz_sumCols "";

%feature("docstring") casadi::MX::weak "[INTERNAL]  Get a weak reference to
the object.

";

%feature("docstring") casadi::MX::zz_erfinv "";

%feature("docstring") casadi::MX::isNorm "

Check if norm.

";

%feature("docstring") casadi::MX::zz_max "";

%feature("docstring") casadi::MX::zz_sqrt "";

%feature("docstring") casadi::MX::zz_min "";

%feature("docstring") casadi::MX::__mldivide__ "

Matrix division from left.

";

%feature("docstring") casadi::MX::setTemp "[INTERNAL]  Set the temporary
variable.

";

%feature("docstring") casadi::MX::getMatrixValue "

Get the value (only for constant nodes)

";

%feature("docstring") casadi::MX::zz_getSymbols "";

%feature("docstring") casadi::MX::zz_mpower "";

%feature("docstring") casadi::MX::mapping "

Get an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::MX::getNZ "

Get a set of nonzeros

";

%feature("docstring") casadi::MX::isEvaluation "

Check if evaluation.

";

%feature("docstring") casadi::MX::isOperation "

Is it a certain operation.

";

%feature("docstring") casadi::MX::getRow "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::shape "

Get the shape.

";

%feature("docstring") casadi::MX::getNdeps "

Get the number of dependencies of a binary SXElement.

";

%feature("docstring") casadi::MX::zz_unite "";

%feature("docstring") casadi::MX::zz_if_else "";

%feature("docstring") casadi::MX::zz_lt "";

%feature("docstring") casadi::MX::zz_substitute "";

%feature("docstring") casadi::MX::zz_simplify "";

%feature("docstring") casadi::MX::zz_vertsplit "";

%feature("docstring") casadi::MX::zz_le "";

%feature("docstring") casadi::MX::zz_exp "";

%feature("docstring") casadi::MX::unary "

Create nodes by their ID.

";

%feature("docstring") casadi::MX::zz_pinv "";


// File: classcasadi_1_1MXFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::MXFunction::outputSchemeEntry " [INTERNAL]  Find the index for a
string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::MXFunction::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::MXFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::MXFunction::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::MXFunction::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::MXFunction::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::MXFunction::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::MXFunction::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::MXFunction::MXFunction "

>  casadi::MXFunction::MXFunction()
------------------------------------------------------------------------

Default constructor.

>  casadi::MXFunction::MXFunction(const Function &function)
------------------------------------------------------------------------

Attempt to form an MXFunction out of an Function.

>  casadi::MXFunction::MXFunction(const MX &input, const MX &output)
------------------------------------------------------------------------
[INTERNAL] 
Single input, single output.

>  casadi::MXFunction::MXFunction(const MX &input, const std::vector< MX > &output)
------------------------------------------------------------------------
[INTERNAL] 
Single input, multiple output.

>  casadi::MXFunction::MXFunction(const std::vector< MX > &input, const MX &output)
------------------------------------------------------------------------
[INTERNAL] 
Multiple input, single output.

>  casadi::MXFunction::MXFunction(const std::vector< MX > &input, const std::vector< MX > &output)

>  casadi::MXFunction::MXFunction(const std::vector< MX > &input, const IOSchemeVector< MX > &output)

>  casadi::MXFunction::MXFunction(const IOSchemeVector< MX > &input, const std::vector< MX > &output)

>  casadi::MXFunction::MXFunction(const IOSchemeVector< MX > &input, const IOSchemeVector< MX > &output)
------------------------------------------------------------------------

Multiple input, multiple output.

";

%feature("docstring") casadi::MXFunction::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::MXFunction::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::MXFunction::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::MXFunction::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::MXFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::MXFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::MXFunction::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::MXFunction::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::MXFunction::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::MXFunction::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::MXFunction::repr "

Print a representation of the object.

";

%feature("docstring") casadi::MXFunction::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::MXFunction::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::MXFunction::expand "

Expand the matrix valued graph into a scalar valued graph.

";

%feature("docstring") casadi::MXFunction::jac "

Jacobian via source code transformation.

";

%feature("docstring") casadi::MXFunction::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::MXFunction::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::MXFunction::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::MXFunction::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::MXFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::MXFunction::outputExpr "

>  const MX& casadi::MXFunction::outputExpr(int ind) const 
------------------------------------------------------------------------

Get function output.

>  const std::vector<MX>& casadi::MXFunction::outputExpr() const 
------------------------------------------------------------------------

Get all function outputs.

";

%feature("docstring") casadi::MXFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::MXFunction::hasOption "

check if there is an option str

";

%feature("docstring") casadi::MXFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::MXFunction::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::MXFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::MXFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::MXFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::MXFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::MXFunction::getOption "

get an option value

";

%feature("docstring") casadi::MXFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::MXFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::MXFunction::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::MXFunction::grad "

Gradient via source code transformation.

";

%feature("docstring") casadi::MXFunction::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::MXFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::MXFunction::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::MXFunction::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::MXFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::MXFunction::inputExpr "

>  const MX& casadi::MXFunction::inputExpr(int ind) const 
------------------------------------------------------------------------

Get function input.

>  const std::vector<MX>& casadi::MXFunction::inputExpr() const 
------------------------------------------------------------------------

Get all function inputs.

";

%feature("docstring") casadi::MXFunction::evaluate "

Evaluate.

";

%feature("docstring") casadi::MXFunction::getAlgorithmSize "

Get the number of atomic operations.

";

%feature("docstring") casadi::MXFunction::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::MXFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::MXFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::MXFunction::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::MXFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::MXFunction::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::MXFunction::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::MXFunction::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::MXFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::MXFunction::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::MXFunction::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::MXFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::MXFunction::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::MXFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::MXFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::MXFunction::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::MXFunction::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::MXFunction::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::MXFunction "

General function mapping from/to MX.

Joel Andersson

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams
--------



C++ includes: mx_function.hpp ";

%feature("docstring") casadi::MXFunction::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::MXFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::MXFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::MXFunction::isNull "

Is a null pointer?

";

%feature("docstring") casadi::MXFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::MXFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::MXFunction::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::MXFunction::countNodes "

Number of nodes in the algorithm.

";

%feature("docstring") casadi::MXFunction::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::MXFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::MXFunction::print "

Print a description of the object.

";

%feature("docstring") casadi::MXFunction::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::MXFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::MXFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::MXFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::MXFunction::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::MXFunction::tang "

Tangent via source code transformation.

";

%feature("docstring") casadi::MXFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::MXFunction::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::MXFunction::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::MXFunction::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::MXFunction::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::MXFunction::algorithm "[INTERNAL]  Access the
algorithm directly.

";

%feature("docstring") casadi::MXFunction::isInit "

Is initialized?

";

%feature("docstring") casadi::MXFunction::getFree "

Get all the free variables of the function.

";

%feature("docstring") casadi::MXFunction::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::MXFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::MXFunction::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::MXFunction::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::MXFunction::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::MXFunction::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::MXFunction::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::MXFunction::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::MXFunction::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::MXFunction::getWorkSize "

Get the length of the work vector.

";

%feature("docstring") casadi::MXFunction::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::MXFunction::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::MXFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::MXFunction::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::MXFunction::generateLiftingFunctions "[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::MXFunction::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::MXFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::MXFunction::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::MXFunction::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::MXFunction::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::MXFunction::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::MXFunction::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::MXFunction::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::MXFunction::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::MXFunction::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::MXFunction::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";


// File: classcasadi_1_1NanSX.xml


// File: classcasadi_1_1Newton.xml


// File: classcasadi_1_1NLPInputIOSchemeVector.xml
%feature("docstring") casadi::NLPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::NLPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::NLPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::NLPInputIOSchemeVector "[INTERNAL]  Helper
function for 'NLPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::NLPInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::NLPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::NLPInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::NLPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::NLPInputIOSchemeVector::NLPInputIOSchemeVector
"[INTERNAL] ";


// File: classcasadi_1_1NLPOutputIOSchemeVector.xml
%feature("docstring") casadi::NLPOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::NLPOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::NLPOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::NLPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'NLPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::NLPOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
casadi::NLPOutputIOSchemeVector::NLPOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::NLPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::NLPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::NLPOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1NlpSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::NlpSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::NlpSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::NlpSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::NlpSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::NlpSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::NlpSolver::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::NlpSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::NlpSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::NlpSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::NlpSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::NlpSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::NlpSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::NlpSolver::NlpSolver "

>  casadi::NlpSolver::NlpSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::NlpSolver::NlpSolver(const std::string &name, const Function &nlp)
------------------------------------------------------------------------

NLP solver factory.

";

%feature("docstring") casadi::NlpSolver::matchingAdjSeed "[INTERNAL]  Check
if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::NlpSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::NlpSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::NlpSolver::jacG "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 4) [hessLagIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 5) [hessLagOut]

+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") casadi::NlpSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::NlpSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::NlpSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::NlpSolver::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::NlpSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::NlpSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::NlpSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::NlpSolver::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::NlpSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::NlpSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::NlpSolver::nlp "

Access the NLP.

>Input scheme: casadi::NlpSolverInput (NLP_SOLVER_NUM_IN = 8) [nlpSolverIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NlpSolverOutput (NLP_SOLVER_NUM_OUT = 6) [nlpSolverOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::NlpSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::NlpSolver::getReducedHessian "

Get the reduced Hessian. Requires a patched sIPOPT installation, see CasADi
documentation.

";

%feature("docstring") casadi::NlpSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::NlpSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::NlpSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::NlpSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::NlpSolver::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::NlpSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::NlpSolver::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") casadi::NlpSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::NlpSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::NlpSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::NlpSolver::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::NlpSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NlpSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::NlpSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::NlpSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::NlpSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::NlpSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::NlpSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::NlpSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::NlpSolver::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") casadi::NlpSolver::getOption "

get an option value

";

%feature("docstring") casadi::NlpSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::NlpSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::NlpSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::NlpSolver::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::NlpSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::NlpSolver::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::NlpSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::NlpSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::NlpSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::NlpSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::NlpSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::NlpSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::NlpSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::NlpSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::NlpSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::NlpSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::NlpSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::NlpSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::NlpSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::NlpSolver "

NlpSolver.

Solves the following parametric nonlinear program (NLP):

::

  min          F(x, p)
   x
  
  subject to
              LBX <=   x    <= UBX
              LBG <= G(x, p) <= UBG
                         p  == P
  
      nx: number of decision variables
      ng: number of constraints
      np: number of parameters
  



General information
===================



>Input scheme: casadi::NlpSolverInput (NLP_SOLVER_NUM_IN = 8) [nlpSolverIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NlpSolverOutput (NLP_SOLVER_NUM_OUT = 6) [nlpSolverOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| eval_errors_ | OT_BOOLEAN   | false        | When errors  | casadi::NlpS |
| fatal        |              |              | occur during | olverInterna |
|              |              |              | evaluation   | l            |
|              |              |              | of           |              |
|              |              |              | f,g,...,stop |              |
|              |              |              | the          |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | casadi::NlpS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_f       | OT_FUNCTION  | GenericType( | Function for | casadi::NlpS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (column, aut |              |
|              |              |              | ogenerated   |              |
|              |              |              | by default)  |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NlpS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hess_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NlpS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Hessian  | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | casadi::NlpS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | casadi::NlpS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | casadi::NlpS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | casadi::NlpS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_f        | OT_FUNCTION  | GenericType( | Function for | casadi::NlpS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (sparse row, |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_g        | OT_FUNCTION  | GenericType( | Function for | casadi::NlpS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | (autogenerat |              |
|              |              |              | ed by        |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | casadi::NlpS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- ipopt

- knitro

- snopt

- worhp

- scpgen

- sqpmethod

- stabilizedsqp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
NlpSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

ipopt
-----



When in warmstart mode, output NLP_SOLVER_LAM_X may be used as input

NOTE: Even when max_iter == 0, it is not guaranteed that
input(NLP_SOLVER_X0) == output(NLP_SOLVER_X). Indeed if bounds on X or
constraints are unmet, they will differ.

For a good tutorial on IPOPT,
seehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf

A good resource about the algorithms in IPOPT is: Wachter and L. T. Biegler,
On the Implementation of an Interior-Point Filter Line-Search Algorithm for
Large-Scale Nonlinear Programming, Mathematical Programming 106(1), pp.
25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson Research Center,
Yorktown, USA

Caveats: with default options, multipliers for the decision variables are
wrong for equality constraints. Change the 'fixed_variable_treatment' to
'make_constraint' or 'relax_bounds' to obtain correct results.

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| accept_after_ma | OT_INTEGER      | -1              | Accept a trial  |
| x_steps         |                 |                 | point after     |
|                 |                 |                 | maximal this    |
|                 |                 |                 | number of       |
|                 |                 |                 | steps. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| accept_every_tr | OT_STRING       | no              | Always accept   |
| ial_step        |                 |                 | the first trial |
|                 |                 |                 | step. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| acceptable_comp | OT_REAL         | 0.010           | \"Acceptance\"    |
| l_inf_tol       |                 |                 | threshold for   |
|                 |                 |                 | the             |
|                 |                 |                 | complementarity |
|                 |                 |                 | conditions.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| acceptable_cons | OT_REAL         | 0.010           | \"Acceptance\"    |
| tr_viol_tol     |                 |                 | threshold for   |
|                 |                 |                 | the constraint  |
|                 |                 |                 | violation. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| acceptable_dual | OT_REAL         | 1.000e+10       | \"Acceptance\"    |
| _inf_tol        |                 |                 | threshold for   |
|                 |                 |                 | the dual        |
|                 |                 |                 | infeasibility.  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| acceptable_iter | OT_INTEGER      | 15              | Number of       |
|                 |                 |                 | \"acceptable\"    |
|                 |                 |                 | iterates before |
|                 |                 |                 | triggering      |
|                 |                 |                 | termination.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| acceptable_obj_ | OT_REAL         | 1.000e+20       | \"Acceptance\"    |
| change_tol      |                 |                 | stopping        |
|                 |                 |                 | criterion based |
|                 |                 |                 | on objective    |
|                 |                 |                 | function        |
|                 |                 |                 | change. (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| acceptable_tol  | OT_REAL         | 0.000           | \"Acceptable\"    |
|                 |                 |                 | convergence     |
|                 |                 |                 | tolerance       |
|                 |                 |                 | (relative).     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| adaptive_mu_glo | OT_STRING       | obj-constr-     | Globalization   |
| balization      |                 | filter          | strategy for    |
|                 |                 |                 | the adaptive mu |
|                 |                 |                 | selection mode. |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| adaptive_mu_kkt | OT_STRING       | 2-norm-squared  | Norm used for   |
| _norm_type      |                 |                 | the KKT error   |
|                 |                 |                 | in the adaptive |
|                 |                 |                 | mu              |
|                 |                 |                 | globalization   |
|                 |                 |                 | strategies.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| adaptive_mu_kkt | OT_REAL         | 1.000           | Sufficient      |
| error_red_fact  |                 |                 | decrease factor |
|                 |                 |                 | for \"kkt-error\" |
|                 |                 |                 | globalization   |
|                 |                 |                 | strategy. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| adaptive_mu_kkt | OT_INTEGER      | 4               | Maximum number  |
| error_red_iters |                 |                 | of iterations   |
|                 |                 |                 | requiring       |
|                 |                 |                 | sufficient      |
|                 |                 |                 | progress. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| adaptive_mu_mon | OT_REAL         | 0.800           | Determines the  |
| otone_init_fact |                 |                 | initial value   |
| or              |                 |                 | of the barrier  |
|                 |                 |                 | parameter when  |
|                 |                 |                 | switching to    |
|                 |                 |                 | the monotone    |
|                 |                 |                 | mode. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| adaptive_mu_res | OT_STRING       | no              | Indicates if    |
| tore_previous_i |                 |                 | the previous    |
| terate          |                 |                 | iterate should  |
|                 |                 |                 | be restored if  |
|                 |                 |                 | the monotone    |
|                 |                 |                 | mode is         |
|                 |                 |                 | entered. (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| adaptive_mu_saf | OT_REAL         | 0               | (see IPOPT      |
| eguard_factor   |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| alpha_for_y     | OT_STRING       | primal          | Method to       |
|                 |                 |                 | determine the   |
|                 |                 |                 | step size for   |
|                 |                 |                 | constraint      |
|                 |                 |                 | multipliers.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| alpha_for_y_tol | OT_REAL         | 10              | Tolerance for   |
|                 |                 |                 | switching to    |
|                 |                 |                 | full equality   |
|                 |                 |                 | multiplier      |
|                 |                 |                 | steps. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| alpha_min_frac  | OT_REAL         | 0.050           | Safety factor   |
|                 |                 |                 | for the minimal |
|                 |                 |                 | step size       |
|                 |                 |                 | (before         |
|                 |                 |                 | switching to    |
|                 |                 |                 | restoration     |
|                 |                 |                 | phase). (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| alpha_red_facto | OT_REAL         | 0.500           | Fractional      |
| r               |                 |                 | reduction of    |
|                 |                 |                 | the trial step  |
|                 |                 |                 | size in the     |
|                 |                 |                 | backtracking    |
|                 |                 |                 | line search.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| barrier_tol_fac | OT_REAL         | 10              | Factor for mu   |
| tor             |                 |                 | in barrier stop |
|                 |                 |                 | test. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| bound_frac      | OT_REAL         | 0.010           | Desired minimum |
|                 |                 |                 | relative        |
|                 |                 |                 | distance from   |
|                 |                 |                 | the initial     |
|                 |                 |                 | point to bound. |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| bound_mult_init | OT_STRING       | constant        | Initialization  |
| _method         |                 |                 | method for      |
|                 |                 |                 | bound           |
|                 |                 |                 | multipliers     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| bound_mult_init | OT_REAL         | 1               | Initial value   |
| _val            |                 |                 | for the bound   |
|                 |                 |                 | multipliers.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| bound_mult_rese | OT_REAL         | 1000            | Threshold for   |
| t_threshold     |                 |                 | resetting bound |
|                 |                 |                 | multipliers     |
|                 |                 |                 | after the       |
|                 |                 |                 | restoration     |
|                 |                 |                 | phase. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| bound_push      | OT_REAL         | 0.010           | Desired minimum |
|                 |                 |                 | absolute        |
|                 |                 |                 | distance from   |
|                 |                 |                 | the initial     |
|                 |                 |                 | point to bound. |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| bound_relax_fac | OT_REAL         | 0.000           | Factor for      |
| tor             |                 |                 | initial         |
|                 |                 |                 | relaxation of   |
|                 |                 |                 | the bounds.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| check_derivativ | OT_STRING       | no              | Indicates       |
| es_for_naninf   |                 |                 | whether it is   |
|                 |                 |                 | desired to      |
|                 |                 |                 | check for       |
|                 |                 |                 | Nan/Inf in      |
|                 |                 |                 | derivative      |
|                 |                 |                 | matrices (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| chi_cup         | OT_REAL         | 1.500           | LIFENG WRITES   |
|                 |                 |                 | THIS. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| chi_hat         | OT_REAL         | 2               | LIFENG WRITES   |
|                 |                 |                 | THIS. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| chi_tilde       | OT_REAL         | 5               | LIFENG WRITES   |
|                 |                 |                 | THIS. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| compl_inf_tol   | OT_REAL         | 0.000           | Desired         |
|                 |                 |                 | threshold for   |
|                 |                 |                 | the             |
|                 |                 |                 | complementarity |
|                 |                 |                 | conditions.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| con_integer_md  | OT_DICTIONARY   | None            | Integer         |
|                 |                 |                 | metadata (a     |
|                 |                 |                 | dictionary with |
|                 |                 |                 | lists of        |
|                 |                 |                 | integers) about |
|                 |                 |                 | constraints to  |
|                 |                 |                 | be passed to    |
|                 |                 |                 | IPOPT           |
+-----------------+-----------------+-----------------+-----------------+
| con_numeric_md  | OT_DICTIONARY   | None            | Numeric         |
|                 |                 |                 | metadata (a     |
|                 |                 |                 | dictionary with |
|                 |                 |                 | lists of reals) |
|                 |                 |                 | about           |
|                 |                 |                 | constraints to  |
|                 |                 |                 | be passed to    |
|                 |                 |                 | IPOPT           |
+-----------------+-----------------+-----------------+-----------------+
| con_string_md   | OT_DICTIONARY   | None            | String metadata |
|                 |                 |                 | (a dictionary   |
|                 |                 |                 | with lists of   |
|                 |                 |                 | strings) about  |
|                 |                 |                 | constraints to  |
|                 |                 |                 | be passed to    |
|                 |                 |                 | IPOPT           |
+-----------------+-----------------+-----------------+-----------------+
| constr_mult_ini | OT_REAL         | 1000            | Maximum allowed |
| t_max           |                 |                 | least-square    |
|                 |                 |                 | guess of        |
|                 |                 |                 | constraint      |
|                 |                 |                 | multipliers.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| constr_mult_res | OT_REAL         | 0               | Threshold for   |
| et_threshold    |                 |                 | resetting       |
|                 |                 |                 | equality and    |
|                 |                 |                 | inequality      |
|                 |                 |                 | multipliers     |
|                 |                 |                 | after           |
|                 |                 |                 | restoration     |
|                 |                 |                 | phase. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| constr_viol_tol | OT_REAL         | 0.000           | Desired         |
|                 |                 |                 | threshold for   |
|                 |                 |                 | the constraint  |
|                 |                 |                 | violation. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| constraint_viol | OT_STRING       | 1-norm          | Norm to be used |
| ation_norm_type |                 |                 | for the         |
|                 |                 |                 | constraint      |
|                 |                 |                 | violation in    |
|                 |                 |                 | the line        |
|                 |                 |                 | search. (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| corrector_compl | OT_REAL         | 1               | Complementarity |
| _avrg_red_fact  |                 |                 | tolerance       |
|                 |                 |                 | factor for      |
|                 |                 |                 | accepting       |
|                 |                 |                 | corrector step  |
|                 |                 |                 | (unsupported!). |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| corrector_type  | OT_STRING       | none            | The type of     |
|                 |                 |                 | corrector steps |
|                 |                 |                 | that should be  |
|                 |                 |                 | taken           |
|                 |                 |                 | (unsupported!). |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| delta           | OT_REAL         | 1               | Multiplier for  |
|                 |                 |                 | constraint      |
|                 |                 |                 | violation in    |
|                 |                 |                 | the switching   |
|                 |                 |                 | rule. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| delta_y_max     | OT_REAL         | 1.000e+12       | a parameter     |
|                 |                 |                 | used to check   |
|                 |                 |                 | if the fast     |
|                 |                 |                 | direction can   |
|                 |                 |                 | be used asthe   |
|                 |                 |                 | line search     |
|                 |                 |                 | direction (for  |
|                 |                 |                 | Chen-Goldfarb   |
|                 |                 |                 | line search).   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| dependency_dete | OT_STRING       | no              | Indicates if    |
| ction_with_rhs  |                 |                 | the right hand  |
|                 |                 |                 | sides of the    |
|                 |                 |                 | constraints     |
|                 |                 |                 | should be       |
|                 |                 |                 | considered      |
|                 |                 |                 | during          |
|                 |                 |                 | dependency      |
|                 |                 |                 | detection (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| dependency_dete | OT_STRING       | none            | Indicates which |
| ctor            |                 |                 | linear solver   |
|                 |                 |                 | should be used  |
|                 |                 |                 | to detect       |
|                 |                 |                 | linearly        |
|                 |                 |                 | dependent       |
|                 |                 |                 | equality        |
|                 |                 |                 | constraints.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| derivative_test | OT_STRING       | none            | Enable          |
|                 |                 |                 | derivative      |
|                 |                 |                 | checker (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| derivative_test | OT_INTEGER      | -2              | Index of first  |
| _first_index    |                 |                 | quantity to be  |
|                 |                 |                 | checked by      |
|                 |                 |                 | derivative      |
|                 |                 |                 | checker (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| derivative_test | OT_REAL         | 0.000           | Size of the     |
| _perturbation   |                 |                 | finite          |
|                 |                 |                 | difference      |
|                 |                 |                 | perturbation in |
|                 |                 |                 | derivative      |
|                 |                 |                 | test. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| derivative_test | OT_STRING       | no              | Indicates       |
| _print_all      |                 |                 | whether         |
|                 |                 |                 | information for |
|                 |                 |                 | all estimated   |
|                 |                 |                 | derivatives     |
|                 |                 |                 | should be       |
|                 |                 |                 | printed. (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| derivative_test | OT_REAL         | 0.000           | Threshold for   |
| _tol            |                 |                 | indicating      |
|                 |                 |                 | wrong           |
|                 |                 |                 | derivative.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| diverging_itera | OT_REAL         | 1.000e+20       | Threshold for   |
| tes_tol         |                 |                 | maximal value   |
|                 |                 |                 | of primal       |
|                 |                 |                 | iterates. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| dual_inf_tol    | OT_REAL         | 1               | Desired         |
|                 |                 |                 | threshold for   |
|                 |                 |                 | the dual        |
|                 |                 |                 | infeasibility.  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| epsilon_c       | OT_REAL         | 0.010           | LIFENG WRITES   |
|                 |                 |                 | THIS. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| eta_min         | OT_REAL         | 10              | LIFENG WRITES   |
|                 |                 |                 | THIS. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| eta_penalty     | OT_REAL         | 0.000           | Relaxation      |
|                 |                 |                 | factor in the   |
|                 |                 |                 | Armijo          |
|                 |                 |                 | condition for   |
|                 |                 |                 | the penalty     |
|                 |                 |                 | function. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| eta_phi         | OT_REAL         | 0.000           | Relaxation      |
|                 |                 |                 | factor in the   |
|                 |                 |                 | Armijo          |
|                 |                 |                 | condition. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| evaluate_orig_o | OT_STRING       | yes             | Determines if   |
| bj_at_resto_tri |                 |                 | the original    |
| al              |                 |                 | objective       |
|                 |                 |                 | function should |
|                 |                 |                 | be evaluated at |
|                 |                 |                 | restoration     |
|                 |                 |                 | phase trial     |
|                 |                 |                 | points. (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| expect_infeasib | OT_STRING       | no              | Enable          |
| le_problem      |                 |                 | heuristics to   |
|                 |                 |                 | quickly detect  |
|                 |                 |                 | an infeasible   |
|                 |                 |                 | problem. (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| expect_infeasib | OT_REAL         | 0.001           | Threshold for   |
| le_problem_ctol |                 |                 | disabling \"expe |
|                 |                 |                 | ct_infeasible_p |
|                 |                 |                 | roblem\" option. |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| expect_infeasib | OT_REAL         | 100000000       | Multiplier      |
| le_problem_ytol |                 |                 | threshold for   |
|                 |                 |                 | activating \"exp |
|                 |                 |                 | ect_infeasible_ |
|                 |                 |                 | problem\"        |
|                 |                 |                 | option. (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| fast_des_fact   | OT_REAL         | 0.100           | a parameter     |
|                 |                 |                 | used to check   |
|                 |                 |                 | if the fast     |
|                 |                 |                 | direction can   |
|                 |                 |                 | be used asthe   |
|                 |                 |                 | line search     |
|                 |                 |                 | direction (for  |
|                 |                 |                 | Chen-Goldfarb   |
|                 |                 |                 | line search).   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| fast_step_compu | OT_STRING       | no              | Indicates if    |
| tation          |                 |                 | the linear      |
|                 |                 |                 | system should   |
|                 |                 |                 | be solved       |
|                 |                 |                 | quickly. (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| file_print_leve | OT_INTEGER      | 5               | Verbosity level |
| l               |                 |                 | for output      |
|                 |                 |                 | file. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| filter_margin_f | OT_REAL         | 0.000           | Factor          |
| act             |                 |                 | determining     |
|                 |                 |                 | width of margin |
|                 |                 |                 | for obj-constr- |
|                 |                 |                 | filter adaptive |
|                 |                 |                 | globalization   |
|                 |                 |                 | strategy. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| filter_max_marg | OT_REAL         | 1               | Maximum width   |
| in              |                 |                 | of margin in    |
|                 |                 |                 | obj-constr-     |
|                 |                 |                 | filter adaptive |
|                 |                 |                 | globalization   |
|                 |                 |                 | strategy. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| filter_reset_tr | OT_INTEGER      | 5               | Number of       |
| igger           |                 |                 | iterations that |
|                 |                 |                 | trigger the     |
|                 |                 |                 | filter reset.   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| findiff_perturb | OT_REAL         | 0.000           | Size of the     |
| ation           |                 |                 | finite          |
|                 |                 |                 | difference      |
|                 |                 |                 | perturbation    |
|                 |                 |                 | for derivative  |
|                 |                 |                 | approximation.  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| first_hessian_p | OT_REAL         | 0.000           | Size of first   |
| erturbation     |                 |                 | x-s             |
|                 |                 |                 | perturbation    |
|                 |                 |                 | tried. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| fixed_mu_oracle | OT_STRING       | average_compl   | Oracle for the  |
|                 |                 |                 | barrier         |
|                 |                 |                 | parameter when  |
|                 |                 |                 | switching to    |
|                 |                 |                 | fixed mode.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| fixed_variable_ | OT_STRING       | make_parameter  | Determines how  |
| treatment       |                 |                 | fixed variables |
|                 |                 |                 | should be       |
|                 |                 |                 | handled. (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| gamma_hat       | OT_REAL         | 0.040           | LIFENG WRITES   |
|                 |                 |                 | THIS. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| gamma_phi       | OT_REAL         | 0.000           | Relaxation      |
|                 |                 |                 | factor in the   |
|                 |                 |                 | filter margin   |
|                 |                 |                 | for the barrier |
|                 |                 |                 | function. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| gamma_theta     | OT_REAL         | 0.000           | Relaxation      |
|                 |                 |                 | factor in the   |
|                 |                 |                 | filter margin   |
|                 |                 |                 | for the         |
|                 |                 |                 | constraint      |
|                 |                 |                 | violation. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| gamma_tilde     | OT_REAL         | 4               | LIFENG WRITES   |
|                 |                 |                 | THIS. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| hessian_approxi | OT_STRING       | exact           | Indicates what  |
| mation          |                 |                 | Hessian         |
|                 |                 |                 | information is  |
|                 |                 |                 | to be used.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| hessian_approxi | OT_STRING       | nonlinear-      | Indicates in    |
| mation_space    |                 | variables       | which subspace  |
|                 |                 |                 | the Hessian     |
|                 |                 |                 | information is  |
|                 |                 |                 | to be           |
|                 |                 |                 | approximated.   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| hessian_constan | OT_STRING       | no              | Indicates       |
| t               |                 |                 | whether the     |
|                 |                 |                 | problem is a    |
|                 |                 |                 | quadratic       |
|                 |                 |                 | problem (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| honor_original_ | OT_STRING       | yes             | Indicates       |
| bounds          |                 |                 | whether final   |
|                 |                 |                 | points should   |
|                 |                 |                 | be projected    |
|                 |                 |                 | into original   |
|                 |                 |                 | bounds. (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| inf_pr_output   | OT_STRING       | original        | Determines what |
|                 |                 |                 | value is        |
|                 |                 |                 | printed in the  |
|                 |                 |                 | \"inf_pr\" output |
|                 |                 |                 | column. (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| jac_c_constant  | OT_STRING       | no              | Indicates       |
|                 |                 |                 | whether all     |
|                 |                 |                 | equality        |
|                 |                 |                 | constraints are |
|                 |                 |                 | linear (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| jac_d_constant  | OT_STRING       | no              | Indicates       |
|                 |                 |                 | whether all     |
|                 |                 |                 | inequality      |
|                 |                 |                 | constraints are |
|                 |                 |                 | linear (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| jacobian_approx | OT_STRING       | exact           | Specifies       |
| imation         |                 |                 | technique to    |
|                 |                 |                 | compute         |
|                 |                 |                 | constraint      |
|                 |                 |                 | Jacobian (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| jacobian_regula | OT_REAL         | 0.250           | Exponent for mu |
| rization_expone |                 |                 | in the          |
| nt              |                 |                 | regularization  |
|                 |                 |                 | for rank-       |
|                 |                 |                 | deficient       |
|                 |                 |                 | constraint      |
|                 |                 |                 | Jacobians. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| jacobian_regula | OT_REAL         | 0.000           | Size of the     |
| rization_value  |                 |                 | regularization  |
|                 |                 |                 | for rank-       |
|                 |                 |                 | deficient       |
|                 |                 |                 | constraint      |
|                 |                 |                 | Jacobians. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| kappa_d         | OT_REAL         | 0.000           | Weight for      |
|                 |                 |                 | linear damping  |
|                 |                 |                 | term (to handle |
|                 |                 |                 | one-sided       |
|                 |                 |                 | bounds). (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| kappa_sigma     | OT_REAL         | 1.000e+10       | Factor limiting |
|                 |                 |                 | the deviation   |
|                 |                 |                 | of dual         |
|                 |                 |                 | variables from  |
|                 |                 |                 | primal          |
|                 |                 |                 | estimates. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| kappa_soc       | OT_REAL         | 0.990           | Factor in the   |
|                 |                 |                 | sufficient      |
|                 |                 |                 | reduction rule  |
|                 |                 |                 | for second      |
|                 |                 |                 | order           |
|                 |                 |                 | correction.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| kappa_x_dis     | OT_REAL         | 100             | a parameter     |
|                 |                 |                 | used to check   |
|                 |                 |                 | if the fast     |
|                 |                 |                 | direction can   |
|                 |                 |                 | be used asthe   |
|                 |                 |                 | line search     |
|                 |                 |                 | direction (for  |
|                 |                 |                 | Chen-Goldfarb   |
|                 |                 |                 | line search).   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| kappa_y_dis     | OT_REAL         | 10000           | a parameter     |
|                 |                 |                 | used to check   |
|                 |                 |                 | if the fast     |
|                 |                 |                 | direction can   |
|                 |                 |                 | be used asthe   |
|                 |                 |                 | line search     |
|                 |                 |                 | direction (for  |
|                 |                 |                 | Chen-Goldfarb   |
|                 |                 |                 | line search).   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| least_square_in | OT_STRING       | no              | Least square    |
| it_duals        |                 |                 | initialization  |
|                 |                 |                 | of all dual     |
|                 |                 |                 | variables (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| least_square_in | OT_STRING       | no              | Least square    |
| it_primal       |                 |                 | initialization  |
|                 |                 |                 | of the primal   |
|                 |                 |                 | variables (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| limited_memory_ | OT_STRING       | sherman-        | Strategy for    |
| aug_solver      |                 | morrison        | solving the     |
|                 |                 |                 | augmented       |
|                 |                 |                 | system for low- |
|                 |                 |                 | rank Hessian.   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| limited_memory_ | OT_REAL         | 1               | Value for B0 in |
| init_val        |                 |                 | low-rank        |
|                 |                 |                 | update. (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| limited_memory_ | OT_REAL         | 100000000       | Upper bound on  |
| init_val_max    |                 |                 | value for B0 in |
|                 |                 |                 | low-rank        |
|                 |                 |                 | update. (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| limited_memory_ | OT_REAL         | 0.000           | Lower bound on  |
| init_val_min    |                 |                 | value for B0 in |
|                 |                 |                 | low-rank        |
|                 |                 |                 | update. (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| limited_memory_ | OT_STRING       | scalar1         | Initialization  |
| initialization  |                 |                 | strategy for    |
|                 |                 |                 | the limited     |
|                 |                 |                 | memory quasi-   |
|                 |                 |                 | Newton          |
|                 |                 |                 | approximation.  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| limited_memory_ | OT_INTEGER      | 6               | Maximum size of |
| max_history     |                 |                 | the history for |
|                 |                 |                 | the limited     |
|                 |                 |                 | quasi-Newton    |
|                 |                 |                 | Hessian         |
|                 |                 |                 | approximation.  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| limited_memory_ | OT_INTEGER      | 2               | Threshold for   |
| max_skipping    |                 |                 | successive      |
|                 |                 |                 | iterations      |
|                 |                 |                 | where update is |
|                 |                 |                 | skipped. (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| limited_memory_ | OT_STRING       | no              | Determines if   |
| special_for_res |                 |                 | the quasi-      |
| to              |                 |                 | Newton updates  |
|                 |                 |                 | should be       |
|                 |                 |                 | special during  |
|                 |                 |                 | the restoration |
|                 |                 |                 | phase. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| limited_memory_ | OT_STRING       | bfgs            | Quasi-Newton    |
| update_type     |                 |                 | update formula  |
|                 |                 |                 | for the limited |
|                 |                 |                 | memory          |
|                 |                 |                 | approximation.  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| line_search_met | OT_STRING       | filter          | Globalization   |
| hod             |                 |                 | method used in  |
|                 |                 |                 | backtracking    |
|                 |                 |                 | line search     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| linear_scaling_ | OT_STRING       | yes             | Flag indicating |
| on_demand       |                 |                 | that linear     |
|                 |                 |                 | scaling is only |
|                 |                 |                 | done if it      |
|                 |                 |                 | seems required. |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| linear_solver   | OT_STRING       | mumps           | Linear solver   |
|                 |                 |                 | used for step   |
|                 |                 |                 | computations.   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| linear_system_s | OT_STRING       | none            | Method for      |
| caling          |                 |                 | scaling the     |
|                 |                 |                 | linear system.  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma27_ignore_sin | OT_STRING       | no              | Enables MA27's  |
| gularity        |                 |                 | ability to      |
|                 |                 |                 | solve a linear  |
|                 |                 |                 | system even if  |
|                 |                 |                 | the matrix is   |
|                 |                 |                 | singular. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma27_la_init_fa | OT_REAL         | 5               | Real workspace  |
| ctor            |                 |                 | memory for      |
|                 |                 |                 | MA27. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma27_liw_init_f | OT_REAL         | 5               | Integer         |
| actor           |                 |                 | workspace       |
|                 |                 |                 | memory for      |
|                 |                 |                 | MA27. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma27_meminc_fac | OT_REAL         | 10              | Increment       |
| tor             |                 |                 | factor for      |
|                 |                 |                 | workspace size  |
|                 |                 |                 | for MA27. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma27_pivtol     | OT_REAL         | 0.000           | Pivot tolerance |
|                 |                 |                 | for the linear  |
|                 |                 |                 | solver MA27.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma27_pivtolmax  | OT_REAL         | 0.000           | Maximum pivot   |
|                 |                 |                 | tolerance for   |
|                 |                 |                 | the linear      |
|                 |                 |                 | solver MA27.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma27_skip_inert | OT_STRING       | no              | Always pretend  |
| ia_check        |                 |                 | inertia is      |
|                 |                 |                 | correct. (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma28_pivtol     | OT_REAL         | 0.010           | Pivot tolerance |
|                 |                 |                 | for linear      |
|                 |                 |                 | solver MA28.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma57_automatic_ | OT_STRING       | yes             | Controls MA57   |
| scaling         |                 |                 | automatic       |
|                 |                 |                 | scaling (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma57_block_size | OT_INTEGER      | 16              | Controls block  |
|                 |                 |                 | size used by    |
|                 |                 |                 | Level 3 BLAS in |
|                 |                 |                 | MA57BD (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma57_node_amalg | OT_INTEGER      | 16              | Node            |
| amation         |                 |                 | amalgamation    |
|                 |                 |                 | parameter (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma57_pivot_orde | OT_INTEGER      | 5               | Controls pivot  |
| r               |                 |                 | order in MA57   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma57_pivtol     | OT_REAL         | 0.000           | Pivot tolerance |
|                 |                 |                 | for the linear  |
|                 |                 |                 | solver MA57.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma57_pivtolmax  | OT_REAL         | 0.000           | Maximum pivot   |
|                 |                 |                 | tolerance for   |
|                 |                 |                 | the linear      |
|                 |                 |                 | solver MA57.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma57_pre_alloc  | OT_REAL         | 1.050           | Safety factor   |
|                 |                 |                 | for work space  |
|                 |                 |                 | memory          |
|                 |                 |                 | allocation for  |
|                 |                 |                 | the linear      |
|                 |                 |                 | solver MA57.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma57_small_pivo | OT_INTEGER      | 0               | If set to 1,    |
| t_flag          |                 |                 | then when small |
|                 |                 |                 | entries defined |
|                 |                 |                 | by CNTL(2) are  |
|                 |                 |                 | detected they   |
|                 |                 |                 | are removed and |
|                 |                 |                 | the             |
|                 |                 |                 | corresponding   |
|                 |                 |                 | pivots placed   |
|                 |                 |                 | at the end of   |
|                 |                 |                 | the             |
|                 |                 |                 | factorization.  |
|                 |                 |                 | This can be     |
|                 |                 |                 | particularly    |
|                 |                 |                 | efficient if    |
|                 |                 |                 | the matrix is   |
|                 |                 |                 | highly rank     |
|                 |                 |                 | deficient. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma86_nemin      | OT_INTEGER      | 32              | Node            |
|                 |                 |                 | Amalgamation    |
|                 |                 |                 | parameter (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma86_print_leve | OT_INTEGER      | 0               | Debug printing  |
| l               |                 |                 | level for the   |
|                 |                 |                 | linear solver   |
|                 |                 |                 | MA86 (see IPOPT |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma86_small      | OT_REAL         | 0.000           | Zero Pivot      |
|                 |                 |                 | Threshold (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma86_static     | OT_REAL         | 0               | Static Pivoting |
|                 |                 |                 | Threshold (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma86_u          | OT_REAL         | 0.000           | Pivoting        |
|                 |                 |                 | Threshold (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| ma86_umax       | OT_REAL         | 0.000           | Maximum         |
|                 |                 |                 | Pivoting        |
|                 |                 |                 | Threshold (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| magic_steps     | OT_STRING       | no              | Enables magic   |
|                 |                 |                 | steps. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| max_cpu_time    | OT_REAL         | 1000000         | Maximum number  |
|                 |                 |                 | of CPU seconds. |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| max_filter_rese | OT_INTEGER      | 5               | Maximal allowed |
| ts              |                 |                 | number of       |
|                 |                 |                 | filter resets   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| max_hessian_per | OT_REAL         | 1.000e+20       | Maximum value   |
| turbation       |                 |                 | of              |
|                 |                 |                 | regularization  |
|                 |                 |                 | parameter for   |
|                 |                 |                 | handling        |
|                 |                 |                 | negative        |
|                 |                 |                 | curvature. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| max_iter        | OT_INTEGER      | 3000            | Maximum number  |
|                 |                 |                 | of iterations.  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| max_refinement_ | OT_INTEGER      | 10              | Maximum number  |
| steps           |                 |                 | of iterative    |
|                 |                 |                 | refinement      |
|                 |                 |                 | steps per       |
|                 |                 |                 | linear system   |
|                 |                 |                 | solve. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| max_resto_iter  | OT_INTEGER      | 3000000         | Maximum number  |
|                 |                 |                 | of successive   |
|                 |                 |                 | iterations in   |
|                 |                 |                 | restoration     |
|                 |                 |                 | phase. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| max_soc         | OT_INTEGER      | 4               | Maximum number  |
|                 |                 |                 | of second order |
|                 |                 |                 | correction      |
|                 |                 |                 | trial steps at  |
|                 |                 |                 | each iteration. |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| max_soft_resto_ | OT_INTEGER      | 10              | Maximum number  |
| iters           |                 |                 | of iterations   |
|                 |                 |                 | performed       |
|                 |                 |                 | successively in |
|                 |                 |                 | soft            |
|                 |                 |                 | restoration     |
|                 |                 |                 | phase. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mehrotra_algori | OT_STRING       | no              | Indicates if we |
| thm             |                 |                 | want to do      |
|                 |                 |                 | Mehrotra's      |
|                 |                 |                 | algorithm. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| min_alpha_prima | OT_REAL         | 0.000           | LIFENG WRITES   |
| l               |                 |                 | THIS. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| min_hessian_per | OT_REAL         | 0.000           | Smallest        |
| turbation       |                 |                 | perturbation of |
|                 |                 |                 | the Hessian     |
|                 |                 |                 | block. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| min_refinement_ | OT_INTEGER      | 1               | Minimum number  |
| steps           |                 |                 | of iterative    |
|                 |                 |                 | refinement      |
|                 |                 |                 | steps per       |
|                 |                 |                 | linear system   |
|                 |                 |                 | solve. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mu_allow_fast_m | OT_STRING       | yes             | Allow skipping  |
| onotone_decreas |                 |                 | of barrier      |
| e               |                 |                 | problem if      |
|                 |                 |                 | barrier test is |
|                 |                 |                 | already met.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mu_init         | OT_REAL         | 0.100           | Initial value   |
|                 |                 |                 | for the barrier |
|                 |                 |                 | parameter. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mu_linear_decre | OT_REAL         | 0.200           | Determines      |
| ase_factor      |                 |                 | linear decrease |
|                 |                 |                 | rate of barrier |
|                 |                 |                 | parameter. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mu_max          | OT_REAL         | 100000          | Maximum value   |
|                 |                 |                 | for barrier     |
|                 |                 |                 | parameter. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mu_max_fact     | OT_REAL         | 1000            | Factor for      |
|                 |                 |                 | initialization  |
|                 |                 |                 | of maximum      |
|                 |                 |                 | value for       |
|                 |                 |                 | barrier         |
|                 |                 |                 | parameter. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mu_min          | OT_REAL         | 0.000           | Minimum value   |
|                 |                 |                 | for barrier     |
|                 |                 |                 | parameter. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mu_oracle       | OT_STRING       | quality-        | Oracle for a    |
|                 |                 | function        | new barrier     |
|                 |                 |                 | parameter in    |
|                 |                 |                 | the adaptive    |
|                 |                 |                 | strategy. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mu_strategy     | OT_STRING       | monotone        | Update strategy |
|                 |                 |                 | for barrier     |
|                 |                 |                 | parameter. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mu_superlinear_ | OT_REAL         | 1.500           | Determines      |
| decrease_power  |                 |                 | superlinear     |
|                 |                 |                 | decrease rate   |
|                 |                 |                 | of barrier      |
|                 |                 |                 | parameter. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mu_target       | OT_REAL         | 0               | Desired value   |
|                 |                 |                 | of complementar |
|                 |                 |                 | ity. (see IPOPT |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mult_diverg_fea | OT_REAL         | 0.000           | tolerance for   |
| sibility_tol    |                 |                 | deciding if the |
|                 |                 |                 | multipliers are |
|                 |                 |                 | diverging (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mult_diverg_y_t | OT_REAL         | 100000000       | tolerance for   |
| ol              |                 |                 | deciding if the |
|                 |                 |                 | multipliers are |
|                 |                 |                 | diverging (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mumps_dep_tol   | OT_REAL         | -1              | Pivot threshold |
|                 |                 |                 | for detection   |
|                 |                 |                 | of linearly     |
|                 |                 |                 | dependent       |
|                 |                 |                 | constraints in  |
|                 |                 |                 | MUMPS. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mumps_mem_perce | OT_INTEGER      | 1000            | Percentage      |
| nt              |                 |                 | increase in the |
|                 |                 |                 | estimated       |
|                 |                 |                 | working space   |
|                 |                 |                 | for MUMPS. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mumps_permuting | OT_INTEGER      | 7               | Controls        |
| _scaling        |                 |                 | permuting and   |
|                 |                 |                 | scaling in      |
|                 |                 |                 | MUMPS (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mumps_pivot_ord | OT_INTEGER      | 7               | Controls pivot  |
| er              |                 |                 | order in MUMPS  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mumps_pivtol    | OT_REAL         | 0.000           | Pivot tolerance |
|                 |                 |                 | for the linear  |
|                 |                 |                 | solver MUMPS.   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mumps_pivtolmax | OT_REAL         | 0.100           | Maximum pivot   |
|                 |                 |                 | tolerance for   |
|                 |                 |                 | the linear      |
|                 |                 |                 | solver MUMPS.   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| mumps_scaling   | OT_INTEGER      | 77              | Controls        |
|                 |                 |                 | scaling in      |
|                 |                 |                 | MUMPS (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| neg_curv_test_t | OT_REAL         | 0               | Tolerance for   |
| ol              |                 |                 | heuristic to    |
|                 |                 |                 | ignore wrong    |
|                 |                 |                 | inertia. (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| never_use_fact_ | OT_STRING       | no              | Toggle to       |
| cgpen_direction |                 |                 | switch off the  |
|                 |                 |                 | fast Chen-      |
|                 |                 |                 | Goldfarb        |
|                 |                 |                 | direction (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| never_use_piece | OT_STRING       | no              | Toggle to       |
| wise_penalty_ls |                 |                 | switch off the  |
|                 |                 |                 | piecewise       |
|                 |                 |                 | penalty method  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| nlp_lower_bound | OT_REAL         | -1.000e+19      | any bound less  |
| _inf            |                 |                 | or equal this   |
|                 |                 |                 | value will be   |
|                 |                 |                 | considered -inf |
|                 |                 |                 | (i.e. not lower |
|                 |                 |                 | bounded). (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| nlp_scaling_con | OT_REAL         | 0               | Target value    |
| str_target_grad |                 |                 | for constraint  |
| ient            |                 |                 | function        |
|                 |                 |                 | gradient size.  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| nlp_scaling_max | OT_REAL         | 100             | Maximum         |
| _gradient       |                 |                 | gradient after  |
|                 |                 |                 | NLP scaling.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| nlp_scaling_met | OT_STRING       | gradient-based  | Select the      |
| hod             |                 |                 | technique used  |
|                 |                 |                 | for scaling the |
|                 |                 |                 | NLP. (see IPOPT |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| nlp_scaling_min | OT_REAL         | 0.000           | Minimum value   |
| _value          |                 |                 | of gradient-    |
|                 |                 |                 | based scaling   |
|                 |                 |                 | values. (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| nlp_scaling_obj | OT_REAL         | 0               | Target value    |
| _target_gradien |                 |                 | for objective   |
| t               |                 |                 | function        |
|                 |                 |                 | gradient size.  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| nlp_upper_bound | OT_REAL         | 1.000e+19       | any bound       |
| _inf            |                 |                 | greater or this |
|                 |                 |                 | value will be   |
|                 |                 |                 | considered +inf |
|                 |                 |                 | (i.e. not upper |
|                 |                 |                 | bounded). (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| nu_inc          | OT_REAL         | 0.000           | Increment of    |
|                 |                 |                 | the penalty     |
|                 |                 |                 | parameter. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| nu_init         | OT_REAL         | 0.000           | Initial value   |
|                 |                 |                 | of the penalty  |
|                 |                 |                 | parameter. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| num_linear_vari | OT_INTEGER      | 0               | Number of       |
| ables           |                 |                 | linear          |
|                 |                 |                 | variables (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| obj_max_inc     | OT_REAL         | 5               | Determines the  |
|                 |                 |                 | upper bound on  |
|                 |                 |                 | the acceptable  |
|                 |                 |                 | increase of     |
|                 |                 |                 | barrier         |
|                 |                 |                 | objective       |
|                 |                 |                 | function. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| obj_scaling_fac | OT_REAL         | 1               | Scaling factor  |
| tor             |                 |                 | for the         |
|                 |                 |                 | objective       |
|                 |                 |                 | function. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| option_file_nam | OT_STRING       |                 | File name of    |
| e               |                 |                 | options file    |
|                 |                 |                 | (to overwrite   |
|                 |                 |                 | default). (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| output_file     | OT_STRING       |                 | File name of    |
|                 |                 |                 | desired output  |
|                 |                 |                 | file (leave     |
|                 |                 |                 | unset for no    |
|                 |                 |                 | file output).   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_iter_co | OT_INTEGER      | 5000            | Maximum Size of |
| arse_size       |                 |                 | Coarse Grid     |
|                 |                 |                 | Matrix (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_iter_dr | OT_REAL         | 0.500           | dropping value  |
| opping_factor   |                 |                 | for incomplete  |
|                 |                 |                 | factor (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_iter_dr | OT_REAL         | 0.100           | dropping value  |
| opping_schur    |                 |                 | for sparsify    |
|                 |                 |                 | schur           |
|                 |                 |                 | complement      |
|                 |                 |                 | factor (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_iter_in | OT_REAL         | 5000000         | (see IPOPT      |
| verse_norm_fact |                 |                 | documentation)  |
| or              |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_iter_ma | OT_INTEGER      | 10              | Maximum Size of |
| x_levels        |                 |                 | Grid Levels     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_iter_ma | OT_INTEGER      | 10000000        | max fill for    |
| x_row_fill      |                 |                 | each row (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_iter_re | OT_REAL         | 0.000           | Relative        |
| lative_tol      |                 |                 | Residual        |
|                 |                 |                 | Convergence     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_iterati | OT_STRING       | no              | Switch on       |
| ve              |                 |                 | iterative       |
|                 |                 |                 | solver in       |
|                 |                 |                 | Pardiso library |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_matchin | OT_STRING       | complete+2x2    | Matching        |
| g_strategy      |                 |                 | strategy to be  |
|                 |                 |                 | used by Pardiso |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_max_dro | OT_INTEGER      | 4               | Maximal number  |
| ptol_correction |                 |                 | of decreases of |
| s               |                 |                 | drop tolerance  |
|                 |                 |                 | during one      |
|                 |                 |                 | solve. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_max_ite | OT_INTEGER      | 500             | Maximum number  |
| r               |                 |                 | of Krylov-      |
|                 |                 |                 | Subspace        |
|                 |                 |                 | Iteration (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_msglvl  | OT_INTEGER      | 0               | Pardiso message |
|                 |                 |                 | level (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_out_of_ | OT_INTEGER      | 0               | Enables out-of- |
| core_power      |                 |                 | core variant of |
|                 |                 |                 | Pardiso (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_redo_sy | OT_STRING       | no              | Toggle for      |
| mbolic_fact_onl |                 |                 | handling case   |
| y_if_inertia_wr |                 |                 | when elements   |
| ong             |                 |                 | were perturbed  |
|                 |                 |                 | by Pardiso.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_repeate | OT_STRING       | no              | Interpretation  |
| d_perturbation_ |                 |                 | of perturbed    |
| means_singular  |                 |                 | elements. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pardiso_skip_in | OT_STRING       | no              | Always pretend  |
| ertia_check     |                 |                 | inertia is      |
|                 |                 |                 | correct. (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pass_nonlinear_ | OT_BOOLEAN      | False           | n/a             |
| variables       |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| pen_des_fact    | OT_REAL         | 0.200           | a parameter     |
|                 |                 |                 | used in penalty |
|                 |                 |                 | parameter       |
|                 |                 |                 | computation     |
|                 |                 |                 | (for Chen-      |
|                 |                 |                 | Goldfarb line   |
|                 |                 |                 | search). (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pen_init_fac    | OT_REAL         | 50              | a parameter     |
|                 |                 |                 | used to choose  |
|                 |                 |                 | initial penalty |
|                 |                 |                 | parameterswhen  |
|                 |                 |                 | the regularized |
|                 |                 |                 | Newton method   |
|                 |                 |                 | is used. (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| pen_theta_max_f | OT_REAL         | 10000           | Determines      |
| act             |                 |                 | upper bound for |
|                 |                 |                 | constraint      |
|                 |                 |                 | violation in    |
|                 |                 |                 | the filter.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| penalty_init_ma | OT_REAL         | 100000          | Maximal value   |
| x               |                 |                 | for the intial  |
|                 |                 |                 | penalty         |
|                 |                 |                 | parameter (for  |
|                 |                 |                 | Chen-Goldfarb   |
|                 |                 |                 | line search).   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| penalty_init_mi | OT_REAL         | 1               | Minimal value   |
| n               |                 |                 | for the intial  |
|                 |                 |                 | penalty         |
|                 |                 |                 | parameter for   |
|                 |                 |                 | line search(for |
|                 |                 |                 | Chen-Goldfarb   |
|                 |                 |                 | line search).   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| penalty_max     | OT_REAL         | 1.000e+30       | Maximal value   |
|                 |                 |                 | for the penalty |
|                 |                 |                 | parameter (for  |
|                 |                 |                 | Chen-Goldfarb   |
|                 |                 |                 | line search).   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| penalty_update_ | OT_REAL         | 10              | LIFENG WRITES   |
| compl_tol       |                 |                 | THIS. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| penalty_update_ | OT_REAL         | 0.000           | Threshold for   |
| infeasibility_t |                 |                 | infeasibility   |
| ol              |                 |                 | in penalty      |
|                 |                 |                 | parameter       |
|                 |                 |                 | update test.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| perturb_always_ | OT_STRING       | no              | Active          |
| cd              |                 |                 | permanent       |
|                 |                 |                 | perturbation of |
|                 |                 |                 | constraint      |
|                 |                 |                 | linearization.  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| perturb_dec_fac | OT_REAL         | 0.333           | Decrease factor |
| t               |                 |                 | for x-s         |
|                 |                 |                 | perturbation.   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| perturb_inc_fac | OT_REAL         | 8               | Increase factor |
| t               |                 |                 | for x-s         |
|                 |                 |                 | perturbation.   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| perturb_inc_fac | OT_REAL         | 100             | Increase factor |
| t_first         |                 |                 | for x-s         |
|                 |                 |                 | perturbation    |
|                 |                 |                 | for very first  |
|                 |                 |                 | perturbation.   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| piecewisepenalt | OT_REAL         | 0.000           | LIFENG WRITES   |
| y_gamma_infeasi |                 |                 | THIS. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| piecewisepenalt | OT_REAL         | 0.000           | LIFENG WRITES   |
| y_gamma_obj     |                 |                 | THIS. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| point_perturbat | OT_REAL         | 10              | Maximal         |
| ion_radius      |                 |                 | perturbation of |
|                 |                 |                 | an evaluation   |
|                 |                 |                 | point. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| print_info_stri | OT_STRING       | no              | Enables         |
| ng              |                 |                 | printing of     |
|                 |                 |                 | additional info |
|                 |                 |                 | string at end   |
|                 |                 |                 | of iteration    |
|                 |                 |                 | output. (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| print_level     | OT_INTEGER      | 5               | Output          |
|                 |                 |                 | verbosity       |
|                 |                 |                 | level. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| print_options_d | OT_STRING       | no              | Switch to print |
| ocumentation    |                 |                 | all algorithmic |
|                 |                 |                 | options. (see   |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| print_options_l | OT_STRING       | no              | Undocumented    |
| atex_mode       |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| print_time      | OT_BOOLEAN      | True            | print           |
|                 |                 |                 | information     |
|                 |                 |                 | about execution |
|                 |                 |                 | time            |
+-----------------+-----------------+-----------------+-----------------+
| print_timing_st | OT_STRING       | no              | Switch to print |
| atistics        |                 |                 | timing          |
|                 |                 |                 | statistics.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| print_user_opti | OT_STRING       | no              | Print all       |
| ons             |                 |                 | options set by  |
|                 |                 |                 | the user. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| quality_functio | OT_STRING       | none            | The balancing   |
| n_balancing_ter |                 |                 | term included   |
| m               |                 |                 | in the quality  |
|                 |                 |                 | function for    |
|                 |                 |                 | centrality.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| quality_functio | OT_STRING       | none            | The penalty     |
| n_centrality    |                 |                 | term for        |
|                 |                 |                 | centrality that |
|                 |                 |                 | is included in  |
|                 |                 |                 | quality         |
|                 |                 |                 | function. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| quality_functio | OT_INTEGER      | 8               | Maximum number  |
| n_max_section_s |                 |                 | of search steps |
| teps            |                 |                 | during direct   |
|                 |                 |                 | search          |
|                 |                 |                 | procedure       |
|                 |                 |                 | determining the |
|                 |                 |                 | optimal         |
|                 |                 |                 | centering       |
|                 |                 |                 | parameter. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| quality_functio | OT_STRING       | 2-norm-squared  | Norm used for   |
| n_norm_type     |                 |                 | components of   |
|                 |                 |                 | the quality     |
|                 |                 |                 | function. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| quality_functio | OT_REAL         | 0               | Tolerance for   |
| n_section_qf_to |                 |                 | the golden      |
| l               |                 |                 | section search  |
|                 |                 |                 | procedure       |
|                 |                 |                 | determining the |
|                 |                 |                 | optimal         |
|                 |                 |                 | centering       |
|                 |                 |                 | parameter (in   |
|                 |                 |                 | the function    |
|                 |                 |                 | value space).   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| quality_functio | OT_REAL         | 0.010           | Tolerance for   |
| n_section_sigma |                 |                 | the section     |
| _tol            |                 |                 | search          |
|                 |                 |                 | procedure       |
|                 |                 |                 | determining the |
|                 |                 |                 | optimal         |
|                 |                 |                 | centering       |
|                 |                 |                 | parameter (in   |
|                 |                 |                 | sigma space).   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| recalc_y        | OT_STRING       | no              | Tells the       |
|                 |                 |                 | algorithm to    |
|                 |                 |                 | recalculate the |
|                 |                 |                 | equality and    |
|                 |                 |                 | inequality      |
|                 |                 |                 | multipliers as  |
|                 |                 |                 | least square    |
|                 |                 |                 | estimates. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| recalc_y_feas_t | OT_REAL         | 0.000           | Feasibility     |
| ol              |                 |                 | threshold for   |
|                 |                 |                 | recomputation   |
|                 |                 |                 | of multipliers. |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| replace_bounds  | OT_STRING       | no              | Indicates if    |
|                 |                 |                 | all variable    |
|                 |                 |                 | bounds should   |
|                 |                 |                 | be replaced by  |
|                 |                 |                 | inequality      |
|                 |                 |                 | constraints     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| required_infeas | OT_REAL         | 0.900           | Required        |
| ibility_reducti |                 |                 | reduction of    |
| on              |                 |                 | infeasibility   |
|                 |                 |                 | before leaving  |
|                 |                 |                 | restoration     |
|                 |                 |                 | phase. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| residual_improv | OT_REAL         | 1.000           | Minimal         |
| ement_factor    |                 |                 | required        |
|                 |                 |                 | reduction of    |
|                 |                 |                 | residual test   |
|                 |                 |                 | ratio in        |
|                 |                 |                 | iterative       |
|                 |                 |                 | refinement.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| residual_ratio_ | OT_REAL         | 0.000           | Iterative       |
| max             |                 |                 | refinement      |
|                 |                 |                 | tolerance (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| residual_ratio_ | OT_REAL         | 0.000           | Threshold for   |
| singular        |                 |                 | declaring       |
|                 |                 |                 | linear system   |
|                 |                 |                 | singular after  |
|                 |                 |                 | failed          |
|                 |                 |                 | iterative       |
|                 |                 |                 | refinement.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| resto_failure_f | OT_REAL         | 0               | Threshold for   |
| easibility_thre |                 |                 | primal          |
| shold           |                 |                 | infeasibility   |
|                 |                 |                 | to declare      |
|                 |                 |                 | failure of      |
|                 |                 |                 | restoration     |
|                 |                 |                 | phase. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| resto_penalty_p | OT_REAL         | 1000            | Penalty         |
| arameter        |                 |                 | parameter in    |
|                 |                 |                 | the restoration |
|                 |                 |                 | phase objective |
|                 |                 |                 | function. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| resto_proximity | OT_REAL         | 1               | Weighting       |
| _weight         |                 |                 | factor for the  |
|                 |                 |                 | proximity term  |
|                 |                 |                 | in restoration  |
|                 |                 |                 | phase           |
|                 |                 |                 | objective. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| rho             | OT_REAL         | 0.100           | Value in        |
|                 |                 |                 | penalty         |
|                 |                 |                 | parameter       |
|                 |                 |                 | update formula. |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| s_max           | OT_REAL         | 100             | Scaling         |
|                 |                 |                 | threshold for   |
|                 |                 |                 | the NLP error.  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| s_phi           | OT_REAL         | 2.300           | Exponent for    |
|                 |                 |                 | linear barrier  |
|                 |                 |                 | function model  |
|                 |                 |                 | in the          |
|                 |                 |                 | switching rule. |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| s_theta         | OT_REAL         | 1.100           | Exponent for    |
|                 |                 |                 | current         |
|                 |                 |                 | constraint      |
|                 |                 |                 | violation in    |
|                 |                 |                 | the switching   |
|                 |                 |                 | rule. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| sb              | OT_STRING       | no              | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| sigma_max       | OT_REAL         | 100             | Maximum value   |
|                 |                 |                 | of the          |
|                 |                 |                 | centering       |
|                 |                 |                 | parameter. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| sigma_min       | OT_REAL         | 0.000           | Minimum value   |
|                 |                 |                 | of the          |
|                 |                 |                 | centering       |
|                 |                 |                 | parameter. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| skip_corr_if_ne | OT_STRING       | yes             | Skip the        |
| g_curv          |                 |                 | corrector step  |
|                 |                 |                 | in negative     |
|                 |                 |                 | curvature       |
|                 |                 |                 | iteration       |
|                 |                 |                 | (unsupported!). |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| skip_corr_in_mo | OT_STRING       | yes             | Skip the        |
| notone_mode     |                 |                 | corrector step  |
|                 |                 |                 | during monotone |
|                 |                 |                 | barrier         |
|                 |                 |                 | parameter mode  |
|                 |                 |                 | (unsupported!). |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| skip_finalize_s | OT_STRING       | no              | Indicates if    |
| olution_call    |                 |                 | call to NLP::Fi |
|                 |                 |                 | nalizeSolution  |
|                 |                 |                 | after           |
|                 |                 |                 | optimization    |
|                 |                 |                 | should be       |
|                 |                 |                 | suppressed (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| slack_bound_fra | OT_REAL         | 0.010           | Desired minimum |
| c               |                 |                 | relative        |
|                 |                 |                 | distance from   |
|                 |                 |                 | the initial     |
|                 |                 |                 | slack to bound. |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| slack_bound_pus | OT_REAL         | 0.010           | Desired minimum |
| h               |                 |                 | absolute        |
|                 |                 |                 | distance from   |
|                 |                 |                 | the initial     |
|                 |                 |                 | slack to bound. |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| slack_move      | OT_REAL         | 0.000           | Correction size |
|                 |                 |                 | for very small  |
|                 |                 |                 | slacks. (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| soft_resto_pder | OT_REAL         | 1.000           | Required        |
| ror_reduction_f |                 |                 | reduction in    |
| actor           |                 |                 | primal-dual     |
|                 |                 |                 | error in the    |
|                 |                 |                 | soft            |
|                 |                 |                 | restoration     |
|                 |                 |                 | phase. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| start_with_rest | OT_STRING       | no              | Tells algorithm |
| o               |                 |                 | to switch to    |
|                 |                 |                 | restoration     |
|                 |                 |                 | phase in first  |
|                 |                 |                 | iteration. (see |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| suppress_all_ou | OT_STRING       | no              | Undocumented    |
| tput            |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| tau_min         | OT_REAL         | 0.990           | Lower bound on  |
|                 |                 |                 | fraction-to-    |
|                 |                 |                 | the-boundary    |
|                 |                 |                 | parameter tau.  |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| theta_max_fact  | OT_REAL         | 10000           | Determines      |
|                 |                 |                 | upper bound for |
|                 |                 |                 | constraint      |
|                 |                 |                 | violation in    |
|                 |                 |                 | the filter.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| theta_min       | OT_REAL         | 0.000           | LIFENG WRITES   |
|                 |                 |                 | THIS. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| theta_min_fact  | OT_REAL         | 0.000           | Determines      |
|                 |                 |                 | constraint      |
|                 |                 |                 | violation       |
|                 |                 |                 | threshold in    |
|                 |                 |                 | the switching   |
|                 |                 |                 | rule. (see      |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| tiny_step_tol   | OT_REAL         | 0.000           | Tolerance for   |
|                 |                 |                 | detecting       |
|                 |                 |                 | numerically     |
|                 |                 |                 | insignificant   |
|                 |                 |                 | steps. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| tiny_step_y_tol | OT_REAL         | 0.010           | Tolerance for   |
|                 |                 |                 | quitting        |
|                 |                 |                 | because of      |
|                 |                 |                 | numerically     |
|                 |                 |                 | insignificant   |
|                 |                 |                 | steps. (see     |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| tol             | OT_REAL         | 0.000           | Desired         |
|                 |                 |                 | convergence     |
|                 |                 |                 | tolerance       |
|                 |                 |                 | (relative).     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| var_integer_md  | OT_DICTIONARY   | None            | Integer         |
|                 |                 |                 | metadata (a     |
|                 |                 |                 | dictionary with |
|                 |                 |                 | lists of        |
|                 |                 |                 | integers) about |
|                 |                 |                 | variables to be |
|                 |                 |                 | passed to IPOPT |
+-----------------+-----------------+-----------------+-----------------+
| var_numeric_md  | OT_DICTIONARY   | None            | Numeric         |
|                 |                 |                 | metadata (a     |
|                 |                 |                 | dictionary with |
|                 |                 |                 | lists of reals) |
|                 |                 |                 | about variables |
|                 |                 |                 | to be passed to |
|                 |                 |                 | IPOPT           |
+-----------------+-----------------+-----------------+-----------------+
| var_string_md   | OT_DICTIONARY   | None            | String metadata |
|                 |                 |                 | (a dictionary   |
|                 |                 |                 | with lists of   |
|                 |                 |                 | strings) about  |
|                 |                 |                 | variables to be |
|                 |                 |                 | passed to IPOPT |
+-----------------+-----------------+-----------------+-----------------+
| vartheta        | OT_REAL         | 0.500           | a parameter     |
|                 |                 |                 | used to check   |
|                 |                 |                 | if the fast     |
|                 |                 |                 | direction can   |
|                 |                 |                 | be used asthe   |
|                 |                 |                 | line search     |
|                 |                 |                 | direction (for  |
|                 |                 |                 | Chen-Goldfarb   |
|                 |                 |                 | line search).   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| warm_start_boun | OT_REAL         | 0.001           | same as         |
| d_frac          |                 |                 | bound_frac for  |
|                 |                 |                 | the regular     |
|                 |                 |                 | initializer.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| warm_start_boun | OT_REAL         | 0.001           | same as         |
| d_push          |                 |                 | bound_push for  |
|                 |                 |                 | the regular     |
|                 |                 |                 | initializer.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| warm_start_enti | OT_STRING       | no              | Tells algorithm |
| re_iterate      |                 |                 | whether to use  |
|                 |                 |                 | the GetWarmStar |
|                 |                 |                 | tIterate method |
|                 |                 |                 | in the NLP.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| warm_start_init | OT_STRING       | no              | Warm-start for  |
| _point          |                 |                 | initial point   |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| warm_start_mult | OT_REAL         | 0.001           | same as         |
| _bound_push     |                 |                 | mult_bound_push |
|                 |                 |                 | for the regular |
|                 |                 |                 | initializer.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| warm_start_mult | OT_REAL         | 1000000         | Maximum initial |
| _init_max       |                 |                 | value for the   |
|                 |                 |                 | equality        |
|                 |                 |                 | multipliers.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| warm_start_same | OT_STRING       | no              | Indicates       |
| _structure      |                 |                 | whether a       |
|                 |                 |                 | problem with a  |
|                 |                 |                 | structure       |
|                 |                 |                 | identical to    |
|                 |                 |                 | the previous    |
|                 |                 |                 | one is to be    |
|                 |                 |                 | solved. (see    |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| warm_start_slac | OT_REAL         | 0.001           | same as slack_b |
| k_bound_frac    |                 |                 | ound_frac for   |
|                 |                 |                 | the regular     |
|                 |                 |                 | initializer.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| warm_start_slac | OT_REAL         | 0.001           | same as slack_b |
| k_bound_push    |                 |                 | ound_push for   |
|                 |                 |                 | the regular     |
|                 |                 |                 | initializer.    |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| warm_start_targ | OT_REAL         | 0               | Unsupported!    |
| et_mu           |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| watchdog_shorte | OT_INTEGER      | 10              | Number of       |
| ned_iter_trigge |                 |                 | shortened       |
| r               |                 |                 | iterations that |
|                 |                 |                 | trigger the     |
|                 |                 |                 | watchdog. (see  |
|                 |                 |                 | IPOPT           |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| watchdog_trial_ | OT_INTEGER      | 3               | Maximum number  |
| iter_max        |                 |                 | of watchdog     |
|                 |                 |                 | iterations.     |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+
| wsmp_iterative  | OT_STRING       | no              | Switches to     |
|                 |                 |                 | iterative       |
|                 |                 |                 | solver in WSMP. |
|                 |                 |                 | (see IPOPT      |
|                 |                 |                 | documentation)  |
+-----------------+-----------------+-----------------+-----------------+

>List of available monitors

+-------------+
|     Id      |
+=============+
| eval_f      |
+-------------+
| eval_g      |
+-------------+
| eval_grad_f |
+-------------+
| eval_h      |
+-------------+
| eval_jac_g  |
+-------------+

>List of available stats

+--------------------+
|         Id         |
+====================+
| con_integer_md     |
+--------------------+
| con_numeric_md     |
+--------------------+
| con_string_md      |
+--------------------+
| iter_count         |
+--------------------+
| iteration          |
+--------------------+
| iterations         |
+--------------------+
| n_eval_f           |
+--------------------+
| n_eval_g           |
+--------------------+
| n_eval_grad_f      |
+--------------------+
| n_eval_h           |
+--------------------+
| n_eval_jac_g       |
+--------------------+
| return_status      |
+--------------------+
| t_callback_fun     |
+--------------------+
| t_callback_prepare |
+--------------------+
| t_eval_f           |
+--------------------+
| t_eval_g           |
+--------------------+
| t_eval_grad_f      |
+--------------------+
| t_eval_h           |
+--------------------+
| t_eval_jac_g       |
+--------------------+
| t_mainloop         |
+--------------------+
| var_integer_md     |
+--------------------+
| var_numeric_md     |
+--------------------+
| var_string_md      |
+--------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

knitro
------



KNITRO interface

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| BarRule         | OT_INTEGER      | 0               | Barrier Rule    |
+-----------------+-----------------+-----------------+-----------------+
| Debug           | OT_INTEGER      | 0               | Debug level     |
+-----------------+-----------------+-----------------+-----------------+
| Delta           | OT_REAL         | 1               | Initial region  |
|                 |                 |                 | scaling factor  |
+-----------------+-----------------+-----------------+-----------------+
| FeasModeTol     | OT_REAL         | 0.000           | Feasible mode   |
|                 |                 |                 | tolerance       |
+-----------------+-----------------+-----------------+-----------------+
| FeasTol         | OT_REAL         | 0.000           | Feasible        |
|                 |                 |                 | tolerance       |
+-----------------+-----------------+-----------------+-----------------+
| FeasTolAbs      | OT_REAL         | 0               | Absolute        |
|                 |                 |                 | feasible        |
|                 |                 |                 | tolerance       |
+-----------------+-----------------+-----------------+-----------------+
| Feasible        | OT_BOOLEAN      | 1               | Allow           |
|                 |                 |                 | infeasible      |
|                 |                 |                 | iterations      |
+-----------------+-----------------+-----------------+-----------------+
| GradOpt         | OT_INTEGER      | 1               | Gradient        |
|                 |                 |                 | calculation     |
|                 |                 |                 | method          |
+-----------------+-----------------+-----------------+-----------------+
| HessOpt         | OT_INTEGER      | 1               | Hessian         |
|                 |                 |                 | calculation     |
|                 |                 |                 | method          |
+-----------------+-----------------+-----------------+-----------------+
| HonorBnds       | OT_BOOLEAN      | 0               | Enforce bounds  |
+-----------------+-----------------+-----------------+-----------------+
| InitPt          | OT_BOOLEAN      | 0               | Use initial     |
|                 |                 |                 | point strategy  |
+-----------------+-----------------+-----------------+-----------------+
| LmSize          | OT_INTEGER      | 10              | Memory pairsize |
|                 |                 |                 | limit           |
+-----------------+-----------------+-----------------+-----------------+
| LpSolver        | OT_BOOLEAN      | 0               | Use LpSolver    |
+-----------------+-----------------+-----------------+-----------------+
| MaxCgIt         | OT_INTEGER      | 0               | Maximum         |
|                 |                 |                 | conjugate       |
|                 |                 |                 | gradient        |
|                 |                 |                 | iterations      |
+-----------------+-----------------+-----------------+-----------------+
| MaxIt           | OT_INTEGER      | 10000           | Iteration limit |
+-----------------+-----------------+-----------------+-----------------+
| Mu              | OT_REAL         | 0.100           | Initial barrier |
|                 |                 |                 | parameter       |
+-----------------+-----------------+-----------------+-----------------+
| Multistart      | OT_BOOLEAN      | 0               | Use multistart  |
+-----------------+-----------------+-----------------+-----------------+
| NewPoint        | OT_BOOLEAN      | 0               | Select new-     |
|                 |                 |                 | point feature   |
+-----------------+-----------------+-----------------+-----------------+
| ObjRange        | OT_REAL         | 1.000e+20       | Maximum         |
|                 |                 |                 | objective value |
+-----------------+-----------------+-----------------+-----------------+
| OptTol          | OT_REAL         | 0.000           | Relative        |
|                 |                 |                 | optimality      |
|                 |                 |                 | tolerance       |
+-----------------+-----------------+-----------------+-----------------+
| OptTolAbs       | OT_REAL         | 0               | Absolute        |
|                 |                 |                 | optimality      |
|                 |                 |                 | tolerance       |
+-----------------+-----------------+-----------------+-----------------+
| OutLev          | OT_INTEGER      | 2               | Log output      |
|                 |                 |                 | level           |
+-----------------+-----------------+-----------------+-----------------+
| Pivot           | OT_REAL         | 0.000           | Initial pivot   |
|                 |                 |                 | threshold       |
+-----------------+-----------------+-----------------+-----------------+
| Scale           | OT_BOOLEAN      | 1               | Perform scaling |
+-----------------+-----------------+-----------------+-----------------+
| ShiftInit       | OT_BOOLEAN      | 1               | Interior-point  |
|                 |                 |                 | shifting        |
|                 |                 |                 | initial point   |
+-----------------+-----------------+-----------------+-----------------+
| Soc             | OT_INTEGER      | 1               | Second order    |
|                 |                 |                 | correction      |
+-----------------+-----------------+-----------------+-----------------+
| XTol            | OT_REAL         | 0.000           | Relative        |
|                 |                 |                 | solution change |
|                 |                 |                 | tolerance       |
+-----------------+-----------------+-----------------+-----------------+
| contype         | OT_INTEGERVECTO |                 |                 |
|                 | R               |                 |                 |
+-----------------+-----------------+-----------------+-----------------+

>List of available monitors

+-------------+
|     Id      |
+=============+
| eval_f      |
+-------------+
| eval_g      |
+-------------+
| eval_grad_f |
+-------------+
| eval_h      |
+-------------+
| eval_jac_g  |
+-------------+

>List of available stats

+---------------+
|      Id       |
+===============+
| return_status |
+---------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

snopt
-----



SNOPT interface

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| Backup basis    | OT_INTEGER      | None            | 0 * output      |
| file            |                 |                 | extra basis map |
+-----------------+-----------------+-----------------+-----------------+
| Central         | OT_REAL         | None            | 6.7e-5 * (      |
| difference      |                 |                 | Function        |
| interval        |                 |                 | precision)^1/3  |
+-----------------+-----------------+-----------------+-----------------+
| Check frequency | OT_INTEGER      | None            | 60 * test row   |
|                 |                 |                 | residuals kAx - |
|                 |                 |                 | sk              |
+-----------------+-----------------+-----------------+-----------------+
| Crash option    | OT_INTEGER      | None            | 3 * first basis |
|                 |                 |                 | is essentially  |
|                 |                 |                 | triangular      |
+-----------------+-----------------+-----------------+-----------------+
| Crash tolerance | OT_REAL         | None            | 0.100           |
+-----------------+-----------------+-----------------+-----------------+
| Debug level     | OT_INTEGER      | None            | 0 * for         |
|                 |                 |                 | developers      |
+-----------------+-----------------+-----------------+-----------------+
| Derivative      | OT_INTEGER      | None            | 3               |
| level           |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| Difference      | OT_REAL         | None            | 5.5e-7 * (      |
| interval        |                 |                 | Function        |
|                 |                 |                 | precision)^1/2  |
+-----------------+-----------------+-----------------+-----------------+
| Dump file       | OT_INTEGER      | None            | 0 * output Load |
|                 |                 |                 | data            |
+-----------------+-----------------+-----------------+-----------------+
| Elastic weight  | OT_REAL         | None            | 1.0e+4 * used   |
|                 |                 |                 | only during     |
|                 |                 |                 | elastic mode    |
+-----------------+-----------------+-----------------+-----------------+
| Expand          | OT_INTEGER      | None            | 10000 * for     |
| frequency       |                 |                 | anti-cycling    |
|                 |                 |                 | procedure       |
+-----------------+-----------------+-----------------+-----------------+
| Factorization   | OT_INTEGER      | None            | 50 * 100 for    |
| frequency       |                 |                 | LPs             |
+-----------------+-----------------+-----------------+-----------------+
| Function        | OT_REAL         | None            | 3.0e-13 * e^0.8 |
| precision       |                 |                 | (almost full    |
|                 |                 |                 | accuracy)       |
+-----------------+-----------------+-----------------+-----------------+
| Hessian         | OT_STRING       | None            | full memory *   |
|                 |                 |                 | default if n1   |
|                 |                 |                 | 75  limited     |
|                 |                 |                 | memory *        |
|                 |                 |                 | default if n1 > |
|                 |                 |                 | 75              |
+-----------------+-----------------+-----------------+-----------------+
| Hessian flush   | OT_INTEGER      | None            | 999999 * no     |
|                 |                 |                 | flushing        |
+-----------------+-----------------+-----------------+-----------------+
| Hessian         | OT_INTEGER      | None            | 999999 * for    |
| frequency       |                 |                 | full Hessian    |
|                 |                 |                 | (never reset)   |
+-----------------+-----------------+-----------------+-----------------+
| Hessian updates | OT_INTEGER      | None            | 10 * for        |
|                 |                 |                 | limited memory  |
|                 |                 |                 | Hessian         |
+-----------------+-----------------+-----------------+-----------------+
| Insert file     | OT_INTEGER      | None            | 0 * input in    |
|                 |                 |                 | industry format |
+-----------------+-----------------+-----------------+-----------------+
| Iterations      | OT_INTEGER      | None            | 10000 * or 20m  |
| limit           |                 |                 | if that is more |
+-----------------+-----------------+-----------------+-----------------+
| LU              | OT_STRING       | None            | LU partial      |
|                 |                 |                 | pivoting *      |
|                 |                 |                 | default         |
|                 |                 |                 | threshold       |
|                 |                 |                 | pivoting        |
|                 |                 |                 | strategy  LU    |
|                 |                 |                 | rook pivoting * |
|                 |                 |                 | threshold rook  |
|                 |                 |                 | pivoting  LU    |
|                 |                 |                 | complete        |
|                 |                 |                 | pivoting *      |
|                 |                 |                 | threshold       |
|                 |                 |                 | complete        |
|                 |                 |                 | pivoting        |
+-----------------+-----------------+-----------------+-----------------+
| LU factor       | OT_REAL         | None            | 3.99 * for NP   |
| tolerance       |                 |                 | (100.0 for LP)  |
+-----------------+-----------------+-----------------+-----------------+
| LU singularity  | OT_REAL         | None            | 0.000           |
| tolerance       |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| LU update       | OT_REAL         | None            | 3.99 * for NP ( |
| tolerance       |                 |                 | 10.0 for LP)    |
+-----------------+-----------------+-----------------+-----------------+
| Linesearch      | OT_REAL         | None            | 0.9 * smaller   |
| tolerance       |                 |                 | for more        |
|                 |                 |                 | accurate search |
+-----------------+-----------------+-----------------+-----------------+
| Load file       | OT_INTEGER      | None            | 0 * input names |
|                 |                 |                 | and values      |
+-----------------+-----------------+-----------------+-----------------+
| Major           | OT_REAL         | None            | 1.0e-6 * target |
| feasibility     |                 |                 | nonlinear       |
| tolerance       |                 |                 | constraint      |
|                 |                 |                 | violation       |
+-----------------+-----------------+-----------------+-----------------+
| Major           | OT_INTEGER      | None            | 1000 * or m if  |
| iterations      |                 |                 | that is more    |
| limit           |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| Major           | OT_REAL         | None            | 1.0e-6 * target |
| optimality      |                 |                 | complementarity |
| tolerance       |                 |                 | gap             |
+-----------------+-----------------+-----------------+-----------------+
| Major print     | OT_INTEGER      | None            | 1 * 1-line      |
| level           |                 |                 | major iteration |
|                 |                 |                 | log             |
+-----------------+-----------------+-----------------+-----------------+
| Major step      | OT_REAL         | None            | 2               |
| limit           |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| Minor           | OT_REAL         | None            | 1.0e-6 * for    |
| feasibility     |                 |                 | satisfying the  |
| tolerance       |                 |                 | QP bounds       |
+-----------------+-----------------+-----------------+-----------------+
| Minor           | OT_INTEGER      | None            | 500 * or 3m if  |
| iterations      |                 |                 | that is more    |
| limit           |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| Minor print     | OT_INTEGER      | None            | 1 * 1-line      |
| level           |                 |                 | minor iteration |
|                 |                 |                 | log             |
+-----------------+-----------------+-----------------+-----------------+
| New basis file  | OT_INTEGER      | None            | 0 * output      |
|                 |                 |                 | basis map       |
+-----------------+-----------------+-----------------+-----------------+
| New superbasics | OT_INTEGER      | None            | 99 * controls   |
| limit           |                 |                 | early           |
|                 |                 |                 | termination of  |
|                 |                 |                 | QPs             |
+-----------------+-----------------+-----------------+-----------------+
| Old basis file  | OT_INTEGER      | None            | 0 * input basis |
|                 |                 |                 | map             |
+-----------------+-----------------+-----------------+-----------------+
| Partial price   | OT_INTEGER      | None            | 1 * 10 for      |
|                 |                 |                 | large LPs       |
+-----------------+-----------------+-----------------+-----------------+
| Penalty         | OT_REAL         | None            | 0.0 * initial   |
| parameter       |                 |                 | penalty         |
|                 |                 |                 | parameter       |
+-----------------+-----------------+-----------------+-----------------+
| Pivot tolerance | OT_REAL         | None            | 3.7e-11 * e^2/3 |
+-----------------+-----------------+-----------------+-----------------+
| Print frequency | OT_INTEGER      | None            | 100 * minor     |
|                 |                 |                 | iterations log  |
|                 |                 |                 | on Print file   |
+-----------------+-----------------+-----------------+-----------------+
| Proximal point  | OT_INTEGER      | None            | 1 * satisfies   |
| method          |                 |                 | linear          |
|                 |                 |                 | constraints     |
|                 |                 |                 | near x0         |
+-----------------+-----------------+-----------------+-----------------+
| Punch file      | OT_INTEGER      | None            | 0 * output      |
|                 |                 |                 | Insert data     |
+-----------------+-----------------+-----------------+-----------------+
| QPSolver        | OT_STRING       | None            | Cholesky *      |
|                 |                 |                 | default         |
+-----------------+-----------------+-----------------+-----------------+
| Reduced Hessian | OT_INTEGER      | None            | 2000 * or       |
| dimension       |                 |                 | Superbasics     |
|                 |                 |                 | limit if that   |
|                 |                 |                 | is less         |
+-----------------+-----------------+-----------------+-----------------+
| Save frequency  | OT_INTEGER      | None            | 100 * save      |
|                 |                 |                 | basis map       |
+-----------------+-----------------+-----------------+-----------------+
| Scale option    | OT_INTEGER      | None            | 1 * linear      |
|                 |                 |                 | constraints and |
|                 |                 |                 | variables       |
+-----------------+-----------------+-----------------+-----------------+
| Scale tolerance | OT_REAL         | None            | 0.900           |
+-----------------+-----------------+-----------------+-----------------+
| Solution        | OT_STRING       | None            | Yes * on the    |
|                 |                 |                 | Print file      |
+-----------------+-----------------+-----------------+-----------------+
| Solution file   | OT_INTEGER      | None            | 0 * different   |
|                 |                 |                 | from printed    |
|                 |                 |                 | solution        |
+-----------------+-----------------+-----------------+-----------------+
| Sticky          | OT_STRING       | None            | No * Yes makes  |
| parameters      |                 |                 | parameter       |
|                 |                 |                 | values persist  |
+-----------------+-----------------+-----------------+-----------------+
| Summary         | OT_INTEGER      | None            | 100 * minor     |
| frequency       |                 |                 | iterations log  |
|                 |                 |                 | on Summary file |
+-----------------+-----------------+-----------------+-----------------+
| Superbasics     | OT_INTEGER      | None            | n1 + 1 * n1 =   |
| limit           |                 |                 | number of       |
|                 |                 |                 | nonlinear       |
|                 |                 |                 | variables       |
+-----------------+-----------------+-----------------+-----------------+
| System          | OT_STRING       | None            | No * Yes prints |
| information     |                 |                 | more system     |
|                 |                 |                 | information     |
+-----------------+-----------------+-----------------+-----------------+
| Timing level    | OT_INTEGER      | None            | 3 * print cpu   |
|                 |                 |                 | times           |
+-----------------+-----------------+-----------------+-----------------+
| Unbounded       | OT_REAL         | None            | 1.000e+15       |
| objective       |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| Unbounded step  | OT_REAL         | None            | 1.000e+18       |
| size            |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| Verify level    | OT_INTEGER      | None            | 0 * cheap check |
|                 |                 |                 | on gradients    |
+-----------------+-----------------+-----------------+-----------------+
| Violation limit | OT_REAL         | None            | 10.0 * unscaled |
|                 |                 |                 | constraint      |
|                 |                 |                 | violation limit |
+-----------------+-----------------+-----------------+-----------------+
| detect_linear   | OT_BOOLEAN      | True            | Make an effort  |
|                 |                 |                 | to treat linear |
|                 |                 |                 | constraints and |
|                 |                 |                 | linear          |
|                 |                 |                 | variables       |
|                 |                 |                 | specially.      |
+-----------------+-----------------+-----------------+-----------------+
| print file      | OT_STRING       | None            | n/a             |
+-----------------+-----------------+-----------------+-----------------+
| print_time      | OT_BOOLEAN      | True            | print           |
|                 |                 |                 | information     |
|                 |                 |                 | about execution |
|                 |                 |                 | time            |
+-----------------+-----------------+-----------------+-----------------+
| specs file      | OT_STRING       | None            | n/a             |
+-----------------+-----------------+-----------------+-----------------+
| start           | OT_STRING       | Cold            |                 |
+-----------------+-----------------+-----------------+-----------------+
| summary         | OT_BOOLEAN      | True            | n/a             |
+-----------------+-----------------+-----------------+-----------------+

>List of available monitors

+-----------+
|    Id     |
+===========+
| eval_nlp  |
+-----------+
| setup_nlp |
+-----------+

>List of available stats

+----------------+
|       Id       |
+================+
| iter_count     |
+----------------+
| iterations     |
+----------------+
| n_callback_fun |
+----------------+
| n_eval_grad_f  |
+----------------+
| n_eval_jac_g   |
+----------------+
| return_status  |
+----------------+
| t_callback_fun |
+----------------+
| t_eval_grad_f  |
+----------------+
| t_eval_jac_g   |
+----------------+
| t_mainloop     |
+----------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

worhp
-----



WORHP interface

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| AcceptTolFeas   | OT_REAL         | 0.001           | Tolerance for   |
|                 |                 |                 | acceptable      |
|                 |                 |                 | feasibility     |
+-----------------+-----------------+-----------------+-----------------+
| AcceptTolOpti   | OT_REAL         | 0.001           | Tolerance for   |
|                 |                 |                 | acceptable      |
|                 |                 |                 | optimality      |
+-----------------+-----------------+-----------------+-----------------+
| AlphaMinConst   | OT_BOOLEAN      | False           | Use a constant  |
|                 |                 |                 | lower bound on  |
|                 |                 |                 | Armijo stepsize |
|                 |                 |                 | in Filter       |
+-----------------+-----------------+-----------------+-----------------+
| Ares            | OT_INTEGERVECTO | [42, 41, 42,    | Armijo recovery |
|                 | R               | 43, 44, 41, 50] | strategies.     |
|                 |                 |                 | Vector of size  |
|                 |                 |                 | 7               |
+-----------------+-----------------+-----------------+-----------------+
| ArmijoBeta      | OT_REAL         | 0.712           | Trial stepsize  |
|                 |                 |                 | decrease factor |
|                 |                 |                 | for Armijo rule |
+-----------------+-----------------+-----------------+-----------------+
| ArmijoMaxAlpha  | OT_REAL         | 1               | Initial alpha   |
|                 |                 |                 | for Armijo rule |
+-----------------+-----------------+-----------------+-----------------+
| ArmijoMinAlpha  | OT_REAL         | 0.000           | Lower bound on  |
|                 |                 |                 | alpha for       |
|                 |                 |                 | Armijo rule     |
+-----------------+-----------------+-----------------+-----------------+
| ArmijoMinAlphaR | OT_REAL         | 0.000           | Lower bound on  |
| ec              |                 |                 | alpha for       |
|                 |                 |                 | Armijo rule     |
|                 |                 |                 | during recovery |
+-----------------+-----------------+-----------------+-----------------+
| ArmijoSigma     | OT_REAL         | 0.005           | Scale factor    |
|                 |                 |                 | for linearised  |
|                 |                 |                 | descent check   |
|                 |                 |                 | in Armijo rule  |
+-----------------+-----------------+-----------------+-----------------+
| AutoQPRecovery  | OT_BOOLEAN      | True            | Enable          |
|                 |                 |                 | automatic QP    |
|                 |                 |                 | recovery        |
+-----------------+-----------------+-----------------+-----------------+
| BFGSmaxblockSiz | OT_INTEGER      | 300             | Block size      |
| e               |                 |                 | parameter used  |
|                 |                 |                 | by certain BFGS |
|                 |                 |                 | methods         |
+-----------------+-----------------+-----------------+-----------------+
| BFGSmethod      | OT_INTEGER      | 0               | Choose BFGS     |
|                 |                 |                 | method (0:      |
|                 |                 |                 | dense, 1-3:     |
|                 |                 |                 | block, 100+:    |
|                 |                 |                 | sparse)         |
+-----------------+-----------------+-----------------+-----------------+
| BFGSminblockSiz | OT_INTEGER      | 300             | Block size      |
| e               |                 |                 | parameter used  |
|                 |                 |                 | by certain BFGS |
|                 |                 |                 | methods         |
+-----------------+-----------------+-----------------+-----------------+
| BFGSrestart     | OT_INTEGER      | 50              | Restart BFGS    |
|                 |                 |                 | update after    |
|                 |                 |                 | this many       |
|                 |                 |                 | iterations      |
+-----------------+-----------------+-----------------+-----------------+
| BettsFactor     | OT_REAL         | 2.100           | Update factor   |
|                 |                 |                 | for Betts'      |
|                 |                 |                 | Hessian         |
|                 |                 |                 | regularisation  |
+-----------------+-----------------+-----------------+-----------------+
| BettsPoint      | OT_REAL         | 1               | Smallest        |
|                 |                 |                 | eigenvalue of   |
|                 |                 |                 | the regularised |
|                 |                 |                 | Hessian         |
+-----------------+-----------------+-----------------+-----------------+
| BoundTolFac     | OT_REAL         | 1000            | Factor in       |
|                 |                 |                 | determining     |
|                 |                 |                 | active          |
|                 |                 |                 | constraints by  |
|                 |                 |                 | KKT             |
+-----------------+-----------------+-----------------+-----------------+
| CheckFJ         | OT_REAL         | 1.000e+12       | Upper bound     |
|                 |                 |                 | used by Fritz-  |
|                 |                 |                 | John heuristic  |
+-----------------+-----------------+-----------------+-----------------+
| CheckStructureD | OT_BOOLEAN      | True            | Enable          |
| F               |                 |                 | structural      |
|                 |                 |                 | checking of DF  |
+-----------------+-----------------+-----------------+-----------------+
| CheckStructureD | OT_BOOLEAN      | True            | Enable          |
| G               |                 |                 | structural      |
|                 |                 |                 | checking of DG  |
+-----------------+-----------------+-----------------+-----------------+
| CheckStructureH | OT_BOOLEAN      | True            | Enable          |
| M               |                 |                 | structural      |
|                 |                 |                 | checking of HM  |
+-----------------+-----------------+-----------------+-----------------+
| CorStepBettsSum | OT_REAL         | 0.500           | (experimental)  |
+-----------------+-----------------+-----------------+-----------------+
| CorStepConStop  | OT_REAL         | 0.000           | (experimental)  |
+-----------------+-----------------+-----------------+-----------------+
| CorStepConvio   | OT_REAL         | 1               | (experimental)  |
+-----------------+-----------------+-----------------+-----------------+
| CorStepMaxIter  | OT_INTEGER      | 50              | (experimental)  |
+-----------------+-----------------+-----------------+-----------------+
| CorStepMethod   | OT_INTEGER      | 0               | (experimental)  |
+-----------------+-----------------+-----------------+-----------------+
| CorStepMode     | OT_INTEGER      | 1               | (experimental)  |
+-----------------+-----------------+-----------------+-----------------+
| CorStepPFactor  | OT_REAL         | 1               | (experimental)  |
+-----------------+-----------------+-----------------+-----------------+
| CorStepPMax     | OT_REAL         | 1000000         | (experimental)  |
+-----------------+-----------------+-----------------+-----------------+
| CorStepRecovery | OT_BOOLEAN      | False           | (experimental)  |
| DX              |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| CurvBCond       | OT_REAL         | 0.020           | Block BFGS      |
|                 |                 |                 | curvature       |
|                 |                 |                 | condition bound |
+-----------------+-----------------+-----------------+-----------------+
| CurvBFac        | OT_REAL         | 0.300           | Block BFGS      |
|                 |                 |                 | curvature       |
|                 |                 |                 | condition       |
|                 |                 |                 | regularisation  |
|                 |                 |                 | factor          |
+-----------------+-----------------+-----------------+-----------------+
| CurvCond        | OT_REAL         | 0.020           | BFGS Curvature  |
|                 |                 |                 | condition bound |
+-----------------+-----------------+-----------------+-----------------+
| CurvFac         | OT_REAL         | 0.300           | BFGS curvature  |
|                 |                 |                 | condition       |
|                 |                 |                 | regularisation  |
|                 |                 |                 | factor          |
+-----------------+-----------------+-----------------+-----------------+
| DebugMarker05   | OT_INTEGER      | 42              | Debug marker.   |
|                 |                 |                 | Used to find    |
|                 |                 |                 | memory alignmen |
|                 |                 |                 | t/padding       |
|                 |                 |                 | issues          |
+-----------------+-----------------+-----------------+-----------------+
| DebugMarker06   | OT_INTEGER      | 42              | Debug marker.   |
|                 |                 |                 | Used to find    |
|                 |                 |                 | memory alignmen |
|                 |                 |                 | t/padding       |
|                 |                 |                 | issues          |
+-----------------+-----------------+-----------------+-----------------+
| FGtogether      | OT_BOOLEAN      | False           | F and G cannot  |
|                 |                 |                 | be evaluated    |
|                 |                 |                 | separately      |
+-----------------+-----------------+-----------------+-----------------+
| FJandND         | OT_BOOLEAN      | False           | Enable Fritz-   |
|                 |                 |                 | John and non-   |
|                 |                 |                 | differentiable  |
|                 |                 |                 | check           |
|                 |                 |                 | heuristics      |
+-----------------+-----------------+-----------------+-----------------+
| FeasibleDual    | OT_BOOLEAN      | False           | Activate dual   |
|                 |                 |                 | feasibility     |
|                 |                 |                 | mode            |
+-----------------+-----------------+-----------------+-----------------+
| FeasibleInit    | OT_BOOLEAN      | False           | Activate        |
|                 |                 |                 | initial         |
|                 |                 |                 | feasibility     |
|                 |                 |                 | mode            |
+-----------------+-----------------+-----------------+-----------------+
| FeasibleInitTol | OT_REAL         | 0.001           | Feasibility     |
|                 |                 |                 | tolerance for   |
|                 |                 |                 | no-objective    |
|                 |                 |                 | feasible mode   |
+-----------------+-----------------+-----------------+-----------------+
| FeasibleOnly    | OT_BOOLEAN      | False           | Activate        |
|                 |                 |                 | feasible-only   |
|                 |                 |                 | mode            |
+-----------------+-----------------+-----------------+-----------------+
| FidifEps        | OT_REAL         | 0.000           | Finite          |
|                 |                 |                 | difference      |
|                 |                 |                 | perturbation    |
+-----------------+-----------------+-----------------+-----------------+
| FidifHM         | OT_BOOLEAN      | False           | Approximate     |
|                 |                 |                 | Hessian by      |
|                 |                 |                 | finite          |
|                 |                 |                 | differences     |
|                 |                 |                 | (otherwise      |
|                 |                 |                 | BFGS)           |
+-----------------+-----------------+-----------------+-----------------+
| FilterBisecAlph | OT_BOOLEAN      | True            | Filter          |
| a               |                 |                 | heuristic to    |
|                 |                 |                 | save Armijo     |
|                 |                 |                 | iterations      |
+-----------------+-----------------+-----------------+-----------------+
| FilterGammaCV   | OT_REAL         | 0.000           | Constraint      |
|                 |                 |                 | violation       |
|                 |                 |                 | decrease factor |
|                 |                 |                 | in Filter       |
|                 |                 |                 | acceptance      |
|                 |                 |                 | check           |
+-----------------+-----------------+-----------------+-----------------+
| FilterGammaF    | OT_REAL         | 0.000           | Objective       |
|                 |                 |                 | decrease factor |
|                 |                 |                 | in Filter       |
|                 |                 |                 | acceptance      |
|                 |                 |                 | check           |
+-----------------+-----------------+-----------------+-----------------+
| FilterIntersecA | OT_BOOLEAN      | True            | Filter          |
| lpha            |                 |                 | heuristic to    |
|                 |                 |                 | save Armijo     |
|                 |                 |                 | iterations      |
+-----------------+-----------------+-----------------+-----------------+
| FirstDifCentral | OT_BOOLEAN      | True            | Use central     |
|                 |                 |                 | finite          |
|                 |                 |                 | difference      |
|                 |                 |                 | quotient for    |
|                 |                 |                 | first           |
|                 |                 |                 | derivatives     |
+-----------------+-----------------+-----------------+-----------------+
| FocusOnFeas     | OT_BOOLEAN      | True            | Enable Focus-   |
|                 |                 |                 | on-Feasibility  |
|                 |                 |                 | mode            |
+-----------------+-----------------+-----------------+-----------------+
| FocusOnFeasFact | OT_REAL         | 1.360           | Factor in       |
| or              |                 |                 | Focus-on-       |
|                 |                 |                 | Feasibility     |
|                 |                 |                 | mode            |
+-----------------+-----------------+-----------------+-----------------+
| GammaAlpha      | OT_REAL         | 0.050           | Safety factor   |
|                 |                 |                 | for alphamin    |
|                 |                 |                 | calculation by  |
|                 |                 |                 | Filter          |
+-----------------+-----------------+-----------------+-----------------+
| GroupMethod     | OT_INTEGER      | 1               | Select method   |
|                 |                 |                 | to determine    |
|                 |                 |                 | graph colouring |
|                 |                 |                 | groups          |
+-----------------+-----------------+-----------------+-----------------+
| IgnoreFilterCri | OT_BOOLEAN      | False           | Activate        |
| t               |                 |                 | accelerating    |
|                 |                 |                 | heuristics for  |
|                 |                 |                 | Filter          |
+-----------------+-----------------+-----------------+-----------------+
| IncBettsTau     | OT_REAL         | 2               | Increase factor |
|                 |                 |                 | for Betts'      |
|                 |                 |                 | update          |
|                 |                 |                 | dampening term  |
+-----------------+-----------------+-----------------+-----------------+
| IncBettsTauMore | OT_REAL         | 100             | Larger increase |
|                 |                 |                 | factor for      |
|                 |                 |                 | Betts' update   |
|                 |                 |                 | dampening term  |
+-----------------+-----------------+-----------------+-----------------+
| IncreaseIWS     | OT_REAL         | 1               | Increase factor |
|                 |                 |                 | for estimated   |
|                 |                 |                 | integer         |
|                 |                 |                 | workspace       |
|                 |                 |                 | requirement     |
+-----------------+-----------------+-----------------+-----------------+
| IncreaseRWS     | OT_REAL         | 1               | Increase factor |
|                 |                 |                 | for estimated   |
|                 |                 |                 | real workspace  |
|                 |                 |                 | requirement     |
+-----------------+-----------------+-----------------+-----------------+
| Infty           | OT_REAL         | 1.000e+20       | Upper bound for |
|                 |                 |                 | numbers to be   |
|                 |                 |                 | regarded as     |
|                 |                 |                 | finite          |
+-----------------+-----------------+-----------------+-----------------+
| InftyUnbounded  | OT_REAL         | 1.000e+20       | Tolerance for   |
|                 |                 |                 | unboundedness   |
|                 |                 |                 | detection       |
|                 |                 |                 | heuristic       |
+-----------------+-----------------+-----------------+-----------------+
| InitialLMest    | OT_BOOLEAN      | True            | Enable initial  |
|                 |                 |                 | Lagrange        |
|                 |                 |                 | multiplier      |
|                 |                 |                 | estimate        |
+-----------------+-----------------+-----------------+-----------------+
| KeepAcceptableS | OT_BOOLEAN      | True            | Save acceptable |
| ol              |                 |                 | solutions as    |
|                 |                 |                 | fallback        |
+-----------------+-----------------+-----------------+-----------------+
| LMestQPipComTol | OT_REAL         | 0.003           | IP              |
|                 |                 |                 | complementarity |
|                 |                 |                 | tolerance in    |
|                 |                 |                 | initial         |
|                 |                 |                 | multiplier      |
|                 |                 |                 | estimate        |
+-----------------+-----------------+-----------------+-----------------+
| LMestQPipResTol | OT_REAL         | 1               | IP residual     |
|                 |                 |                 | tolerance in    |
|                 |                 |                 | initial         |
|                 |                 |                 | multiplier      |
|                 |                 |                 | estimate        |
+-----------------+-----------------+-----------------+-----------------+
| LinMult         | OT_BOOLEAN      | False           | Control         |
|                 |                 |                 | Lagrange        |
|                 |                 |                 | multiplier      |
|                 |                 |                 | update          |
+-----------------+-----------------+-----------------+-----------------+
| LogLevel        | OT_INTEGER      | 0               | Enable XML      |
|                 |                 |                 | logfiles and    |
|                 |                 |                 | writing         |
|                 |                 |                 | interval        |
+-----------------+-----------------+-----------------+-----------------+
| LogResult       | OT_INTEGER      | 0               | Enable XML      |
|                 |                 |                 | result logging  |
|                 |                 |                 | and detail      |
|                 |                 |                 | level           |
+-----------------+-----------------+-----------------+-----------------+
| LowPassAlphaF   | OT_REAL         | 0.950           | Lowpass-filter  |
|                 |                 |                 | update factor   |
|                 |                 |                 | for objective   |
|                 |                 |                 | values          |
+-----------------+-----------------+-----------------+-----------------+
| LowPassAlphaG   | OT_REAL         | 0.950           | Lowpass-filter  |
|                 |                 |                 | update factor   |
|                 |                 |                 | for constraint  |
|                 |                 |                 | values          |
+-----------------+-----------------+-----------------+-----------------+
| LowPassAlphaMer | OT_REAL         | 0.100           | Lowpass-filter  |
| it              |                 |                 | update factor   |
|                 |                 |                 | for merit       |
|                 |                 |                 | function values |
+-----------------+-----------------+-----------------+-----------------+
| LowPassFilter   | OT_BOOLEAN      | True            | Enable lowpass- |
|                 |                 |                 | filter          |
|                 |                 |                 | termination     |
|                 |                 |                 | criterion       |
+-----------------+-----------------+-----------------+-----------------+
| MA97blas3       | OT_BOOLEAN      | False           | Use BLAS level  |
|                 |                 |                 | 3 (dgemm) in    |
|                 |                 |                 | MA97            |
+-----------------+-----------------+-----------------+-----------------+
| MA97mf          | OT_BOOLEAN      | False           | Use             |
|                 |                 |                 | multifrontal-   |
|                 |                 |                 | style forward   |
|                 |                 |                 | solve of MA97   |
+-----------------+-----------------+-----------------+-----------------+
| MA97nemin       | OT_INTEGER      | 8               | Node            |
|                 |                 |                 | amalgation,     |
|                 |                 |                 | controls        |
|                 |                 |                 | merging in      |
|                 |                 |                 | elimination     |
|                 |                 |                 | tree by MA97    |
+-----------------+-----------------+-----------------+-----------------+
| MA97ordering    | OT_INTEGER      | 5               | Ordering used   |
|                 |                 |                 | by MA97         |
+-----------------+-----------------+-----------------+-----------------+
| MA97print       | OT_INTEGER      | -1              | Print level     |
|                 |                 |                 | used by MA97    |
+-----------------+-----------------+-----------------+-----------------+
| MA97scaling     | OT_INTEGER      | 0               | Scaling used by |
|                 |                 |                 | MA97            |
+-----------------+-----------------+-----------------+-----------------+
| MA97small       | OT_REAL         | 0.000           | Any pivot whose |
|                 |                 |                 | modulus is less |
|                 |                 |                 | than this is    |
|                 |                 |                 | treated as zero |
|                 |                 |                 | by MA97         |
+-----------------+-----------------+-----------------+-----------------+
| MA97u           | OT_REAL         | 0.010           | Relative pivot  |
|                 |                 |                 | tolerance of    |
|                 |                 |                 | MA97            |
+-----------------+-----------------+-----------------+-----------------+
| MatrixCC        | OT_BOOLEAN      | False           | Not to be       |
|                 |                 |                 | included into a |
|                 |                 |                 | parameter file! |
+-----------------+-----------------+-----------------+-----------------+
| MaxCalls        | OT_INTEGER      | 2.147e+09       | Upper bound to  |
|                 |                 |                 | Reverse         |
|                 |                 |                 | Communication   |
|                 |                 |                 | calls           |
+-----------------+-----------------+-----------------+-----------------+
| MaxForce        | OT_INTEGER      | 1000            | Maximum number  |
|                 |                 |                 | of Force        |
|                 |                 |                 | recovery        |
|                 |                 |                 | strategy steps  |
+-----------------+-----------------+-----------------+-----------------+
| MaxGPart        | OT_INTEGER      | 1               | (experimental)  |
+-----------------+-----------------+-----------------+-----------------+
| MaxIter         | OT_INTEGER      | 500             | Upper bound on  |
|                 |                 |                 | major           |
|                 |                 |                 | iterations      |
+-----------------+-----------------+-----------------+-----------------+
| MaxLScounter    | OT_INTEGER      | 3               | Control         |
|                 |                 |                 | activation of   |
|                 |                 |                 | Filter          |
|                 |                 |                 | acceleration    |
|                 |                 |                 | heuristics      |
+-----------------+-----------------+-----------------+-----------------+
| MaxNorm         | OT_BOOLEAN      | True            | Select max-norm |
|                 |                 |                 | instead of      |
|                 |                 |                 | 1-norm in       |
|                 |                 |                 | Filter          |
+-----------------+-----------------+-----------------+-----------------+
| MeritFunction   | OT_INTEGER      | 4               | Select merit    |
|                 |                 |                 | function and    |
|                 |                 |                 | penalty update  |
|                 |                 |                 | [0, 3..5]       |
+-----------------+-----------------+-----------------+-----------------+
| MeritGradTol    | OT_REAL         | 0.000           | Threshold of    |
|                 |                 |                 | meritfunction   |
|                 |                 |                 | gradient for    |
|                 |                 |                 | increasing      |
|                 |                 |                 | Hessian         |
|                 |                 |                 | regularisation  |
+-----------------+-----------------+-----------------+-----------------+
| MinBettsTau     | OT_REAL         | 0.000           | Lower bound for |
|                 |                 |                 | Betts' update   |
|                 |                 |                 | dampening term  |
+-----------------+-----------------+-----------------+-----------------+
| MoreRelax       | OT_BOOLEAN      | False           | Introduce one   |
|                 |                 |                 | relaxation      |
|                 |                 |                 | variable for    |
|                 |                 |                 | every           |
|                 |                 |                 | constraint      |
+-----------------+-----------------+-----------------+-----------------+
| NLPmethod       | OT_INTEGER      | 1               | Select (1)      |
|                 |                 |                 | Meritfunction   |
|                 |                 |                 | or (3) Filter   |
|                 |                 |                 | globalisation   |
+-----------------+-----------------+-----------------+-----------------+
| NLPprint        | OT_INTEGER      | 2               | NLP print level |
|                 |                 |                 | [-1..4]         |
+-----------------+-----------------+-----------------+-----------------+
| PairMethod      | OT_INTEGER      | 1               | Select method   |
|                 |                 |                 | to determine    |
|                 |                 |                 | graph colouring |
|                 |                 |                 | pairgroups      |
+-----------------+-----------------+-----------------+-----------------+
| PenUpdEpsBar    | OT_REAL         | 0.900           | Penalty update  |
|                 |                 |                 | parameter       |
|                 |                 |                 | factor for      |
|                 |                 |                 | MeritFunction = |
|                 |                 |                 | 3               |
+-----------------+-----------------+-----------------+-----------------+
| PenUpdEpsKFac   | OT_REAL         | 2               | Penalty update  |
|                 |                 |                 | parameter       |
|                 |                 |                 | factor for      |
|                 |                 |                 | MeritFunction = |
|                 |                 |                 | 4               |
+-----------------+-----------------+-----------------+-----------------+
| PenUpdEpsKSeque | OT_INTEGER      | 2               | Penalty update  |
| nce             |                 |                 | parameter       |
+-----------------+-----------------+-----------------+-----------------+
| PenUpdMaxDeltaK | OT_REAL         | 11              | Max penalty for |
|                 |                 |                 | MeritFunction = |
|                 |                 |                 | 4               |
+-----------------+-----------------+-----------------+-----------------+
| PenUpdMaxFac    | OT_REAL         | 100000000       | Max factor for  |
|                 |                 |                 | increasing      |
|                 |                 |                 | penalty for     |
|                 |                 |                 | MeritFunction = |
|                 |                 |                 | 4               |
+-----------------+-----------------+-----------------+-----------------+
| PenUpdRBar      | OT_REAL         | 2               | Penalty update  |
|                 |                 |                 | parameter for   |
|                 |                 |                 | MeritFunction = |
|                 |                 |                 | 3               |
+-----------------+-----------------+-----------------+-----------------+
| PrecisionF      | OT_REAL         | 0.000           | (currently      |
|                 |                 |                 | unused)         |
|                 |                 |                 | Relative        |
|                 |                 |                 | precision of    |
|                 |                 |                 | objective       |
+-----------------+-----------------+-----------------+-----------------+
| PrecisionG      | OT_REAL         | 0.000           | (currently      |
|                 |                 |                 | unused)         |
|                 |                 |                 | Relative        |
|                 |                 |                 | precision of    |
|                 |                 |                 | constraints     |
+-----------------+-----------------+-----------------+-----------------+
| QPscaleParam    | OT_REAL         | 0               | (currently      |
|                 |                 |                 | unused) Scaling |
|                 |                 |                 | factor for QP   |
+-----------------+-----------------+-----------------+-----------------+
| QuadraticProble | OT_BOOLEAN      | False           | Not to be       |
| m               |                 |                 | included into a |
|                 |                 |                 | parameter file! |
+-----------------+-----------------+-----------------+-----------------+
| ReduceBettsTau  | OT_REAL         | 0.300           | Decrease factor |
|                 |                 |                 | for Betts'      |
|                 |                 |                 | update          |
|                 |                 |                 | dampening term  |
+-----------------+-----------------+-----------------+-----------------+
| RefineFeasibili | OT_INTEGER      | 0               | 0 -             |
| ty              |                 |                 | Deactivated, 1  |
|                 |                 |                 | - After first   |
|                 |                 |                 | feasible        |
|                 |                 |                 | iterate, 2 -    |
|                 |                 |                 | Always on,      |
|                 |                 |                 | Activates       |
|                 |                 |                 | iterative       |
|                 |                 |                 | refinement due  |
|                 |                 |                 | to perturbation |
|                 |                 |                 | in constraints  |
|                 |                 |                 | using           |
|                 |                 |                 | parametric      |
|                 |                 |                 | sensitivities   |
+-----------------+-----------------+-----------------+-----------------+
| RefineMaxHMReg  | OT_REAL         | 1000            | Maximum allowed |
|                 |                 |                 | regularisation  |
|                 |                 |                 | of the hessian  |
|                 |                 |                 | CAUTION         |
|                 |                 |                 | absolute value  |
+-----------------+-----------------+-----------------+-----------------+
| RefineMaxRelax  | OT_REAL         | 0.750           | Maximum allowed |
|                 |                 |                 | relaxation to   |
|                 |                 |                 | apply           |
|                 |                 |                 | feasibility     |
|                 |                 |                 | refinement      |
+-----------------+-----------------+-----------------+-----------------+
| RefineOnlyOnAlp | OT_BOOLEAN      | True            | Activates new   |
| ha              |                 |                 | iterative       |
|                 |                 |                 | refinement of   |
|                 |                 |                 | constraints     |
|                 |                 |                 | only when       |
|                 |                 |                 | Armijo alpha    |
|                 |                 |                 | equals one      |
+-----------------+-----------------+-----------------+-----------------+
| RefineStartTol  | OT_REAL         | 0.000           | Start tolerance |
|                 |                 |                 | for successful  |
|                 |                 |                 | termination of  |
|                 |                 |                 | iterative       |
|                 |                 |                 | refinement due  |
|                 |                 |                 | to perturbation |
|                 |                 |                 | in constraints  |
+-----------------+-----------------+-----------------+-----------------+
| RegStrategy     | OT_INTEGER      | 1               | Select Hessian  |
|                 |                 |                 | regularisation  |
|                 |                 |                 | strategy in     |
|                 |                 |                 | Filter          |
+-----------------+-----------------+-----------------+-----------------+
| ReinitFilter    | OT_BOOLEAN      | False           | Enables Filter- |
|                 |                 |                 | reinitialisatio |
|                 |                 |                 | n accelerating  |
|                 |                 |                 | heuristic       |
+-----------------+-----------------+-----------------+-----------------+
| RelaxMaxDelta   | OT_REAL         | 0.920           | Upper bound for |
|                 |                 |                 | accepting the   |
|                 |                 |                 | constraint      |
|                 |                 |                 | relaxation      |
|                 |                 |                 | variable        |
+-----------------+-----------------+-----------------+-----------------+
| RelaxMaxPen     | OT_REAL         | 50000000        | Upper bound on  |
|                 |                 |                 | the constraint  |
|                 |                 |                 | relaxation      |
|                 |                 |                 | penalty         |
+-----------------+-----------------+-----------------+-----------------+
| RelaxRho        | OT_REAL         | 6               | Update factor   |
|                 |                 |                 | for the         |
|                 |                 |                 | constraint      |
|                 |                 |                 | relaxation      |
|                 |                 |                 | penalty         |
+-----------------+-----------------+-----------------+-----------------+
| RelaxStart      | OT_REAL         | 1               | Initial value   |
|                 |                 |                 | of the          |
|                 |                 |                 | constraint      |
|                 |                 |                 | relaxation      |
|                 |                 |                 | penalty         |
+-----------------+-----------------+-----------------+-----------------+
| RestUntilFeas   | OT_BOOLEAN      | False           | Do restoration  |
|                 |                 |                 | until a         |
|                 |                 |                 | feasible        |
|                 |                 |                 | solution is     |
|                 |                 |                 | found           |
+-----------------+-----------------+-----------------+-----------------+
| ScaleConIter    | OT_BOOLEAN      | False           | Scale           |
|                 |                 |                 | constraints in  |
|                 |                 |                 | every iteration |
+-----------------+-----------------+-----------------+-----------------+
| ScaleFacObj     | OT_REAL         | 10              | Value to scale  |
|                 |                 |                 | large objective |
|                 |                 |                 | functions to    |
+-----------------+-----------------+-----------------+-----------------+
| ScaleFacQP      | OT_REAL         | 10              | Upper bound on  |
|                 |                 |                 | resulting       |
|                 |                 |                 | matrix norm for |
|                 |                 |                 | QP scaling      |
+-----------------+-----------------+-----------------+-----------------+
| ScaledFD        | OT_BOOLEAN      | True            | Use a scaled    |
|                 |                 |                 | perturbation    |
|                 |                 |                 | for finite      |
|                 |                 |                 | differences     |
+-----------------+-----------------+-----------------+-----------------+
| ScaledKKT       | OT_BOOLEAN      | True            | Scale KKT       |
|                 |                 |                 | conditions      |
+-----------------+-----------------+-----------------+-----------------+
| ScaledObj       | OT_BOOLEAN      | True            | Scale the       |
|                 |                 |                 | objective       |
|                 |                 |                 | function        |
+-----------------+-----------------+-----------------+-----------------+
| ScaledQP        | OT_BOOLEAN      | True            | Scale some      |
|                 |                 |                 | matrices handed |
|                 |                 |                 | to the QP       |
+-----------------+-----------------+-----------------+-----------------+
| StartBettsTau   | OT_REAL         | 0.100           | Initial value   |
|                 |                 |                 | for Betts'      |
|                 |                 |                 | update          |
|                 |                 |                 | dampening term  |
+-----------------+-----------------+-----------------+-----------------+
| SteffensenOnRef | OT_BOOLEAN      | False           | Use Steffensen  |
| ine             |                 |                 | Extrapolation   |
|                 |                 |                 | during          |
|                 |                 |                 | Feasibility     |
|                 |                 |                 | Refinement      |
+-----------------+-----------------+-----------------+-----------------+
| SwitchingDelta  | OT_REAL         | 0.010           | Filter          |
|                 |                 |                 | switching       |
|                 |                 |                 | condition       |
|                 |                 |                 | parameter       |
+-----------------+-----------------+-----------------+-----------------+
| SwitchingSCV    | OT_REAL         | 1.100           | Filter          |
|                 |                 |                 | switching       |
|                 |                 |                 | condition       |
|                 |                 |                 | parameter       |
+-----------------+-----------------+-----------------+-----------------+
| SwitchingSF     | OT_REAL         | 2.300           | Filter          |
|                 |                 |                 | switching       |
|                 |                 |                 | condition       |
|                 |                 |                 | parameter       |
+-----------------+-----------------+-----------------+-----------------+
| TakeQPSol       | OT_BOOLEAN      | False           | Evaluate QP     |
|                 |                 |                 | search          |
|                 |                 |                 | direction       |
|                 |                 |                 | regardless of   |
|                 |                 |                 | convergence     |
+-----------------+-----------------+-----------------+-----------------+
| Timeout         | OT_REAL         | 300             | Timeout in      |
|                 |                 |                 | seconds         |
+-----------------+-----------------+-----------------+-----------------+
| TolComp         | OT_REAL         | 0.001           | Complementarity |
|                 |                 |                 | tolerance       |
+-----------------+-----------------+-----------------+-----------------+
| TolFeas         | OT_REAL         | 0.000           | Feasibility     |
|                 |                 |                 | tolerance       |
+-----------------+-----------------+-----------------+-----------------+
| TolOpti         | OT_REAL         | 0.000           | Optimality      |
|                 |                 |                 | tolerance       |
+-----------------+-----------------+-----------------+-----------------+
| TolWeakActive   | OT_REAL         | 1               | (experimental)  |
+-----------------+-----------------+-----------------+-----------------+
| TooBig          | OT_BOOLEAN      | True            | Enable too-big  |
|                 |                 |                 | termination     |
|                 |                 |                 | heuristics      |
+-----------------+-----------------+-----------------+-----------------+
| TooBigCV        | OT_REAL         | 1.000e+25       | Upper bound on  |
|                 |                 |                 | constraint      |
|                 |                 |                 | violation for   |
|                 |                 |                 | too-big         |
|                 |                 |                 | heuristic       |
+-----------------+-----------------+-----------------+-----------------+
| TooBigKKT       | OT_REAL         | 1.000e+30       | Upper bound on  |
|                 |                 |                 | KKT values for  |
|                 |                 |                 | too-big         |
|                 |                 |                 | heuristic       |
+-----------------+-----------------+-----------------+-----------------+
| UpdateMu        | OT_BOOLEAN      | True            | Activates       |
|                 |                 |                 | update of       |
|                 |                 |                 | lagrange        |
|                 |                 |                 | multipliers     |
|                 |                 |                 | during          |
|                 |                 |                 | correction step |
+-----------------+-----------------+-----------------+-----------------+
| UseZen          | OT_BOOLEAN      | False           | Run Zen module  |
|                 |                 |                 | after           |
|                 |                 |                 | successful      |
|                 |                 |                 | termination     |
+-----------------+-----------------+-----------------+-----------------+
| UserDF          | OT_BOOLEAN      | True            | Objective       |
|                 |                 |                 | gradient values |
|                 |                 |                 | supplied by     |
|                 |                 |                 | caller          |
+-----------------+-----------------+-----------------+-----------------+
| UserDG          | OT_BOOLEAN      | True            | Jacobian values |
|                 |                 |                 | supplied by     |
|                 |                 |                 | caller          |
+-----------------+-----------------+-----------------+-----------------+
| UserHM          | OT_BOOLEAN      | True            | Hessian values  |
|                 |                 |                 | supplied by     |
|                 |                 |                 | caller          |
+-----------------+-----------------+-----------------+-----------------+
| UserHMstructure | OT_INTEGER      | 2               | Enable          |
|                 |                 |                 | automatic       |
|                 |                 |                 | Hessian         |
|                 |                 |                 | structure       |
|                 |                 |                 | generation or   |
|                 |                 |                 | checking        |
+-----------------+-----------------+-----------------+-----------------+
| UserZenDGp      | OT_BOOLEAN      | False           | Hessian values  |
|                 |                 |                 | supplied by     |
|                 |                 |                 | caller          |
+-----------------+-----------------+-----------------+-----------------+
| UserZenDLp      | OT_BOOLEAN      | False           | Gradient values |
|                 |                 |                 | supplied by     |
|                 |                 |                 | caller          |
+-----------------+-----------------+-----------------+-----------------+
| UserZenDLpp     | OT_BOOLEAN      | False           | Hessian values  |
|                 |                 |                 | supplied by     |
|                 |                 |                 | caller          |
+-----------------+-----------------+-----------------+-----------------+
| UserZenDLxp     | OT_BOOLEAN      | False           | Hessian values  |
|                 |                 |                 | supplied by     |
|                 |                 |                 | caller          |
+-----------------+-----------------+-----------------+-----------------+
| WeakActiveSet   | OT_BOOLEAN      | False           | (experimental)  |
+-----------------+-----------------+-----------------+-----------------+
| ZenCheckMaxPert | OT_BOOLEAN      | False           | Check maximum   |
|                 |                 |                 | of secure       |
|                 |                 |                 | perturbation    |
|                 |                 |                 | when updating   |
|                 |                 |                 | solution        |
+-----------------+-----------------+-----------------+-----------------+
| ZenFDnewMethod  | OT_BOOLEAN      | True            |                 |
+-----------------+-----------------+-----------------+-----------------+
| ZenRenewLU      | OT_BOOLEAN      | False           | false: use LU   |
|                 |                 |                 | from last QP    |
|                 |                 |                 | step; true:     |
|                 |                 |                 | renew LU        |
|                 |                 |                 | decomposition.  |
+-----------------+-----------------+-----------------+-----------------+
| eps             | OT_REAL         | 0.000           | Machine epsilon |
+-----------------+-----------------+-----------------+-----------------+
| internalParChan | OT_INTEGER      | 0               | Counter for     |
| ged             |                 |                 | changed         |
|                 |                 |                 | parameters.     |
|                 |                 |                 | Internal use    |
|                 |                 |                 | only.           |
+-----------------+-----------------+-----------------+-----------------+
| print_time      | OT_BOOLEAN      | True            | Print           |
|                 |                 |                 | information     |
|                 |                 |                 | about execution |
|                 |                 |                 | time            |
+-----------------+-----------------+-----------------+-----------------+
| qp_ipBarrier    | OT_REAL         | 7.800           | IP barrier      |
|                 |                 |                 | parameter.      |
+-----------------+-----------------+-----------------+-----------------+
| qp_ipComTol     | OT_REAL         | 0.000           | IP              |
|                 |                 |                 | complementarity |
|                 |                 |                 | tolerance.      |
+-----------------+-----------------+-----------------+-----------------+
| qp_ipFracBound  | OT_REAL         | 0.880           | IP fraction-to- |
|                 |                 |                 | the-boundary    |
|                 |                 |                 | parameter.      |
+-----------------+-----------------+-----------------+-----------------+
| qp_ipLsMethod   | OT_STRING       | None            | Select the      |
|                 |                 |                 | direct linear   |
|                 |                 |                 | solver used by  |
|                 |                 |                 | the IP method.  |
+-----------------+-----------------+-----------------+-----------------+
| qp_ipMinAlpha   | OT_REAL         | 0.000           | IP line search  |
|                 |                 |                 | minimum step    |
|                 |                 |                 | size.           |
+-----------------+-----------------+-----------------+-----------------+
| qp_ipRelaxDiv   | OT_REAL         | 2               | The relaxation  |
|                 |                 |                 | term is divided |
|                 |                 |                 | by this value   |
|                 |                 |                 | if successful.  |
+-----------------+-----------------+-----------------+-----------------+
| qp_ipRelaxMax   | OT_REAL         | 0.000           | Maximum         |
|                 |                 |                 | relaxation      |
|                 |                 |                 | value.          |
+-----------------+-----------------+-----------------+-----------------+
| qp_ipRelaxMin   | OT_REAL         | 0.000           | Mimimum         |
|                 |                 |                 | relaxation      |
|                 |                 |                 | value.          |
+-----------------+-----------------+-----------------+-----------------+
| qp_ipRelaxMult  | OT_REAL         | 10              | The relaxation  |
|                 |                 |                 | term is         |
|                 |                 |                 | multiplied by   |
|                 |                 |                 | this value if   |
|                 |                 |                 | unsuccessful.   |
+-----------------+-----------------+-----------------+-----------------+
| qp_ipResTol     | OT_REAL         | 0.000           | IP residuals    |
|                 |                 |                 | tolerance.      |
+-----------------+-----------------+-----------------+-----------------+
| qp_ipTryRelax   | OT_BOOLEAN      | True            | Enable          |
|                 |                 |                 | relaxation      |
|                 |                 |                 | strategy when   |
|                 |                 |                 | encountering an |
|                 |                 |                 | error.          |
+-----------------+-----------------+-----------------+-----------------+
| qp_lsItMaxIter  | OT_INTEGER      | 1000            | Maximum number  |
|                 |                 |                 | of iterations   |
|                 |                 |                 | of the          |
|                 |                 |                 | iterative       |
|                 |                 |                 | linear solvers. |
+-----------------+-----------------+-----------------+-----------------+
| qp_lsItMethod   | OT_STRING       | None            | Select the      |
|                 |                 |                 | iterative       |
|                 |                 |                 | linear solver.  |
+-----------------+-----------------+-----------------+-----------------+
| qp_lsItPrecondM | OT_STRING       | None            | Select          |
| ethod           |                 |                 | preconditioner  |
|                 |                 |                 | for the         |
|                 |                 |                 | iterative       |
|                 |                 |                 | linear solver.  |
+-----------------+-----------------+-----------------+-----------------+
| qp_lsRefineMaxI | OT_INTEGER      | 10              | Maximum number  |
| ter             |                 |                 | of iterative    |
|                 |                 |                 | refinement      |
|                 |                 |                 | steps of the    |
|                 |                 |                 | direct linear   |
|                 |                 |                 | solvers.        |
+-----------------+-----------------+-----------------+-----------------+
| qp_lsScale      | OT_BOOLEAN      | True            | Enables scaling |
|                 |                 |                 | on linear       |
|                 |                 |                 | solver level.   |
+-----------------+-----------------+-----------------+-----------------+
| qp_lsTol        | OT_REAL         | 0.000           | Tolerance for   |
|                 |                 |                 | the linear      |
|                 |                 |                 | solver.         |
+-----------------+-----------------+-----------------+-----------------+
| qp_lsTrySimple  | OT_BOOLEAN      | False           | Some matrices   |
|                 |                 |                 | can be solved   |
|                 |                 |                 | without calling |
|                 |                 |                 | a linear        |
|                 |                 |                 | equation solver |
|                 |                 |                 | .Currently only |
|                 |                 |                 | diagonal        |
|                 |                 |                 | matrices are    |
|                 |                 |                 | supported.Non-  |
|                 |                 |                 | diagonal        |
|                 |                 |                 | matrices will   |
|                 |                 |                 | besolved with   |
|                 |                 |                 | the chosen      |
|                 |                 |                 | linear equation |
|                 |                 |                 | solver.         |
+-----------------+-----------------+-----------------+-----------------+
| qp_maxIter      | OT_INTEGER      | 80              | Imposes an      |
|                 |                 |                 | upper limit on  |
|                 |                 |                 | the number of   |
|                 |                 |                 | minor solver    |
|                 |                 |                 | iterations,     |
|                 |                 |                 | i.e. for the    |
|                 |                 |                 | quadratic       |
|                 |                 |                 | subproblem      |
|                 |                 |                 | solver.If the   |
|                 |                 |                 | limit is        |
|                 |                 |                 | reached before  |
|                 |                 |                 | convergence,    |
|                 |                 |                 | WORHP will      |
|                 |                 |                 | activate QP     |
|                 |                 |                 | recovery        |
|                 |                 |                 | strategies to   |
|                 |                 |                 | prevent a       |
|                 |                 |                 | solver          |
|                 |                 |                 | breakdown.      |
+-----------------+-----------------+-----------------+-----------------+
| qp_method       | OT_STRING       | None            | Select the      |
|                 |                 |                 | solution method |
|                 |                 |                 | used by the QP  |
|                 |                 |                 | solver.         |
+-----------------+-----------------+-----------------+-----------------+
| qp_nsnBeta      | OT_REAL         | 0.900           | NSN stepsize    |
|                 |                 |                 | decrease        |
|                 |                 |                 | factor.         |
+-----------------+-----------------+-----------------+-----------------+
| qp_nsnGradStep  | OT_BOOLEAN      | True            | Enable gradient |
|                 |                 |                 | steps in the    |
|                 |                 |                 | NSN method.     |
+-----------------+-----------------+-----------------+-----------------+
| qp_nsnKKT       | OT_REAL         | 0.000           | NSN KKT         |
|                 |                 |                 | tolerance.      |
+-----------------+-----------------+-----------------+-----------------+
| qp_nsnLsMethod  | OT_STRING       | None            | Select the      |
|                 |                 |                 | direct linear   |
|                 |                 |                 | solver used by  |
|                 |                 |                 | the NSN method. |
+-----------------+-----------------+-----------------+-----------------+
| qp_nsnMinAlpha  | OT_REAL         | 0.000           | NSN line search |
|                 |                 |                 | minimum step    |
|                 |                 |                 | size.           |
+-----------------+-----------------+-----------------+-----------------+
| qp_nsnSigma     | OT_REAL         | 0.010           | NSN line search |
|                 |                 |                 | slope           |
|                 |                 |                 | parameter.      |
+-----------------+-----------------+-----------------+-----------------+
| qp_printLevel   | OT_STRING       | None            | Controls the    |
|                 |                 |                 | amount of QP    |
|                 |                 |                 | solver output.  |
+-----------------+-----------------+-----------------+-----------------+
| qp_scaleIntern  | OT_BOOLEAN      | False           | Enable scaling  |
|                 |                 |                 | on QP level.    |
+-----------------+-----------------+-----------------+-----------------+
| qp_strict       | OT_BOOLEAN      | True            | Use strict      |
|                 |                 |                 | termination     |
|                 |                 |                 | criteria in IP  |
|                 |                 |                 | method.         |
+-----------------+-----------------+-----------------+-----------------+

>List of available monitors

+-------------+
|     Id      |
+=============+
| eval_f      |
+-------------+
| eval_g      |
+-------------+
| eval_grad_f |
+-------------+
| eval_h      |
+-------------+
| eval_jac_g  |
+-------------+

>List of available stats

+--------------------+
|         Id         |
+====================+
| iter_count         |
+--------------------+
| iteration          |
+--------------------+
| iterations         |
+--------------------+
| n_eval_f           |
+--------------------+
| n_eval_g           |
+--------------------+
| n_eval_grad_f      |
+--------------------+
| n_eval_h           |
+--------------------+
| n_eval_jac_g       |
+--------------------+
| return_code        |
+--------------------+
| return_status      |
+--------------------+
| t_callback_fun     |
+--------------------+
| t_callback_prepare |
+--------------------+
| t_eval_f           |
+--------------------+
| t_eval_g           |
+--------------------+
| t_eval_grad_f      |
+--------------------+
| t_eval_h           |
+--------------------+
| t_eval_jac_g       |
+--------------------+
| t_mainloop         |
+--------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

scpgen
------



A structure-exploiting sequential quadratic programming (to be come
sequential convex programming) method for nonlinear programming.

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| beta            | OT_REAL         | 0.800           | Line-search     |
|                 |                 |                 | parameter,      |
|                 |                 |                 | restoration     |
|                 |                 |                 | factor of       |
|                 |                 |                 | stepsize        |
+-----------------+-----------------+-----------------+-----------------+
| c1              | OT_REAL         | 0.000           | Armijo          |
|                 |                 |                 | condition,      |
|                 |                 |                 | coefficient of  |
|                 |                 |                 | decrease in     |
|                 |                 |                 | merit           |
+-----------------+-----------------+-----------------+-----------------+
| codegen         | OT_BOOLEAN      | false           | C-code          |
|                 |                 |                 | generation      |
+-----------------+-----------------+-----------------+-----------------+
| compiler        | OT_STRING       | \"gcc -fPIC -O2\" | Compiler        |
|                 |                 |                 | command to be   |
|                 |                 |                 | used for        |
|                 |                 |                 | compiling       |
|                 |                 |                 | generated code  |
+-----------------+-----------------+-----------------+-----------------+
| hessian_approxi | OT_STRING       | \"exact\"         | gauss-          |
| mation          |                 |                 | newton|exact    |
+-----------------+-----------------+-----------------+-----------------+
| lbfgs_memory    | OT_INTEGER      | 10              | Size of L-BFGS  |
|                 |                 |                 | memory.         |
+-----------------+-----------------+-----------------+-----------------+
| max_iter        | OT_INTEGER      | 50              | Maximum number  |
|                 |                 |                 | of SQP          |
|                 |                 |                 | iterations      |
+-----------------+-----------------+-----------------+-----------------+
| max_iter_ls     | OT_INTEGER      | 1               | Maximum number  |
|                 |                 |                 | of linesearch   |
|                 |                 |                 | iterations      |
+-----------------+-----------------+-----------------+-----------------+
| merit_memsize   | OT_INTEGER      | 4               | Size of memory  |
|                 |                 |                 | to store        |
|                 |                 |                 | history of      |
|                 |                 |                 | merit function  |
|                 |                 |                 | values          |
+-----------------+-----------------+-----------------+-----------------+
| merit_start     | OT_REAL         | 0.000           | Lower bound for |
|                 |                 |                 | the merit       |
|                 |                 |                 | function        |
|                 |                 |                 | parameter       |
+-----------------+-----------------+-----------------+-----------------+
| name_x          | OT_STRINGVECTOR | GenericType()   | Names of the    |
|                 |                 |                 | variables.      |
+-----------------+-----------------+-----------------+-----------------+
| print_header    | OT_BOOLEAN      | true            | Print the       |
|                 |                 |                 | header with     |
|                 |                 |                 | problem         |
|                 |                 |                 | statistics      |
+-----------------+-----------------+-----------------+-----------------+
| print_time      | OT_BOOLEAN      | true            | Print           |
|                 |                 |                 | information     |
|                 |                 |                 | about execution |
|                 |                 |                 | time            |
+-----------------+-----------------+-----------------+-----------------+
| print_x         | OT_INTEGERVECTO | GenericType()   | Which variables |
|                 | R               |                 | to print.       |
+-----------------+-----------------+-----------------+-----------------+
| qp_solver       | OT_STRING       | GenericType()   | The QP solver   |
|                 |                 |                 | to be used by   |
|                 |                 |                 | the SQP method  |
+-----------------+-----------------+-----------------+-----------------+
| qp_solver_optio | OT_DICTIONARY   | GenericType()   | Options to be   |
| ns              |                 |                 | passed to the   |
|                 |                 |                 | QP solver       |
+-----------------+-----------------+-----------------+-----------------+
| reg_threshold   | OT_REAL         | 0.000           | Threshold for   |
|                 |                 |                 | the             |
|                 |                 |                 | regularization. |
+-----------------+-----------------+-----------------+-----------------+
| regularize      | OT_BOOLEAN      | false           | Automatic       |
|                 |                 |                 | regularization  |
|                 |                 |                 | of Lagrange     |
|                 |                 |                 | Hessian.        |
+-----------------+-----------------+-----------------+-----------------+
| tol_du          | OT_REAL         | 0.000           | Stopping        |
|                 |                 |                 | criterion for   |
|                 |                 |                 | dual            |
|                 |                 |                 | infeasability   |
+-----------------+-----------------+-----------------+-----------------+
| tol_pr          | OT_REAL         | 0.000           | Stopping        |
|                 |                 |                 | criterion for   |
|                 |                 |                 | primal          |
|                 |                 |                 | infeasibility   |
+-----------------+-----------------+-----------------+-----------------+
| tol_pr_step     | OT_REAL         | 0.000           | Stopping        |
|                 |                 |                 | criterion for   |
|                 |                 |                 | the step size   |
+-----------------+-----------------+-----------------+-----------------+
| tol_reg         | OT_REAL         | 0.000           | Stopping        |
|                 |                 |                 | criterion for   |
|                 |                 |                 | regularization  |
+-----------------+-----------------+-----------------+-----------------+

>List of available monitors

+-------------+
|     Id      |
+=============+
| dx          |
+-------------+
| eval_f      |
+-------------+
| eval_g      |
+-------------+
| eval_grad_f |
+-------------+
| eval_h      |
+-------------+
| eval_jac_g  |
+-------------+
| qp          |
+-------------+

>List of available stats

+------------+
|     Id     |
+============+
| iter_count |
+------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

sqpmethod
---------



A textbook SQPMethod

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| beta            | OT_REAL         | 0.800           | Line-search     |
|                 |                 |                 | parameter,      |
|                 |                 |                 | restoration     |
|                 |                 |                 | factor of       |
|                 |                 |                 | stepsize        |
+-----------------+-----------------+-----------------+-----------------+
| c1              | OT_REAL         | 0.000           | Armijo          |
|                 |                 |                 | condition,      |
|                 |                 |                 | coefficient of  |
|                 |                 |                 | decrease in     |
|                 |                 |                 | merit           |
+-----------------+-----------------+-----------------+-----------------+
| hessian_approxi | OT_STRING       | \"exact\"         | limited-        |
| mation          |                 |                 | memory|exact    |
+-----------------+-----------------+-----------------+-----------------+
| lbfgs_memory    | OT_INTEGER      | 10              | Size of L-BFGS  |
|                 |                 |                 | memory.         |
+-----------------+-----------------+-----------------+-----------------+
| max_iter        | OT_INTEGER      | 50              | Maximum number  |
|                 |                 |                 | of SQP          |
|                 |                 |                 | iterations      |
+-----------------+-----------------+-----------------+-----------------+
| max_iter_ls     | OT_INTEGER      | 3               | Maximum number  |
|                 |                 |                 | of linesearch   |
|                 |                 |                 | iterations      |
+-----------------+-----------------+-----------------+-----------------+
| merit_memory    | OT_INTEGER      | 4               | Size of memory  |
|                 |                 |                 | to store        |
|                 |                 |                 | history of      |
|                 |                 |                 | merit function  |
|                 |                 |                 | values          |
+-----------------+-----------------+-----------------+-----------------+
| min_step_size   | OT_REAL         | 0.000           | The size (inf-  |
|                 |                 |                 | norm) of the    |
|                 |                 |                 | step size       |
|                 |                 |                 | should not      |
|                 |                 |                 | become smaller  |
|                 |                 |                 | than this.      |
+-----------------+-----------------+-----------------+-----------------+
| print_header    | OT_BOOLEAN      | true            | Print the       |
|                 |                 |                 | header with     |
|                 |                 |                 | problem         |
|                 |                 |                 | statistics      |
+-----------------+-----------------+-----------------+-----------------+
| print_time      | OT_BOOLEAN      | true            | Print           |
|                 |                 |                 | information     |
|                 |                 |                 | about execution |
|                 |                 |                 | time            |
+-----------------+-----------------+-----------------+-----------------+
| qp_solver       | OT_STRING       | GenericType()   | The QP solver   |
|                 |                 |                 | to be used by   |
|                 |                 |                 | the SQP method  |
+-----------------+-----------------+-----------------+-----------------+
| qp_solver_optio | OT_DICTIONARY   | GenericType()   | Options to be   |
| ns              |                 |                 | passed to the   |
|                 |                 |                 | QP solver       |
+-----------------+-----------------+-----------------+-----------------+
| regularize      | OT_BOOLEAN      | false           | Automatic       |
|                 |                 |                 | regularization  |
|                 |                 |                 | of Lagrange     |
|                 |                 |                 | Hessian.        |
+-----------------+-----------------+-----------------+-----------------+
| tol_du          | OT_REAL         | 0.000           | Stopping        |
|                 |                 |                 | criterion for   |
|                 |                 |                 | dual            |
|                 |                 |                 | infeasability   |
+-----------------+-----------------+-----------------+-----------------+
| tol_pr          | OT_REAL         | 0.000           | Stopping        |
|                 |                 |                 | criterion for   |
|                 |                 |                 | primal          |
|                 |                 |                 | infeasibility   |
+-----------------+-----------------+-----------------+-----------------+

>List of available monitors

+-------------+
|     Id      |
+=============+
| bfgs        |
+-------------+
| dx          |
+-------------+
| eval_f      |
+-------------+
| eval_g      |
+-------------+
| eval_grad_f |
+-------------+
| eval_h      |
+-------------+
| eval_jac_g  |
+-------------+
| qp          |
+-------------+

>List of available stats

+--------------------+
|         Id         |
+====================+
| iter_count         |
+--------------------+
| iteration          |
+--------------------+
| iterations         |
+--------------------+
| n_eval_f           |
+--------------------+
| n_eval_g           |
+--------------------+
| n_eval_grad_f      |
+--------------------+
| n_eval_h           |
+--------------------+
| n_eval_jac_g       |
+--------------------+
| return_status      |
+--------------------+
| t_callback_fun     |
+--------------------+
| t_callback_prepare |
+--------------------+
| t_eval_f           |
+--------------------+
| t_eval_g           |
+--------------------+
| t_eval_grad_f      |
+--------------------+
| t_eval_h           |
+--------------------+
| t_eval_jac_g       |
+--------------------+
| t_mainloop         |
+--------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

stabilizedsqp
-------------



Stabilized Sequential Quadratic Programming method.

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| TReta1          | OT_REAL         | 0.800           | Required        |
|                 |                 |                 | predicted /     |
|                 |                 |                 | actual decrease |
|                 |                 |                 | for TR increase |
+-----------------+-----------------+-----------------+-----------------+
| TReta2          | OT_REAL         | 0.200           | Required        |
|                 |                 |                 | predicted /     |
|                 |                 |                 | actual decrease |
|                 |                 |                 | for TR decrease |
+-----------------+-----------------+-----------------+-----------------+
| alphaMin        | OT_REAL         | 0.001           | Used to check   |
|                 |                 |                 | whether to      |
|                 |                 |                 | increase rho.   |
+-----------------+-----------------+-----------------+-----------------+
| beta            | OT_REAL         | 0.500           | Line-search     |
|                 |                 |                 | parameter,      |
|                 |                 |                 | restoration     |
|                 |                 |                 | factor of       |
|                 |                 |                 | stepsize        |
+-----------------+-----------------+-----------------+-----------------+
| c1              | OT_REAL         | 0.001           | Armijo          |
|                 |                 |                 | condition,      |
|                 |                 |                 | coefficient of  |
|                 |                 |                 | decrease in     |
|                 |                 |                 | merit           |
+-----------------+-----------------+-----------------+-----------------+
| dvMax0          | OT_REAL         | 100             | Parameter used  |
|                 |                 |                 | to defined the  |
|                 |                 |                 | max step        |
|                 |                 |                 | length.         |
+-----------------+-----------------+-----------------+-----------------+
| eps_active      | OT_REAL         | 0.000           | Threshold for   |
|                 |                 |                 | the epsilon-    |
|                 |                 |                 | active set.     |
+-----------------+-----------------+-----------------+-----------------+
| gamma1          | OT_REAL         | 2               | Trust region    |
|                 |                 |                 | increase        |
|                 |                 |                 | parameter       |
+-----------------+-----------------+-----------------+-----------------+
| gamma2          | OT_REAL         | 1               | Trust region    |
|                 |                 |                 | update          |
|                 |                 |                 | parameter       |
+-----------------+-----------------+-----------------+-----------------+
| gamma3          | OT_REAL         | 1               | Trust region    |
|                 |                 |                 | decrease        |
|                 |                 |                 | parameter       |
+-----------------+-----------------+-----------------+-----------------+
| hessian_approxi | OT_STRING       | \"exact\"         | limited-        |
| mation          |                 |                 | memory|exact    |
+-----------------+-----------------+-----------------+-----------------+
| lbfgs_memory    | OT_INTEGER      | 10              | Size of L-BFGS  |
|                 |                 |                 | memory.         |
+-----------------+-----------------+-----------------+-----------------+
| max_iter        | OT_INTEGER      | 100             | Maximum number  |
|                 |                 |                 | of SQP          |
|                 |                 |                 | iterations      |
+-----------------+-----------------+-----------------+-----------------+
| max_iter_ls     | OT_INTEGER      | 20              | Maximum number  |
|                 |                 |                 | of linesearch   |
|                 |                 |                 | iterations      |
+-----------------+-----------------+-----------------+-----------------+
| max_time        | OT_REAL         | 1.000e+12       | Timeout         |
+-----------------+-----------------+-----------------+-----------------+
| merit_memory    | OT_INTEGER      | 4               | Size of memory  |
|                 |                 |                 | to store        |
|                 |                 |                 | history of      |
|                 |                 |                 | merit function  |
|                 |                 |                 | values          |
+-----------------+-----------------+-----------------+-----------------+
| min_step_size   | OT_REAL         | 0.000           | The size (inf-  |
|                 |                 |                 | norm) of the    |
|                 |                 |                 | step size       |
|                 |                 |                 | should not      |
|                 |                 |                 | become smaller  |
|                 |                 |                 | than this.      |
+-----------------+-----------------+-----------------+-----------------+
| muR0            | OT_REAL         | 0.000           | Initial choice  |
|                 |                 |                 | of              |
|                 |                 |                 | regularization  |
|                 |                 |                 | parameter       |
+-----------------+-----------------+-----------------+-----------------+
| nu              | OT_REAL         | 1               | Parameter for   |
|                 |                 |                 | primal-dual     |
|                 |                 |                 | augmented       |
|                 |                 |                 | Lagrangian.     |
+-----------------+-----------------+-----------------+-----------------+
| phiWeight       | OT_REAL         | 0.000           | Weight used in  |
|                 |                 |                 | pseudo-filter.  |
+-----------------+-----------------+-----------------+-----------------+
| print_header    | OT_BOOLEAN      | true            | Print the       |
|                 |                 |                 | header with     |
|                 |                 |                 | problem         |
|                 |                 |                 | statistics      |
+-----------------+-----------------+-----------------+-----------------+
| regularize      | OT_BOOLEAN      | false           | Automatic       |
|                 |                 |                 | regularization  |
|                 |                 |                 | of Lagrange     |
|                 |                 |                 | Hessian.        |
+-----------------+-----------------+-----------------+-----------------+
| stabilized_qp_s | OT_STRING       | GenericType()   | The Stabilized  |
| olver           |                 |                 | QP solver to be |
|                 |                 |                 | used by the SQP |
|                 |                 |                 | method          |
+-----------------+-----------------+-----------------+-----------------+
| stabilized_qp_s | OT_DICTIONARY   | GenericType()   | Options to be   |
| olver_options   |                 |                 | passed to the   |
|                 |                 |                 | Stabilized QP   |
|                 |                 |                 | solver          |
+-----------------+-----------------+-----------------+-----------------+
| tau0            | OT_REAL         | 0.010           | Initial         |
|                 |                 |                 | parameter for   |
|                 |                 |                 | the merit       |
|                 |                 |                 | function        |
|                 |                 |                 | optimality      |
|                 |                 |                 | threshold.      |
+-----------------+-----------------+-----------------+-----------------+
| tol_du          | OT_REAL         | 0.000           | Stopping        |
|                 |                 |                 | criterion for   |
|                 |                 |                 | dual            |
|                 |                 |                 | infeasability   |
+-----------------+-----------------+-----------------+-----------------+
| tol_pr          | OT_REAL         | 0.000           | Stopping        |
|                 |                 |                 | criterion for   |
|                 |                 |                 | primal          |
|                 |                 |                 | infeasibility   |
+-----------------+-----------------+-----------------+-----------------+
| yEinitial       | OT_STRING       | \"simple\"        | Initial         |
|                 |                 |                 | multiplier.     |
|                 |                 |                 | Simple (all     |
|                 |                 |                 | zero) or least  |
|                 |                 |                 | (LSQ).          |
+-----------------+-----------------+-----------------+-----------------+

>List of available monitors

+-------------+
|     Id      |
+=============+
| dx          |
+-------------+
| eval_f      |
+-------------+
| eval_g      |
+-------------+
| eval_grad_f |
+-------------+
| eval_h      |
+-------------+
| eval_jac_g  |
+-------------+
| qp          |
+-------------+

>List of available stats

+---------------+
|      Id       |
+===============+
| iter_count    |
+---------------+
| return_status |
+---------------+

--------------------------------------------------------------------------------



Joel Andersson
Diagrams
--------



C++ includes: nlp_solver.hpp ";

%feature("docstring") casadi::NlpSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::NlpSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::NlpSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::NlpSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::NlpSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::NlpSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::NlpSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::NlpSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::NlpSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::NlpSolver::setOptionsFromFile "

Read options from parameter xml.

";

%feature("docstring") casadi::NlpSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::NlpSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::NlpSolver::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::NlpSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NlpSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::NlpSolver::gradF "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 2) [gradFIn]

+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| GRADF_X   | x     | Decision variable . |
+-----------+-------+---------------------+
| GRADF_P   | p     | Fixed parameter .   |
+-----------+-------+---------------------+

";

%feature("docstring") casadi::NlpSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::NlpSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::NlpSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::NlpSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::NlpSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::NlpSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::NlpSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::NlpSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::NlpSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::NlpSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::NlpSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::NlpSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::NlpSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::NlpSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::NlpSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::NlpSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::NlpSolver::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::NlpSolver::matchingFwdSeed "[INTERNAL]  Check
if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::NlpSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::NlpSolver::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::NlpSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::NlpSolver::getReportConstraints "";

%feature("docstring") casadi::NlpSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::NlpSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::NlpSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NlpSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::NlpSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::NlpSolver::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::NlpSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::NlpSolver::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 2) [jacGIn]

+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 3) [jacGOut]

+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") casadi::NlpSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";


// File: classcasadi_1_1NlpSolverInputIOSchemeVector.xml
%feature("docstring") casadi::NlpSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::NlpSolverInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::NlpSolverInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::NlpSolverInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring")
casadi::NlpSolverInputIOSchemeVector::NlpSolverInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::NlpSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::NlpSolverInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::NlpSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'NlpSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::NlpSolverInputIOSchemeVector::getRepresentation "[INTERNAL]  Return
a string with a representation (for SWIG)

";


// File: classcasadi_1_1NlpSolverOutputIOSchemeVector.xml
%feature("docstring") casadi::NlpSolverOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::NlpSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'NlpSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::NlpSolverOutputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::NlpSolverOutputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::NlpSolverOutputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::NlpSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::NlpSolverOutputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::NlpSolverOutputIOSchemeVector::NlpSolverOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::NlpSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";


// File: classcasadi_1_1NonZeros.xml
%feature("docstring") casadi::NonZeros::NonZeros "

Constructor.

";

%feature("docstring") casadi::NonZeros "

Access to a set of nonzeros.

NonZeros class for Matrix NonZeros is the return type for operator[] of the
Matrix class, it allows access to the value as well as changing the parent
object Joel Andersson

C++ includes: nonzeros.hpp ";


// File: classcasadi_1_1Norm.xml


// File: classcasadi_1_1Norm1.xml


// File: classcasadi_1_1Norm2.xml


// File: classcasadi_1_1NormF.xml


// File: classcasadi_1_1NormInf.xml


// File: classcasadi_1_1Nullspace.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Nullspace::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::Nullspace::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::Nullspace::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Nullspace::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::Nullspace::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Nullspace::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Nullspace::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Nullspace::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Nullspace::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::Nullspace::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::Nullspace::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Nullspace::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Nullspace::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::Nullspace::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::Nullspace::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Nullspace::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::Nullspace::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::Nullspace::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::Nullspace::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::Nullspace::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::Nullspace::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::Nullspace::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Nullspace::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::Nullspace::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Nullspace::evaluate "

Evaluate.

";

%feature("docstring") casadi::Nullspace::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Nullspace::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Nullspace::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::Nullspace::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::Nullspace::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Nullspace::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::Nullspace::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::Nullspace::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Nullspace::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::Nullspace::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Nullspace::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::Nullspace::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Nullspace::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::Nullspace::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::Nullspace::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::Nullspace::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Nullspace::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::Nullspace::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::Nullspace::isInit "

Is initialized?

";

%feature("docstring") casadi::Nullspace::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Nullspace::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::Nullspace::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Nullspace::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::Nullspace::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::Nullspace::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::Nullspace::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Nullspace::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::Nullspace::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Nullspace::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::Nullspace::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::Nullspace::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::Nullspace::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Nullspace::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::Nullspace::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::Nullspace::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Nullspace::matchingAdjSeed "[INTERNAL]  Check
if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::Nullspace::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::Nullspace::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::Nullspace::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::Nullspace::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::Nullspace::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Nullspace::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::Nullspace::getOption "

get an option value

";

%feature("docstring") casadi::Nullspace::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Nullspace::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Nullspace::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Nullspace::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::Nullspace::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Nullspace::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::Nullspace::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Nullspace::matchingFwdSeed "[INTERNAL]  Check
if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::Nullspace::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Nullspace::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::Nullspace::print "

Print a description of the object.

";

%feature("docstring") casadi::Nullspace::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::Nullspace::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Nullspace "

Base class for nullspace construction.

Constructs a basis for the null-space of a fat matrix A. i.e. finds Z such
that AZ = 0 holds.

The nullspace is also known as the orthogonal complement of the rowspace of
a matrix.

It is assumed that the matrix A is of full rank.

Implementations are not required to construct an orthogonal or orthonormal
basis Joris Gillis

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| dense        | OT_BOOLEAN   | true         | Indicates    | casadi::Null |
|              |              |              | that dense   | spaceInterna |
|              |              |              | matrices can | l            |
|              |              |              | be assumed   |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams
--------



C++ includes: nullspace.hpp ";

%feature("docstring") casadi::Nullspace::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::Nullspace::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Nullspace::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Nullspace::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::Nullspace::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Nullspace::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Nullspace::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::Nullspace::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Nullspace::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Nullspace::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::Nullspace::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::Nullspace::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::Nullspace::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::Nullspace::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::Nullspace::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::Nullspace::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Nullspace::Nullspace "

Default constructor.

";

%feature("docstring") casadi::Nullspace::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Nullspace::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::Nullspace::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::Nullspace::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Nullspace::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::Nullspace::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::Nullspace::hasOption "

check if there is an option str

";

%feature("docstring") casadi::Nullspace::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::Nullspace::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::Nullspace::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";


// File: classstd_1_1numeric__limits_3_01casadi_1_1SXElement_01_4.xml
%feature("docstring") std::numeric_limits< casadi::SXElement > " [INTERNAL]
C++ includes: sx_element.hpp ";


// File: classcasadi_1_1OldCollocationIntegrator.xml


// File: classcasadi_1_1OneSX.xml


// File: classcasadi_1_1OptionsFunctionality.xml


/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::isInit "

Is initialized?

";

%feature("docstring") casadi::OptionsFunctionality::hasOption "

check if there is an option str

";

%feature("docstring") casadi::OptionsFunctionality::setOptionByAllowedIndex
"[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::OptionsFunctionality::print "

Print a description of the object.

";

%feature("docstring") casadi::OptionsFunctionality::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::OptionsFunctionality::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::OptionsFunctionality::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::OptionsFunctionality::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::OptionsFunctionality::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::OptionsFunctionality::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::OptionsFunctionality::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::OptionsFunctionality::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::OptionsFunctionality::getOption "

get an option value

";

%feature("docstring") casadi::OptionsFunctionality::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::OptionsFunctionality::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::OptionsFunctionality::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::OptionsFunctionality::OptionsFunctionality "

Default constructor.

";

%feature("docstring") casadi::OptionsFunctionality::isNull "

Is a null pointer?

";

%feature("docstring") casadi::OptionsFunctionality::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::OptionsFunctionality::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::OptionsFunctionality::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::OptionsFunctionality::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::OptionsFunctionality "

Provides options setting/getting functionality.

Gives a derived class the ability to set and retrieve options in a
convenient way. It also contains error checking, making sure that the option
exists and that the value type is correct.

A derived class should add option names, types and default values to the
corresponding vectors.

Joel Andersson

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+

Diagrams
--------



C++ includes: options_functionality.hpp ";

%feature("docstring") casadi::OptionsFunctionality::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::OptionsFunctionality::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::OptionsFunctionality::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::OptionsFunctionality::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::OptionsFunctionality::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::OptionsFunctionality::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::OptionsFunctionality::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::OptionsFunctionality::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::OptionsFunctionality::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::OptionsFunctionality::repr "

Print a representation of the object.

";

%feature("docstring") casadi::OptionsFunctionality::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::OptionsFunctionality::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::OptionsFunctionality::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::OptionsFunctionality::~OptionsFunctionality "

Destructor.

";


// File: classcasadi_1_1Parallelizer.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Parallelizer::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Parallelizer::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::Parallelizer::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::Parallelizer::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Parallelizer::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::Parallelizer::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::Parallelizer::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Parallelizer::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Parallelizer::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Parallelizer::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::Parallelizer::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Parallelizer::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Parallelizer::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::Parallelizer::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::Parallelizer::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Parallelizer::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::Parallelizer::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::Parallelizer::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::Parallelizer::hasOption "

check if there is an option str

";

%feature("docstring") casadi::Parallelizer::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::Parallelizer::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::Parallelizer::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::Parallelizer::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::Parallelizer::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Parallelizer::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::Parallelizer::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::Parallelizer::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::Parallelizer::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::Parallelizer::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::Parallelizer::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Parallelizer::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Parallelizer::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Parallelizer::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Parallelizer::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Parallelizer::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Parallelizer::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Parallelizer::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Parallelizer::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::Parallelizer::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Parallelizer::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::Parallelizer::isInit "

Is initialized?

";

%feature("docstring") casadi::Parallelizer::getOption "

get an option value

";

%feature("docstring") casadi::Parallelizer::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Parallelizer::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::Parallelizer::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::Parallelizer::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::Parallelizer::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::Parallelizer::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Parallelizer::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::Parallelizer::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::Parallelizer::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Parallelizer::matchingRes "[INTERNAL]  Check
if output arguments that needs to be replaced.

";

%feature("docstring") casadi::Parallelizer::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::Parallelizer::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::Parallelizer::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::Parallelizer::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Parallelizer::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::Parallelizer::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Parallelizer::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::Parallelizer::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::Parallelizer::print "

Print a description of the object.

";

%feature("docstring") casadi::Parallelizer::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Parallelizer::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Parallelizer::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::Parallelizer::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::Parallelizer::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::Parallelizer "

Parallelizer execution of functions.

Joel Andersson

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | \"serial\"     | (serial|open | casadi::Para |
| ion          |              |              | mp|mpi)      | llelizerInte |
|              |              |              |              | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats

+-----------------+------------------------------+
|       Id        |           Used in            |
+=================+==============================+
| max_threads     | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| num_threads     | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_allocation | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_cputime    | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_endtime    | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_order      | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_starttime  | casadi::ParallelizerInternal |
+-----------------+------------------------------+

Diagrams
--------



C++ includes: parallelizer.hpp ";

%feature("docstring") casadi::Parallelizer::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Parallelizer::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::Parallelizer::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::Parallelizer::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::Parallelizer::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::Parallelizer::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Parallelizer::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::Parallelizer::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::Parallelizer::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::Parallelizer::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::Parallelizer::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::Parallelizer::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::Parallelizer::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::Parallelizer::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::Parallelizer::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::Parallelizer::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::Parallelizer::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Parallelizer::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::Parallelizer::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Parallelizer::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Parallelizer::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::Parallelizer::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Parallelizer::evaluate "

Evaluate.

";

%feature("docstring") casadi::Parallelizer::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::Parallelizer::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::Parallelizer::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Parallelizer::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::Parallelizer::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Parallelizer::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::Parallelizer::Parallelizer "

>  casadi::Parallelizer::Parallelizer()
------------------------------------------------------------------------

Default constructor.

>  casadi::Parallelizer::Parallelizer(const std::vector< Function > &funcs)
------------------------------------------------------------------------

Create a Parallelizer.

";

%feature("docstring") casadi::Parallelizer::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Parallelizer::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::Parallelizer::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::Parallelizer::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::Parallelizer::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Parallelizer::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::Parallelizer::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::Parallelizer::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Parallelizer::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Parallelizer::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Parallelizer::matchingArg "[INTERNAL]  Check
if input arguments that needs to be replaced.

";

%feature("docstring") casadi::Parallelizer::setJacSparsity "

Generate the sparsity of a Jacobian block

";


// File: classcasadi_1_1Polynomial.xml
%feature("docstring") casadi::Polynomial "

Helper class for differentiating and integrating polynomials.

Joel Andersson

C++ includes: polynomial.hpp ";

%feature("docstring") casadi::Polynomial::derivative "

Create a new polynomial for the derivative.

";

%feature("docstring") casadi::Polynomial::Polynomial "

>  casadi::Polynomial::Polynomial(real_t scalar=1)
------------------------------------------------------------------------

Construct a constant polynomial.

>  casadi::Polynomial::Polynomial(real_t p0, real_t p1)
------------------------------------------------------------------------

Construct a linear polynomial.

>  casadi::Polynomial::Polynomial(real_t p0, real_t p1, real_t p2)
------------------------------------------------------------------------

Construct a quadratic polynomial.

>  casadi::Polynomial::Polynomial(real_t p0, real_t p1, real_t p2, real_t p3)
------------------------------------------------------------------------

Construct a cubic polynomial.

>  casadi::Polynomial::Polynomial(const std::vector< T > &coeff)
------------------------------------------------------------------------

Construct from a vector of polynomial coefficients.

";

%feature("docstring") casadi::Polynomial::print "

Print a description of the object.

";

%feature("docstring") casadi::Polynomial::anti_derivative "

Create a new polynomial for the anti-derivative (primitive function)

";

%feature("docstring") casadi::Polynomial::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Polynomial::degree "

Degree of the polynomial.

";

%feature("docstring") casadi::Polynomial::toScalar "

Get scalar value (error if degree()!=0)

";

%feature("docstring") casadi::Polynomial::trim "

Remove excess zeros.

";

%feature("docstring") casadi::Polynomial::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Polynomial::getRepresentation "

Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1PrintableObject.xml
%feature("docstring") casadi::PrintableObject::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::PrintableObject::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::PrintableObject "

Base class for objects that have a natural string representation.

Joel Andersson

C++ includes: printable_object.hpp ";

%feature("docstring") repr "

Return a string with a representation of the object, cf. repr(Object) in
Python.

";

%feature("docstring") str "

Return a string with a description of the object, cf. str(Object) in Python.

";


// File: classcasadi_1_1QcqpSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring") casadi::QcqpSolver "

QcqpSolver.

Solves the following strictly convex problem:



::

  min          1/2 x' H x + g' x
  x
  
  subject to
  1/2 x' Pi x  +  qi' x + ri  <= 0   for i=0..nq-1
  LBA <= A x <= UBA
  LBX <= x   <= UBX
  
  with :
  H, Pi sparse (n x n) positive definite
  g, qi dense  (n x 1)
  ri scalar
  
  n: number of decision variables (x)
  nc: number of linear constraints (A)
  nq: number of quadratic constraints



If H, Pi is not positive-definite, the solver should throw an error.

General information
===================



>Input scheme: casadi::QcqpSolverInput (QCQP_SOLVER_NUM_IN = 12) [qcqpIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_H          | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_G          | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_P          | p                      | The horizontal stack   |
|                        |                        | of all Pi. Each Pi is  |
|                        |                        | sparse (n x n). Only   |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_Q          | q                      | The vertical stack of  |
|                        |                        | all qi: dense, (nq n x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_R          | r                      | The vertical stack of  |
|                        |                        | all scalars ri (nq x   |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_A          | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBA        | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBA        | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBX        | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBX        | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_X0         | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X0     | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QcqpSolverOutput (QCQP_SOLVER_NUM_OUT = 4) [qcqpOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_X          | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_COST       | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- socp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
QcqpSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

socp
----



Solve a QCQP with an SocpSolver

Note: this implementation relies on Cholesky decomposition: Chol(H) = L -> H
= LL' with L lower triangular This requires Pi, H to be positive definite.
Positive semi-definite is not sufficient. Notably, H==0 will not work.

A better implementation would rely on matrix square root, but we need
singular value decomposition to implement that.

This implementation makes use of the epigraph reformulation:

::

  *  min f(x)
  *    x
  *
  *   min  t
  *    x, t  f(x) <= t
  * 



This implementation makes use of the following identity:

::

  *  || Gx+h||_2 <= e'x + f
  *
  *  x'(G'G - ee')x + (2 h'G - 2 f e') x + h'h - f <= 0
  * 

where we put e = [0 0 ... 1] for the quadratic constraint arising from the
epigraph reformulation and e==0 for all other quadratic constraints.

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

>List of available stats

+-------------------+
|        Id         |
+===================+
| socp_solver_stats |
+-------------------+

--------------------------------------------------------------------------------



Joris Gillis
Diagrams
--------



C++ includes: qcqp_solver.hpp ";

%feature("docstring") casadi::QcqpSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::QcqpSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QcqpSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::QcqpSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::QcqpSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::QcqpSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QcqpSolver::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::QcqpSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::QcqpSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::QcqpSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::QcqpSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QcqpSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::QcqpSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::QcqpSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QcqpSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::QcqpSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::QcqpSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::QcqpSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::QcqpSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::QcqpSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::QcqpSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QcqpSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::QcqpSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::QcqpSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::QcqpSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::QcqpSolver::getOption "

get an option value

";

%feature("docstring") casadi::QcqpSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QcqpSolver::QcqpSolver "

>  casadi::QcqpSolver::QcqpSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::QcqpSolver::QcqpSolver(const std::string &name, const QCQPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- socp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
QcqpSolver.doc(\"myextraplugin\")

st:

Problem structure.>Struct scheme: casadi::QCQPStruct ( = 3) [qcqpStruct]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_STRUCT_H          | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_STRUCT_P          | p                      | The horizontal stack   |
|                        |                        | of all Pi. Each Pi is  |
|                        |                        | sparse (n x n). Only   |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_STRUCT_A          | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::QcqpSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::QcqpSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::QcqpSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::QcqpSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::QcqpSolver::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::QcqpSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::QcqpSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QcqpSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::QcqpSolver::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::QcqpSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::QcqpSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::QcqpSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::QcqpSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::QcqpSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QcqpSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::QcqpSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::QcqpSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::QcqpSolver::setQPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::QcqpSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::QcqpSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QcqpSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::QcqpSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QcqpSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::QcqpSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QcqpSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::QcqpSolver::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::QcqpSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QcqpSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::QcqpSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::QcqpSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::QcqpSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QcqpSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::QcqpSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::QcqpSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QcqpSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QcqpSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::QcqpSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::QcqpSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::QcqpSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::QcqpSolver::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::QcqpSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::QcqpSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QcqpSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::QcqpSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::QcqpSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QcqpSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::QcqpSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::QcqpSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::QcqpSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::QcqpSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::QcqpSolver::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::QcqpSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::QcqpSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::QcqpSolver::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::QcqpSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QcqpSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::QcqpSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::QcqpSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::QcqpSolver::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::QcqpSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::QcqpSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QcqpSolver::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::QcqpSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::QcqpSolver::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::QcqpSolver::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::QcqpSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::QcqpSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::QcqpSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::QcqpSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QcqpSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QcqpSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::QcqpSolver::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::QcqpSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::QcqpSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::QcqpSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QcqpSolver::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::QcqpSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::QcqpSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::QcqpSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::QcqpSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QcqpSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";


// File: classcasadi_1_1QcqpSolverInputIOSchemeVector.xml
%feature("docstring") casadi::QcqpSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")
casadi::QcqpSolverInputIOSchemeVector::QcqpSolverInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::QcqpSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QcqpSolverInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::QcqpSolverInputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QcqpSolverInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::QcqpSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'QcqpSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::QcqpSolverInputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QcqpSolverInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";


// File: classcasadi_1_1QcqpSolverOutputIOSchemeVector.xml
%feature("docstring") casadi::QcqpSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'QcqpSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::QcqpSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QcqpSolverOutputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::QcqpSolverOutputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring")
casadi::QcqpSolverOutputIOSchemeVector::QcqpSolverOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::QcqpSolverOutputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QcqpSolverOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::QcqpSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::QcqpSolverOutputIOSchemeVector::vector "[INTERNAL] ";


// File: singletoncasadi_1_1QCQPStructIOSchemeVector.xml
%feature("docstring") casadi::QCQPStructIOSchemeVector "[INTERNAL]  Helper
function for 'QCQPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::QCQPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QCQPStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::QCQPStructIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::QCQPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")
casadi::QCQPStructIOSchemeVector::QCQPStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::QCQPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::QCQPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::QCQPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1QcqpToSocp.xml


// File: classcasadi_1_1QpSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::QpSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::QpSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::QpSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QpSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::QpSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::QpSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::QpSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::QpSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::QpSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::QpSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::QpSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QpSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QpSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::QpSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::QpSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QpSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::QpSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::QpSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QpSolver::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::QpSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QpSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QpSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::QpSolver::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::QpSolver::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::QpSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::QpSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QpSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::QpSolver::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") casadi::QpSolver::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") casadi::QpSolver::QpSolver "

>  casadi::QpSolver::QpSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::QpSolver::QpSolver(const std::string &name, const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- cplex

- ooqp

- qpoases

- sqic

- nlp

- qcqp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
QpSolver.doc(\"myextraplugin\")

st:

Problem structure.>Struct scheme: casadi::QPStruct ( = 2) [qpStruct]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_STRUCT_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_STRUCT_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::QpSolver::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::QpSolver::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::QpSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::QpSolver::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::QpSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QpSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::QpSolver::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::QpSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::QpSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::QpSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::QpSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QpSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::QpSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QpSolver::getOption "

get an option value

";

%feature("docstring") casadi::QpSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::QpSolver::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::QpSolver "

QpSolver.

Solves the following strictly convex problem:



::

  min          1/2 x' H x + g' x
   x
  
  subject to
              LBA <= A x <= UBA
              LBX <= x   <= UBX
  
      with :
        H sparse (n x n) positive definite
        g dense  (n x 1)
  
      n: number of decision variables (x)
      nc: number of constraints (A)



If H is not positive-definite, the solver should throw an error.

General information
===================



>Input scheme: casadi::QpSolverInput (QP_SOLVER_NUM_IN = 9) [qpIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QpSolverOutput (QP_SOLVER_NUM_OUT = 4) [qpOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- cplex

- ooqp

- qpoases

- sqic

- nlp

- qcqp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
QpSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

cplex
-----



Interface to Cplex solver for sparse Quadratic Programs

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| barrier_maxiter | OT_INTEGER      | 2.100e+09       | Maximum number  |
|                 |                 |                 | of barrier      |
|                 |                 |                 | iterations.     |
+-----------------+-----------------+-----------------+-----------------+
| convex          | OT_BOOLEAN      | true            | Indicates if    |
|                 |                 |                 | the QP is       |
|                 |                 |                 | convex or not   |
|                 |                 |                 | (affects only   |
|                 |                 |                 | the barrier     |
|                 |                 |                 | method).        |
+-----------------+-----------------+-----------------+-----------------+
| dep_check       | OT_STRING       | \"off\"           | Detect          |
|                 |                 |                 | redundant       |
|                 |                 |                 | constraints. (a |
|                 |                 |                 | utomatic:-1|off |
|                 |                 |                 | :0|begin:1|end: |
|                 |                 |                 | 2|both:3)       |
+-----------------+-----------------+-----------------+-----------------+
| dump_filename   | OT_STRING       | \"qp.dat\"        | The filename to |
|                 |                 |                 | dump to.        |
+-----------------+-----------------+-----------------+-----------------+
| dump_to_file    | OT_BOOLEAN      | false           | Dumps QP to     |
|                 |                 |                 | file in CPLEX   |
|                 |                 |                 | format.         |
+-----------------+-----------------+-----------------+-----------------+
| qp_method       | OT_STRING       | \"automatic\"     | Determines      |
|                 |                 |                 | which CPLEX     |
|                 |                 |                 | algorithm to    |
|                 |                 |                 | use. (automatic |
|                 |                 |                 | |primal_simplex |
|                 |                 |                 | |dual_simplex|n |
|                 |                 |                 | etwork|barrier| |
|                 |                 |                 | sifting|concurr |
|                 |                 |                 | ent|crossover)  |
+-----------------+-----------------+-----------------+-----------------+
| simplex_maxiter | OT_INTEGER      | 2.100e+09       | Maximum number  |
|                 |                 |                 | of simplex      |
|                 |                 |                 | iterations.     |
+-----------------+-----------------+-----------------+-----------------+
| tol             | OT_REAL         | 0.000           | Tolerance of    |
|                 |                 |                 | solver          |
+-----------------+-----------------+-----------------+-----------------+
| warm_start      | OT_BOOLEAN      | false           | Use warm start  |
|                 |                 |                 | with simplex    |
|                 |                 |                 | methods         |
|                 |                 |                 | (affects only   |
|                 |                 |                 | the simplex     |
|                 |                 |                 | methods).       |
+-----------------+-----------------+-----------------+-----------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ooqp
----



Interface to the OOQP Solver for quadratic programming The current
implementation assumes that OOQP is configured with the MA27 sparse linear
solver.

NOTE: when doing multiple calls to evaluate(), check if you need to
reInit();

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| artol           | OT_REAL         | 0.000           | tolerance as    |
|                 |                 |                 | provided with   |
|                 |                 |                 | setArTol to     |
|                 |                 |                 | OOQP            |
+-----------------+-----------------+-----------------+-----------------+
| mutol           | OT_REAL         | 0.000           | tolerance as    |
|                 |                 |                 | provided with   |
|                 |                 |                 | setMuTol to     |
|                 |                 |                 | OOQP            |
+-----------------+-----------------+-----------------+-----------------+
| print_level     | OT_INTEGER      | 0               | Print level.    |
|                 |                 |                 | OOQP listens to |
|                 |                 |                 | print_level 0,  |
|                 |                 |                 | 10 and 100      |
+-----------------+-----------------+-----------------+-----------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

qpoases
-------



Interface to QPOases Solver for quadratic programming

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| CPUtime         | OT_REAL         | None            | The maximum     |
|                 |                 |                 | allowed CPU     |
|                 |                 |                 | time in seconds |
|                 |                 |                 | for the whole   |
|                 |                 |                 | initialisation  |
|                 |                 |                 | (and the        |
|                 |                 |                 | actually        |
|                 |                 |                 | required one on |
|                 |                 |                 | output).        |
|                 |                 |                 | Disabled if     |
|                 |                 |                 | unset.          |
+-----------------+-----------------+-----------------+-----------------+
| boundRelaxation | OT_REAL         | 10000           | Initial         |
|                 |                 |                 | relaxation of   |
|                 |                 |                 | bounds to start |
|                 |                 |                 | homotopy and    |
|                 |                 |                 | initial value   |
|                 |                 |                 | for far bounds. |
+-----------------+-----------------+-----------------+-----------------+
| boundTolerance  | OT_REAL         | 0.000           | If upper and    |
|                 |                 |                 | lower bounds    |
|                 |                 |                 | differ less     |
|                 |                 |                 | than this       |
|                 |                 |                 | tolerance, they |
|                 |                 |                 | are regarded    |
|                 |                 |                 | equal, i.e. as  |
|                 |                 |                 | equality        |
|                 |                 |                 | constraint.     |
+-----------------+-----------------+-----------------+-----------------+
| enableCholeskyR | OT_INTEGER      | 0               | Specifies the   |
| efactorisation  |                 |                 | frequency of a  |
|                 |                 |                 | full re-        |
|                 |                 |                 | factorisation   |
|                 |                 |                 | of projected    |
|                 |                 |                 | Hessian matrix: |
|                 |                 |                 | 0: turns them   |
|                 |                 |                 | off, 1: uses    |
|                 |                 |                 | them at each    |
|                 |                 |                 | iteration etc.  |
+-----------------+-----------------+-----------------+-----------------+
| enableDriftCorr | OT_INTEGER      | 1               | Specifies the   |
| ection          |                 |                 | frequency of    |
|                 |                 |                 | drift           |
|                 |                 |                 | corrections: 0: |
|                 |                 |                 | turns them off. |
+-----------------+-----------------+-----------------+-----------------+
| enableEqualitie | OT_BOOLEAN      | False           | Specifies       |
| s               |                 |                 | whether         |
|                 |                 |                 | equalities      |
|                 |                 |                 | should be       |
|                 |                 |                 | treated as      |
|                 |                 |                 | always active   |
|                 |                 |                 | (True) or not   |
|                 |                 |                 | (False)         |
+-----------------+-----------------+-----------------+-----------------+
| enableFarBounds | OT_BOOLEAN      | True            | Enables the use |
|                 |                 |                 | of far bounds.  |
+-----------------+-----------------+-----------------+-----------------+
| enableFlippingB | OT_BOOLEAN      | True            | Enables the use |
| ounds           |                 |                 | of flipping     |
|                 |                 |                 | bounds.         |
+-----------------+-----------------+-----------------+-----------------+
| enableFullLITes | OT_BOOLEAN      | False           | Enables         |
| ts              |                 |                 | condition-      |
|                 |                 |                 | hardened (but   |
|                 |                 |                 | more expensive) |
|                 |                 |                 | LI test.        |
+-----------------+-----------------+-----------------+-----------------+
| enableNZCTests  | OT_BOOLEAN      | True            | Enables nonzero |
|                 |                 |                 | curvature       |
|                 |                 |                 | tests.          |
+-----------------+-----------------+-----------------+-----------------+
| enableRamping   | OT_BOOLEAN      | True            | Enables         |
|                 |                 |                 | ramping.        |
+-----------------+-----------------+-----------------+-----------------+
| enableRegularis | OT_BOOLEAN      | False           | Enables         |
| ation           |                 |                 | automatic       |
|                 |                 |                 | Hessian         |
|                 |                 |                 | regularisation. |
+-----------------+-----------------+-----------------+-----------------+
| epsDen          | OT_REAL         | 0.000           | Denominator     |
|                 |                 |                 | tolerance for   |
|                 |                 |                 | ratio tests.    |
+-----------------+-----------------+-----------------+-----------------+
| epsFlipping     | OT_REAL         | 0.000           | Tolerance of    |
|                 |                 |                 | squared         |
|                 |                 |                 | Cholesky        |
|                 |                 |                 | diagonal factor |
|                 |                 |                 | which triggers  |
|                 |                 |                 | flipping bound. |
+-----------------+-----------------+-----------------+-----------------+
| epsIterRef      | OT_REAL         | 0.000           | Early           |
|                 |                 |                 | termination     |
|                 |                 |                 | tolerance for   |
|                 |                 |                 | iterative       |
|                 |                 |                 | refinement.     |
+-----------------+-----------------+-----------------+-----------------+
| epsLITests      | OT_REAL         | 0.000           | Tolerance for   |
|                 |                 |                 | linear          |
|                 |                 |                 | independence    |
|                 |                 |                 | tests.          |
+-----------------+-----------------+-----------------+-----------------+
| epsNZCTests     | OT_REAL         | 0.000           | Tolerance for   |
|                 |                 |                 | nonzero         |
|                 |                 |                 | curvature       |
|                 |                 |                 | tests.          |
+-----------------+-----------------+-----------------+-----------------+
| epsNum          | OT_REAL         | -0.000          | Numerator       |
|                 |                 |                 | tolerance for   |
|                 |                 |                 | ratio tests.    |
+-----------------+-----------------+-----------------+-----------------+
| epsRegularisati | OT_REAL         | 0.000           | Scaling factor  |
| on              |                 |                 | of identity     |
|                 |                 |                 | matrix used for |
|                 |                 |                 | Hessian         |
|                 |                 |                 | regularisation. |
+-----------------+-----------------+-----------------+-----------------+
| finalRamping    | OT_REAL         | 1               | Final value for |
|                 |                 |                 | ramping         |
|                 |                 |                 | strategy.       |
+-----------------+-----------------+-----------------+-----------------+
| growFarBounds   | OT_REAL         | 1000            | Factor to grow  |
|                 |                 |                 | far bounds.     |
+-----------------+-----------------+-----------------+-----------------+
| initialFarBound | OT_REAL         | 1000000         | Initial size    |
| s               |                 |                 | for far bounds. |
+-----------------+-----------------+-----------------+-----------------+
| initialRamping  | OT_REAL         | 0.500           | Start value for |
|                 |                 |                 | ramping         |
|                 |                 |                 | strategy.       |
+-----------------+-----------------+-----------------+-----------------+
| initialStatusBo | OT_STRING       | lower           | Initial status  |
| unds            |                 |                 | of bounds at    |
|                 |                 |                 | first           |
|                 |                 |                 | iteration.      |
+-----------------+-----------------+-----------------+-----------------+
| maxDualJump     | OT_REAL         | 100000000       | Maximum allowed |
|                 |                 |                 | jump in dual    |
|                 |                 |                 | variables in    |
|                 |                 |                 | linear          |
|                 |                 |                 | independence    |
|                 |                 |                 | tests.          |
+-----------------+-----------------+-----------------+-----------------+
| maxPrimalJump   | OT_REAL         | 100000000       | Maximum allowed |
|                 |                 |                 | jump in primal  |
|                 |                 |                 | variables in    |
|                 |                 |                 | nonzero         |
|                 |                 |                 | curvature       |
|                 |                 |                 | tests.          |
+-----------------+-----------------+-----------------+-----------------+
| nWSR            | OT_INTEGER      | None            | The maximum     |
|                 |                 |                 | number of       |
|                 |                 |                 | working set     |
|                 |                 |                 | recalculations  |
|                 |                 |                 | to be performed |
|                 |                 |                 | during the      |
|                 |                 |                 | initial         |
|                 |                 |                 | homotopy.       |
|                 |                 |                 | Default is 5(nx |
|                 |                 |                 | + nc)           |
+-----------------+-----------------+-----------------+-----------------+
| numRefinementSt | OT_INTEGER      | 1               | Maximum number  |
| eps             |                 |                 | of iterative    |
|                 |                 |                 | refinement      |
|                 |                 |                 | steps.          |
+-----------------+-----------------+-----------------+-----------------+
| numRegularisati | OT_INTEGER      | 0               | Maximum number  |
| onSteps         |                 |                 | of successive   |
|                 |                 |                 | regularisation  |
|                 |                 |                 | steps.          |
+-----------------+-----------------+-----------------+-----------------+
| printLevel      | OT_STRING       | medium          | Defines the     |
|                 |                 |                 | amount of text  |
|                 |                 |                 | output during   |
|                 |                 |                 | QP solution,    |
|                 |                 |                 | see Section 5.7 |
+-----------------+-----------------+-----------------+-----------------+
| terminationTole | OT_REAL         | 0.000           | Relative        |
| rance           |                 |                 | termination     |
|                 |                 |                 | tolerance to    |
|                 |                 |                 | stop homotopy.  |
+-----------------+-----------------+-----------------+-----------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

sqic
----



Interface to the SQIC solver for quadratic programming

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

nlp
---



Solve QPs using an NlpSolver

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

>List of available stats

+------------------+
|        Id        |
+==================+
| nlp_solver_stats |
+------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

qcqp
----



Solve QP using a QcqpSolver

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

>List of available stats

+-------------------+
|        Id         |
+===================+
| qcqp_solver_stats |
+-------------------+

--------------------------------------------------------------------------------



Joel Andersson
Diagrams
--------



C++ includes: qp_solver.hpp ";

%feature("docstring") casadi::QpSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QpSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::QpSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::QpSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QpSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::QpSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::QpSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::QpSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::QpSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::QpSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::QpSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::QpSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::QpSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::QpSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::QpSolver::replaceFwdSeed "[INTERNAL]  Replace
0-by-0 forward seeds.

";

%feature("docstring") casadi::QpSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::QpSolver::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::QpSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::QpSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::QpSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QpSolver::matchingAdjSeed "[INTERNAL]  Check
if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::QpSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::QpSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::QpSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::QpSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::QpSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::QpSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::QpSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::QpSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::QpSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::QpSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::QpSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::QpSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::QpSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QpSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::QpSolver::replaceAdjSeed "[INTERNAL]  Replace
0-by-0 reverse seeds.

";

%feature("docstring") casadi::QpSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::QpSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::QpSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QpSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QpSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QpSolver::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::QpSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::QpSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::QpSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QpSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::QpSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::QpSolver::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::QpSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::QpSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::QpSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::QpSolver::matchingFwdSeed "[INTERNAL]  Check
if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::QpSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::QpSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::QpSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::QpSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::QpSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QpSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QpSolver::outputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QpSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::QpSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::QpSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QpSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::QpSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";


// File: classcasadi_1_1QpSolverInputIOSchemeVector.xml
%feature("docstring") casadi::QpSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'QpSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::QpSolverInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::QpSolverInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::QpSolverInputIOSchemeVector::QpSolverInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::QpSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QpSolverInputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QpSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::QpSolverInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QpSolverInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classcasadi_1_1QpSolverOutputIOSchemeVector.xml
%feature("docstring") casadi::QpSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QpSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::QpSolverOutputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::QpSolverOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return
a string with a representation (for SWIG)

";

%feature("docstring") casadi::QpSolverOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::QpSolverOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::QpSolverOutputIOSchemeVector::QpSolverOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::QpSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'QpSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::QpSolverOutputIOSchemeVector::vector "[INTERNAL] ";


// File: singletoncasadi_1_1QPStructIOSchemeVector.xml
%feature("docstring") casadi::QPStructIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::QPStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::QPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::QPStructIOSchemeVector "[INTERNAL]  Helper
function for 'QPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::QPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QPStructIOSchemeVector::QPStructIOSchemeVector
"[INTERNAL] ";

%feature("docstring") casadi::QPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::QPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1QpToImplicit.xml


// File: classcasadi_1_1QpToNlp.xml


// File: classcasadi_1_1QpToQcqp.xml


// File: classcasadi_1_1RDAEInputIOSchemeVector.xml
%feature("docstring") casadi::RDAEInputIOSchemeVector "[INTERNAL]  Helper
function for 'RDAEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::RDAEInputIOSchemeVector::RDAEInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::RDAEInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::RDAEInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::RDAEInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::RDAEInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::RDAEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::RDAEInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::RDAEInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classcasadi_1_1RDAEOutputIOSchemeVector.xml
%feature("docstring") casadi::RDAEOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::RDAEOutputIOSchemeVector::RDAEOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::RDAEOutputIOSchemeVector "[INTERNAL]  Helper
function for 'RDAEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1RealtypeSX.xml


// File: classcasadi_1_1Reshape.xml


// File: classcasadi_1_1RkIntegrator.xml


// File: classcasadi_1_1Scpgen.xml


// File: classcasadi_1_1SDPInputIOSchemeVector.xml
%feature("docstring") casadi::SDPInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SDPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SDPInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::SDPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::SDPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SDPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDPInputIOSchemeVector "[INTERNAL]  Helper
function for 'SDPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::SDPInputIOSchemeVector::SDPInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") casadi::SDPInputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1SDPOutputIOSchemeVector.xml
%feature("docstring") casadi::SDPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SDPOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'SDPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::SDPOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SDPOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SDPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDPOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::SDPOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
casadi::SDPOutputIOSchemeVector::SDPOutputIOSchemeVector "[INTERNAL] ";


// File: classcasadi_1_1SdpSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SdpSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SdpSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SdpSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::SdpSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SdpSolver::SdpSolver "

>  casadi::SdpSolver::SdpSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::SdpSolver::SdpSolver(const std::string &name, const SDPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- dsdp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
SdpSolver.doc(\"myextraplugin\")

st:

Problem structure.>Struct scheme: casadi::SDPStruct ( = 3) [sdpStruct]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_STRUCT_F           | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDP_STRUCT_G           | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_STRUCT_A           | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::SdpSolver::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::SdpSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SdpSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SdpSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SdpSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SdpSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::SdpSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SdpSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SdpSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SdpSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SdpSolver::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::SdpSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SdpSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SdpSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SdpSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SdpSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SdpSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SdpSolver::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::SdpSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SdpSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SdpSolver::setSOCPOptions "

Set options that make the SDP solver more suitable for solving SOCPs.

";

%feature("docstring") casadi::SdpSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::SdpSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SdpSolver::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::SdpSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SdpSolver::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::SdpSolver "

SdpSolver.

Solves an SDP problem in standard form.
Seehttp://sdpa.indsys.chuo-u.ac.jp/sdpa/files/sdpa-c.6.2.0.manual.pdf

Primal:



::

  min          c' x
  x
  subject to
  P = Sum_i^m F_i x_i - G
  P negative semidefinite
  
  LBA <= A x <= UBA
  LBX <= x   <= UBX
  
  with x ( n x 1)
  c ( n x 1 )
  G, F_i  sparse symmetric (m x m)
  X dense symmetric ( m x m )
  A sparse matrix ( nc x n)
  LBA, UBA dense vector (nc x 1)
  LBX, UBX dense vector (n x 1)



This formulation is chosen as primal, because it does not call for a large
decision variable space.

Dual:



::

  max          trace(G Y)
  Y
  
  subject to
  trace(F_i Y) = c_i
  Y positive semidefinite
  
  with Y dense symmetric ( m x m)



On generality: you might have formulation with block partitioning:

Primal:



::

  min          c' x
  x
  subject to
  Pj = Sum_i^m F_ij x_i - gj   for all j
  Pj negative semidefinite   for all j
  
  with x ( n x 1)
  c ( n x 1 )
  G, F_i  sparse symmetric (m x m)
  X dense symmetric ( m x m )



Dual:

::

  max          Sum_j trace(Gj Yj)
  Yj
  
  subject to
  Sum_j trace(F_ij Yj) = c_i   for all j
  Yj positive semidefinite     for all j
  
  with Y dense symmetric ( m x m)



You can cast this into the standard form with: G = diagcat(Gj for all j) Fi
= diagcat(F_ij for all j)

Implementations of SdpSolver are encouraged to exploit this block structure.

General information
===================



>Input scheme: casadi::SDPInput (SDP_SOLVER_NUM_IN = 8) [sdpIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_F           | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_C           | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_G           | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_A           | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBA         | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBA         | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBX         | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBX         | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SDPOutput (SDP_SOLVER_NUM_OUT = 7) [sdpOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_X           | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_P           | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL        | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_COST        | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL_COST   | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_A       | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_X       | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_dual    | OT_BOOLEAN   | true         | Indicate if  | casadi::SdpS |
|              |              |              | dual should  | olverInterna |
|              |              |              | be allocated | l            |
|              |              |              | and          |              |
|              |              |              | calculated.  |              |
|              |              |              | You may want |              |
|              |              |              | to avoid     |              |
|              |              |              | calculating  |              |
|              |              |              | this         |              |
|              |              |              | variable for |              |
|              |              |              | problems     |              |
|              |              |              | with n       |              |
|              |              |              | large, as is |              |
|              |              |              | always dense |              |
|              |              |              | (m x m).     |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_p       | OT_BOOLEAN   | true         | Indicate if  | casadi::SdpS |
|              |              |              | the P-part   | olverInterna |
|              |              |              | of primal    | l            |
|              |              |              | solution     |              |
|              |              |              | should be    |              |
|              |              |              | allocated    |              |
|              |              |              | and          |              |
|              |              |              | calculated.  |              |
|              |              |              | You may want |              |
|              |              |              | to avoid     |              |
|              |              |              | calculating  |              |
|              |              |              | this         |              |
|              |              |              | variable for |              |
|              |              |              | problems     |              |
|              |              |              | with n       |              |
|              |              |              | large, as is |              |
|              |              |              | always dense |              |
|              |              |              | (m x m).     |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | casadi::SdpS |
| m            |              |              | problem      | olverInterna |
|              |              |              | statement    | l            |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- dsdp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
SdpSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

dsdp
----



Interface to the SDP solver DSDP Warning: The solver DSDP is not good at
handling linear equalities. There are several options if you notice
difficulties: play around with the parameter \"_penalty\" leave a gap
manually switch to another SDP Solver

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| _loglevel       | OT_INTEGER      | 0               | An integer that |
|                 |                 |                 | specifies how   |
|                 |                 |                 | much logging is |
|                 |                 |                 | done on stdout. |
+-----------------+-----------------+-----------------+-----------------+
| _penalty        | OT_REAL         | 100000          | Penality        |
|                 |                 |                 | parameter       |
|                 |                 |                 | lambda. Must    |
|                 |                 |                 | exceed the      |
|                 |                 |                 | trace of Y.     |
|                 |                 |                 | This parameter  |
|                 |                 |                 | heavily         |
|                 |                 |                 | influences the  |
|                 |                 |                 | ability of DSDP |
|                 |                 |                 | to treat linear |
|                 |                 |                 | equalities. The |
|                 |                 |                 | DSDP standard   |
|                 |                 |                 | default (1e8)   |
|                 |                 |                 | will make a     |
|                 |                 |                 | problem with    |
|                 |                 |                 | linear equality |
|                 |                 |                 | return unusable |
|                 |                 |                 | solutions.      |
+-----------------+-----------------+-----------------+-----------------+
| _printlevel     | OT_INTEGER      | 1               | A printlevel of |
|                 |                 |                 | zero will       |
|                 |                 |                 | disable all     |
|                 |                 |                 | output. Another |
|                 |                 |                 | number          |
|                 |                 |                 | indicates how   |
|                 |                 |                 | often a line is |
|                 |                 |                 | printed.        |
+-----------------+-----------------+-----------------+-----------------+
| _reuse          | OT_INTEGER      | 4               | Maximum on the  |
|                 |                 |                 | number of times |
|                 |                 |                 | the Schur       |
|                 |                 |                 | complement      |
|                 |                 |                 | matrix is       |
|                 |                 |                 | reused          |
+-----------------+-----------------+-----------------+-----------------+
| _rho            | OT_REAL         | 4               | Potential       |
|                 |                 |                 | parameter. Must |
|                 |                 |                 | be >=1          |
+-----------------+-----------------+-----------------+-----------------+
| _use_penalty    | OT_BOOLEAN      | true            | Modifies the    |
|                 |                 |                 | algorithm to    |
|                 |                 |                 | use a penality  |
|                 |                 |                 | gamma on r.     |
+-----------------+-----------------+-----------------+-----------------+
| _zbar           | OT_REAL         | 1.000e+10       | Initial upper   |
|                 |                 |                 | bound on the    |
|                 |                 |                 | objective of    |
|                 |                 |                 | the dual        |
|                 |                 |                 | problem.        |
+-----------------+-----------------+-----------------+-----------------+
| dualTol         | OT_REAL         | 0.000           | Tolerance for   |
|                 |                 |                 | dual            |
|                 |                 |                 | infeasibility   |
|                 |                 |                 | (translates to  |
|                 |                 |                 | primal          |
|                 |                 |                 | infeasibility   |
|                 |                 |                 | in dsdp terms)  |
+-----------------+-----------------+-----------------+-----------------+
| gapTol          | OT_REAL         | 0.000           | Convergence     |
|                 |                 |                 | criterion based |
|                 |                 |                 | on distance     |
|                 |                 |                 | between primal  |
|                 |                 |                 | and dual        |
|                 |                 |                 | objective       |
+-----------------+-----------------+-----------------+-----------------+
| inf             | OT_REAL         | 1.000e+30       | Treat numbers   |
|                 |                 |                 | higher than     |
|                 |                 |                 | this as         |
|                 |                 |                 | infinity        |
+-----------------+-----------------+-----------------+-----------------+
| maxIter         | OT_INTEGER      | 500             | Maximum number  |
|                 |                 |                 | of iterations   |
+-----------------+-----------------+-----------------+-----------------+
| primalTol       | OT_REAL         | 0.000           | Tolerance for   |
|                 |                 |                 | primal          |
|                 |                 |                 | infeasibility   |
|                 |                 |                 | (translates to  |
|                 |                 |                 | dual            |
|                 |                 |                 | infeasibility   |
|                 |                 |                 | in dsdp terms)  |
+-----------------+-----------------+-----------------+-----------------+
| stepTol         | OT_REAL         | 0.050           | Terminate the   |
|                 |                 |                 | solver if the   |
|                 |                 |                 | step length in  |
|                 |                 |                 | the primal is   |
|                 |                 |                 | below this      |
|                 |                 |                 | tolerance.      |
+-----------------+-----------------+-----------------+-----------------+

>List of available stats

+--------------------+
|         Id         |
+====================+
| solution_type      |
+--------------------+
| termination_reason |
+--------------------+

--------------------------------------------------------------------------------



Joel Andersson
Diagrams
--------



C++ includes: sdp_solver.hpp ";

%feature("docstring") casadi::SdpSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SdpSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::SdpSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SdpSolver::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::SdpSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SdpSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SdpSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::SdpSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SdpSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SdpSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SdpSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SdpSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SdpSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SdpSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SdpSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::SdpSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SdpSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::SdpSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SdpSolver::matchingFwdSeed "[INTERNAL]  Check
if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::SdpSolver::getOption "

get an option value

";

%feature("docstring") casadi::SdpSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SdpSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SdpSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SdpSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SdpSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SdpSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SdpSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SdpSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::SdpSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::SdpSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SdpSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SdpSolver::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::SdpSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SdpSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SdpSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SdpSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SdpSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SdpSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SdpSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SdpSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SdpSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SdpSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SdpSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::SdpSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SdpSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SdpSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SdpSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SdpSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::SdpSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SdpSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::SdpSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SdpSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::SdpSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SdpSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SdpSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SdpSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SdpSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SdpSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::SdpSolver::matchingAdjSeed "[INTERNAL]  Check
if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::SdpSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SdpSolver::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::SdpSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SdpSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SdpSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SdpSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SdpSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SdpSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SdpSolver::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::SdpSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SdpSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::SdpSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SdpSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SdpSolver::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::SdpSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SdpSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::SdpSolver::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::SdpSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SdpSolver::output_struct "[INTERNAL]
Input/output structures of the function

";


// File: singletoncasadi_1_1SDPStructIOSchemeVector.xml
%feature("docstring")
casadi::SDPStructIOSchemeVector::SDPStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::SDPStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SDPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SDPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SDPStructIOSchemeVector "[INTERNAL]  Helper
function for 'SDPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::SDPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::SDPStructIOSchemeVector::vector "[INTERNAL]
";


// File: classcasadi_1_1SDQPInputIOSchemeVector.xml
%feature("docstring") casadi::SDQPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::SDQPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDQPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SDQPInputIOSchemeVector "[INTERNAL]  Helper
function for 'SDQPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::SDQPInputIOSchemeVector::SDQPInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::SDQPInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SDQPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDQPInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::SDQPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1SDQPOutputIOSchemeVector.xml
%feature("docstring") casadi::SDQPOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SDQPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'SDQPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring")
casadi::SDQPOutputIOSchemeVector::SDQPOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1SdqpSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SdqpSolver::spEvaluate " [INTERNAL]  Propagate the sparsity pattern
through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SdqpSolver "

SdqpSolver.

Same as an SdpSolver, but with a quadratic objective 1/2 x' H x

General information
===================



>Input scheme: casadi::SDQPInput (SDQP_SOLVER_NUM_IN = 9) [sdqpIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_H          | h                      | The matrix H: sparse ( |
|                        |                        | n x n) .               |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_F          | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_G          | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SDQPOutput (SDQP_SOLVER_NUM_OUT = 7) [sdqpOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_P          | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL       | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL_COST  | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| sdp_solver   | OT_STRING    | GenericType( | The          | casadi::Sdqp |
|              |              | )            | SdqpSolver   | SolverIntern |
|              |              |              | used to      | al           |
|              |              |              | solve the    |              |
|              |              |              | SDPs.        |              |
+--------------+--------------+--------------+--------------+--------------+
| sdp_solver_o | OT_DICTIONAR | GenericType( | Options to   | casadi::Sdqp |
| ptions       | Y            | )            | be passed to | SolverIntern |
|              |              |              | the          | al           |
|              |              |              | SDPSOlver    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- sdp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
SdqpSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

sdp
---



Solve an SQDP using an SdpSolver Note: this implementation relies on
Cholesky decomposition: Chol(H) = L -> H = LL' with L lower triangular This
requires Pi, H to be positive definite. Positive semi-definite is not
sufficient. Notably, H==0 will not work.

A better implementation would rely on matrix square root, but we need
singular value decomposition to implement that.

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

>List of available stats

+------------------+
|        Id        |
+==================+
| sdp_solver_stats |
+------------------+

--------------------------------------------------------------------------------



Joel Andersson
Diagrams
--------



C++ includes: sdqp_solver.hpp ";

%feature("docstring") casadi::SdqpSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SdqpSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SdqpSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SdqpSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::SdqpSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::SdqpSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SdqpSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SdqpSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::SdqpSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::SdqpSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SdqpSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SdqpSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::SdqpSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SdqpSolver::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::SdqpSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::SdqpSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SdqpSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SdqpSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SdqpSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SdqpSolver::getOption "

get an option value

";

%feature("docstring") casadi::SdqpSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SdqpSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SdqpSolver::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::SdqpSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SdqpSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SdqpSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SdqpSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SdqpSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SdqpSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SdqpSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SdqpSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::SdqpSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SdqpSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::SdqpSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::SdqpSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SdqpSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SdqpSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SdqpSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SdqpSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SdqpSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SdqpSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SdqpSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SdqpSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SdqpSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SdqpSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SdqpSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SdqpSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SdqpSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SdqpSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::SdqpSolver::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::SdqpSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SdqpSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SdqpSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SdqpSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SdqpSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SdqpSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::SdqpSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SdqpSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SdqpSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::SdqpSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SdqpSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SdqpSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SdqpSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SdqpSolver::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::SdqpSolver::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::SdqpSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SdqpSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SdqpSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SdqpSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SdqpSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SdqpSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SdqpSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SdqpSolver::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::SdqpSolver::SdqpSolver "

>  casadi::SdqpSolver::SdqpSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::SdqpSolver::SdqpSolver(const std::string &name, const SDQPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- sdp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
SdqpSolver.doc(\"myextraplugin\")

st:

Problem structure.>Struct scheme: casadi::SDQPStruct ( = 4) [sdqpStruct]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_STRUCT_H          | h                      | The matrix H: sparse ( |
|                        |                        | n x n) .               |
+------------------------+------------------------+------------------------+
| SDQP_STRUCT_F          | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDQP_STRUCT_G          | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_STRUCT_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::SdqpSolver::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::SdqpSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SdqpSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SdqpSolver::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::SdqpSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::SdqpSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SdqpSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SdqpSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SdqpSolver::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::SdqpSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SdqpSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SdqpSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SdqpSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SdqpSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SdqpSolver::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::SdqpSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SdqpSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::SdqpSolver::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::SdqpSolver::setSOCQPOptions "

Set options that make the SDQP solver more suitable for solving SOCPs.

";

%feature("docstring") casadi::SdqpSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SdqpSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SdqpSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::SdqpSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SdqpSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SdqpSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SdqpSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SdqpSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SdqpSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SdqpSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SdqpSolver::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::SdqpSolver::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::SdqpSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SdqpSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SdqpSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";


// File: singletoncasadi_1_1SDQPStructIOSchemeVector.xml
%feature("docstring") casadi::SDQPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SDQPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDQPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SDQPStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SDQPStructIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::SDQPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
casadi::SDQPStructIOSchemeVector::SDQPStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::SDQPStructIOSchemeVector "[INTERNAL]  Helper
function for 'SDQPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::SDQPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classcasadi_1_1SdqpToSdp.xml


// File: classcasadi_1_1SetNonzeros.xml


// File: classcasadi_1_1SetNonzerosSlice.xml


// File: classcasadi_1_1SetNonzerosSlice2.xml


// File: classcasadi_1_1SetNonzerosVector.xml


// File: classcasadi_1_1SetSparse.xml


// File: classcasadi_1_1SharedObject.xml
%feature("docstring") casadi::SharedObject::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SharedObject::print "

Print a description of the object.

";

%feature("docstring") casadi::SharedObject::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::SharedObject::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SharedObject::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SharedObject::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SharedObject::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SharedObject::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SharedObject::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SharedObject::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SharedObject::repr "

Print a representation of the object.

";

%feature("docstring") casadi::SharedObject::SharedObject "

>  casadi::SharedObject::SharedObject()
------------------------------------------------------------------------
[INTERNAL] 
Default constructor.

>  casadi::SharedObject::SharedObject(const SharedObject &ref)
------------------------------------------------------------------------
[INTERNAL] 
Copy constructor (shallow copy)

";

%feature("docstring") casadi::SharedObject::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SharedObject::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SharedObject::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::SharedObject::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SharedObject::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SharedObject::isInit "

Is initialized?

";

%feature("docstring") casadi::SharedObject::~SharedObject "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::SharedObject "

SharedObject implements a reference counting framework similar for efficient
and easily-maintained memory management.

To use the class, both the SharedObject class (the public class), and the
SharedObjectNode class (the internal class) must be inherited from. It can
be done in two different files and together with memory management, this
approach provides a clear distinction of which methods of the class are to
be considered \"public\", i.e. methods for public use that can be considered
to remain over time with small changes, and the internal memory.

When interfacing a software, which typically includes including some header
file, this is best done only in the file where the internal class is
defined, to avoid polluting the global namespace and other side effects.

The default constructor always means creating a null pointer to an internal
class only. To allocate an internal class (this works only when the internal
class isn't abstract), use the constructor with arguments.

The copy constructor and the assignment operator perform shallow copies
only, to make a deep copy you must use the clone method explicitly. This
will give a shared pointer instance.

In an inheritance hierarchy, you can cast down automatically, e.g. (
SXFunction is a child class of Function): SXFunction derived(...); Function
base = derived;

To cast up, use the shared_cast template function, which works analogously
to dynamic_cast, static_cast, const_cast etc, e.g.: SXFunction derived(...);
Function base = derived; SXFunction derived_from_base =
shared_cast<SXFunction>(base);

A failed shared_cast will result in a null pointer (cf. dynamic_cast)

Joel Andersson

C++ includes: shared_object.hpp ";


// File: classcasadi_1_1SimpleHomotopyNlp.xml


// File: classcasadi_1_1Simulator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring") casadi::Simulator::isNull
"

Is a null pointer?

";

%feature("docstring") casadi::Simulator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Simulator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::Simulator::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::Simulator::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::Simulator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::Simulator::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::Simulator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Simulator::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Simulator::evaluate "

Evaluate.

";

%feature("docstring") casadi::Simulator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::Simulator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Simulator::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::Simulator::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::Simulator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::Simulator::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::Simulator::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Simulator::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::Simulator::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::Simulator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::Simulator::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Simulator::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::Simulator "

Integrator class.

An \"simulator\" integrates an IVP, stopping at a (fixed) number of grid
points and evaluates a set of output functions at these points. The internal
stepsizes of the integrator need not coincide with the gridpoints.

Simulator is an casadi::Function mapping from casadi::IntegratorInput to n.
\\\\

The output function needs to be a mapping from casadi::DAEInput to n. The
default output has n=1 and the output is the (vectorized) differential state
for each time step.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 6) [integratorIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | casadi::Simu |
|              |              |              | uts)  (initi | latorInterna |
|              |              |              | al|step)     | l            |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors

+---------+---------------------------+
|   Id    |          Used in          |
+=========+===========================+
| initial | casadi::SimulatorInternal |
+---------+---------------------------+
| inputs  | casadi::FunctionInternal  |
+---------+---------------------------+
| outputs | casadi::FunctionInternal  |
+---------+---------------------------+
| step    | casadi::SimulatorInternal |
+---------+---------------------------+

Diagrams
--------



C++ includes: simulator.hpp ";

%feature("docstring") casadi::Simulator::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::Simulator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Simulator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::Simulator::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Simulator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::Simulator::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::Simulator::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::Simulator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Simulator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::Simulator::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::Simulator::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::Simulator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Simulator::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Simulator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::Simulator::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::Simulator::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::Simulator::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Simulator::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Simulator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::Simulator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::Simulator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Simulator::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::Simulator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Simulator::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::Simulator::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::Simulator::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::Simulator::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::Simulator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Simulator::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Simulator::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::Simulator::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Simulator::hasOption "

check if there is an option str

";

%feature("docstring") casadi::Simulator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Simulator::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Simulator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Simulator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::Simulator::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::Simulator::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Simulator::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Simulator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::Simulator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::Simulator::getOption "

get an option value

";

%feature("docstring") casadi::Simulator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::Simulator::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::Simulator::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::Simulator::matchingAdjSeed "[INTERNAL]  Check
if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::Simulator::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Simulator::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Simulator::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::Simulator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Simulator::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::Simulator::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::Simulator::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::Simulator::matchingFwdSeed "[INTERNAL]  Check
if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::Simulator::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::Simulator::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Simulator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::Simulator::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::Simulator::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::Simulator::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::Simulator::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Simulator::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::Simulator::Simulator "

>  casadi::Simulator::Simulator()
------------------------------------------------------------------------

Default constructor.

>  casadi::Simulator::Simulator(const Integrator &integrator, const Function &output_fcn, const std::vector< double > &grid)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

output_fcn:  output function which maps to n outputs.

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 4) [daeIn]

+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>  casadi::Simulator::Simulator(const Integrator &integrator, const std::vector< double > &grid)
------------------------------------------------------------------------

Output function equal to the state.

";

%feature("docstring") casadi::Simulator::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::Simulator::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Simulator::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::Simulator::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Simulator::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::Simulator::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::Simulator::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::Simulator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::Simulator::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Simulator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Simulator::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::Simulator::isInit "

Is initialized?

";

%feature("docstring") casadi::Simulator::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::Simulator::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Simulator::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::Simulator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::Simulator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::Simulator::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Simulator::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Simulator::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::Simulator::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::Simulator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::Simulator::print "

Print a description of the object.

";


// File: classcasadi_1_1Slice.xml
%feature("docstring") casadi::Slice::isScalar "

Is the slice a scalar.

";

%feature("docstring") casadi::Slice::getAll "

>  std::vector<int> casadi::Slice::getAll(int len, bool ind1=false) const 
------------------------------------------------------------------------

Get a vector of indices.

>  std::vector<int> casadi::Slice::getAll(const Slice &outer, int len) const 
------------------------------------------------------------------------

Get a vector of indices (nested slice)

";

%feature("docstring") casadi::Slice::print "

Print a description of the object.

";

%feature("docstring") casadi::Slice "

Class representing a Slice.

Note that Python or Octave do not need to use this class. They can just use
slicing utility from the host language ( M[0:6] in Python, M(1:7) )

C++ includes: slice.hpp ";

%feature("docstring") casadi::Slice::toScalar "

Get scalar (if isScalar)

";

%feature("docstring") casadi::Slice::Slice "

>  casadi::Slice::Slice()
------------------------------------------------------------------------

Default constructor - all elements.

>  casadi::Slice::Slice(int i)
------------------------------------------------------------------------

A single element (explicit to avoid ambiguity with IMatrix overload.

>  casadi::Slice::Slice(int start, int stop, int step=1)
------------------------------------------------------------------------

A slice.

>  casadi::Slice::Slice(const std::vector< int > &v, bool ind1=false)
------------------------------------------------------------------------

Construct from an index vector (requires isSlice(v) to be true)

>  casadi::Slice::Slice(const std::vector< int > &v, Slice &outer)
------------------------------------------------------------------------

Construct nested slices from an index vector (requires isSlice2(v) to be
true)

";

%feature("docstring") casadi::Slice::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Slice::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Slice::getRepresentation "

Return a string with a representation (for SWIG)

";


// File: classsnoptProblem.xml
%feature("docstring") snoptProblem::setParameter "[INTERNAL] ";

%feature("docstring") snoptProblem::setLog "[INTERNAL] ";

%feature("docstring") snoptProblem::getIntParameter "[INTERNAL] ";

%feature("docstring") snoptProblem::setSpecsFile "[INTERNAL] ";

%feature("docstring") snoptProblem::setIntParameter "[INTERNAL] ";

%feature("docstring") snoptProblem::getRealParameter "[INTERNAL] ";

%feature("docstring") snoptProblem::setPrintFile "[INTERNAL] ";

%feature("docstring") snoptProblem::getParameter "[INTERNAL] ";

%feature("docstring") snoptProblem::setUserR "[INTERNAL] ";

%feature("docstring") snoptProblem::setSTOP "[INTERNAL] ";

%feature("docstring") snoptProblem::setRealParameter "[INTERNAL] ";

%feature("docstring") snoptProblem::setUserI "[INTERNAL] ";

%feature("docstring") snoptProblem::setProbName "[INTERNAL] ";

%feature("docstring") snoptProblem::solve "[INTERNAL] ";

%feature("docstring") snoptProblem::setUserspace "[INTERNAL] ";

%feature("docstring") snoptProblem "[INTERNAL] C++ includes:
snoptProblem.hpp ";


// File: classsnoptProblemA.xml
%feature("docstring") snoptProblemA::getIntParameter "[INTERNAL] ";

%feature("docstring") snoptProblemA::computeJac "[INTERNAL] ";

%feature("docstring") snoptProblemA::snoptProblemA "[INTERNAL] ";

%feature("docstring") snoptProblemA::getRealParameter "[INTERNAL] ";

%feature("docstring") snoptProblemA::setSpecsFile "[INTERNAL] ";

%feature("docstring") snoptProblemA::setRealParameter "[INTERNAL] ";

%feature("docstring") snoptProblemA::setWorkspace "[INTERNAL] ";

%feature("docstring") snoptProblemA::setNeG "[INTERNAL] ";

%feature("docstring") snoptProblemA::setNeA "[INTERNAL] ";

%feature("docstring") snoptProblemA::setSTOP "[INTERNAL] ";

%feature("docstring") snoptProblemA::setUserspace "[INTERNAL] ";

%feature("docstring") snoptProblemA::setIntParameter "[INTERNAL] ";

%feature("docstring") snoptProblemA::setG "[INTERNAL] ";

%feature("docstring") snoptProblemA::setF "[INTERNAL] ";

%feature("docstring") snoptProblemA::~snoptProblemA "[INTERNAL] ";

%feature("docstring") snoptProblemA::setPrintFile "[INTERNAL] ";

%feature("docstring") snoptProblemA::setA "[INTERNAL] ";

%feature("docstring") snoptProblemA::solve "[INTERNAL] ";

%feature("docstring") snoptProblemA "[INTERNAL] C++ includes:
snoptProblem.hpp ";

%feature("docstring") snoptProblemA::setX "[INTERNAL] ";

%feature("docstring") snoptProblemA::setUserFun "[INTERNAL] ";

%feature("docstring") snoptProblemA::getParameter "[INTERNAL] ";

%feature("docstring") snoptProblemA::setProblemSize "[INTERNAL] ";

%feature("docstring") snoptProblemA::setParameter "[INTERNAL] ";

%feature("docstring") snoptProblemA::setLog "[INTERNAL] ";

%feature("docstring") snoptProblemA::setUserI "[INTERNAL] ";

%feature("docstring") snoptProblemA::setObjective "[INTERNAL] ";

%feature("docstring") snoptProblemA::setUserR "[INTERNAL] ";

%feature("docstring") snoptProblemA::setProbName "[INTERNAL] ";


// File: classsnoptProblemB.xml
%feature("docstring") snoptProblemB::setPrintFile "[INTERNAL] ";

%feature("docstring") snoptProblemB::getRealParameter "[INTERNAL] ";

%feature("docstring") snoptProblemB::setFuncon "[INTERNAL] ";

%feature("docstring") snoptProblemB::setParameter "[INTERNAL] ";

%feature("docstring") snoptProblemB::setObjective "[INTERNAL] ";

%feature("docstring") snoptProblemB::setWorkspace "[INTERNAL] ";

%feature("docstring") snoptProblemB::setSTOP "[INTERNAL] ";

%feature("docstring") snoptProblemB::getIntParameter "[INTERNAL] ";

%feature("docstring") snoptProblemB::setFunobj "[INTERNAL] ";

%feature("docstring") snoptProblemB::setUserspace "[INTERNAL] ";

%feature("docstring") snoptProblemB::snoptProblemB "[INTERNAL] ";

%feature("docstring") snoptProblemB::getParameter "[INTERNAL] ";

%feature("docstring") snoptProblemB::setUserFun "[INTERNAL] ";

%feature("docstring") snoptProblemB::setIntParameter "[INTERNAL] ";

%feature("docstring") snoptProblemB::setLog "[INTERNAL] ";

%feature("docstring") snoptProblemB::setUserI "[INTERNAL] ";

%feature("docstring") snoptProblemB::setJ "[INTERNAL] ";

%feature("docstring") snoptProblemB::setProbName "[INTERNAL] ";

%feature("docstring") snoptProblemB::setUserR "[INTERNAL] ";

%feature("docstring") snoptProblemB "[INTERNAL] C++ includes:
snoptProblem.hpp ";

%feature("docstring") snoptProblemB::setProblemSize "[INTERNAL] ";

%feature("docstring") snoptProblemB::setX "[INTERNAL] ";

%feature("docstring") snoptProblemB::setSpecsFile "[INTERNAL] ";

%feature("docstring") snoptProblemB::setRealParameter "[INTERNAL] ";

%feature("docstring") snoptProblemB::solve "[INTERNAL] ";

%feature("docstring") snoptProblemB::~snoptProblemB "[INTERNAL] ";


// File: classsnoptProblemC.xml
%feature("docstring") snoptProblemC::setPrintFile "[INTERNAL] ";

%feature("docstring") snoptProblemC "[INTERNAL] C++ includes:
snoptProblem.hpp ";

%feature("docstring") snoptProblemC::getRealParameter "[INTERNAL] ";

%feature("docstring") snoptProblemC::setRealParameter "[INTERNAL] ";

%feature("docstring") snoptProblemC::solve "[INTERNAL] ";

%feature("docstring") snoptProblemC::setParameter "[INTERNAL] ";

%feature("docstring") snoptProblemC::setUserR "[INTERNAL] ";

%feature("docstring") snoptProblemC::getIntParameter "[INTERNAL] ";

%feature("docstring") snoptProblemC::getParameter "[INTERNAL] ";

%feature("docstring") snoptProblemC::snoptProblemC "[INTERNAL] ";

%feature("docstring") snoptProblemC::setUserspace "[INTERNAL] ";

%feature("docstring") snoptProblemC::setUserI "[INTERNAL] ";

%feature("docstring") snoptProblemC::setWorkspace "[INTERNAL] ";

%feature("docstring") snoptProblemC::setJ "[INTERNAL] ";

%feature("docstring") snoptProblemC::setProbName "[INTERNAL] ";

%feature("docstring") snoptProblemC::setSpecsFile "[INTERNAL] ";

%feature("docstring") snoptProblemC::setSTOP "[INTERNAL] ";

%feature("docstring") snoptProblemC::setX "[INTERNAL] ";

%feature("docstring") snoptProblemC::setUserFun "[INTERNAL] ";

%feature("docstring") snoptProblemC::~snoptProblemC "[INTERNAL] ";

%feature("docstring") snoptProblemC::setObjective "[INTERNAL] ";

%feature("docstring") snoptProblemC::setLog "[INTERNAL] ";

%feature("docstring") snoptProblemC::setProblemSize "[INTERNAL] ";

%feature("docstring") snoptProblemC::setIntParameter "[INTERNAL] ";


// File: classcasadi_1_1SOCPInputIOSchemeVector.xml
%feature("docstring") casadi::SOCPInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::SOCPInputIOSchemeVector "[INTERNAL]  Helper
function for 'SOCPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::SOCPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SOCPInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SOCPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")
casadi::SOCPInputIOSchemeVector::SOCPInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::SOCPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SOCPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SOCPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classcasadi_1_1SOCPOutputIOSchemeVector.xml
%feature("docstring") casadi::SOCPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'SOCPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::SOCPOutputIOSchemeVector::SOCPOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1SocpSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SocpSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SocpSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SocpSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SocpSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SocpSolver::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::SocpSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SocpSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SocpSolver::getOption "

get an option value

";

%feature("docstring") casadi::SocpSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::SocpSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SocpSolver::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::SocpSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SocpSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SocpSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SocpSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SocpSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::SocpSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SocpSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SocpSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SocpSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SocpSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SocpSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SocpSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SocpSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SocpSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SocpSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SocpSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SocpSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SocpSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::SocpSolver::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::SocpSolver::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::SocpSolver::SocpSolver "

>  casadi::SocpSolver::SocpSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::SocpSolver::SocpSolver(const std::string &name, const SOCPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- mosek

- sdp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
SocpSolver.doc(\"myextraplugin\")

st:

Problem structure.>Struct scheme: casadi::SOCPStruct ( = 3) [socpStruct]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_STRUCT_G          | g                      | The horizontal stack   |
|                        |                        | of all matrices Gi: (  |
|                        |                        | n x N) .               |
+------------------------+------------------------+------------------------+
| SOCP_STRUCT_E          | e                      | The horizontal stack   |
|                        |                        | of all vectors ei: ( n |
|                        |                        | x m) .                 |
+------------------------+------------------------+------------------------+
| SOCP_STRUCT_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::SocpSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SocpSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SocpSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SocpSolver::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::SocpSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SocpSolver::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::SocpSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SocpSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SocpSolver "

SocpSolver.

Solves an Second Order Cone Programming (SOCP) problem in standard form.

Primal:



::

  min          c' x
  x
  subject to
  || Gi' x + hi ||_2 <= ei' x + fi  i = 1..m
  
  LBA <= A x <= UBA
  LBX <= x   <= UBX
  
  with x ( n x 1)
  c   dense ( n x 1 )
  Gi  sparse (n x ni)
  hi  dense (ni x 1)
  ei  sparse (n x 1)
  fi  dense (1 x 1)
  N = Sum_i^m ni
  A sparse (nc x n)
  LBA, UBA dense vector (nc x 1)
  LBX, UBX dense vector (n x 1)



General information
===================



>Input scheme: casadi::SOCPInput (SOCP_SOLVER_NUM_IN = 10) [socpIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_G          | g                      | The horizontal stack   |
|                        |                        | of all matrices Gi: (  |
|                        |                        | n x N) .               |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_H          | h                      | The vertical stack of  |
|                        |                        | all vectors hi: ( N x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_E          | e                      | The horizontal stack   |
|                        |                        | of all vectors ei: ( n |
|                        |                        | x m) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_F          | f                      | The vertical stack of  |
|                        |                        | all scalars fi: ( m x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SOCPOutput (SOCP_SOLVER_NUM_OUT = 6) [socpOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_DUAL_COST  | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_CONE   | lam_cone               | The dual solution      |
|                        |                        | correspoding to cone   |
|                        |                        | (2-norm) constraints   |
|                        |                        | (m x 1) .              |
+------------------------+------------------------+------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| ni           | OT_INTEGERVE | GenericType( | Provide the  | casadi::Socp |
|              | CTOR         | )            | size of each | SolverIntern |
|              |              |              | SOC          | al           |
|              |              |              | constraint.  |              |
|              |              |              | Must sum up  |              |
|              |              |              | to N.        |              |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | casadi::Socp |
| m            |              |              | problem      | SolverIntern |
|              |              |              | statement    | al           |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- mosek

- sdp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
SocpSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

mosek
-----



Interface to the SOCP solver MOSEK

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| MSK_DPAR_ANA_SO | OT_REAL         | 0.000           | Consult MOSEK   |
| L_INFEAS_TOL    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_BASIS_ | OT_REAL         | 0.000           | Consult MOSEK   |
| REL_TOL_S       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_BASIS_ | OT_REAL         | 0.000           | Consult MOSEK   |
| TOL_S           |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_BASIS_ | OT_REAL         | 0.000           | Consult MOSEK   |
| TOL_X           |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_CHECK_ | OT_REAL         | 0.000           | Consult MOSEK   |
| CONVEXITY_REL_T |                 |                 | manual.         |
| OL              |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_DATA_T | OT_REAL         | 0.000           | Consult MOSEK   |
| OL_AIJ          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_DATA_T | OT_REAL         | 1.000e+20       | Consult MOSEK   |
| OL_AIJ_HUGE     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_DATA_T | OT_REAL         | 1.000e+10       | Consult MOSEK   |
| OL_AIJ_LARGE    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_DATA_T | OT_REAL         | 1.000e+16       | Consult MOSEK   |
| OL_BOUND_INF    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_DATA_T | OT_REAL         | 100000000       | Consult MOSEK   |
| OL_BOUND_WRN    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_DATA_T | OT_REAL         | 100000000       | Consult MOSEK   |
| OL_CJ_LARGE     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_DATA_T | OT_REAL         | 1.000e+16       | Consult MOSEK   |
| OL_C_HUGE       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_DATA_T | OT_REAL         | 0.000           | Consult MOSEK   |
| OL_QIJ          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_DATA_T | OT_REAL         | 0.000           | Consult MOSEK   |
| OL_X            |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_FEASRE | OT_REAL         | 0.000           | Consult MOSEK   |
| PAIR_TOL        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _CO_TOL_DFEAS   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _CO_TOL_INFEAS  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _CO_TOL_MU_RED  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 1000            | Consult MOSEK   |
| _CO_TOL_NEAR_RE |                 |                 | manual.         |
| L               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _CO_TOL_PFEAS   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _CO_TOL_REL_GAP |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _NL_MERIT_BAL   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _NL_TOL_DFEAS   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _NL_TOL_MU_RED  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 1000            | Consult MOSEK   |
| _NL_TOL_NEAR_RE |                 |                 | manual.         |
| L               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _NL_TOL_PFEAS   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _NL_TOL_REL_GAP |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.995           | Consult MOSEK   |
| _NL_TOL_REL_STE |                 |                 | manual.         |
| P               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _TOL_DFEAS      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 1               | Consult MOSEK   |
| _TOL_DSAFE      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _TOL_INFEAS     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _TOL_MU_RED     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _TOL_PATH       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _TOL_PFEAS      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 1               | Consult MOSEK   |
| _TOL_PSAFE      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _TOL_REL_GAP    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 1.000           | Consult MOSEK   |
| _TOL_REL_STEP   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_INTPNT | OT_REAL         | 0.000           | Consult MOSEK   |
| _TOL_STEP_SIZE  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_LOWER_ | OT_REAL         | -1.000e+30      | Consult MOSEK   |
| OBJ_CUT         |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_LOWER_ | OT_REAL         | -5.000e+29      | Consult MOSEK   |
| OBJ_CUT_FINITE_ |                 |                 | manual.         |
| TRH             |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_DI | OT_REAL         | -1              | Consult MOSEK   |
| SABLE_TERM_TIME |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_HE | OT_REAL         | -1              | Consult MOSEK   |
| URISTIC_TIME    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_MA | OT_REAL         | -1              | Consult MOSEK   |
| X_TIME          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_MA | OT_REAL         | 60              | Consult MOSEK   |
| X_TIME_APRX_OPT |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_NE | OT_REAL         | 0               | Consult MOSEK   |
| AR_TOL_ABS_GAP  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_NE | OT_REAL         | 0.001           | Consult MOSEK   |
| AR_TOL_REL_GAP  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_RE | OT_REAL         | 0.750           | Consult MOSEK   |
| L_ADD_CUT_LIMIT |                 |                 | manual.         |
| ED              |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_RE | OT_REAL         | 0.000           | Consult MOSEK   |
| L_GAP_CONST     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_TO | OT_REAL         | 0               | Consult MOSEK   |
| L_ABS_GAP       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_TO | OT_REAL         | 0.000           | Consult MOSEK   |
| L_ABS_RELAX_INT |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_TO | OT_REAL         | 0.000           | Consult MOSEK   |
| L_FEAS          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_TO | OT_REAL         | 0               | Consult MOSEK   |
| L_MAX_CUT_FRAC_ |                 |                 | manual.         |
| RHS             |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_TO | OT_REAL         | 0               | Consult MOSEK   |
| L_MIN_CUT_FRAC_ |                 |                 | manual.         |
| RHS             |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_TO | OT_REAL         | 0               | Consult MOSEK   |
| L_REL_DUAL_BOUN |                 |                 | manual.         |
| D_IMPROVEMENT   |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_TO | OT_REAL         | 0.000           | Consult MOSEK   |
| L_REL_GAP       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_TO | OT_REAL         | 0.000           | Consult MOSEK   |
| L_REL_RELAX_INT |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_MIO_TO | OT_REAL         | 0.000           | Consult MOSEK   |
| L_X             |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_NONCON | OT_REAL         | 0.000           | Consult MOSEK   |
| VEX_TOL_FEAS    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_NONCON | OT_REAL         | 0.000           | Consult MOSEK   |
| VEX_TOL_OPT     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_OPTIMI | OT_REAL         | -1              | Consult MOSEK   |
| ZER_MAX_TIME    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_PRESOL | OT_REAL         | 0.000           | Consult MOSEK   |
| VE_TOL_ABS_LIND |                 |                 | manual.         |
| EP              |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_PRESOL | OT_REAL         | 0.000           | Consult MOSEK   |
| VE_TOL_AIJ      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_PRESOL | OT_REAL         | 0.000           | Consult MOSEK   |
| VE_TOL_REL_LIND |                 |                 | manual.         |
| EP              |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_PRESOL | OT_REAL         | 0.000           | Consult MOSEK   |
| VE_TOL_S        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_PRESOL | OT_REAL         | 0.000           | Consult MOSEK   |
| VE_TOL_X        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_QCQO_R | OT_REAL         | 0.000           | Consult MOSEK   |
| EFORMULATE_REL_ |                 |                 | manual.         |
| DROP_TOL        |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_SIMPLE | OT_REAL         | 0.000           | Consult MOSEK   |
| X_ABS_TOL_PIV   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_SIM_LU | OT_REAL         | 0.010           | Consult MOSEK   |
| _TOL_REL_PIV    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_UPPER_ | OT_REAL         | 1.000e+30       | Consult MOSEK   |
| OBJ_CUT         |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_DPAR_UPPER_ | OT_REAL         | 5.000e+29       | Consult MOSEK   |
| OBJ_CUT_FINITE_ |                 |                 | manual.         |
| TRH             |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_ALLOC_ | OT_STRING       | 5000            | Consult MOSEK   |
| ADD_QNZ         |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_ANA_SO | OT_STRING       | 1               | Consult MOSEK   |
| L_BASIS         |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_ANA_SO | OT_STRING       | 0               | Consult MOSEK   |
| L_PRINT_VIOLATE |                 |                 | manual.         |
| D               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_AUTO_S | OT_STRING       | 0               | Consult MOSEK   |
| ORT_A_BEFORE_OP |                 |                 | manual.         |
| T               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_AUTO_U | OT_STRING       | 0               | Consult MOSEK   |
| PDATE_SOL_INFO  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_BASIS_ | OT_STRING       | 0               | Consult MOSEK   |
| SOLVE_USE_PLUS_ |                 |                 | manual.         |
| ONE             |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_BI_CLE | OT_STRING       | 0               | Consult MOSEK   |
| AN_OPTIMIZER    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_BI_IGN | OT_STRING       | 0               | Consult MOSEK   |
| ORE_MAX_ITER    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_BI_IGN | OT_STRING       | 0               | Consult MOSEK   |
| ORE_NUM_ERROR   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_BI_MAX | OT_STRING       | 1000000         | Consult MOSEK   |
| _ITERATIONS     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_CACHE_ | OT_STRING       | 1               | Consult MOSEK   |
| LICENSE         |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_CHECK_ | OT_STRING       | 2               | Consult MOSEK   |
| CONVEXITY       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_COMPRE | OT_STRING       | 1               | Consult MOSEK   |
| SS_STATFILE     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_CONCUR | OT_STRING       | 2               | Consult MOSEK   |
| RENT_NUM_OPTIMI |                 |                 | manual.         |
| ZERS            |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_CONCUR | OT_STRING       | 2               | Consult MOSEK   |
| RENT_PRIORITY_D |                 |                 | manual.         |
| UAL_SIMPLEX     |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_CONCUR | OT_STRING       | 3               | Consult MOSEK   |
| RENT_PRIORITY_F |                 |                 | manual.         |
| REE_SIMPLEX     |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_CONCUR | OT_STRING       | 4               | Consult MOSEK   |
| RENT_PRIORITY_I |                 |                 | manual.         |
| NTPNT           |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_CONCUR | OT_STRING       | 1               | Consult MOSEK   |
| RENT_PRIORITY_P |                 |                 | manual.         |
| RIMAL_SIMPLEX   |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_FEASRE | OT_STRING       | 0               | Consult MOSEK   |
| PAIR_OPTIMIZE   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INFEAS | OT_STRING       | 0               | Consult MOSEK   |
| _GENERIC_NAMES  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INFEAS | OT_STRING       | 1               | Consult MOSEK   |
| _PREFER_PRIMAL  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INFEAS | OT_STRING       | 0               | Consult MOSEK   |
| _REPORT_AUTO    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INFEAS | OT_STRING       | 1               | Consult MOSEK   |
| _REPORT_LEVEL   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INTPNT | OT_STRING       | 1               | Consult MOSEK   |
| _BASIS          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INTPNT | OT_STRING       | 1               | Consult MOSEK   |
| _DIFF_STEP      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INTPNT | OT_STRING       | 0               | Consult MOSEK   |
| _FACTOR_DEBUG_L |                 |                 | manual.         |
| VL              |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INTPNT | OT_STRING       | 0               | Consult MOSEK   |
| _FACTOR_METHOD  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INTPNT | OT_STRING       | 0               | Consult MOSEK   |
| _HOTSTART       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INTPNT | OT_STRING       | 400             | Consult MOSEK   |
| _MAX_ITERATIONS |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INTPNT | OT_STRING       | -1              | Consult MOSEK   |
| _MAX_NUM_COR    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INTPNT | OT_STRING       | -1              | Consult MOSEK   |
| _MAX_NUM_REFINE |                 |                 | manual.         |
| MENT_STEPS      |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INTPNT | OT_STRING       | 40              | Consult MOSEK   |
| _OFF_COL_TRH    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INTPNT | OT_STRING       | 0               | Consult MOSEK   |
| _ORDER_METHOD   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INTPNT | OT_STRING       | 1               | Consult MOSEK   |
| _REGULARIZATION |                 |                 | manual.         |
| _USE            |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INTPNT | OT_STRING       | 0               | Consult MOSEK   |
| _SCALING        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INTPNT | OT_STRING       | 0               | Consult MOSEK   |
| _SOLVE_FORM     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_INTPNT | OT_STRING       | 0               | Consult MOSEK   |
| _STARTING_POINT |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LICENS | OT_STRING       | 0               | Consult MOSEK   |
| E_DEBUG         |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LICENS | OT_STRING       | 100             | Consult MOSEK   |
| E_PAUSE_TIME    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LICENS | OT_STRING       | 0               | Consult MOSEK   |
| E_SUPPRESS_EXPI |                 |                 | manual.         |
| RE_WRNS         |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LICENS | OT_STRING       | 0               | Consult MOSEK   |
| E_WAIT          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LIC_TR | OT_STRING       | 7               | Consult MOSEK   |
| H_EXPIRY_WRN    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG    | OT_STRING       | 10              | Consult MOSEK   |
|                 |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_BI | OT_STRING       | 4               | Consult MOSEK   |
|                 |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_BI | OT_STRING       | 2500            | Consult MOSEK   |
| _FREQ           |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_CH | OT_STRING       | 0               | Consult MOSEK   |
| ECK_CONVEXITY   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_CO | OT_STRING       | 1               | Consult MOSEK   |
| NCURRENT        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_CU | OT_STRING       | 1               | Consult MOSEK   |
| T_SECOND_OPT    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_EX | OT_STRING       | 0               | Consult MOSEK   |
| PAND            |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_FA | OT_STRING       | 1               | Consult MOSEK   |
| CTOR            |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_FE | OT_STRING       | 1               | Consult MOSEK   |
| AS_REPAIR       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_FI | OT_STRING       | 1               | Consult MOSEK   |
| LE              |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_HE | OT_STRING       | 1               | Consult MOSEK   |
| AD              |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_IN | OT_STRING       | 1               | Consult MOSEK   |
| FEAS_ANA        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_IN | OT_STRING       | 4               | Consult MOSEK   |
| TPNT            |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_MI | OT_STRING       | 4               | Consult MOSEK   |
| O               |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_MI | OT_STRING       | 1000            | Consult MOSEK   |
| O_FREQ          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_NO | OT_STRING       | 1               | Consult MOSEK   |
| NCONVEX         |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_OP | OT_STRING       | 1               | Consult MOSEK   |
| TIMIZER         |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_OR | OT_STRING       | 1               | Consult MOSEK   |
| DER             |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_PA | OT_STRING       | 0               | Consult MOSEK   |
| RAM             |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_PR | OT_STRING       | 1               | Consult MOSEK   |
| ESOLVE          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_RE | OT_STRING       | 0               | Consult MOSEK   |
| SPONSE          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_SE | OT_STRING       | 1               | Consult MOSEK   |
| NSITIVITY       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_SE | OT_STRING       | 0               | Consult MOSEK   |
| NSITIVITY_OPT   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_SI | OT_STRING       | 4               | Consult MOSEK   |
| M               |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_SI | OT_STRING       | 1000            | Consult MOSEK   |
| M_FREQ          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_SI | OT_STRING       | 1               | Consult MOSEK   |
| M_MINOR         |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_SI | OT_STRING       | 1000            | Consult MOSEK   |
| M_NETWORK_FREQ  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_LOG_ST | OT_STRING       | 0               | Consult MOSEK   |
| ORAGE           |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MAX_NU | OT_STRING       | 6               | Consult MOSEK   |
| M_WARNINGS      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_BR | OT_STRING       | 0               | Consult MOSEK   |
| ANCH_DIR        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_BR | OT_STRING       | 1               | Consult MOSEK   |
| ANCH_PRIORITIES |                 |                 | manual.         |
| _USE            |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_CO | OT_STRING       | 0               | Consult MOSEK   |
| NSTRUCT_SOL     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_CO | OT_STRING       | 0               | Consult MOSEK   |
| NT_SOL          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_CU | OT_STRING       | 1               | Consult MOSEK   |
| T_CG            |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_CU | OT_STRING       | 1               | Consult MOSEK   |
| T_CMIR          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_CU | OT_STRING       | -1              | Consult MOSEK   |
| T_LEVEL_ROOT    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_CU | OT_STRING       | -1              | Consult MOSEK   |
| T_LEVEL_TREE    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_FE | OT_STRING       | -1              | Consult MOSEK   |
| ASPUMP_LEVEL    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_HE | OT_STRING       | -1              | Consult MOSEK   |
| URISTIC_LEVEL   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_HO | OT_STRING       | 1               | Consult MOSEK   |
| TSTART          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_KE | OT_STRING       | 1               | Consult MOSEK   |
| EP_BASIS        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_LO | OT_STRING       | -1              | Consult MOSEK   |
| CAL_BRANCH_NUMB |                 |                 | manual.         |
| ER              |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_MA | OT_STRING       | -1              | Consult MOSEK   |
| X_NUM_BRANCHES  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_MA | OT_STRING       | -1              | Consult MOSEK   |
| X_NUM_RELAXS    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_MA | OT_STRING       | -1              | Consult MOSEK   |
| X_NUM_SOLUTIONS |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_MO | OT_STRING       | 1               | Consult MOSEK   |
| DE              |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_MT | OT_STRING       | 1               | Consult MOSEK   |
| _USER_CB        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_NO | OT_STRING       | 0               | Consult MOSEK   |
| DE_OPTIMIZER    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_NO | OT_STRING       | 0               | Consult MOSEK   |
| DE_SELECTION    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_OP | OT_STRING       | 0               | Consult MOSEK   |
| TIMIZER_MODE    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_PR | OT_STRING       | 1               | Consult MOSEK   |
| ESOLVE_AGGREGAT |                 |                 | manual.         |
| E               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_PR | OT_STRING       | 1               | Consult MOSEK   |
| ESOLVE_PROBING  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_PR | OT_STRING       | 1               | Consult MOSEK   |
| ESOLVE_USE      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_PR | OT_STRING       | -1              | Consult MOSEK   |
| OBING_LEVEL     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_RI | OT_STRING       | -1              | Consult MOSEK   |
| NS_MAX_NODES    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_RO | OT_STRING       | 0               | Consult MOSEK   |
| OT_OPTIMIZER    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_ST | OT_STRING       | -1              | Consult MOSEK   |
| RONG_BRANCH     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MIO_US | OT_STRING       | 0               | Consult MOSEK   |
| E_MULTITHREADED |                 |                 | manual.         |
| _OPTIMIZER      |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_MT_SPI | OT_STRING       | 0               | Consult MOSEK   |
| NCOUNT          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_NONCON | OT_STRING       | 100000          | Consult MOSEK   |
| VEX_MAX_ITERATI |                 |                 | manual.         |
| ONS             |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_NUM_TH | OT_STRING       | 0               | Consult MOSEK   |
| READS           |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_OPF_MA | OT_STRING       | 5               | Consult MOSEK   |
| X_TERMS_PER_LIN |                 |                 | manual.         |
| E               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_OPF_WR | OT_STRING       | 1               | Consult MOSEK   |
| ITE_HEADER      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_OPF_WR | OT_STRING       | 1               | Consult MOSEK   |
| ITE_HINTS       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_OPF_WR | OT_STRING       | 0               | Consult MOSEK   |
| ITE_PARAMETERS  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_OPF_WR | OT_STRING       | 1               | Consult MOSEK   |
| ITE_PROBLEM     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_OPF_WR | OT_STRING       | 0               | Consult MOSEK   |
| ITE_SOLUTIONS   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_OPF_WR | OT_STRING       | 1               | Consult MOSEK   |
| ITE_SOL_BAS     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_OPF_WR | OT_STRING       | 1               | Consult MOSEK   |
| ITE_SOL_ITG     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_OPF_WR | OT_STRING       | 1               | Consult MOSEK   |
| ITE_SOL_ITR     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_OPTIMI | OT_STRING       | 0               | Consult MOSEK   |
| ZER             |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_PARAM_ | OT_STRING       | 1               | Consult MOSEK   |
| READ_CASE_NAME  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_PARAM_ | OT_STRING       | 0               | Consult MOSEK   |
| READ_IGN_ERROR  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_PRESOL | OT_STRING       | -1              | Consult MOSEK   |
| VE_ELIMINATOR_M |                 |                 | manual.         |
| AX_NUM_TRIES    |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_PRESOL | OT_STRING       | 1               | Consult MOSEK   |
| VE_ELIMINATOR_U |                 |                 | manual.         |
| SE              |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_PRESOL | OT_STRING       | 1               | Consult MOSEK   |
| VE_ELIM_FILL    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_PRESOL | OT_STRING       | -1              | Consult MOSEK   |
| VE_LEVEL        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_PRESOL | OT_STRING       | 100             | Consult MOSEK   |
| VE_LINDEP_ABS_W |                 |                 | manual.         |
| ORK_TRH         |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_PRESOL | OT_STRING       | 100             | Consult MOSEK   |
| VE_LINDEP_REL_W |                 |                 | manual.         |
| ORK_TRH         |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_PRESOL | OT_STRING       | 1               | Consult MOSEK   |
| VE_LINDEP_USE   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_PRESOL | OT_STRING       | -1              | Consult MOSEK   |
| VE_MAX_NUM_REDU |                 |                 | manual.         |
| CTIONS          |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_PRESOL | OT_STRING       | 2               | Consult MOSEK   |
| VE_USE          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_PRIMAL | OT_STRING       | 0               | Consult MOSEK   |
| _REPAIR_OPTIMIZ |                 |                 | manual.         |
| ER              |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_QO_SEP | OT_STRING       | 0               | Consult MOSEK   |
| ARABLE_REFORMUL |                 |                 | manual.         |
| ATION           |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_A | OT_STRING       | 100000          | Consult MOSEK   |
| NZ              |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_C | OT_STRING       | 10000           | Consult MOSEK   |
| ON              |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_C | OT_STRING       | 2500            | Consult MOSEK   |
| ONE             |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_D | OT_STRING       | 1               | Consult MOSEK   |
| ATA_COMPRESSED  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_D | OT_STRING       | 0               | Consult MOSEK   |
| ATA_FORMAT      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_D | OT_STRING       | 0               | Consult MOSEK   |
| EBUG            |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_K | OT_STRING       | 0               | Consult MOSEK   |
| EEP_FREE_CON    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_L | OT_STRING       | 0               | Consult MOSEK   |
| P_DROP_NEW_VARS |                 |                 | manual.         |
| _IN_BOU         |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_L | OT_STRING       | 1               | Consult MOSEK   |
| P_QUOTED_NAMES  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_M | OT_STRING       | 1               | Consult MOSEK   |
| PS_FORMAT       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_M | OT_STRING       | 1               | Consult MOSEK   |
| PS_KEEP_INT     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_M | OT_STRING       | 1               | Consult MOSEK   |
| PS_OBJ_SENSE    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_M | OT_STRING       | 1               | Consult MOSEK   |
| PS_RELAX        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_M | OT_STRING       | 1024            | Consult MOSEK   |
| PS_WIDTH        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_Q | OT_STRING       | 20000           | Consult MOSEK   |
| NZ              |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_T | OT_STRING       | 0               | Consult MOSEK   |
| ASK_IGNORE_PARA |                 |                 | manual.         |
| M               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_READ_V | OT_STRING       | 10000           | Consult MOSEK   |
| AR              |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SENSIT | OT_STRING       | 0               | Consult MOSEK   |
| IVITY_ALL       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SENSIT | OT_STRING       | 6               | Consult MOSEK   |
| IVITY_OPTIMIZER |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SENSIT | OT_STRING       | 0               | Consult MOSEK   |
| IVITY_TYPE      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_BA | OT_STRING       | 1               | Consult MOSEK   |
| SIS_FACTOR_USE  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_DE | OT_STRING       | 1               | Consult MOSEK   |
| GEN             |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_DU | OT_STRING       | 90              | Consult MOSEK   |
| AL_CRASH        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_DU | OT_STRING       | 0               | Consult MOSEK   |
| AL_PHASEONE_MET |                 |                 | manual.         |
| HOD             |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_DU | OT_STRING       | 50              | Consult MOSEK   |
| AL_RESTRICT_SEL |                 |                 | manual.         |
| ECTION          |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_DU | OT_STRING       | 0               | Consult MOSEK   |
| AL_SELECTION    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_EX | OT_STRING       | 0               | Consult MOSEK   |
| PLOIT_DUPVEC    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_HO | OT_STRING       | 1               | Consult MOSEK   |
| TSTART          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_HO | OT_STRING       | 1               | Consult MOSEK   |
| TSTART_LU       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_IN | OT_STRING       | 0               | Consult MOSEK   |
| TEGER           |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_MA | OT_STRING       | 10000000        | Consult MOSEK   |
| X_ITERATIONS    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_MA | OT_STRING       | 250             | Consult MOSEK   |
| X_NUM_SETBACKS  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_NO | OT_STRING       | 1               | Consult MOSEK   |
| N_SINGULAR      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_PR | OT_STRING       | 90              | Consult MOSEK   |
| IMAL_CRASH      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_PR | OT_STRING       | 0               | Consult MOSEK   |
| IMAL_PHASEONE_M |                 |                 | manual.         |
| ETHOD           |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_PR | OT_STRING       | 50              | Consult MOSEK   |
| IMAL_RESTRICT_S |                 |                 | manual.         |
| ELECTION        |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_PR | OT_STRING       | 0               | Consult MOSEK   |
| IMAL_SELECTION  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_RE | OT_STRING       | 0               | Consult MOSEK   |
| FACTOR_FREQ     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_RE | OT_STRING       | 0               | Consult MOSEK   |
| FORMULATION     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_SA | OT_STRING       | 0               | Consult MOSEK   |
| VE_LU           |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_SC | OT_STRING       | 0               | Consult MOSEK   |
| ALING           |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_SC | OT_STRING       | 0               | Consult MOSEK   |
| ALING_METHOD    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_SO | OT_STRING       | 0               | Consult MOSEK   |
| LVE_FORM        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_ST | OT_STRING       | 50              | Consult MOSEK   |
| ABILITY_PRIORIT |                 |                 | manual.         |
| Y               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SIM_SW | OT_STRING       | 0               | Consult MOSEK   |
| ITCH_OPTIMIZER  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SOLUTI | OT_STRING       | 0               | Consult MOSEK   |
| ON_CALLBACK     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SOL_FI | OT_STRING       | 0               | Consult MOSEK   |
| LTER_KEEP_BASIC |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SOL_FI | OT_STRING       | 0               | Consult MOSEK   |
| LTER_KEEP_RANGE |                 |                 | manual.         |
| D               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SOL_RE | OT_STRING       | -1              | Consult MOSEK   |
| AD_NAME_WIDTH   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_SOL_RE | OT_STRING       | 1024            | Consult MOSEK   |
| AD_WIDTH        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_TIMING | OT_STRING       | 1               | Consult MOSEK   |
| _LEVEL          |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WARNIN | OT_STRING       | 1               | Consult MOSEK   |
| G_LEVEL         |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 1               | Consult MOSEK   |
| BAS_CONSTRAINTS |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 1               | Consult MOSEK   |
| BAS_HEAD        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 1               | Consult MOSEK   |
| BAS_VARIABLES   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 0               | Consult MOSEK   |
| DATA_COMPRESSED |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 0               | Consult MOSEK   |
| DATA_FORMAT     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 0               | Consult MOSEK   |
| DATA_PARAM      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 0               | Consult MOSEK   |
| FREE_CON        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 0               | Consult MOSEK   |
| GENERIC_NAMES   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 1               | Consult MOSEK   |
| GENERIC_NAMES_I |                 |                 | manual.         |
| O               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 0               | Consult MOSEK   |
| IGNORE_INCOMPAT |                 |                 | manual.         |
| IBLE_CONIC_ITEM |                 |                 |                 |
| S               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 0               | Consult MOSEK   |
| IGNORE_INCOMPAT |                 |                 | manual.         |
| IBLE_ITEMS      |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 0               | Consult MOSEK   |
| IGNORE_INCOMPAT |                 |                 | manual.         |
| IBLE_NL_ITEMS   |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 0               | Consult MOSEK   |
| IGNORE_INCOMPAT |                 |                 | manual.         |
| IBLE_PSD_ITEMS  |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 1               | Consult MOSEK   |
| INT_CONSTRAINTS |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 1               | Consult MOSEK   |
| INT_HEAD        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 1               | Consult MOSEK   |
| INT_VARIABLES   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 80              | Consult MOSEK   |
| LP_LINE_WIDTH   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 1               | Consult MOSEK   |
| LP_QUOTED_NAMES |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 0               | Consult MOSEK   |
| LP_STRICT_FORMA |                 |                 | manual.         |
| T               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 10              | Consult MOSEK   |
| LP_TERMS_PER_LI |                 |                 | manual.         |
| NE              |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 1               | Consult MOSEK   |
| MPS_INT         |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 8               | Consult MOSEK   |
| PRECISION       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 1               | Consult MOSEK   |
| SOL_BARVARIABLE |                 |                 | manual.         |
| S               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 1               | Consult MOSEK   |
| SOL_CONSTRAINTS |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 1               | Consult MOSEK   |
| SOL_HEAD        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 0               | Consult MOSEK   |
| SOL_IGNORE_INVA |                 |                 | manual.         |
| LID_NAMES       |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 1               | Consult MOSEK   |
| SOL_VARIABLES   |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 1               | Consult MOSEK   |
| TASK_INC_SOL    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_IPAR_WRITE_ | OT_STRING       | 0               | Consult MOSEK   |
| XML_MODE        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_BAS_SO | OT_STRING       |                 | Consult MOSEK   |
| L_FILE_NAME     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_DATA_F | OT_STRING       |                 | Consult MOSEK   |
| ILE_NAME        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_DEBUG_ | OT_STRING       |                 | Consult MOSEK   |
| FILE_NAME       |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_FEASRE | OT_STRING       | MSK-            | Consult MOSEK   |
| PAIR_NAME_PREFI |                 |                 | manual.         |
| X               |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_FEASRE | OT_STRING       | -               | Consult MOSEK   |
| PAIR_NAME_SEPAR |                 |                 | manual.         |
| ATOR            |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_FEASRE | OT_STRING       | WSUMVIOL        | Consult MOSEK   |
| PAIR_NAME_WSUMV |                 |                 | manual.         |
| IOL             |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_INT_SO | OT_STRING       |                 | Consult MOSEK   |
| L_FILE_NAME     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_ITR_SO | OT_STRING       |                 | Consult MOSEK   |
| L_FILE_NAME     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_MIO_DE | OT_STRING       |                 | Consult MOSEK   |
| BUG_STRING      |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_PARAM_ | OT_STRING       | %%              | Consult MOSEK   |
| COMMENT_SIGN    |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_PARAM_ | OT_STRING       |                 | Consult MOSEK   |
| READ_FILE_NAME  |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_PARAM_ | OT_STRING       |                 | Consult MOSEK   |
| WRITE_FILE_NAME |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_READ_M | OT_STRING       |                 | Consult MOSEK   |
| PS_BOU_NAME     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_READ_M | OT_STRING       |                 | Consult MOSEK   |
| PS_OBJ_NAME     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_READ_M | OT_STRING       |                 | Consult MOSEK   |
| PS_RAN_NAME     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_READ_M | OT_STRING       |                 | Consult MOSEK   |
| PS_RHS_NAME     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_SENSIT | OT_STRING       |                 | Consult MOSEK   |
| IVITY_FILE_NAME |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_SENSIT | OT_STRING       |                 | Consult MOSEK   |
| IVITY_RES_FILE_ |                 |                 | manual.         |
| NAME            |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_SOL_FI | OT_STRING       |                 | Consult MOSEK   |
| LTER_XC_LOW     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_SOL_FI | OT_STRING       |                 | Consult MOSEK   |
| LTER_XC_UPR     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_SOL_FI | OT_STRING       |                 | Consult MOSEK   |
| LTER_XX_LOW     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_SOL_FI | OT_STRING       |                 | Consult MOSEK   |
| LTER_XX_UPR     |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_STAT_F | OT_STRING       |                 | Consult MOSEK   |
| ILE_NAME        |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_STAT_K | OT_STRING       |                 | Consult MOSEK   |
| EY              |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_STAT_N | OT_STRING       |                 | Consult MOSEK   |
| AME             |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| MSK_SPAR_WRITE_ | OT_STRING       | XMSKGEN         | Consult MOSEK   |
| LP_GEN_VAR_NAME |                 |                 | manual.         |
+-----------------+-----------------+-----------------+-----------------+
| eps_unstable    | OT_REAL         | 0.000           | A margin for    |
|                 |                 |                 | unstability     |
|                 |                 |                 | detection       |
+-----------------+-----------------+-----------------+-----------------+

>List of available stats

+--------------------+
|         Id         |
+====================+
| problem_status     |
+--------------------+
| solution_status    |
+--------------------+
| termination_reason |
+--------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

sdp
---



Solve SOCPs using an SdpSolver

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

>List of available stats

+------------------+
|        Id        |
+==================+
| sdp_solver_stats |
+------------------+

--------------------------------------------------------------------------------



Joris Gillis
Diagrams
--------



C++ includes: socp_solver.hpp ";

%feature("docstring") casadi::SocpSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SocpSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SocpSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SocpSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SocpSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SocpSolver::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::SocpSolver::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::SocpSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SocpSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SocpSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SocpSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SocpSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SocpSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::SocpSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SocpSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SocpSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SocpSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::SocpSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SocpSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SocpSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SocpSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SocpSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SocpSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SocpSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SocpSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SocpSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::SocpSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SocpSolver::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::SocpSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SocpSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::SocpSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SocpSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SocpSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SocpSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SocpSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::SocpSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::SocpSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::SocpSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::SocpSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SocpSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::SocpSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SocpSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SocpSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::SocpSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SocpSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::SocpSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SocpSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SocpSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::SocpSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SocpSolver::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::SocpSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SocpSolver::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::SocpSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SocpSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SocpSolver::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::SocpSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SocpSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::SocpSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SocpSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SocpSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SocpSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SocpSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SocpSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SocpSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SocpSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SocpSolver::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::SocpSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SocpSolver::getNumOutputs "

Get the number of function outputs.

";


// File: singletoncasadi_1_1SOCPStructIOSchemeVector.xml
%feature("docstring") casadi::SOCPStructIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::SOCPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
casadi::SOCPStructIOSchemeVector::SOCPStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::SOCPStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SOCPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::SOCPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SOCPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SOCPStructIOSchemeVector "[INTERNAL]  Helper
function for 'SOCPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::SOCPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1SocpToSdp.xml


// File: classcasadi_1_1Solve.xml


// File: classcasadi_1_1SparseStorage.xml
%feature("docstring") casadi::SparseStorage::hasNZ "[INTERNAL]  Returns
true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring") casadi::SparseStorage::elem "[INTERNAL]  get a
reference to an element

";

%feature("docstring") casadi::SparseStorage::clear "[INTERNAL] ";

%feature("docstring") casadi::SparseStorage::reserve "[INTERNAL] ";

%feature("docstring") casadi::SparseStorage::toScalar "[INTERNAL]  Convert
to scalar type.

";

%feature("docstring") casadi::SparseStorage::resize "[INTERNAL] ";

%feature("docstring") casadi::SparseStorage::sparsityRef "[INTERNAL]
Access the sparsity, make a copy if there are multiple references to it.

";

%feature("docstring") casadi::SparseStorage "[INTERNAL] C++ includes:
sparse_storage.hpp ";

%feature("docstring") casadi::SparseStorage::data "

>  std::vector< DataType > & casadi::SparseStorage< DataType >::data()
------------------------------------------------------------------------
[INTERNAL] 
Access the non-zero elements.

>  const std::vector< DataType > & casadi::SparseStorage< DataType >::data() const 
------------------------------------------------------------------------
[INTERNAL] 
Const access the non-zero elements.

";

%feature("docstring") casadi::SparseStorage::sparsity "[INTERNAL]  Const
access the sparsity - reference to data member.

";

%feature("docstring") casadi::SparseStorage::SparseStorage "

>  casadi::SparseStorage< DataType >::SparseStorage(const Sparsity &sparsity, const DataType &val=DataType(0))
------------------------------------------------------------------------
[INTERNAL] 
Sparse matrix with a given sparsity

>  casadi::SparseStorage< DataType >::SparseStorage()
------------------------------------------------------------------------
[INTERNAL] 
constructors

empty 0-by-0 matrix constructor

>  casadi::SparseStorage< DataType >::SparseStorage(const SparseStorage< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
Copy constructor.

";


// File: classcasadi_1_1Sparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::Sparsity::assertInit " [INTERNAL]  Assert that it is initialized

";

%feature("docstring") casadi::Sparsity::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Sparsity::enlargeRows "

Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") casadi::Sparsity "

General sparsity class.

The storage format is a compressed column storage (CCS) format.  In this
format, the structural non-zero elements are stored in column-major order,
starting from the upper left corner of the matrix and ending in the lower
right corner.

In addition to the dimension ( size1(), size2()), (i.e. the number of rows
and the number of columns respectively), there are also two vectors of
integers:

\"colind\" [length size2()+1], which contains the index to the first non-
zero element on or after the corresponding column. All the non-zero elements
of a particular i are thus the elements with index el that fulfills:
colind[i] <= el < colind[i+1].

\"row\" [same length as the number of non-zero elements, nnz()] The rows for
each of the structural non-zeros.

Note that with this format, it is cheap to loop over all the non-zero
elements of a particular column, at constant time per element, but expensive
to jump to access a location (i, j).

If the matrix is dense, i.e. length(row) == size1()*size2(), the format
reduces to standard dense column major format, which allows access to an
arbitrary element in constant time.

Since the object is reference counted (it inherits from SharedObject),
several matrices are allowed to share the same sparsity pattern.

The implementations of some methods of this class has been taken from the
CSparse package and modified to use C++ standard library and CasADi data
structures.

See:   Matrix

Joel Andersson

C++ includes: sparsity.hpp ";

%feature("docstring") casadi::Sparsity::getColind "

Get the column index for each column Together with the row-vector, one
obtains the sparsity pattern in the column compressed format.

";

%feature("docstring") casadi::Sparsity::reCache "[INTERNAL]  Check if there
is an identical copy of the sparsity pattern in the cache, and if so, make a
shallow copy of that one.

";

%feature("docstring") casadi::Sparsity::zz_diagsplit "[INTERNAL]  Accessed
by SparsityInterface.

";

%feature("docstring") casadi::Sparsity::addNZ "

Get the index of a non-zero element Add the element if it does not exist and
copy object if it's not unique.

";

%feature("docstring") casadi::Sparsity::isSquare "

Is square?

";

%feature("docstring") casadi::Sparsity::rowsSequential "

Do the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring") casadi::Sparsity::zz_kron "[INTERNAL]  Accessed by
SparsityInterface.

";

%feature("docstring") casadi::Sparsity::set "

>  void casadi::Sparsity::set(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Assign the nonzero entries of one sparsity pattern to the nonzero
entries of another sparsity pattern.

>  void casadi::Sparsity::set(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Sparsity::zz_horzcat "[INTERNAL]  Accessed by
SparsityInterface.

";

%feature("docstring") casadi::Sparsity::isSymmetric "

Is symmetric?

";

%feature("docstring") casadi::Sparsity::patternProduct "

Sparsity pattern for a matrix-matrix product Returns the sparsity pattern
resulting from multiplying the pattern with another pattern y from the
right.

";

%feature("docstring") casadi::Sparsity::enlargeColumns "

Enlarge the matrix along the second dimension (i.e. insert columns)

";

%feature("docstring") casadi::Sparsity::hash "";

%feature("docstring") casadi::Sparsity::resize "

Resize.

";

%feature("docstring") casadi::Sparsity::isTril "

Is lower triangular?

";

%feature("docstring") casadi::Sparsity::shape "

Get the shape.

";

%feature("docstring") casadi::Sparsity::getLowerNZ "

Get nonzeros in lower triangular part.

";

%feature("docstring") casadi::Sparsity::find "

>  std::vector<int> casadi::Sparsity::find(bool ind1=SWIG_IND1) const 
------------------------------------------------------------------------

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.find() A[k] will contain the elements of A that are non-zero in B

>  void casadi::Sparsity::find(std::vector< int > &loc, bool ind1=false) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the location of all nonzero elements (inplace version)

";

%feature("docstring") casadi::Sparsity::getUpperNZ "

Get nonzeros in upper triangular part.

";

%feature("docstring") casadi::Sparsity::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::Sparsity::repr "

Print a representation of the object.

";

%feature("docstring") casadi::Sparsity::sanityCheck "

Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") casadi::Sparsity::bor "

>  void casadi::Sparsity::bor(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Bitwise or of the nonzero entries of one sparsity pattern and the
nonzero entries of another sparsity pattern.

>  void casadi::Sparsity::bor(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Sparsity::T "

Transpose the matrix.

";

%feature("docstring") casadi::Sparsity::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::Sparsity::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Sparsity::Sparsity "

>  casadi::Sparsity::Sparsity(int dummy=0)
------------------------------------------------------------------------

Default constructor.

>  casadi::Sparsity::Sparsity(int nrow, int ncol)
------------------------------------------------------------------------

Pattern with all structural zeros.

>  casadi::Sparsity::Sparsity(const std::pair< int, int > &rc)
------------------------------------------------------------------------
[INTERNAL] 
Create a sparse matrix with all structural zeros.

>  casadi::Sparsity::Sparsity(int nrow, int ncol, const std::vector< int > &colind, const std::vector< int > &row)
------------------------------------------------------------------------

Construct from sparsity pattern vectors given in compressed column storage
format.

";

%feature("docstring") casadi::Sparsity::zz_horzsplit "[INTERNAL]  Accessed
by SparsityInterface.

";

%feature("docstring") casadi::Sparsity::isTranspose "

Check if the sparsity is the transpose of another.

";

%feature("docstring") casadi::Sparsity::isDense "

Is dense?

";

%feature("docstring") casadi::Sparsity::colind "

>  const int* casadi::Sparsity::colind() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to the colindex of all column element (see class
description)

>  int casadi::Sparsity::colind(int cc) const 
------------------------------------------------------------------------

Get a reference to the colindex of column cc (see class description)

";

%feature("docstring") casadi::Sparsity::zz_blockcat "[INTERNAL]  Accessed
by SparsityInterface.

";

%feature("docstring") casadi::Sparsity::stronglyConnectedComponents "

Find the strongly connected components of the bigraph defined by the
sparsity pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n =
A.stronglyConnectedComponents(p, r)

=> A[p, p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring") casadi::Sparsity::patternUnion "

Union of two sparsity patterns.

";

%feature("docstring") casadi::Sparsity::isInit "

Is initialized?

";

%feature("docstring") casadi::Sparsity::getCCS "

Get the sparsity in compressed column storage (CCS) format.

";

%feature("docstring") casadi::Sparsity::numel "

The total number of elements, including structural zeros, i.e.
size2()*size1()

See:   nnz()

";

%feature("docstring") casadi::Sparsity::getCRS "

Get the sparsity in compressed row storage (CRS) format.

";

%feature("docstring") casadi::Sparsity::zz_tril "[INTERNAL]  Get lower
triangular part.

";

%feature("docstring") casadi::Sparsity::getDiag "

Get the diagonal of the matrix/create a diagonal matrix (mapping will
contain the nonzero mapping) When the input is square, the diagonal elements
are returned. If the input is vector-like, a diagonal matrix is constructed
with it.

";

%feature("docstring") casadi::Sparsity::sparse "

Create a sparse (empty) rectangular sparsity pattern DEPRECATED: Use
Sparse(nrow, ncol) instead.

";

%feature("docstring") casadi::Sparsity::unidirectionalColoring "

Perform a unidirectional coloring: A greedy distance-2 coloring algorithm
(Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring") casadi::Sparsity::zz_vec "";

%feature("docstring") casadi::Sparsity::getTriplet "

Get the sparsity in sparse triplet format.

";

%feature("docstring") casadi::Sparsity::appendColumns "

Append another sparsity patten horizontally.

";

%feature("docstring") casadi::Sparsity::patternIntersection "

Intersection of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero elements
The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if
it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring") casadi::Sparsity::isReshape "

Check if the sparsity is a reshape of another.

";

%feature("docstring") casadi::Sparsity::removeDuplicates "

Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring") casadi::Sparsity::isDiagonal "

Is diagonal?

";

%feature("docstring") casadi::Sparsity::makeDense "

Make a patten dense.

";

%feature("docstring") casadi::Sparsity::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Sparsity::dense "

Create a dense rectangular sparsity pattern.

";

%feature("docstring") casadi::Sparsity::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Sparsity::zz_vertcat "[INTERNAL]  Accessed by
SparsityInterface.

";

%feature("docstring") casadi::Sparsity::zz_repmat "";

%feature("docstring") casadi::Sparsity::zz_vecNZ "[INTERNAL]  Accessed by
SparsityInterface.

";

%feature("docstring") casadi::Sparsity::printCompact "

Print a compact description of the sparsity pattern.

";

%feature("docstring") casadi::Sparsity::diag "

Create diagonal sparsity pattern.

";

%feature("docstring") casadi::Sparsity::sub "

>  Sparsity casadi::Sparsity::sub(const std::vector< int > &rr, const std::vector< int > &cc, std::vector< int > &output_mapping, bool ind1=false) const 
------------------------------------------------------------------------

Get a submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

>  Sparsity casadi::Sparsity::sub(const std::vector< int > &rr, const Sparsity &sp, std::vector< int > &output_mapping, bool ind1=false) const 
------------------------------------------------------------------------

Get a set of elements.

Returns the sparsity of the corresponding elements, with a mapping such that
submatrix[k] = originalmatrix[mapping[k]]

";

%feature("docstring") casadi::Sparsity::unit "

Create the sparsity pattern for a unit vector of length n and a nonzero on
position el.

";

%feature("docstring") casadi::Sparsity::zz_triu "[INTERNAL]  Get upper
triangular part

";

%feature("docstring") casadi::Sparsity::sizeL "

Number of non-zeros in the lower triangular half, i.e. the number of
elements (i, j) with j<=i.

";

%feature("docstring") casadi::Sparsity::append "

Append another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring") casadi::Sparsity::isScalar "

Is scalar?

";

%feature("docstring") casadi::Sparsity::print "

Print a description of the object.

";

%feature("docstring") casadi::Sparsity::zz_sprank "[INTERNAL]  Accessed by
SparsityInterface.

";

%feature("docstring") casadi::Sparsity::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Sparsity::bandwidthU "

Upper half-bandwidth.

";

%feature("docstring") casadi::Sparsity::nnz "

Get the number of (structural) non-zeros.

See:   numel()

";

%feature("docstring") casadi::Sparsity::add "

>  void casadi::Sparsity::add(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Add the nonzero entries of one sparsity pattern to the nonzero entries
of another sparsity pattern.

>  void casadi::Sparsity::add(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Sparsity::getRow "

Get the row for each non-zero entry Together with the column-vector, this
vector gives the sparsity of the matrix in sparse triplet format, and
together with the colind vector, one obtains the sparsity in column
compressed format.

";

%feature("docstring") casadi::Sparsity::row "

>  const int* casadi::Sparsity::row() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to row-vector, containing rows for all non-zero
elements (see class description)

>  int casadi::Sparsity::row(int el) const 
------------------------------------------------------------------------

Get the row of a non-zero element.

";

%feature("docstring") casadi::Sparsity::spyMatlab "

Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring") casadi::Sparsity::starColoring "

Perform a star coloring of a symmetric matrix: A greedy distance-2 coloring
algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) Ordering
options: None (0), largest first (1)

";

%feature("docstring") casadi::Sparsity::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::Sparsity::zz_blocksplit "";

%feature("docstring") casadi::Sparsity::bandwidthL "

Lower half-bandwidth.

";

%feature("docstring") casadi::Sparsity::largestFirstOrdering "

Order the cols by decreasing degree.

";

%feature("docstring") casadi::Sparsity::zz_diagcat "[INTERNAL]  Accessed by
SparsityInterface.

";

%feature("docstring") casadi::Sparsity::isVector "

Check if the pattern is a column vector (i.e. size2()==1) Optionally, checks
if either row or column vector.

";

%feature("docstring") casadi::Sparsity::size "

DEPRECATED: Alias for nnz.

See:   nnz()

";

%feature("docstring") casadi::Sparsity::starColoring2 "

Perform a star coloring of a symmetric matrix: A new greedy distance-2
coloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A. TARAFDAR, F.
MANNE, A. POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring") casadi::Sparsity::isSingular "

Check whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring") casadi::Sparsity::patternCombine "

Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";

%feature("docstring") casadi::Sparsity::dimString "

Get the dimension as a string.

";

%feature("docstring") casadi::Sparsity::isTriu "

Is upper triangular?

";

%feature("docstring") casadi::Sparsity::zz_mtimes "[INTERNAL]  Accessed by
SparsityInterface.

";

%feature("docstring") casadi::Sparsity::compressed "

>  static Sparsity casadi::Sparsity::compressed(const std::vector< int > &v)
------------------------------------------------------------------------

Create from a single vector containing the pattern in compressed column
storage format: The format: The first two entries are the number of rows
(nrow) and columns (ncol) The next ncol+1 entries are the column offsets
(colind). Note that the last element, colind[ncol], gives the number of
nonzeros The last colind[ncol] entries are the row indices

>  static Sparsity casadi::Sparsity::compressed(const int *v)
------------------------------------------------------------------------
[INTERNAL] 
Create from a single vector containing the pattern in compressed
column storage format: The format: The first two entries are the
number of rows (nrow) and columns (ncol) The next ncol+1 entries are
the column offsets (colind). Note that the last element, colind[ncol],
gives the number of nonzeros The last colind[ncol] entries are the row
indices

";

%feature("docstring") casadi::Sparsity::isEqual "

>  bool casadi::Sparsity::isEqual(int nrow, int ncol, const int *colind, const int *row) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Sparsity::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Sparsity::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

For the matrices A to B A(m, n) length(jj)=m , length(ii)=n B(nrow, ncol)

A=enlarge(m, n, ii, jj) makes sure that

B[jj, ii] == A

";

%feature("docstring") casadi::Sparsity::zz_vertsplit "[INTERNAL]  Accessed
by SparsityInterface.

";

%feature("docstring") casadi::Sparsity::compress "

Compress a sparsity pattern.

";

%feature("docstring") casadi::Sparsity::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Sparsity::patternInverse "

Take the inverse of a sparsity pattern; flip zeros and non-zeros.

";

%feature("docstring") casadi::Sparsity::zz_norm_0_mul "[INTERNAL]  Accessed
by SparsityInterface.

";

%feature("docstring") casadi::Sparsity::getNZ "

>  int casadi::Sparsity::getNZ(int rr, int cc) const 
------------------------------------------------------------------------

Get the index of an existing non-zero element return -1 if the element does
not exist.

>  std::vector<int> casadi::Sparsity::getNZ(const std::vector< int > &rr, const std::vector< int > &cc) const 
------------------------------------------------------------------------

Get a set of non-zero element return -1 if the element does not exist.

>  void casadi::Sparsity::getNZ(std::vector< int > &SWIG_INOUT(indices)) const 
------------------------------------------------------------------------

Get the nonzero index for a set of elements The index vector is used both
for input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

";

%feature("docstring") casadi::Sparsity::size2 "

Get the number of columns.

";

%feature("docstring") casadi::Sparsity::size1 "

Get the number of rows.

";

%feature("docstring") casadi::Sparsity::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Sparsity::spy "

Print a textual representation of sparsity.

";

%feature("docstring") casadi::Sparsity::transpose "

Transpose the matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring") casadi::Sparsity::depthFirstSearch "

Depth-first search on the adjacency graph of the sparsity See Direct Methods
for Sparse Linear Systems by Davis (2006).

";

%feature("docstring") casadi::Sparsity::sizeD "

Number of non-zeros on the diagonal, i.e. the number of elements (i, j) with
j==i.

";

%feature("docstring") casadi::Sparsity::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Sparsity::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::Sparsity::isEmpty "

Check if the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::Sparsity::sizeU "

Number of non-zeros in the upper triangular half, i.e. the number of
elements (i, j) with j>=i.

";

%feature("docstring") casadi::Sparsity::pmult "

Permute rows and/or columns Multiply the sparsity with a permutation matrix
from the left and/or from the right P * A * trans(P), A * trans(P) or A *
trans(P) with P defined by an index vector containing the row for each col.
As an alternative, P can be transposed (inverted).

";

%feature("docstring") casadi::Sparsity::hasNZ "

Returns true if the pattern has a non-zero at location rr, cc.

";

%feature("docstring") casadi::Sparsity::reserve "

DEPRECATED: Reserve space.

";

%feature("docstring") casadi::Sparsity::getCol "

Get the column for each non-zero entry Together with the row-vector, this
vector gives the sparsity of the matrix in sparse triplet format, i.e. the
column and row for each non-zero elements.

";

%feature("docstring") casadi::Sparsity::erase "

>  std::vector<int> casadi::Sparsity::erase(const std::vector< int > &rr, const std::vector< int > &cc, bool ind1=false)
------------------------------------------------------------------------

Erase rows and/or columns of a matrix.

>  std::vector<int> casadi::Sparsity::erase(const std::vector< int > &rr, bool ind1=false)
------------------------------------------------------------------------

Erase elements of a matrix.

";

%feature("docstring") casadi::Sparsity::eliminationTree "

Calculate the elimination tree See Direct Methods for Sparse Linear Systems
by Davis (2006). If the parameter ata is false, the algorithm is equivalent
to Matlab's etree(A), except that the indices are zero- based. If ata is
true, the algorithm is equivalent to Matlab's etree(A, 'row').

";

%feature("docstring") casadi::Sparsity::dulmageMendelsohn "

Compute the Dulmage-Mendelsohn decomposition See Direct Methods for Sparse
Linear Systems by Davis (2006).

Dulmage-Mendelsohn will try to bring your matrix into lower block-
triangular (LBT) form. It will not care about the distance of off- diagonal
elements to the diagonal: there is no guarantee you will get a block-
diagonal matrix if you supply a randomly permuted block- diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   stronglyConnectedComponents

";

%feature("docstring") casadi::Sparsity::scalar "

Create a scalar sparsity pattern.

";

%feature("docstring") casadi::Sparsity::zz_reshape "[INTERNAL]  Accessed by
SparsityInterface.

";


// File: classcasadi_1_1Split.xml


// File: classcasadi_1_1Sqpmethod.xml


// File: classcasadi_1_1StabilizedQpSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::StabilizedQpSolver::checkRes " [INTERNAL]  Check if output arguments
have correct length and dimensions.

";

%feature("docstring") casadi::StabilizedQpSolver::getOption "

get an option value

";

%feature("docstring") casadi::StabilizedQpSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::StabilizedQpSolver::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::StabilizedQpSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::StabilizedQpSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::StabilizedQpSolver::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::StabilizedQpSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::StabilizedQpSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::StabilizedQpSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::StabilizedQpSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::StabilizedQpSolver::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::StabilizedQpSolver::matchingRes "[INTERNAL]
Check if output arguments that needs to be replaced.

";

%feature("docstring") casadi::StabilizedQpSolver::replaceArg "[INTERNAL]
Replace 0-by-0 inputs.

";

%feature("docstring") casadi::StabilizedQpSolver::checkFwdSeed "[INTERNAL]
Check forward mode seeds dimensions.

";

%feature("docstring") casadi::StabilizedQpSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::StabilizedQpSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::StabilizedQpSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::StabilizedQpSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::StabilizedQpSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::StabilizedQpSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::StabilizedQpSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::StabilizedQpSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::StabilizedQpSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::StabilizedQpSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::StabilizedQpSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::StabilizedQpSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::StabilizedQpSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::StabilizedQpSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::StabilizedQpSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::StabilizedQpSolver::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::StabilizedQpSolver::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::StabilizedQpSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::StabilizedQpSolver::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::StabilizedQpSolver::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::StabilizedQpSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::StabilizedQpSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::StabilizedQpSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::StabilizedQpSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::StabilizedQpSolver::checkAdjSeed "[INTERNAL]
Check reverse mode seeds dimensions.

";

%feature("docstring") casadi::StabilizedQpSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::StabilizedQpSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::StabilizedQpSolver "

StabilizedQpSolver.

Solves the following strictly convex problem:



::

  min          1/2 x' H x + g' x
  x
  
  subject to
  LBA <= A x <= UBA
  LBX <= x   <= UBX
  
  with :
  H sparse (n x n) positive definite
  g dense  (n x 1)
  
  n: number of decision variables (x)
  nc: number of constraints (A)



If H is not positive-definite, the solver should throw an error.

General information
===================



>Input scheme: casadi::StabilizedQpSolverInput (STABILIZED_QP_SOLVER_NUM_IN = 12) [stabilizedQpIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| STABILIZED_QP_SOLVER_H | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_G | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_A | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | uba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lbx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | ubx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_X | x0                     | dense, (n x 1)         |
| 0                      |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lam_x0                 | dense                  |
| AM_X0                  |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muR                    | dense (1 x 1)          |
| UR                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muE                    | dense (nc x 1)         |
| UE                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | mu                     | dense (nc x 1)         |
| U                      |                        |                        |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QpSolverOutput (QP_SOLVER_NUM_OUT = 4) [qpOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

List of plugins
===============



- sqic

- qp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
StabilizedQpSolver.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

sqic
----



Interface to SQIC

>List of available options

+----+------+---------+-------------+
| Id | Type | Default | Description |
+====+======+=========+=============+
+----+------+---------+-------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

qp --



Solved a stabilized QP using a standard QP solver

>List of available options

+-----------------+-----------------+-----------------+-----------------+
|       Id        |      Type       |     Default     |   Description   |
+=================+=================+=================+=================+
| qp_solver       | OT_STRING       | GenericType()   | The QP solver   |
|                 |                 |                 | used to solve   |
|                 |                 |                 | the stabilized  |
|                 |                 |                 | QPs.            |
+-----------------+-----------------+-----------------+-----------------+
| qp_solver_optio | OT_DICTIONARY   | GenericType()   | Options to be   |
| ns              |                 |                 | passed to the   |
|                 |                 |                 | QP solver       |
|                 |                 |                 | instance        |
+-----------------+-----------------+-----------------+-----------------+

>List of available stats

+-----------------+
|       Id        |
+=================+
| qp_solver_stats |
+-----------------+

--------------------------------------------------------------------------------



Joel Andersson
Diagrams
--------



C++ includes: stabilized_qp_solver.hpp ";

%feature("docstring") casadi::StabilizedQpSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::StabilizedQpSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::StabilizedQpSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::StabilizedQpSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::StabilizedQpSolver::matchingArg "[INTERNAL]
Check if input arguments that needs to be replaced.

";

%feature("docstring") casadi::StabilizedQpSolver::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::StabilizedQpSolver::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::StabilizedQpSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::StabilizedQpSolver::checkArg "[INTERNAL]
Check if input arguments have correct length and dimensions.

";

%feature("docstring") casadi::StabilizedQpSolver::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::StabilizedQpSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::StabilizedQpSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::StabilizedQpSolver::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::StabilizedQpSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::StabilizedQpSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::StabilizedQpSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::StabilizedQpSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::StabilizedQpSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::StabilizedQpSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::StabilizedQpSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::StabilizedQpSolver::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::StabilizedQpSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::StabilizedQpSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::StabilizedQpSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::StabilizedQpSolver::replaceRes "[INTERNAL]
Replace 0-by-0 outputs.

";

%feature("docstring") casadi::StabilizedQpSolver::print "

Print a description of the object.

";

%feature("docstring") casadi::StabilizedQpSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::StabilizedQpSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::StabilizedQpSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::StabilizedQpSolver::matchingFwdSeed "[INTERNAL]  Check if there are 0-by-0 forward seeds that needs to be
replaced.

";

%feature("docstring") casadi::StabilizedQpSolver::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") casadi::StabilizedQpSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::StabilizedQpSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::StabilizedQpSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::StabilizedQpSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::StabilizedQpSolver::StabilizedQpSolver "

>  casadi::StabilizedQpSolver::StabilizedQpSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::StabilizedQpSolver::StabilizedQpSolver(const std::string &name, const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

name:

Name of a solver. It might be one of:

- sqic

- qp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
StabilizedQpSolver.doc(\"myextraplugin\")

st:  Problem structure

>Struct scheme: casadi::QPStruct ( = 2) [qpStruct]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_STRUCT_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_STRUCT_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::StabilizedQpSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::StabilizedQpSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::StabilizedQpSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::StabilizedQpSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::StabilizedQpSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::StabilizedQpSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::StabilizedQpSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::StabilizedQpSolver::matchingAdjSeed "[INTERNAL]  Check if there are 0-by-0 reverse seeds that needs to be
replaced.

";

%feature("docstring") casadi::StabilizedQpSolver::repr "

Print a representation of the object.

";

%feature("docstring") casadi::StabilizedQpSolver::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::StabilizedQpSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::StabilizedQpSolver::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::StabilizedQpSolver::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::StabilizedQpSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::StabilizedQpSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::StabilizedQpSolver::replaceFwdSeed "[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::StabilizedQpSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::StabilizedQpSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::StabilizedQpSolver::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::StabilizedQpSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::StabilizedQpSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::StabilizedQpSolver::replaceAdjSeed "[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::StabilizedQpSolver::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::StabilizedQpSolver::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::StabilizedQpSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::StabilizedQpSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::StabilizedQpSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::StabilizedQpSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::StabilizedQpSolver::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::StabilizedQpSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::StabilizedQpSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::StabilizedQpSolver::getOutputScheme "

Get output scheme.

";


// File: classcasadi_1_1StabilizedQpSolverInputIOSchemeVector.xml
%feature("docstring")
casadi::StabilizedQpSolverInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::StabilizedQpSolverInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::StabilizedQpSolverInputIOSchemeVector::vector
"[INTERNAL] ";

%feature("docstring") casadi::StabilizedQpSolverInputIOSchemeVector "[INTERNAL]  Helper function for 'StabilizedQpSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::StabilizedQpSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::StabilizedQpSolverInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
casadi::StabilizedQpSolverInputIOSchemeVector::StabilizedQpSolverInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") casadi::StabilizedQpSolverInputIOSchemeVector::__len__
"[INTERNAL] ";

%feature("docstring")
casadi::StabilizedQpSolverInputIOSchemeVector::getDescription "[INTERNAL]
Return a string with a description (for SWIG)

";


// File: classcasadi_1_1StabilizedQpToQp.xml


// File: classcasadi_1_1StabilizedSqp.xml


// File: classcasadi_1_1SubAssign.xml


// File: classcasadi_1_1SubIndex.xml
%feature("docstring") casadi::SubIndex "

SubIndex class for Matrix Same as the above class but for single argument
return for operator() Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubIndex::SubIndex "

Constructor.

";


// File: classcasadi_1_1SubMatrix.xml
%feature("docstring") casadi::SubMatrix "

SubMatrix class for Matrix SubMatrix is the return type for operator() of
the Matrix class, it allows access to the value as well as changing the
parent object Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubMatrix::SubMatrix "

Constructor.

";


// File: classcasadi_1_1SubRef.xml


// File: classcasadi_1_1SXElement.xml
%feature("docstring") casadi::SXElement::zz_floor "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_erf "[INTERNAL] ";

%feature("docstring") casadi::SXElement::~SXElement "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::SXElement::zz_power "[INTERNAL] ";

%feature("docstring") casadi::SXElement::__mrdivide__ "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_sqrt "[INTERNAL] ";

%feature("docstring") casadi::SXElement::isMinusInf "[INTERNAL] ";

%feature("docstring") casadi::SXElement::isNonNegative "[INTERNAL]  Check
if a value is always nonnegative (false negatives are allowed)

";

%feature("docstring") casadi::SXElement::zz_abs "[INTERNAL] ";

%feature("docstring") casadi::SXElement::isZero "[INTERNAL] ";

%feature("docstring") casadi::SXElement::setTemp "[INTERNAL]  Set the
temporary variable.

";

%feature("docstring") casadi::SXElement::isOne "[INTERNAL] ";

%feature("docstring") casadi::SXElement::getOp "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_erfinv "[INTERNAL] ";

%feature("docstring") casadi::SXElement::assignNoDelete "[INTERNAL]  Assign
the node to something, without invoking the deletion of the node, if the
count reaches 0.

";

%feature("docstring") casadi::SXElement::getValue "[INTERNAL] ";

%feature("docstring") casadi::SXElement::__nonzero__ "[INTERNAL]  Check the
truth value of this node Introduced to catch bool(x) situations in python.

";

%feature("docstring") casadi::SXElement::getNdeps "[INTERNAL]  Get the
number of dependencies of a binary SXElement.

";

%feature("docstring") casadi::SXElement::isAlmostZero "[INTERNAL] ";

%feature("docstring") casadi::SXElement::isLeaf "[INTERNAL]  check if this
SXElement is a leaf of the SX graph

An SXElement qualifies as leaf when it has no dependencies.

";

%feature("docstring") casadi::SXElement::getName "[INTERNAL] ";

%feature("docstring") casadi::SXElement::isInteger "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_isEqual "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_lt "[INTERNAL] ";

%feature("docstring") casadi::SXElement::inv "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_le "[INTERNAL] ";

%feature("docstring") casadi::SXElement::__mldivide__ "[INTERNAL]  Matrix
division from left.

";

%feature("docstring") casadi::SXElement::zz_asin "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_sin "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_sinh "[INTERNAL] ";

%feature("docstring") casadi::SXElement::assignIfDuplicate "[INTERNAL]
Assign to another expression, if a duplicate. Check for equality up to a
given depth.

";

%feature("docstring") casadi::SXElement::getDep "[INTERNAL] ";

%feature("docstring") casadi::SXElement::isInf "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_mpower "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_mul "[INTERNAL] ";

%feature("docstring") casadi::SXElement::getIntValue "[INTERNAL] ";

%feature("docstring") casadi::SXElement::getTemp "[INTERNAL]  Get the
temporary variable

";

%feature("docstring") casadi::SXElement::print "

>  void casadi::SXElement::print(std::ostream &stream=CASADI_COUT, bool trailing_newline=true) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description of the object.

>  void casadi::SXElement::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
print to stream, limited

";

%feature("docstring") casadi::SXElement::isConstant "[INTERNAL] ";

%feature("docstring") casadi::SXElement::__copysign__ "[INTERNAL] ";

%feature("docstring") casadi::SXElement::constpow "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_sign "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_eq "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_plus "[INTERNAL] ";

%feature("docstring") casadi::SXElement::isMinusOne "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_tanh "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_ceil "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_atan "[INTERNAL] ";

%feature("docstring") casadi::SXElement::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SXElement::zz_times "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_cos "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_minus "[INTERNAL] ";

%feature("docstring") casadi::SXElement "[INTERNAL]  The basic scalar
symbolic class of CasADi.

SXElement is exposed only as an empty struct to SWIG Joel Andersson

C++ includes: sx_element.hpp ";

%feature("docstring") casadi::SXElement::isOp "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_tan "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_ne "[INTERNAL] ";

%feature("docstring") casadi::SXElement::isDoubled "[INTERNAL]  Check if
the node is the sum of two equal expressions.

";

%feature("docstring") casadi::SXElement::zz_and "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_or "[INTERNAL] ";

%feature("docstring") casadi::SXElement::isNull "[INTERNAL]   SXElement
nodes are not allowed to be null.

";

%feature("docstring") casadi::SXElement::marked "[INTERNAL]  Check if
marked (i.e. temporary is negative)

";

%feature("docstring") casadi::SXElement::isCommutative "[INTERNAL]  Check
whether a binary SXElement is commutative.

";

%feature("docstring") casadi::SXElement::isSymbolic "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_mod "[INTERNAL] ";

%feature("docstring") casadi::SXElement::__constpow__ "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_cosh "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_ge "[INTERNAL]  No need to have
both <= and >=.

";

%feature("docstring") casadi::SXElement::isNan "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_gt "[INTERNAL]  No need to have
both < and >

";

%feature("docstring") casadi::SXElement::zz_if_else_zero "[INTERNAL] ";

%feature("docstring") casadi::SXElement::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SXElement::isRegular "[INTERNAL]  Checks if
expression does not contain NaN or Inf.

";

%feature("docstring") casadi::SXElement::printme "[INTERNAL] ";

%feature("docstring") casadi::SXElement::getDescription "[INTERNAL]  Return
a string with a description (for SWIG)

";

%feature("docstring") casadi::SXElement::zz_log10 "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_acosh "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_atan2 "[INTERNAL] ";

%feature("docstring") casadi::SXElement::__hash__ "[INTERNAL]  Returns a
number that is unique for a given SXNode. If the SXElement does not point to
any node, 0 is returned.

";

%feature("docstring") casadi::SXElement::zz_simplify "[INTERNAL] ";

%feature("docstring") casadi::SXElement::sq "[INTERNAL] ";

%feature("docstring") casadi::SXElement::get "[INTERNAL]  Get a pointer to
the node.

";

%feature("docstring") casadi::SXElement::zz_exp "[INTERNAL] ";

%feature("docstring") casadi::SXElement::__truediv__ "[INTERNAL] ";

%feature("docstring") casadi::SXElement::SXElement "

>  casadi::SXElement::SXElement()
------------------------------------------------------------------------
[INTERNAL] 
Default constructor (not-a-number) Object is initialized as
not-a-number.

>  casadi::SXElement::SXElement(double val)
------------------------------------------------------------------------
[INTERNAL] 
Numerical constant constructor.

Parameters:
-----------

val:  Numerical value

>  casadi::SXElement::SXElement(SXNode *node, bool dummy)
------------------------------------------------------------------------
[INTERNAL] 
Create an expression from a node: extra dummy argument to avoid
ambiguity for 0/NULL

>  casadi::SXElement::SXElement(const SXElement &scalar)
------------------------------------------------------------------------
[INTERNAL] 
Copy constructor.

";

%feature("docstring") casadi::SXElement::zz_asinh "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_min "[INTERNAL] ";

%feature("docstring") casadi::SXElement::mark "[INTERNAL]  Mark by flipping
the sign of the temporary and decreasing by one.

";

%feature("docstring") casadi::SXElement::zz_log "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_not "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_max "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_rdivide "[INTERNAL] ";

%feature("docstring") casadi::SXElement::hasDep "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_atanh "[INTERNAL] ";

%feature("docstring") casadi::SXElement::zz_acos "[INTERNAL] ";


// File: classcasadi_1_1SXFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SXFunction::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SXFunction::outputExpr "

>  const SX& casadi::SXFunction::outputExpr(int oind) const 
------------------------------------------------------------------------

Get function output.

>  const std::vector<SX>& casadi::SXFunction::outputExpr() const 
------------------------------------------------------------------------

Get all function outputs.

";

%feature("docstring") casadi::SXFunction::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::SXFunction::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SXFunction::getAtomicInput "

Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::SXFunction::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SXFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SXFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SXFunction::getFree "

Get all the free variables of the function.

";

%feature("docstring") casadi::SXFunction::checkRes "[INTERNAL]  Check if
output arguments have correct length and dimensions.

";

%feature("docstring") casadi::SXFunction::getWorkSize "

Get the length of the work vector.

";

%feature("docstring") casadi::SXFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SXFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SXFunction::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SXFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SXFunction::getAtomicInputReal "

Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::SXFunction::replaceFwdSeed "[INTERNAL]
Replace 0-by-0 forward seeds.

";

%feature("docstring") casadi::SXFunction::getAlgorithmSize "

Get the number of atomic operations.

";

%feature("docstring") casadi::SXFunction::print "

Print a description of the object.

";

%feature("docstring") casadi::SXFunction::checkArg "[INTERNAL]  Check if
input arguments have correct length and dimensions.

";

%feature("docstring") casadi::SXFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SXFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SXFunction::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SXFunction::getAtomicOutput "

Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::SXFunction::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SXFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SXFunction::checkAdjSeed "[INTERNAL]  Check
reverse mode seeds dimensions.

";

%feature("docstring") casadi::SXFunction::output "

[UNSAFE] Obtain reference to outputs

See:   getOutput, getOutput Access output argument

";

%feature("docstring") casadi::SXFunction::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SXFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SXFunction::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SXFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SXFunction::algorithm "[INTERNAL]  Access the
algorithm directly.

";

%feature("docstring") casadi::SXFunction::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::SXFunction::replaceRes "[INTERNAL]  Replace
0-by-0 outputs.

";

%feature("docstring") casadi::SXFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SXFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SXFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SXFunction::input "

[UNSAFE] Obtain reference to inputs

See:   getInput, setInput Access input argument

";

%feature("docstring") casadi::SXFunction::getOption "

get an option value

";

%feature("docstring") casadi::SXFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SXFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SXFunction::matchingFwdSeed "[INTERNAL]
Check if there are 0-by-0 forward seeds that needs to be replaced.

";

%feature("docstring") casadi::SXFunction::countNodes "

Number of nodes in the algorithm.

";

%feature("docstring") casadi::SXFunction::matchingArg "[INTERNAL]  Check if
input arguments that needs to be replaced.

";

%feature("docstring") casadi::SXFunction::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SXFunction::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SXFunction::generateFunction "

Generate code without meta information.

";

%feature("docstring") casadi::SXFunction::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SXFunction::tang "

Tangent via source code transformation

";

%feature("docstring") casadi::SXFunction::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SXFunction::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SXFunction::isInit "

Is initialized?

";

%feature("docstring") casadi::SXFunction::grad "

Gradient via source code transformation

";

%feature("docstring") casadi::SXFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SXFunction::clearSymbolic "

Clear the function from its symbolic representation, to free up memory, no
symbolic evaluations are possible after this.

";

%feature("docstring") casadi::SXFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SXFunction::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SXFunction::checkFwdSeed "[INTERNAL]  Check
forward mode seeds dimensions.

";

%feature("docstring") casadi::SXFunction::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SXFunction::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SXFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SXFunction::matchingAdjSeed "[INTERNAL]
Check if there are 0-by-0 reverse seeds that needs to be replaced.

";

%feature("docstring") casadi::SXFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SXFunction::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::SXFunction::inputExpr "

>  const SX& casadi::SXFunction::inputExpr(int iind) const 
------------------------------------------------------------------------

Get function input.

>  const std::vector<SX>& casadi::SXFunction::inputExpr() const 
------------------------------------------------------------------------

Get all function inputs.

";

%feature("docstring") casadi::SXFunction::callReverse "

Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::SXFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SXFunction::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SXFunction::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SXFunction::evaluate "

Evaluate.

";

%feature("docstring") casadi::SXFunction::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::SXFunction::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SXFunction::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SXFunction::derReverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out +nadj*n_out inputs and nadj*n_in
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nadj*n_out inputs correspond to adjoint seeds, one direction at a time The
nadj*n_in outputs correspond to adjoint sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SXFunction::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SXFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SXFunction::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SXFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SXFunction::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SXFunction::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SXFunction::hess "

Hessian (forward over adjoint) via source code transformation

";

%feature("docstring") casadi::SXFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SXFunction::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SXFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SXFunction::SXFunction "

>  casadi::SXFunction::SXFunction()
------------------------------------------------------------------------

Default constructor.

>  casadi::SXFunction::SXFunction(const MXFunction &f)
------------------------------------------------------------------------

Expand an MXFunction.

>  casadi::SXFunction::SXFunction(const Function &f)
------------------------------------------------------------------------

Expand an Function.

>  casadi::SXFunction::SXFunction(const std::vector< SX > &arg, const std::vector< SX > &res)

>  casadi::SXFunction::SXFunction(const std::vector< SX > &arg, const IOSchemeVector< SX > &res)

>  casadi::SXFunction::SXFunction(const IOSchemeVector< SX > &arg, const std::vector< SX > &res)
------------------------------------------------------------------------

Multiple (matrix valued) input, multiple (matrix valued) output.

>  casadi::SXFunction::SXFunction(const IOSchemeVector< SX > &arg, const IOSchemeVector< SX > &res)
------------------------------------------------------------------------

Multiple (matrix valued) input, multiple (matrix valued) output.



::

  >>> X = SX.sym(\"X\")
  >>> f = SXFunction(daeIn(x=X),daeOut(ode=X**2))
  >>> f.init()
  >>> print f
   Inputs (DAEInput: 4):
    0. (DAE_X aka 'x')   1-by-1 (dense)
    1. (DAE_Z aka 'z')   0-by-0 (dense)
    2. (DAE_P aka 'p')   0-by-0 (dense)
    3. (DAE_T aka 't')   0-by-0 (dense)
   Outputs (DAEOutput: 3):
    0. (DAE_ODE aka 'ode')   1-by-1 (dense)
    1. (DAE_ALG aka 'alg')   0-by-0 (dense)
    2. (DAE_QUAD aka 'quad')   0-by-0 (dense)
  @0 = input[0][0];
  @0 = sq(@0);
  output[0][0] = @0;
  <BLANKLINE>
  



>  casadi::SXFunction::SXFunction(const std::vector< std::vector< SXElement > > &arg, const std::vector< std::vector< SXElement > > &res)
------------------------------------------------------------------------
[INTERNAL] 
Multiple (vector valued) input, multiple (vector valued) output.

>  casadi::SXFunction::SXFunction(const SX &arg, const SX &res)
------------------------------------------------------------------------
[INTERNAL] 
Single (scalar/matrix/vector valued) input, single
(scalar/matrix/vector valued) output.

>  casadi::SXFunction::SXFunction(const std::vector< std::vector< SXElement > > &arg, const SX &res)
------------------------------------------------------------------------
[INTERNAL] 
Multiple (vector valued) input, single (scalar/vector/matrix valued)
output.

>  casadi::SXFunction::SXFunction(const std::vector< SX > &arg, const SX &res)
------------------------------------------------------------------------
[INTERNAL] 
Multiple (matrix valued) input, single (scalar/vector/matrix valued)
output.

>  casadi::SXFunction::SXFunction(const SX &arg, const std::vector< std::vector< SXElement > > &res)
------------------------------------------------------------------------
[INTERNAL] 
Single (scalar/vector/matrix valued) input, multiple (vector valued)
output.

>  casadi::SXFunction::SXFunction(const SX &arg, const std::vector< SX > &res)
------------------------------------------------------------------------
[INTERNAL] 
Single (scalar/vector/matrix valued) input, multiple (matrix valued)
output.

";

%feature("docstring") casadi::SXFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SXFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SXFunction::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SXFunction::derForward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out +nfwd*n_in inputs and nfwd*n_out
outputs. The first n_in inputs correspond to nondifferentiated inputs. The
next n_out inputs correspond to nondifferentiated outputs. and the last
nfwd*n_in inputs correspond to forward seeds, one direction at a time The
nfwd*n_out outputs correspond to forward sensitivities, one direction at a
time. * (n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SXFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SXFunction::replaceAdjSeed "[INTERNAL]
Replace 0-by-0 reverse seeds.

";

%feature("docstring") casadi::SXFunction::jac "

Jacobian via source code transformation.

See:  casadi::Jacobian for an AD approach

";

%feature("docstring") casadi::SXFunction::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SXFunction::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SXFunction::callForward "

Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::SXFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SXFunction::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SXFunction::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SXFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SXFunction::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SXFunction::setDerReverse "

Set a function that calculates nadj adjoint derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::SXFunction::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SXFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives Legacy function: Use derForward and derReverse instead.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

";

%feature("docstring") casadi::SXFunction::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SXFunction::repr "

Print a representation of the object.

";

%feature("docstring") casadi::SXFunction::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SXFunction "

Dynamically created function that can be expanded into a series of scalar
operations.

Joel Andersson

>List of available options

+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_weight    | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | derivative c |              |
|              |              |              | alculation.W |              |
|              |              |              | hen there is |              |
|              |              |              | an option of |              |
|              |              |              | either using |              |
|              |              |              | forward or   |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives, |              |
|              |              |              | the          |              |
|              |              |              | condition ad |              |
|              |              |              | _weight*nf<= |              |
|              |              |              | (1-ad_weight |              |
|              |              |              | )*na is used |              |
|              |              |              | where nf and |              |
|              |              |              | na are       |              |
|              |              |              | estimates of |              |
|              |              |              | the number   |              |
|              |              |              | of forward/r |              |
|              |              |              | everse mode  |              |
|              |              |              | directional  |              |
|              |              |              | derivatives  |              |
|              |              |              | needed. By   |              |
|              |              |              | default,     |              |
|              |              |              | ad_weight is |              |
|              |              |              | calculated a |              |
|              |              |              | utomatically |              |
|              |              |              | , but this   |              |
|              |              |              | can be       |              |
|              |              |              | overridden   |              |
|              |              |              | by setting   |              |
|              |              |              | this option. |              |
|              |              |              | In           |              |
|              |              |              | particular,  |              |
|              |              |              | 0 means      |              |
|              |              |              | forcing      |              |
|              |              |              | forward mode |              |
|              |              |              | and 1        |              |
|              |              |              | forcing      |              |
|              |              |              | reverse      |              |
|              |              |              | mode. Leave  |              |
|              |              |              | unset for    |              |
|              |              |              | (class       |              |
|              |              |              | specific)    |              |
|              |              |              | heuristics.  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_weight_sp | OT_REAL      | GenericType( | Weighting    | casadi::Func |
|              |              | )            | factor for   | tionInternal |
|              |              |              | sparsity     |              |
|              |              |              | pattern      |              |
|              |              |              | calculation  |              |
|              |              |              | calculation. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | behavior.    |              |
|              |              |              | Set to 0 and |              |
|              |              |              | 1 to force   |              |
|              |              |              | forward and  |              |
|              |              |              | reverse mode |              |
|              |              |              | respectively |              |
|              |              |              | . Cf. option |              |
|              |              |              | \"ad_weight\". |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_forwa | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| rd           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| custom_rever | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| se           | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | reverse mode |              |
|              |              |              | directional  |              |
|              |              |              | derivatives. |              |
|              |              |              | Overrides    |              |
|              |              |              | default      |              |
|              |              |              | routines.    |              |
+--------------+--------------+--------------+--------------+--------------+
| full_jacobia | OT_FUNCTION  | GenericType( | The Jacobian | casadi::Func |
| n            |              | )            | of all       | tionInternal |
|              |              |              | outputs with |              |
|              |              |              | respect to   |              |
|              |              |              | all inputs.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| just_in_time | OT_BOOLEAN   | false        | Just-in-time | casadi::SXFu |
| _opencl      |              |              | compilation  | nctionIntern |
|              |              |              | for numeric  | al           |
|              |              |              | evaluation   |              |
|              |              |              | using OpenCL |              |
|              |              |              | (experimenta |              |
|              |              |              | l)           |              |
+--------------+--------------+--------------+--------------+--------------+
| just_in_time | OT_BOOLEAN   | false        | Propagate    | casadi::SXFu |
| _sparsity    |              |              | sparsity     | nctionIntern |
|              |              |              | patterns     | al           |
|              |              |              | using just-  |              |
|              |              |              | in-time      |              |
|              |              |              | compilation  |              |
|              |              |              | to a CPU or  |              |
|              |              |              | GPU using    |              |
|              |              |              | OpenCL       |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams
--------



C++ includes: sx_function.hpp ";

%feature("docstring") casadi::SXFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SXFunction::setDerForward "

Set a function that calculates nfwd forward derivatives NOTE: Does not take
ownership, only weak references to the derivatives are kept internally.

";

%feature("docstring") casadi::SXFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SXFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SXFunction::replaceArg "[INTERNAL]  Replace
0-by-0 inputs.

";

%feature("docstring") casadi::SXFunction::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SXFunction::generateCode "

>  void casadi::Function::generateCode(const std::string &filename, bool generate_main=false)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  void casadi::Function::generateCode(std::ostream &filename, bool generate_main=false)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SXFunction::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SXFunction::generateCodeStr "

Generate C code for the function.

";

%feature("docstring") casadi::SXFunction::matchingRes "[INTERNAL]  Check if
output arguments that needs to be replaced.

";

%feature("docstring") casadi::SXFunction::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SXFunction::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SXFunction::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SXFunction::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SXFunction::getAtomicOperation "

Get an atomic operation operator index.

";

%feature("docstring") casadi::SXFunction::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SXFunction::getOutputScheme "

Get output scheme.

";


// File: classcasadi_1_1SymbolicMX.xml


// File: classcasadi_1_1SymbolicNLP.xml


/*  Symbolic representation of the NLP  */

/* Data members

*/ %feature("docstring") casadi::SymbolicNLP::parseNL "

Parse an AMPL och PyOmo NL-file.

";

%feature("docstring") casadi::SymbolicNLP::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SymbolicNLP::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SymbolicNLP "

A symbolic NLP representation.

Joel Andersson

C++ includes: symbolic_nlp.hpp ";

%feature("docstring") casadi::SymbolicNLP::print "

Print a description of the object.

";

%feature("docstring") casadi::SymbolicNLP::repr "

Print a representation of the object.

";


// File: classcasadi_1_1SymbolicOCP.xml


/*  Variables and equations  */

/* Public data members

*/

/*  Objective function terms  */

/* Terms in the objective function.

*/

/*  Symbolic modeling  */

/* Formulate an optimal control problem

*/

/*  Manipulation  */

/* Reformulate the dynamic optimization problem.

*/

/*  Import and export  */ %feature("docstring") casadi::SymbolicOCP::setMax
"

>  void casadi::SymbolicOCP::setMax(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the upper bound by name.

>  void casadi::SymbolicOCP::setMax(const SX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the upper bound(s) by expression.

";

%feature("docstring") casadi::SymbolicOCP::SymbolicOCP "

Default constructor.

";

%feature("docstring") casadi::SymbolicOCP::scaleVariables "

Scale the variables.

";

%feature("docstring") casadi::SymbolicOCP::setMin "

>  void casadi::SymbolicOCP::setMin(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the lower bound by name.

>  void casadi::SymbolicOCP::setMin(const SX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the lower bound(s) by expression.

";

%feature("docstring") casadi::SymbolicOCP::eliminate_alg "

Eliminate algebraic variables and equations transforming them into outputs.

";

%feature("docstring") casadi::SymbolicOCP::split_i "

Eliminate interdependencies amongst intermediate variables.

";

%feature("docstring") casadi::SymbolicOCP::scaleEquations "

Scale the implicit equations.

";

%feature("docstring") casadi::SymbolicOCP::derivativeStart "

>  double casadi::SymbolicOCP::derivativeStart(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) derivative value at time 0 by name.

>  std::vector<double> casadi::SymbolicOCP::derivativeStart(const SX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring") casadi::SymbolicOCP::print "

Print description.

";

%feature("docstring") casadi::SymbolicOCP::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SymbolicOCP::nominal "

>  double casadi::SymbolicOCP::nominal(const std::string &name) const 
------------------------------------------------------------------------

Get the nominal value by name.

>  std::vector<double> casadi::SymbolicOCP::nominal(const SX &var) const 
------------------------------------------------------------------------

Get the nominal value(s) by expression.

";

%feature("docstring") casadi::SymbolicOCP::setInitialGuess "

>  void casadi::SymbolicOCP::setInitialGuess(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the initial guess by name.

>  void casadi::SymbolicOCP::setInitialGuess(const SX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the initial guess(es) by expression.

";

%feature("docstring") casadi::SymbolicOCP::sanityCheck "

Check if dimensions match.

";

%feature("docstring") casadi::SymbolicOCP::setUnit "

Set the unit for a component.

";

%feature("docstring") casadi::SymbolicOCP::sort_alg "

Sort the algebraic equations and algebraic states.

";

%feature("docstring") casadi::SymbolicOCP::add_alg "

Add an algebraic equation.

";

%feature("docstring") casadi::SymbolicOCP::makeExplicit "

Transform the implicit DAE or semi-explicit DAE into an explicit ODE.

";

%feature("docstring") casadi::SymbolicOCP::der "

>  SX casadi::SymbolicOCP::der(const std::string &name) const 
------------------------------------------------------------------------

Get a derivative expression by name.

>  SX casadi::SymbolicOCP::der(const SX &var) const 
------------------------------------------------------------------------

Get a derivative expression by non-differentiated expression.

";

%feature("docstring") casadi::SymbolicOCP::generateCode "

Generate a file for numerical evaluation.

";

%feature("docstring") casadi::SymbolicOCP::add_ode "

Add an ordinary differential equation.

";

%feature("docstring") casadi::SymbolicOCP::sort_i "

Sort intermediate variables.

";

%feature("docstring") casadi::SymbolicOCP::setDerivativeStart "

>  void casadi::SymbolicOCP::setDerivativeStart(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) derivative value at time 0 by name.

>  void casadi::SymbolicOCP::setDerivativeStart(const SX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring") casadi::SymbolicOCP::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SymbolicOCP::split_dae "

Identify and separate the algebraic variables and equations in the DAE.

";

%feature("docstring") casadi::SymbolicOCP::eliminate_lterm "

Eliminate Lagrange terms from the objective function and make them
quadrature states.

";

%feature("docstring") casadi::SymbolicOCP::makeSemiExplicit "

Transform the implicit DAE to a semi-explicit DAE.

";

%feature("docstring") casadi::SymbolicOCP::eliminate_quad "

Eliminate quadrature states and turn them into ODE states.

";

%feature("docstring") casadi::SymbolicOCP::max "

>  double casadi::SymbolicOCP::max(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the upper bound by name.

>  std::vector<double> casadi::SymbolicOCP::max(const SX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the upper bound(s) by expression.

";

%feature("docstring") casadi::SymbolicOCP::parseFMI "

Import existing problem from FMI/XML

";

%feature("docstring") casadi::SymbolicOCP::add_x "

Add a new differential state

";

%feature("docstring") casadi::SymbolicOCP::setNominal "

>  void casadi::SymbolicOCP::setNominal(const std::string &name, double val)
------------------------------------------------------------------------

Set the nominal value by name.

>  void casadi::SymbolicOCP::setNominal(const SX &var, const std::vector< double > &val)
------------------------------------------------------------------------

Set the nominal value(s) by expression.

";

%feature("docstring") casadi::SymbolicOCP::add_z "

Add a new algebraic variable.

";

%feature("docstring") casadi::SymbolicOCP::add_u "

Add a new control.

";

%feature("docstring") casadi::SymbolicOCP::variable "

Access a variable by name

";

%feature("docstring") casadi::SymbolicOCP::add_p "

Add a new parameter.

";

%feature("docstring") casadi::SymbolicOCP::add_s "

Add a implicit state.

";

%feature("docstring") casadi::SymbolicOCP::repr "

Print representation.

";

%feature("docstring") casadi::SymbolicOCP::min "

>  double casadi::SymbolicOCP::min(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the lower bound by name.

>  std::vector<double> casadi::SymbolicOCP::min(const SX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the lower bound(s) by expression.

";

%feature("docstring") casadi::SymbolicOCP::generateHeader "

Generate a header file for generateCode.

";

%feature("docstring") casadi::SymbolicOCP::eliminate_i "

Eliminate intermediate variables.

";

%feature("docstring") casadi::SymbolicOCP "

A flat OCP representation.

Independent variables:
======================





::

  t:      time
  



Time-continuous variables:
==========================





::

  x:      states defined by ODE
  s:      implicitly defined states
  z:      algebraic variables
  u:      control signals
  q:      quadrature states
  i:      intermediate variables
  y:      outputs
  



Time-constant variables:
========================





::

  p:      free parameters
  



Dynamic constraints (imposed everywhere):
=========================================





::

  ODE                    \\\\dot{x} ==  ode(t, x, s, z, u, p, i)
  DAE or implicit ODE:         0 ==  dae(t, x, s, z, u, p, i, sdot)
  algebraic equations:         0 ==  alg(t, x, s, z, u, p, i)
  quadrature equations:  \\\\dot{q} == quad(t, x, s, z, u, p, i)
  intermediate equations:      i == idef(t, x, s, z, u, p, i)
  output equations:            y == ydef(t, x, s, z, u, p, i)
  



Point constraints (imposed pointwise):
======================================





::

  Initial equations:           0 == init(t, x, s, z, u, p, i, sdot)
  



Contributions to the objective function:
========================================





::

  Mayer terms:          \\\\sum {mterm_k}
  Lagrange terms:       \\\\sum {\\\\integral{mterm}}
  



Joel Andersson

C++ includes: symbolic_ocp.hpp ";

%feature("docstring") casadi::SymbolicOCP::sort_dae "

Sort the DAE and implicitly defined states.

";

%feature("docstring") casadi::SymbolicOCP::setStart "

>  void casadi::SymbolicOCP::setStart(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) value at time 0 by name.

>  void casadi::SymbolicOCP::setStart(const SX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring") casadi::SymbolicOCP::add_dae "

Add a differential-algebraic equation.

";

%feature("docstring") casadi::SymbolicOCP::addVariable "

>  void casadi::SymbolicOCP::addVariable(const std::string &name, const Variable &var)
------------------------------------------------------------------------

Add a variable.

>  SX casadi::SymbolicOCP::addVariable(const std::string &name)
------------------------------------------------------------------------

Add a new variable: returns corresponding symbolic expression.

";

%feature("docstring") casadi::SymbolicOCP::generateFunctionHeader "

Corresponding header.

";

%feature("docstring") casadi::SymbolicOCP::start "

>  double casadi::SymbolicOCP::start(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) value at time 0 by name.

>  std::vector<double> casadi::SymbolicOCP::start(const SX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring") casadi::SymbolicOCP::initialGuess "

>  double casadi::SymbolicOCP::initialGuess(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the initial guess by name.

>  std::vector<double> casadi::SymbolicOCP::initialGuess(const SX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the initial guess(es) by expression.

";

%feature("docstring") casadi::SymbolicOCP::generateMuscodDatFile "

Generate a MUSCOD-II compatible DAT file.

";

%feature("docstring") casadi::SymbolicOCP::generateFunction "

Generate code for a particular function.

";

%feature("docstring") casadi::SymbolicOCP::unit "

>  std::string casadi::SymbolicOCP::unit(const std::string &name) const 
------------------------------------------------------------------------

Get the unit for a component.

>  std::string casadi::SymbolicOCP::unit(const SX &var) const 
------------------------------------------------------------------------

Get the unit given a vector of symbolic variables (all units must be
identical)

";


// File: classcasadi_1_1SymbolicQr.xml


// File: classcasadi_1_1SymbolicSX.xml


// File: classcasadi_1_1Transpose.xml


// File: classcasadi_1_1UnaryMX.xml


// File: classcasadi_1_1UnarySX.xml


// File: classcasadi_1_1Vertcat.xml


// File: classcasadi_1_1Vertsplit.xml


// File: classcasadi_1_1WeakRef.xml
%feature("docstring") casadi::WeakRef::isNull "[INTERNAL]  Is a null
pointer?

";

%feature("docstring") casadi::WeakRef::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::WeakRef::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::WeakRef "[INTERNAL]  Weak reference type A
weak reference to a SharedObject.

Joel Andersson

C++ includes: weak_ref.hpp ";

%feature("docstring") casadi::WeakRef::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::WeakRef::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::WeakRef::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::WeakRef::shared "[INTERNAL]  Get a shared
(owning) reference.

";

%feature("docstring") casadi::WeakRef::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::WeakRef::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::WeakRef::getDescription "[INTERNAL]  Return a
string with a description (for SWIG)

";

%feature("docstring") casadi::WeakRef::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::WeakRef::WeakRef "

>  casadi::WeakRef::WeakRef(int dummy=0)
------------------------------------------------------------------------
[INTERNAL] 
Default constructor.

>  casadi::WeakRef::WeakRef(SharedObject shared)
------------------------------------------------------------------------
[INTERNAL] 
Construct from a shared object (also implicit type conversion)

";

%feature("docstring") casadi::WeakRef::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::WeakRef::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::WeakRef::init "[INTERNAL]  Initialize or re-
initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::WeakRef::isInit "[INTERNAL]  Is initialized?

";

%feature("docstring") casadi::WeakRef::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::WeakRef::makeUnique "[INTERNAL]  Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::WeakRef::alive "[INTERNAL]  Check if alive.

";

%feature("docstring") casadi::WeakRef::swap "[INTERNAL]  Swap content with
another instance.

";


// File: classcasadi_1_1Wrapper.xml
%feature("docstring") casadi::Wrapper::checkDimensions "[INTERNAL]  Check
the dimensions of the internal function after initialization.

";

%feature("docstring") casadi::Wrapper::evaluate "[INTERNAL]  Evaluate the
internal function and make it external.

";

%feature("docstring") casadi::Wrapper "[INTERNAL]  A helper class for a
Function that wrap another Function.

Joris Gillis

C++ includes: wrapper.hpp ";


// File: classcasadi_1_1XmlFile.xml


/*  Option Functionality  */ %feature("docstring") casadi::XmlFile "

XML parser Can be used for parsing XML files into CasADi data structures.

Joel Andersson
Diagrams
--------



C++ includes: xml_file.hpp ";

%feature("docstring") casadi::XmlFile::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring") casadi::XmlFile::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::XmlFile::get "

>  const SharedObjectNode* casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode* casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::XmlFile::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::XmlFile::parse "[INTERNAL] ";

%feature("docstring") casadi::XmlFile::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::XmlFile::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::XmlFile::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::XmlFile::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::XmlFile::XmlFile "";

%feature("docstring") casadi::XmlFile::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::XmlFile::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::XmlFile::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::XmlFile::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::XmlFile::isInit "

Is initialized?

";

%feature("docstring") casadi::XmlFile::getOptionNames "

Get a list of all option names.

";

%feature("docstring") casadi::XmlFile::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::XmlFile::getOptionDefault "

Get the default of a certain option.

";

%feature("docstring") casadi::XmlFile::~XmlFile "";

%feature("docstring") casadi::XmlFile::isNull "

Is a null pointer?

";

%feature("docstring") casadi::XmlFile::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::XmlFile::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::XmlFile::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::XmlFile::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::XmlFile::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::XmlFile::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::XmlFile::repr "

Print a representation of the object.

";

%feature("docstring") casadi::XmlFile::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::XmlFile::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::XmlFile::print "

Print a description of the object.

";

%feature("docstring") casadi::XmlFile::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::XmlFile::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::XmlFile::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::XmlFile::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") casadi::XmlFile::getOption "

get an option value

";

%feature("docstring") casadi::XmlFile::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") casadi::XmlFile::hasOption "

check if there is an option str

";


// File: classcasadi_1_1ZeroByZero.xml


// File: classcasadi_1_1ZeroSX.xml


// File: namespacecasadi.xml
%feature("docstring") casadi::matrixName< double > "
Get typename.

";

%feature("docstring") casadi::lrdpleOut "

>  LR_DPLEOutputIOSchemeVector<M> casadi::lrdpleOut(const std::string &arg_s0=\"\", const M &arg_m0=M())
------------------------------------------------------------------------

Output arguments of a dple solver

>Output scheme: casadi::LR_DPLEOutput (LR_DPLE_NUM_OUT = 1) [lrdpleOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LR_DPLE_Y              | y                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, diagcat     |
|                        |                        | otherwise) (Cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::inBounds "

>  bool casadi::inBounds(const std::vector< T > &v, int upper)
------------------------------------------------------------------------

Check if for each element of v holds: v_i < upper.

>  bool casadi::inBounds(const std::vector< T > &v, int lower, int upper)
------------------------------------------------------------------------

Check if for each element of v holds: lower <= v_i < upper.

";

%feature("docstring") casadi::cumsum "[INTERNAL]  cumulative sum

";

%feature("docstring") casadi::cumsum0 "[INTERNAL]  cumulative sum, starting
with zero

";

%feature("docstring") casadi::pw_lin "

t a scalar variable (e.g. time)

Create a piecewise linear function Create a piecewise linear function:

Inputs: tval vector with the the discrete values of t (monotonically
increasing) val vector with the corresponding function values (same length
as tval)

";

%feature("docstring") casadi::getSchemeSize "";

%feature("docstring") casadi::erfinv "

>  T casadi::erfinv(const T &x)
------------------------------------------------------------------------
[INTERNAL] 
 Inverse of the error function.

>  double casadi::erfinv(double x)
------------------------------------------------------------------------
[INTERNAL]  throw ()
CasADi additions.

";

%feature("docstring") casadi::complement "

Returns the list of all i in [0, size[ not found in supplied list.

The supplied vector may contain duplicates and may be non-monotonous The
supplied vector will be checked for bounds The result vector is guaranteed
to be monotonously increasing

";

%feature("docstring") casadi::dlaqge_ "[INTERNAL]  Equilibrate the system.

";

%feature("docstring") casadi::casadi_copy "[INTERNAL]  COPY: y <-x.

";

%feature("docstring") casadi::getPtr "[INTERNAL]  Get a pointer to the data
contained in the vector.

";

%feature("docstring") casadi::dpleStruct "

>  DpleVecStructIOSchemeVector<M> casadi::dpleStruct(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M())
------------------------------------------------------------------------

Structure specification of a DPLE

>Struct scheme: casadi::DpleVecStruct ( = 2) [dpleStruct]

+---------------+-------+-------------------------------------------+
|   Full name   | Short |                Description                |
+===============+=======+===========================================+
| Dple_STRUCT_A | a     | Sparsities for A_i, block diagonal form . |
+---------------+-------+-------------------------------------------+
| Dple_STRUCT_V | v     | Sparsities for V_i, block diagonal form . |
+---------------+-------+-------------------------------------------+

";

%feature("docstring") casadi::profileWriteEntry "[INTERNAL] ";

%feature("docstring") casadi::gradFIn "

>  GradFInputIOSchemeVector<M> casadi::gradFIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of an NLP objective gradient function

>Input scheme: casadi::GradFInput (GRADF_NUM_IN = 2) [gradFIn]

+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| GRADF_X   | x     | Decision variable . |
+-----------+-------+---------------------+
| GRADF_P   | p     | Fixed parameter .   |
+-----------+-------+---------------------+

";

%feature("docstring") casadi::eig_symbolic "

Attempts to find the eigenvalues of a symbolic matrix This will only work
for up to 3x3 matrices.

";

%feature("docstring") casadi::ProfilingType< ProfilingData_SOURCE > "
[INTERNAL] ";

%feature("docstring") casadi::lrdpleIn "

>  LR_DPLEInputIOSchemeVector<M> casadi::lrdpleIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M())
------------------------------------------------------------------------

Input arguments of a dple solver

>Input scheme: casadi::LR_DPLEInput (LR_DPLE_NUM_IN = 4) [lrdpleIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LR_DPLE_A              | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | diagcat otherwise) .   |
+------------------------+------------------------+------------------------+
| LR_DPLE_V              | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | diagcat otherwise) .   |
+------------------------+------------------------+------------------------+
| LR_DPLE_C              | c                      | C matrix .             |
+------------------------+------------------------+------------------------+
| LR_DPLE_H              | h                      | H matrix: horizontal   |
|                        |                        | stack of all Hi .      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::daeIn "

>  DAEInputIOSchemeVector<M> casadi::daeIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M())
------------------------------------------------------------------------

Input arguments of an ODE/DAE function

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 4) [daeIn]

+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

";

%feature("docstring") casadi::sdpOut "

>  SDPOutputIOSchemeVector<M> casadi::sdpOut(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M(), const std::string &arg_s6=\"\", const M &arg_m6=M())
------------------------------------------------------------------------

Output arguments of an SDP Solver

>Output scheme: casadi::SDPOutput (SDP_SOLVER_NUM_OUT = 7) [sdpOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_X           | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_P           | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL        | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_COST        | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL_COST   | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_A       | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_X       | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::integratorIn "

>  IntegratorInputIOSchemeVector<M> casadi::integratorIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M())
------------------------------------------------------------------------

Input arguments of an integrator

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 6) [integratorIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::expand "

Expand the expression as a weighted sum (with constant weights)

";

%feature("docstring") casadi::profileWriteSourceLine "[INTERNAL] ";

%feature("docstring") casadi::erf "[INTERNAL]  throw ()";

%feature("docstring") casadi::ProfilingType< ProfilingData_NAME > "
[INTERNAL] ";

%feature("docstring") casadi::isDecreasing "

Check if the vector is strictly decreasing.

";

%feature("docstring") casadi::range "

>  std::vector<int> casadi::range(int start, int stop, int step=1, int len=std::numeric_limits< int >::max())
------------------------------------------------------------------------
[INTERNAL] 
Range function.

Parameters:
-----------

start:

stop:

step:

len:  Consider a infinitely long list [start, start+step, start+2*step, ...]
Elements larger than or equal to stop are chopped off.

>  std::vector<int> casadi::range(int stop)
------------------------------------------------------------------------
[INTERNAL] 
Range function.

Parameters:
-----------

stop:

list [0, 1, 2...stop-1]

";

%feature("docstring") casadi::constpow "[INTERNAL]  CasADi additions.

";

%feature("docstring") casadi::reverse "[INTERNAL]  Reverse a list.

";

%feature("docstring") casadi::profileWriteName "[INTERNAL] ";

%feature("docstring") casadi::cleOut "

>  CLEOutputIOSchemeVector<M> casadi::cleOut(const std::string &arg_s0=\"\", const M &arg_m0=M())
------------------------------------------------------------------------

Output arguments of a cle solver

>Output scheme: casadi::CLEOutput (CLE_NUM_OUT = 1) [cleOut]

+-----------+-------+-------------------+
| Full name | Short |    Description    |
+===========+=======+===================+
| CLE_P     | p     | Lyapunov matrix . |
+-----------+-------+-------------------+

";

%feature("docstring") casadi::ProfilingType< ProfilingData_EXIT > "
[INTERNAL] ";

%feature("docstring") casadi::jacobianTimesVector "

Calculate the Jacobian and multiply by a vector from the right This is
equivalent to mul(jacobian(ex, arg), v) or mul(jacobian(ex, arg).T, v) for
transpose_jacobian set to false and true respectively. If contrast to these
expressions, it will use directional derivatives which is typically (but not
necessarily) more efficient if the complete Jacobian is not needed and v has
few rows.

";

%feature("docstring") casadi::casadi_scal "[INTERNAL]  SCAL: x <- alpha*x.

";

%feature("docstring") casadi::getFree "

Get all the free variables in an expression.

";

%feature("docstring") casadi::logic_not "

Logical not, returns (an expression evaluating to) 1 if expression is zero
and 0 otherwise.

";

%feature("docstring") casadi::socpIn "

>  SOCPInputIOSchemeVector<M> casadi::socpIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M(), const std::string &arg_s6=\"\", const M &arg_m6=M(), const std::string &arg_s7=\"\", const M &arg_m7=M(), const std::string &arg_s8=\"\", const M &arg_m8=M(), const std::string &arg_s9=\"\", const M &arg_m9=M())
------------------------------------------------------------------------

Input arguments of a SOCP problem

>Input scheme: casadi::SOCPInput (SOCP_SOLVER_NUM_IN = 10) [socpIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_G          | g                      | The horizontal stack   |
|                        |                        | of all matrices Gi: (  |
|                        |                        | n x N) .               |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_H          | h                      | The vertical stack of  |
|                        |                        | all vectors hi: ( N x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_E          | e                      | The horizontal stack   |
|                        |                        | of all vectors ei: ( n |
|                        |                        | x m) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_F          | f                      | The vertical stack of  |
|                        |                        | all scalars fi: ( m x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::lrdleOut "

>  LR_DLEOutputIOSchemeVector<M> casadi::lrdleOut(const std::string &arg_s0=\"\", const M &arg_m0=M())
------------------------------------------------------------------------

Output arguments of a dle solver

>Output scheme: casadi::LR_DLEOutput (LR_DLE_NUM_OUT = 1) [lrdleOut]

+-----------+-------+---------------------------------+
| Full name | Short |           Description           |
+===========+=======+=================================+
| LR_DLE_Y  | y     | Y matrix, block diagonal form . |
+-----------+-------+---------------------------------+

";

%feature("docstring") casadi::repr "[INTERNAL]  Print representation.

";

%feature("docstring") casadi::ramp "

ramp function

\\\\[ \\\\begin {cases} R(x) = 0 & x <= 1 \\\\\\\\ R(x) = x & x > 1 \\\\\\\\
\\\\end {cases} \\\\]

Also called: slope function

";

%feature("docstring") casadi::tangent "

>  MX casadi::tangent(const MX &ex, const MX &arg)
------------------------------------------------------------------------

Create a parent MX on which all given MX's will depend.

In some sense, this function is the inverse of

Parameters:
-----------

deps:  Must all be symbolic matrices.

>  SX casadi::tangent(const SX &ex, const SX &arg)
------------------------------------------------------------------------

Evaluate an SX graph numerically Note: this is not efficient. For critical
parts (loops) of your code, always use SXFunction.

";

%feature("docstring") casadi::jacobian "

>  MX casadi::jacobian(const MX &ex, const MX &arg)
------------------------------------------------------------------------

Calculate jacobian via source code transformation.

Uses casadi::MXFunction::jac

>  SX casadi::jacobian(const SX &ex, const SX &arg)
------------------------------------------------------------------------

Calculate jacobian via source code transformation.

Uses casadi::SXFunction::jac

";

%feature("docstring") casadi::hash_combine "

>  void casadi::hash_combine(std::size_t &seed, T v)

>  void casadi::hash_combine(std::size_t &seed, const std::vector< int > &v)
------------------------------------------------------------------------
[INTERNAL] 
Generate a hash value incrementally (function taken from boost)

>  void casadi::hash_combine(std::size_t &seed, const int *v, int sz)
------------------------------------------------------------------------
[INTERNAL] 
Generate a hash value incrementally, array.

";

%feature("docstring") casadi::logic_or "

Logical or, returns (an expression evaluating to) 1 if at least one
expression is nonzero and 0 otherwise.

";

%feature("docstring") casadi::cleIn "

>  CLEInputIOSchemeVector<M> casadi::cleIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of a cle solver

>Input scheme: casadi::CLEInput (CLE_NUM_IN = 2) [cleIn]

+-----------+-------+-------------+
| Full name | Short | Description |
+===========+=======+=============+
| CLE_A     | a     | A matrix .  |
+-----------+-------+-------------+
| CLE_V     | v     | V matrix .  |
+-----------+-------+-------------+

";

%feature("docstring") casadi::heaviside "

Heaviside function.

\\\\[ \\\\begin {cases} H(x) = 0 & x<0 \\\\\\\\ H(x) = 1/2 & x=0 \\\\\\\\
H(x) = 1 & x>0 \\\\\\\\ \\\\end {cases} \\\\]

";

%feature("docstring") casadi::if_else_zero "[INTERNAL]  Conditional
assignment.

";

%feature("docstring") casadi::spy "

Get the sparsity pattern of a matrix.

";

%feature("docstring") casadi::substitute "

>  MX casadi::substitute(const MX &ex, const MX &v, const MX &vdef)

>  SX casadi::substitute(const SX &ex, const SX &v, const SX &vdef)
------------------------------------------------------------------------

Substitute variable v with expression vdef in an expression ex.

>  std::vector<MX> casadi::substitute(const std::vector< MX > &ex, const std::vector< MX > &v, const std::vector< MX > &vdef)

>  std::vector<SX> casadi::substitute(const std::vector< SX > &ex, const std::vector< SX > &v, const std::vector< SX > &vdef)
------------------------------------------------------------------------

Substitute variable var with expression expr in multiple expressions.

";

%feature("docstring") casadi::profileWriteTime "[INTERNAL] ";

%feature("docstring") casadi::nlpSolverIn "

>  NlpSolverInputIOSchemeVector<M> casadi::nlpSolverIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M(), const std::string &arg_s6=\"\", const M &arg_m6=M(), const std::string &arg_s7=\"\", const M &arg_m7=M())
------------------------------------------------------------------------

Input arguments of an NLP Solver

>Input scheme: casadi::NlpSolverInput (NLP_SOLVER_NUM_IN = 8) [nlpSolverIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::sdqpStruct "

>  SDQPStructIOSchemeVector<M> casadi::sdqpStruct(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M())
------------------------------------------------------------------------

Structure specification of an SDQP

>Struct scheme: casadi::SDQPStruct ( = 4) [sdqpStruct]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_STRUCT_H          | h                      | The matrix H: sparse ( |
|                        |                        | n x n) .               |
+------------------------+------------------------+------------------------+
| SDQP_STRUCT_F          | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDQP_STRUCT_G          | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_STRUCT_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::makeVector "[INTERNAL]  Make a vector of a
certain length with its entries specified Usage C++:
makeVector<ClassName>(LENGTH, ENTRY_INDEX_1, ENTRY_VALUE_1, ENTRY_INDEX_2,
ENTRY_VALUE_2, ...) Usage Python: makeVector(ClassName,(LENGTH,
ENTRY_INDEX_1, ENTRY_VALUE_1, ENTRY_INDEX_2, ENTRY_VALUE_2 ...)

";

%feature("docstring") casadi::rdaeIn "

>  RDAEInputIOSchemeVector<M> casadi::rdaeIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M(), const std::string &arg_s6=\"\", const M &arg_m6=M())
------------------------------------------------------------------------

Input arguments of an ODE/DAE backward integration function

>Input scheme: casadi::RDAEInput (RDAE_NUM_IN = 7) [rdaeIn]

+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

";

%feature("docstring") casadi::dependsOn "

>  bool casadi::dependsOn(const SX &f, const SX &arg)
------------------------------------------------------------------------

Check if expression depends on the argument The argument must be symbolic.

>  bool casadi::dependsOn(const MX &ex, const std::vector< MX > &arg)
------------------------------------------------------------------------

Check if expression depends on any of the arguments The arguments must be
symbolic.

";

%feature("docstring") casadi::check_exposed "[INTERNAL] ";

%feature("docstring") casadi::sdqpIn "

>  SDQPInputIOSchemeVector<M> casadi::sdqpIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M(), const std::string &arg_s6=\"\", const M &arg_m6=M(), const std::string &arg_s7=\"\", const M &arg_m7=M(), const std::string &arg_s8=\"\", const M &arg_m8=M())
------------------------------------------------------------------------

Input arguments of a SDQP problem

>Input scheme: casadi::SDQPInput (SDQP_SOLVER_NUM_IN = 9) [sdqpIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_H          | h                      | The matrix H: sparse ( |
|                        |                        | n x n) .               |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_F          | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_G          | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::triangle "

triangle function

\\\\[ \\\\begin {cases} \\\\Lambda(x) = 0 & |x| >= 1 \\\\\\\\ \\\\Lambda(x)
= 1-|x| & |x| < 1 \\\\end {cases} \\\\]

";

%feature("docstring") casadi::graph_substitute "

>  MX casadi::graph_substitute(const MX &ex, const std::vector< MX > &v, const std::vector< MX > &vdef)
------------------------------------------------------------------------

Substitute variable v with expression vdef in an expression ex, preserving
nodes.

>  std::vector<MX> casadi::graph_substitute(const std::vector< MX > &ex, const std::vector< MX > &v, const std::vector< MX > &vdef)
------------------------------------------------------------------------

Substitute variable var with expression expr in multiple expressions,
preserving nodes.

";

%feature("docstring") casadi::read_matlab "

>  void casadi::read_matlab(std::istream &stream, std::vector< T > &v)
------------------------------------------------------------------------

Read vector, matlab style.

>  void casadi::read_matlab(std::ifstream &file, std::vector< std::vector< T > > &v)
------------------------------------------------------------------------

Read matrix, matlab style.

";

%feature("docstring") casadi::write_matlab "

>  void casadi::write_matlab(std::ostream &stream, const std::vector< T > &v)
------------------------------------------------------------------------

Print vector, matlab style.

>  void casadi::write_matlab(std::ostream &stream, const std::vector< std::vector< T > > &v)
------------------------------------------------------------------------

Print matrix, matlab style.

";

%feature("docstring") casadi::isinf "[INTERNAL]  throw () Sign function,
note that sign(nan) == nan.

";

%feature("docstring") casadi::hash_sparsity "

>  std::size_t casadi::hash_sparsity(int nrow, int ncol, const std::vector< int > &colind, const std::vector< int > &row)
------------------------------------------------------------------------
[INTERNAL] 
Hash a sparsity pattern.

>  std::size_t casadi::hash_sparsity(int nrow, int ncol, const int *colind, const int *row)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::applymap "[INTERNAL]  Apply a function f to
each element in a vector

";

%feature("docstring") casadi::isStrictlyMonotone "

Check if the vector is strictly monotone.

";

%feature("docstring") casadi::casadi_asum "[INTERNAL]  ASUM: ||x||_1 ->
return.

";

%feature("docstring") casadi::simpleIntegrator "

Simplified wrapper for the Integrator class Constructs an integrator using
the same syntax as simpleRK and simpleIRK. The constructed function (which
is of type MXFunction), has three inputs, corresponding to initial state
(x0), parameter (p) and integration time (h) and one output, corresponding
to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

scheme:  Collocation scheme, as excepted by collocationPoints function.

";

%feature("docstring") casadi::poly_roots "

Attempts to find the roots of a polynomial.

This will only work for polynomials up to order 3 It is assumed that the
roots are real.

";

%feature("docstring") casadi::isMonotone "

Check if the vector is monotone.

";

%feature("docstring") casadi::dormqr_ "[INTERNAL]  Multiply right hand side
with Q-transpose (lapack)

";

%feature("docstring") casadi::sign "[INTERNAL]  Sign function, note that
sign(nan) == nan.

";

%feature("docstring") casadi::isRegular "

Checks if vector does not contain NaN or Inf.

";

%feature("docstring") casadi::jacGIn "

>  JacGInputIOSchemeVector<M> casadi::jacGIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of an NLP Jacobian function

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 2) [jacGIn]

+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

";

%feature("docstring") casadi::sdpIn "

>  SDPInputIOSchemeVector<M> casadi::sdpIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M(), const std::string &arg_s6=\"\", const M &arg_m6=M(), const std::string &arg_s7=\"\", const M &arg_m7=M())
------------------------------------------------------------------------

Input arguments of a SDP problem

>Input scheme: casadi::SDPInput (SDP_SOLVER_NUM_IN = 8) [sdpIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_F           | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_C           | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_G           | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_A           | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBA         | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBA         | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBX         | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBX         | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::printme "[INTERNAL]  CasADi additions.

";

%feature("docstring") casadi::rdaeOut "

>  RDAEOutputIOSchemeVector<M> casadi::rdaeOut(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M())
------------------------------------------------------------------------

Output arguments of an ODE/DAE backward integration function

>Output scheme: casadi::RDAEOutput (RDAE_NUM_OUT = 3) [rdaeOut]

+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring") casadi::dgeequ_ "[INTERNAL]  Calculate col and row
scaling.

";

%feature("docstring") casadi::lookupvector "

Returns a vector for quickly looking up entries of supplied list.

lookupvector[i]!=-1 <=> v contains i v[lookupvector[i]] == i <=> v contains
i

Duplicates are treated by looking up last occurrence

";

%feature("docstring") casadi::ProfilingType< ProfilingData_IO > " [INTERNAL]
";

%feature("docstring") casadi::mtaylor "

>  SX casadi::mtaylor(const SX &ex, const SX &x, const SX &a, int order=1)
------------------------------------------------------------------------

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

>  SX casadi::mtaylor(const SX &ex, const SX &x, const SX &a, int order, const std::vector< int > &order_contributions)
------------------------------------------------------------------------

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

The argument order_contributions can denote how match each variable
contributes to the aggregated order. If x=[x, y] and order_contributions=[1,
2], then the aggregated order of $x^n y^m$ equals $1n+2m$.

Example usage

$ \\\\sin(b+a)+\\\\cos(b+a)(x-a)+\\\\cos(b+a)(y-b) $ $ y+x-(x^3+3y x^2+3 y^2
x+y^3)/6 $ $ (-3 x^2 y-x^3)/6+y+x $

";

%feature("docstring") casadi::getRealTime "[INTERNAL]  Returns the real
time, in seconds, or -1.0 if an error occurred.

Time is measured since an arbitrary and OS-dependent start time. The
returned real time is only useful for computing an elapsed time between two
calls to this function.

";

%feature("docstring") casadi::taylor "

univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



";

%feature("docstring") casadi::integratorOut "

>  IntegratorOutputIOSchemeVector<M> casadi::integratorOut(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M())
------------------------------------------------------------------------

Output arguments of an integrator

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 6) [integratorOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::dleOut "

>  DLEOutputIOSchemeVector<M> casadi::dleOut(const std::string &arg_s0=\"\", const M &arg_m0=M())
------------------------------------------------------------------------

Output arguments of a dle solver

>Output scheme: casadi::DLEOutput (DLE_NUM_OUT = 1) [dleOut]

+-----------+-------+-------------+
| Full name | Short | Description |
+===========+=======+=============+
| DLE_P     | p     | P matrix .  |
+-----------+-------+-------------+

";

%feature("docstring") casadi::operation_checker "[INTERNAL] ";

%feature("docstring") casadi::controldaeIn "

>  ControlledDAEInputIOSchemeVector<M> casadi::controldaeIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M(), const std::string &arg_s6=\"\", const M &arg_m6=M(), const std::string &arg_s7=\"\", const M &arg_m7=M(), const std::string &arg_s8=\"\", const M &arg_m8=M())
------------------------------------------------------------------------

Input arguments of an ODE/DAE function

>Input scheme: casadi::ControlledDAEInput (CONTROL_DAE_NUM_IN = 9) [controldaeIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROL_DAE_T          | t                      | Global physical time.  |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X          | x                      | State vector           |
|                        |                        | (dimension nx-by-1).   |
|                        |                        | Should have the same   |
|                        |                        | amount of non-zeros as |
|                        |                        | DAEOutput:DAE_RES      |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_Z          | z                      | Algebraic state vector |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_P          | p                      | Parameter vector       |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U          | u                      | Control vector         |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U_INTERP   | u_interp               | Control vector,        |
|                        |                        | linearly interpolated  |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X_MAJOR    | x_major                | State vector           |
|                        |                        | (dimension nx-by-1) at |
|                        |                        | the last major time-   |
|                        |                        | step .                 |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_T0         | t0                     | Time at start of       |
|                        |                        | control interval       |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_TF         | tf                     | Time at end of control |
|                        |                        | interval (1-by-1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::toVector "[INTERNAL] ";

%feature("docstring") casadi::hessLagOut "

>  HessLagOutputIOSchemeVector<M> casadi::hessLagOut(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M())
------------------------------------------------------------------------

Output arguments of an NLP Hessian function

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 5) [hessLagOut]

+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") casadi::getSchemeName "";

%feature("docstring") casadi::twice "[INTERNAL] ";

%feature("docstring") casadi::getcopy "[INTERNAL]  Make a deep copy of an
object (Note: default is a shallow copy!)

";

%feature("docstring") casadi::dleStruct "

>  DleStructIOSchemeVector<M> casadi::dleStruct(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M())
------------------------------------------------------------------------

Structure specification of a DLE

>Struct scheme: casadi::DleStruct ( = 2) [dleStruct]

+--------------+-------+----------------+
|  Full name   | Short |  Description   |
+==============+=======+================+
| Dle_STRUCT_A | a     | The matrix A . |
+--------------+-------+----------------+
| Dle_STRUCT_V | v     | The matrix V . |
+--------------+-------+----------------+

";

%feature("docstring") casadi::dpleIn "

>  DPLEInputIOSchemeVector<M> casadi::dpleIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of a dple solver

>Input scheme: casadi::DPLEInput (DPLE_NUM_IN = 2) [dpleIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_A                 | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | diagcat otherwise) .   |
+------------------------+------------------------+------------------------+
| DPLE_V                 | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | diagcat otherwise) .   |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::qcqpOut "

>  QcqpSolverOutputIOSchemeVector<M> casadi::qcqpOut(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M())
------------------------------------------------------------------------

Output arguments of an QP Solver

>Output scheme: casadi::QcqpSolverOutput (QCQP_SOLVER_NUM_OUT = 4) [qcqpOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_X          | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_COST       | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::profileWriteExit "[INTERNAL] ";

%feature("docstring") casadi::deepcopy "[INTERNAL]  Make a deep copy of an
object (Note: default is a shallow copy!)

";

%feature("docstring") casadi::solve "

>  Matrix<DataType> casadi::solve(const Matrix< DataType > &A, const Matrix< DataType > &b)
------------------------------------------------------------------------

Solve a system of equations: A*x = b The solve routine works similar to
Matlab's backslash when A is square and nonsingular. The algorithm used is
the following:

A simple forward or backward substitution if A is upper or lower triangular

If the linear system is at most 3-by-3, form the inverse via minor expansion
and multiply

Permute the variables and equations as to get a (structurally) nonzero
diagonal, then perform a QR factorization without pivoting and solve the
factorized system.

Note 1: If there are entries of the linear system known to be zero, these
will be removed. Elements that are very small, or will evaluate to be zero,
can still cause numerical errors, due to the lack of pivoting (which is not
possible since cannot compare the size of entries)

Note 2: When permuting the linear system, a BLT (block lower triangular)
transformation is formed. Only the permutation part of this is however used.
An improvement would be to solve block-by-block if there are multiple BLT
blocks.

>  Matrix<double> casadi::solve(const Matrix< double > &A, const Matrix< double > &b, const std::string &lsolver, const Dictionary &dict=Dictionary())

>  MX casadi::solve(const MX &A, const MX &b, const std::string &lsolver=\"symbolicqr\", const Dictionary &dict=Dictionary())
------------------------------------------------------------------------

Solve a system of equations: A*x = b.

";

%feature("docstring") casadi::hnlpIn "

>  HNLPInputIOSchemeVector<M> casadi::hnlpIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M())
------------------------------------------------------------------------

Input arguments of an Homotopy NLP function

>Input scheme: casadi::HNLPInput (HNL_NUM_IN = 3) [hnlpIn]

+-----------+-------+----------------------+
| Full name | Short |     Description      |
+===========+=======+======================+
| HNL_X     | x     | Decision variable .  |
+-----------+-------+----------------------+
| HNL_P     | p     | Fixed parameter .    |
+-----------+-------+----------------------+
| HNL_TAU   | tau   | Homotopy parameter . |
+-----------+-------+----------------------+

";

%feature("docstring") casadi::iszero "[INTERNAL]  Check if entry is zero
(false negative allowed)

";

%feature("docstring") casadi::casadi_mv_t "[INTERNAL]  Sparse matrix-vector
multiplication, first factor transposed: z <- z + trans(x)*y.

";

%feature("docstring") casadi::lrdpleStruct "

>  LrDpleVecStructIOSchemeVector<M> casadi::lrdpleStruct(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M())
------------------------------------------------------------------------

Structure specification of a DPLE

>Struct scheme: casadi::LrDpleVecStruct ( = 4) [lrdpleStruct]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LR_Dple_STRUCT_A       | a                      | Sparsities for A_i,    |
|                        |                        | block diagonal form .  |
+------------------------+------------------------+------------------------+
| LR_Dple_STRUCT_V       | v                      | Sparsities for V_i,    |
|                        |                        | block diagonal form .  |
+------------------------+------------------------+------------------------+
| LR_Dple_STRUCT_C       | c                      | Sparsities for C_i     |
|                        |                        | (defaults to unity),   |
|                        |                        | block diagonal form .  |
+------------------------+------------------------+------------------------+
| LR_Dple_STRUCT_H       | h                      | Sparsities for H_i     |
|                        |                        | (defaults to unity),   |
|                        |                        | block diagonal form .  |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::hessian "

>  MX casadi::hessian(const MX &ex, const MX &arg)

>  void casadi::hessian(const MX &ex, const MX &arg, MX &H, MX &g)
------------------------------------------------------------------------

Create a parent MX on which all given MX's will depend.

In some sense, this function is the inverse of

Parameters:
-----------

deps:  Must all be symbolic matrices.

>  SX casadi::hessian(const SX &ex, const SX &arg)

>  void casadi::hessian(const SX &ex, const SX &arg, SX &H, SX &g)
------------------------------------------------------------------------

Evaluate an SX graph numerically Note: this is not efficient. For critical
parts (loops) of your code, always use SXFunction.

";

%feature("docstring") casadi::isIncreasing "

Check if the vector is strictly increasing.

";

%feature("docstring") casadi::qpOut "

>  QpSolverOutputIOSchemeVector<M> casadi::qpOut(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M())
------------------------------------------------------------------------

Output arguments of an QP Solver

>Output scheme: casadi::QpSolverOutput (QP_SOLVER_NUM_OUT = 4) [qpOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::norm_1 "[INTERNAL] ";

%feature("docstring") casadi::acosh "[INTERNAL]  throw () Sign function,
note that sign(nan) == nan.

";

%feature("docstring") casadi::createParent "

>  MX casadi::createParent(std::vector< MX > &deps)
------------------------------------------------------------------------

Create a parent MX on which all given MX's will depend.

In some sense, this function is the inverse of

Parameters:
-----------

deps:  Must all be symbolic matrices.

>  MX casadi::createParent(const std::vector< MX > &deps, std::vector< MX > &output_children)

>  MX casadi::createParent(const std::vector< Sparsity > &deps, std::vector< MX > &output_children)
------------------------------------------------------------------------

Create a parent MX on which a bunch of MX's (sizes given as argument) will
depend.

";

%feature("docstring") casadi::ptrVec "[INTERNAL]  Convenience function,
convert vectors to vectors of pointers.

";

%feature("docstring") casadi::dtrsm_ "[INTERNAL]   Solve upper triangular
system (lapack)

";

%feature("docstring") casadi::casadi_axpy "[INTERNAL]  AXPY: y <- a*x + y.

";

%feature("docstring") casadi::sq "[INTERNAL] ";

%feature("docstring") casadi::gradient "

>  MX casadi::gradient(const MX &ex, const MX &arg)
------------------------------------------------------------------------

Create a parent MX on which all given MX's will depend.

In some sense, this function is the inverse of

Parameters:
-----------

deps:  Must all be symbolic matrices.

>  SX casadi::gradient(const SX &ex, const SX &arg)
------------------------------------------------------------------------

Evaluate an SX graph numerically Note: this is not efficient. For critical
parts (loops) of your code, always use SXFunction.

";

%feature("docstring") casadi::lpOut "

>  LpSolverOutputIOSchemeVector<M> casadi::lpOut(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M())
------------------------------------------------------------------------

Output arguments of an LP Solver

>Output scheme: casadi::LpSolverOutput (LP_SOLVER_NUM_OUT = 4) [lpOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| LP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::cleStruct "

>  CleStructIOSchemeVector<M> casadi::cleStruct(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M())
------------------------------------------------------------------------

Structure specification of a CLE

>Struct scheme: casadi::CleStruct ( = 3) [cleStruct]

+--------------+-------+------------------------------------+
|  Full name   | Short |            Description             |
+==============+=======+====================================+
| Cle_STRUCT_A | a     | The matrix A .                     |
+--------------+-------+------------------------------------+
| Cle_STRUCT_V | v     | The matrix V .                     |
+--------------+-------+------------------------------------+
| Cle_STRUCT_C | c     | The matrix C (defaults to unity) . |
+--------------+-------+------------------------------------+

";

%feature("docstring") casadi::ProfilingType< ProfilingData_ENTRY > "
[INTERNAL] ";

%feature("docstring") casadi::lrdleIn "

>  LR_DLEInputIOSchemeVector<M> casadi::lrdleIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M())
------------------------------------------------------------------------

Input arguments of a dle solver

>Input scheme: casadi::LR_DLEInput (LR_DLE_NUM_IN = 4) [lrdleIn]

+-----------+-------+----------------------------------------+
| Full name | Short |              Description               |
+===========+=======+========================================+
| LR_DLE_A  | a     | A matrix .                             |
+-----------+-------+----------------------------------------+
| LR_DLE_V  | v     | V matrix .                             |
+-----------+-------+----------------------------------------+
| LR_DLE_C  | c     | C matrix .                             |
+-----------+-------+----------------------------------------+
| LR_DLE_H  | h     | H matrix: horizontal stack of all Hi . |
+-----------+-------+----------------------------------------+

";

%feature("docstring") casadi::jacGOut "

>  JacGOutputIOSchemeVector<M> casadi::jacGOut(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M())
------------------------------------------------------------------------

Output arguments of an NLP Jacobian function

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 3) [jacGOut]

+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") casadi::atanh "[INTERNAL]  throw () Sign function,
note that sign(nan) == nan.

";

%feature("docstring") casadi::casadi_iamax "[INTERNAL]  IAMAX: index
corresponding to the entry with the largest absolute value.

";

%feature("docstring") casadi::slicot_mb03wd "[INTERNAL] ";

%feature("docstring") casadi::inner_prod "[INTERNAL] ";

%feature("docstring") casadi::getSchemeEntryNames "";

%feature("docstring") casadi::simpleIRK "

Construct an implicit Runge-Kutta integrator using a collocation scheme The
constructed function (which is of type MXFunction), has three inputs,
corresponding to initial state (x0), parameter (p) and integration time (h)
and one output, corresponding to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

scheme:  Collocation scheme, as excepted by collocationPoints function.

";

%feature("docstring") casadi::hasNegative "

Check if the vector has negative entries.

";

%feature("docstring") casadi::hessLagIn "

>  HessLagInputIOSchemeVector<M> casadi::hessLagIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M())
------------------------------------------------------------------------

Input arguments of an NLP Hessian function

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 4) [hessLagIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::lpIn "

>  LpSolverInputIOSchemeVector<M> casadi::lpIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M())
------------------------------------------------------------------------

Input arguments of a LP problem

>Input scheme: casadi::LpSolverInput (LP_SOLVER_NUM_IN = 6) [lpIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_C            | c                      | The vector c: dense (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| LP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::daeOut "

>  DAEOutputIOSchemeVector<M> casadi::daeOut(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M())
------------------------------------------------------------------------

Output arguments of an DAE function

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 3) [daeOut]

+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

";

%feature("docstring") casadi::logic_and "

Logical and, returns (an expression evaluating to) 1 if both expressions are
nonzero and 0 otherwise.

";

%feature("docstring") casadi::getSchemeEntryDoc "";

%feature("docstring") casadi::collocationInterpolators "[INTERNAL]  Obtain
collocation interpolating matrices.

Parameters:
-----------

tau_root:  location of collocation points, as obtained from
collocationPoints

C:  interpolating coefficients to obtain derivatives Length: order+1, order
+ 1



::

dX/dt @collPoint(j) ~ Sum_i C[j][i]*X@collPoint(i)



Parameters:
-----------

D:  interpolating coefficients to obtain end state Length: order+1

";

%feature("docstring") casadi::fmax "[INTERNAL]  throw () Sign function,
note that sign(nan) == nan.

";

%feature("docstring") casadi::matrixName "

Get typename.

";

%feature("docstring") casadi::getOperatorRepresentation "

>  std::string casadi::getOperatorRepresentation(const MX &xb, const std::vector< std::string > &args)
------------------------------------------------------------------------

Get a string representation for a binary MX, using custom arguments.

>  std::string casadi::getOperatorRepresentation(const SX &x, const std::vector< std::string > &args)
------------------------------------------------------------------------

Get a string representation for a binary SX, using custom arguments.

";

%feature("docstring") casadi::slicot_periodic_schur "[INTERNAL] ";

%feature("docstring") casadi::casadi_nrm2 "[INTERNAL]  NRM2: ||x||_2 ->
return.

";

%feature("docstring") casadi::evalf "

>  Matrix<double> casadi::evalf(const SX &ex)
------------------------------------------------------------------------

Evaluate an SX graph numerically Note: this is not efficient. For critical
parts (loops) of your code, always use SXFunction.

>  Matrix<double> casadi::evalf(const SX &ex, const SX &v, const Matrix< double > &vdef)
------------------------------------------------------------------------

Substitute variable v with value vdef in an expression ex, and evaluate
numerically Note: this is not efficient. For critical parts (loops) of your
code, always use SXFunction.

";

%feature("docstring") casadi::rectangle "

rectangle function

\\\\[ \\\\begin {cases} \\\\Pi(x) = 1 & |x| < 1/2 \\\\\\\\ \\\\Pi(x) = 1/2 &
|x| = 1/2 \\\\\\\\ \\\\Pi(x) = 0 & |x| > 1/2 \\\\\\\\ \\\\end {cases} \\\\]

Also called: gate function, block function, band function, pulse function,
window function

";

%feature("docstring") casadi::sdqpOut "

>  SDQPOutputIOSchemeVector<M> casadi::sdqpOut(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M(), const std::string &arg_s6=\"\", const M &arg_m6=M())
------------------------------------------------------------------------

Output arguments of an SDQP Solver

>Output scheme: casadi::SDQPOutput (SDQP_SOLVER_NUM_OUT = 7) [sdqpOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_P          | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL       | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL_COST  | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::matrixName< SXElement > " [INTERNAL] ";

%feature("docstring") casadi::slicot_mb03vy "[INTERNAL] ";

%feature("docstring") casadi::getSymbols "

>  SX casadi::getSymbols(const SX &e)
------------------------------------------------------------------------

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:   SXFunction::getFree()

>  std::vector<MX> casadi::getSymbols(const MX &e)

>  std::vector<MX> casadi::getSymbols(const std::vector< MX > &e)
------------------------------------------------------------------------

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:   MXFunction::getFree()

";

%feature("docstring") casadi::pw_const "

Create a piecewise constant function Create a piecewise constant function
with n=val.size() intervals.

Inputs:

Parameters:
-----------

t:  a scalar variable (e.g. time)

tval:  vector with the discrete values of t at the interval transitions
(length n-1)

val:  vector with the value of the function for each interval (length n)

";

%feature("docstring") casadi::collocationPoints "

Obtain collocation points of specific order and scheme.

Parameters:
-----------

scheme:  'radau' or 'legendre'

";

%feature("docstring") casadi::profileWriteSourceLineDep "[INTERNAL] ";

%feature("docstring") casadi::sdpStruct "

>  SDPStructIOSchemeVector<M> casadi::sdpStruct(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M())
------------------------------------------------------------------------

Structure specification of an SDP

>Struct scheme: casadi::SDPStruct ( = 3) [sdpStruct]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_STRUCT_F           | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDP_STRUCT_G           | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_STRUCT_A           | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::casadi_mm_sparse_t "[INTERNAL]  Sparse
matrix-matrix multiplication, first factor transposed: z <- z + trans(x)*y.

";

%feature("docstring") casadi::substituteInPlace "

>  void casadi::substituteInPlace(const std::vector< MX > &v, std::vector< MX > &SWIG_INOUT(vdef), bool reverse=false)
------------------------------------------------------------------------

Inplace substitution Substitute variables v out of the expressions vdef
sequentially.

>  void casadi::substituteInPlace(const std::vector< MX > &v, std::vector< MX > &SWIG_INOUT(vdef), std::vector< MX > &SWIG_INOUT(ex), bool reverse=false)
------------------------------------------------------------------------

Inplace substitution with piggyback expressions Substitute variables v out
of the expressions vdef sequentially, as well as out of a number of other
expressions piggyback.

>  void casadi::substituteInPlace(const std::vector< SX > &v, std::vector< SX > &vdef, std::vector< SX > &ex, bool reverse=false)
------------------------------------------------------------------------

Substitute variable var out of or into an expression expr, with an arbitrary
number of other expressions piggyback (vector version)

>  void casadi::substituteInPlace(const SX &v, SX &vdef, std::vector< SX > &ex, bool reverse=false)
------------------------------------------------------------------------

Substitute variable var out of or into an expression expr, with an arbitrary
number of other expressions piggyback.

>  void casadi::substituteInPlace(const SX &v, SX &vdef, bool reverse=false)
------------------------------------------------------------------------

Substitute variable var out of or into an expression expr.

";

%feature("docstring") casadi::qcqpStruct "

>  QCQPStructIOSchemeVector<M> casadi::qcqpStruct(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M())
------------------------------------------------------------------------

Structure specification of a QP

>Struct scheme: casadi::QCQPStruct ( = 3) [qcqpStruct]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_STRUCT_H          | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_STRUCT_P          | p                      | The horizontal stack   |
|                        |                        | of all Pi. Each Pi is  |
|                        |                        | sparse (n x n). Only   |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_STRUCT_A          | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::slicot_mb03vd "[INTERNAL] ";

%feature("docstring") casadi::dpleOut "

>  DPLEOutputIOSchemeVector<M> casadi::dpleOut(const std::string &arg_s0=\"\", const M &arg_m0=M())
------------------------------------------------------------------------

Output arguments of a dple solver

>Output scheme: casadi::DPLEOutput (DPLE_NUM_OUT = 1) [dpleOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_P                 | p                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, diagcat     |
|                        |                        | otherwise) (Cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::printCompact "

Print compact, introducing new variables for shared subexpressions.

";

%feature("docstring") casadi::dgetrf_ "[INTERNAL]  LU-Factorize dense
matrix (lapack)

";

%feature("docstring") casadi::isNonIncreasing "

Check if the vector is non-increasing.

";

%feature("docstring") casadi::casadi_mm_sparse "[INTERNAL]  Sparse matrix-
matrix multiplication: z <- z + x*y.

";

%feature("docstring") casadi::collocationPointsL "[INTERNAL]  Obtain
collocation points of specific order and scheme.

Parameters:
-----------

scheme:  'radau' or 'legendre'

";

%feature("docstring") casadi::casadi_project "[INTERNAL]  Sparse copy: y <-
x, w work vector (length >= number of rows)

";

%feature("docstring") casadi::profileWriteBare "[INTERNAL] ";

%feature("docstring") casadi::dleIn "

>  DLEInputIOSchemeVector<M> casadi::dleIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of a dle solver

>Input scheme: casadi::DLEInput (DLE_NUM_IN = 2) [dleIn]

+-----------+-------+-------------+
| Full name | Short | Description |
+===========+=======+=============+
| DLE_A     | a     | A matrix .  |
+-----------+-------+-------------+
| DLE_V     | v     | V matrix .  |
+-----------+-------+-------------+

";

%feature("docstring") casadi::isNonDecreasing "

Check if the vector is non-decreasing.

";

%feature("docstring") casadi::countNodes "

>  int casadi::countNodes(const MX &A)
------------------------------------------------------------------------

Count number of nodes

>  int casadi::countNodes(const SX &A)
------------------------------------------------------------------------

Count number of nodes.

";

%feature("docstring") casadi::matrixName< int > "

Get typename.

";

%feature("docstring") casadi::fabs "[INTERNAL]  throw ()  fabs(int) was
added in C++11

";

%feature("docstring") casadi::isEqual "[INTERNAL]  Compare if two values
are equal, up to a depth.

";

%feature("docstring") casadi::socpOut "

>  SOCPOutputIOSchemeVector<M> casadi::socpOut(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M())
------------------------------------------------------------------------

Output arguments of an SOCP Solver

>Output scheme: casadi::SOCPOutput (SOCP_SOLVER_NUM_OUT = 6) [socpOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_DUAL_COST  | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_CONE   | lam_cone               | The dual solution      |
|                        |                        | correspoding to cone   |
|                        |                        | (2-norm) constraints   |
|                        |                        | (m x 1) .              |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::nlpSolverOut "

>  NlpSolverOutputIOSchemeVector<M> casadi::nlpSolverOut(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M())
------------------------------------------------------------------------

Output arguments of an NLP Solver

>Output scheme: casadi::NlpSolverOutput (NLP_SOLVER_NUM_OUT = 6) [nlpSolverOut]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::profileWrite "[INTERNAL] ";

%feature("docstring") casadi::casadi_dot "[INTERNAL]  DOT: inner_prod(x, y)
-> return.

";

%feature("docstring") casadi::casadi_quad_form "[INTERNAL]  Calculates
inner_prod(x, mul(A, x))

Calculates inner_prod(x, mul(A, x)) without memory allocation.

";

%feature("docstring") casadi::linsolIn "

>  LinsolInputIOSchemeVector<M> casadi::linsolIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of a linear solver

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 2) [linsolIn]

+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

";

%feature("docstring") casadi::poly_coeff "

extracts polynomial coefficients from an expression

Parameters:
-----------

ex:  Scalar expression that represents a polynomial

x:  Scalar symbol that the polynomial is build up with

";

%feature("docstring") casadi::getSchemeEntryEnum "";

%feature("docstring") casadi::linsolOut "

>  LinsolOutputIOSchemeVector<M> casadi::linsolOut(const std::string &arg_s0=\"\", const M &arg_m0=M())
------------------------------------------------------------------------

Output arguments of a linear solver

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 1) [linsolOut]

+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

";

%feature("docstring") casadi::shared_cast "

>  B casadi::shared_cast(SharedObject &A)
------------------------------------------------------------------------
[INTERNAL] 
Typecast a shared object to a base class to a shared object to a
derived class, cf. dynamic_cast.

Get a pointer to the node

Create a return object

Quick return if not allowed

Assign node of B and return

>  const B casadi::shared_cast(const SharedObject &A)
------------------------------------------------------------------------
[INTERNAL] 
Typecast a shared object to a base class to a shared object to a
derived class, cf. dynamic_cast (const)

";

%feature("docstring") casadi::sort "[INTERNAL]  Sort the data in a vector.

Parameters:
-----------

values:  the vector that needs sorting

sorted_values:  the sorted vector

indices:  The indices such that 'sorted_values= values[indices]'

invert_indices:  Output indices such that 'sorted_values[indices=values'

";

%feature("docstring") casadi::print "[INTERNAL]  Print description.

";

%feature("docstring") casadi::extractShared "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring") casadi::matrix_expand "

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring") casadi::qcqpIn "

>  QcqpSolverInputIOSchemeVector<M> casadi::qcqpIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M(), const std::string &arg_s6=\"\", const M &arg_m6=M(), const std::string &arg_s7=\"\", const M &arg_m7=M(), const std::string &arg_s8=\"\", const M &arg_m8=M(), const std::string &arg_s9=\"\", const M &arg_m9=M(), const std::string &arg_s10=\"\", const M &arg_m10=M(), const std::string &arg_s11=\"\", const M &arg_m11=M())
------------------------------------------------------------------------

Input arguments of a QP problem

>Input scheme: casadi::QcqpSolverInput (QCQP_SOLVER_NUM_IN = 12) [qcqpIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_H          | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_G          | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_P          | p                      | The horizontal stack   |
|                        |                        | of all Pi. Each Pi is  |
|                        |                        | sparse (n x n). Only   |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_Q          | q                      | The vertical stack of  |
|                        |                        | all qi: dense, (nq n x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_R          | r                      | The vertical stack of  |
|                        |                        | all scalars ri (nq x   |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_A          | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBA        | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBA        | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBX        | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBX        | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_X0         | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X0     | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::casadi_mv "[INTERNAL]  Sparse matrix-vector
multiplication: z <- z + x*y.

";

%feature("docstring") casadi::dgetrs_ "[INTERNAL]   Solve a system of
equation using an LU-factorized matrix (lapack)

";

%feature("docstring") casadi::fmin "

>  double casadi::fmin(double x, double y)
------------------------------------------------------------------------
[INTERNAL]  throw ()
fmin, fmax and erf should be available if C99 and/or C++11 required

>  int casadi::fmin(int x, int y)
------------------------------------------------------------------------
[INTERNAL]  throw ()
Sign function, note that sign(nan) == nan.

";

%feature("docstring") casadi::ProfilingType "[INTERNAL] ";

%feature("docstring") casadi::getRepresentation "[INTERNAL]  Print
representation to string.

";

%feature("docstring") casadi::lpStruct "

>  LPStructIOSchemeVector<M> casadi::lpStruct(const std::string &arg_s0=\"\", const M &arg_m0=M())
------------------------------------------------------------------------

Structure specification of an LP

>Struct scheme: casadi::LPStruct ( = 1) [lpStruct]

+-------------+-------+------------------------+
|  Full name  | Short |      Description       |
+=============+=======+========================+
| LP_STRUCT_A | a     | The matrix A: sparse . |
+-------------+-------+------------------------+

";

%feature("docstring") casadi::qpIn "

>  QpSolverInputIOSchemeVector<M> casadi::qpIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M(), const std::string &arg_s6=\"\", const M &arg_m6=M(), const std::string &arg_s7=\"\", const M &arg_m7=M(), const std::string &arg_s8=\"\", const M &arg_m8=M())
------------------------------------------------------------------------

Input arguments of a QP problem

>Input scheme: casadi::QpSolverInput (QP_SOLVER_NUM_IN = 9) [qpIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::ProfilingType< ProfilingData_TIMELINE > "
[INTERNAL] ";

%feature("docstring") casadi::linspace "[INTERNAL]  Matlab's linspace.

";

%feature("docstring") casadi::qpStruct "

>  QPStructIOSchemeVector<M> casadi::qpStruct(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M())
------------------------------------------------------------------------

Structure specification of a QP

>Struct scheme: casadi::QPStruct ( = 2) [qpStruct]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_STRUCT_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_STRUCT_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::hash_value "[INTERNAL]  Hash value of an
integer.

";

%feature("docstring") casadi::casadi_trans "[INTERNAL]  TRANS: y <-
trans(x)

";

%feature("docstring") casadi::stabilizedQpIn "

>  StabilizedQpSolverInputIOSchemeVector<M> casadi::stabilizedQpIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M(), const std::string &arg_s4=\"\", const M &arg_m4=M(), const std::string &arg_s5=\"\", const M &arg_m5=M(), const std::string &arg_s6=\"\", const M &arg_m6=M(), const std::string &arg_s7=\"\", const M &arg_m7=M(), const std::string &arg_s8=\"\", const M &arg_m8=M(), const std::string &arg_s9=\"\", const M &arg_m9=M(), const std::string &arg_s10=\"\", const M &arg_m10=M(), const std::string &arg_s11=\"\", const M &arg_m11=M())
------------------------------------------------------------------------

Input arguments of a QP problem

>Input scheme: casadi::StabilizedQpSolverInput (STABILIZED_QP_SOLVER_NUM_IN = 12) [stabilizedQpIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| STABILIZED_QP_SOLVER_H | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_G | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_A | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | uba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lbx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | ubx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_X | x0                     | dense, (n x 1)         |
| 0                      |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lam_x0                 | dense                  |
| AM_X0                  |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muR                    | dense (1 x 1)          |
| UR                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muE                    | dense (nc x 1)         |
| UE                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | mu                     | dense (nc x 1)         |
| U                      |                        |                        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::casadi_norm_inf_mul "[INTERNAL]  Inf-norm of
a Matrix-matrix product,*

Parameters:
-----------

dwork:  A real work vector that you must allocate Minimum size: y.size1()

iwork:  A integer work vector that you must allocate Minimum size:
y.size1()+x.size2()+1

";

%feature("docstring") casadi::gradFOut "

>  GradFOutputIOSchemeVector<M> casadi::gradFOut(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M())
------------------------------------------------------------------------

Output arguments of an NLP objective gradient function

>Output scheme: casadi::GradFOutput (GRADF_NUM_OUT = 3) [gradFOut]

+------------+-------+-------------------------------+
| Full name  | Short |          Description          |
+============+=======+===============================+
| GRADF_GRAD | grad  | Jacobian of the constraints . |
+------------+-------+-------------------------------+
| GRADF_F    | f     | Objective function .          |
+------------+-------+-------------------------------+
| GRADF_G    | g     | Constraint function .         |
+------------+-------+-------------------------------+

";

%feature("docstring") casadi::controlsimulatorIn "

>  ControlSimulatorInputIOSchemeVector<M> casadi::controlsimulatorIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M())
------------------------------------------------------------------------

Input arguments of a control simulator

>Input scheme: casadi::ControlSimulatorInput (CONTROLSIMULATOR_NUM_IN = 3) [controlsimulatorIn]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROLSIMULATOR_X0    | x0                     | Differential or        |
|                        |                        | algebraic state at t0  |
|                        |                        | (dimension nx-by-1) .  |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_P     | p                      | Parameters that are    |
|                        |                        | fixed over the entire  |
|                        |                        | horizon (dimension np- |
|                        |                        | by-1) .                |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_U     | u                      | Parameters that change |
|                        |                        | over the integration   |
|                        |                        | intervals (dimension   |
|                        |                        | nu-by-(ns-1)) .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::pinv "

>  Matrix<DataType> casadi::pinv(const Matrix< DataType > &A)
------------------------------------------------------------------------

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size2>size1), mul(A, pinv(A)) is unity. If the
matrix A is slender (size1<size2), mul(pinv(A), A) is unity.

>  Matrix<double> casadi::pinv(const Matrix< double > &A, const std::string &lsolver, const Dictionary &dict=Dictionary())

>  MX casadi::pinv(const MX &A, const std::string &lsolver, const Dictionary &dict=Dictionary())
------------------------------------------------------------------------

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1>size2), mul(A, pinv(A)) is unity. If the
matrix A is slender (size2<size1), mul(pinv(A), A) is unity.

";

%feature("docstring") casadi::norm_2 "[INTERNAL] ";

%feature("docstring") casadi::nlpOut "

>  NLPOutputIOSchemeVector<M> casadi::nlpOut(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M())
------------------------------------------------------------------------

Output arguments of an NLP function

>Output scheme: casadi::NLPOutput (NL_NUM_OUT = 2) [nlpOut]

+-----------+-------+-----------------------+
| Full name | Short |      Description      |
+===========+=======+=======================+
| NL_F      | f     | Objective function .  |
+-----------+-------+-----------------------+
| NL_G      | g     | Constraint function . |
+-----------+-------+-----------------------+

";

%feature("docstring") casadi::simpleRK "

Construct an explicit Runge-Kutta integrator The constructed function (which
is of type MXFunction), has three inputs, corresponding to initial state
(x0), parameter (p) and integration time (h) and one output, corresponding
to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

";

%feature("docstring") casadi::isnan "[INTERNAL]  throw () Sign function,
note that sign(nan) == nan.

";

%feature("docstring") casadi::dgeqrf_ "[INTERNAL]  QR-factorize dense
matrix (lapack)

";

%feature("docstring") casadi::nlpIn "

>  NLPInputIOSchemeVector<M> casadi::nlpIn(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of an NLP function

>Input scheme: casadi::NLPInput (NL_NUM_IN = 2) [nlpIn]

+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| NL_X      | x     | Decision variable . |
+-----------+-------+---------------------+
| NL_P      | p     | Fixed parameter .   |
+-----------+-------+---------------------+

";

%feature("docstring") casadi::copysign "

>  T casadi::copysign(const T &x, const T &y)
------------------------------------------------------------------------
[INTERNAL] 
 copysign function

>  double casadi::copysign(double x, double y)
------------------------------------------------------------------------
[INTERNAL] 
copysign function

";

%feature("docstring") casadi::vector_slice "[INTERNAL]  Slicing vector.

Parameters:
-----------

v:  Vector to slice

i:  List of indices

";

%feature("docstring") casadi::asinh "[INTERNAL]  throw () Sign function,
note that sign(nan) == nan.

";

%feature("docstring") casadi::socpStruct "

>  SOCPStructIOSchemeVector<M> casadi::socpStruct(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M())
------------------------------------------------------------------------

Structure specification of an SOCP

>Struct scheme: casadi::SOCPStruct ( = 3) [socpStruct]

+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_STRUCT_G          | g                      | The horizontal stack   |
|                        |                        | of all matrices Gi: (  |
|                        |                        | n x N) .               |
+------------------------+------------------------+------------------------+
| SOCP_STRUCT_E          | e                      | The horizontal stack   |
|                        |                        | of all vectors ei: ( n |
|                        |                        | x m) .                 |
+------------------------+------------------------+------------------------+
| SOCP_STRUCT_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::ptrToLong "[INTERNAL] ";

%feature("docstring") casadi::getSchemeEntryEnumName "";

%feature("docstring") casadi::getDescription "[INTERNAL]  Print description
to string.

";

%feature("docstring") casadi::get_bvec_t "

>  bvec_t* casadi::get_bvec_t(std::vector< double > &v)
------------------------------------------------------------------------
[INTERNAL] 
Get an pointer of sets of booleans from a double vector

>  const bvec_t* casadi::get_bvec_t(const std::vector< double > &v)

>  bvec_t * casadi::get_bvec_t(std::vector< T > &v)

>  const bvec_t * casadi::get_bvec_t(const std::vector< T > &v)
------------------------------------------------------------------------
[INTERNAL] 
Get an pointer of sets of booleans from a double vector.

";

%feature("docstring") casadi::is_a "[INTERNAL]  Check if a shared object is
of a certain type.

";

%feature("docstring") casadi::norm_inf "[INTERNAL] ";

%feature("docstring") casadi::casadi_swap "[INTERNAL]  SWAP: x <-> y.

";

%feature("docstring") casadi::gauss_quadrature "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring") casadi::lrdleStruct "

>  LrDleStructIOSchemeVector<M> casadi::lrdleStruct(const std::string &arg_s0=\"\", const M &arg_m0=M(), const std::string &arg_s1=\"\", const M &arg_m1=M(), const std::string &arg_s2=\"\", const M &arg_m2=M(), const std::string &arg_s3=\"\", const M &arg_m3=M())
------------------------------------------------------------------------

Structure specification of a DLE

>Struct scheme: casadi::LrDleStruct ( = 4) [lrdleStruct]

+-----------------+-------+----------------------------------------+
|    Full name    | Short |              Description               |
+=================+=======+========================================+
| LR_DLE_STRUCT_A | a     | The matrix A .                         |
+-----------------+-------+----------------------------------------+
| LR_DLE_STRUCT_V | v     | The matrix V .                         |
+-----------------+-------+----------------------------------------+
| LR_DLE_STRUCT_C | c     | The matrix C (defaults to unity) .     |
+-----------------+-------+----------------------------------------+
| LR_DLE_STRUCT_H | h     | H matrix: horizontal stack of all Hi . |
+-----------------+-------+----------------------------------------+

";

%feature("docstring") casadi::casadi_fill "[INTERNAL]  FILL: x <- alpha.

";

%feature("docstring") casadi::getSchemeEntryName "";


// File: namespaceIpopt.xml


// File: namespacestd.xml


// File: chapter1.xml


// File: chapter2.xml


// File: chapter3.xml


// File: chapter4.xml


// File: chapter5.xml


// File: chapter6.xml

