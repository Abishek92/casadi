
// File: index.xml

// File: classCasADi_1_1Assertion.xml
%feature("docstring") CasADi::Assertion::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Assertion::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Assertion::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Assertion::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Assertion::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::Assertion::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::Assertion::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::Assertion::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Assertion::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Assertion::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Assertion::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Assertion::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Assertion::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Assertion::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Assertion::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Assertion::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Assertion::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::Assertion::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::Assertion::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Assertion::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::Assertion::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") CasADi::Assertion::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Assertion::propagateSparsity "

>  void CasADi::Assertion::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

>  virtual void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

";

%feature("docstring") CasADi::Assertion::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") CasADi::Assertion::printPart "[INTERNAL]  Print a
part of the expression */.

";

%feature("docstring") CasADi::Assertion::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::Assertion::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Assertion::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Assertion::evaluateMX "

>  void CasADi::Assertion::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Assertion::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::Assertion::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Assertion::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::Assertion "[INTERNAL]   Assertion.

Joris Gillis

C++ includes: assertion.hpp ";

%feature("docstring") CasADi::Assertion::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Assertion::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Assertion::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Assertion::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Assertion::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Assertion::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::Assertion::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::Assertion::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Assertion::size "[INTERNAL] ";

%feature("docstring") CasADi::Assertion::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") CasADi::Assertion::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Assertion::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Assertion::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Assertion::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Assertion::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::Assertion::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Assertion::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::Assertion::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Assertion::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Assertion::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Assertion::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Assertion::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Assertion::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::Assertion::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Assertion::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Assertion::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Assertion::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Assertion::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Assertion::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Assertion::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") CasADi::Assertion::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") CasADi::Assertion::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Assertion::Assertion "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::Assertion::~Assertion "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::Assertion::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Assertion::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Assertion::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Assertion::shape "[INTERNAL] ";

%feature("docstring") CasADi::Assertion::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::Assertion::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::Assertion::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Assertion::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::Assertion::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::Assertion::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::Assertion::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::Assertion::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::Assertion::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Assertion::getFunction "[INTERNAL]  Get
function reference.

";


// File: structCasADi_1_1BinaryChecker.xml
%feature("docstring") CasADi::BinaryChecker "[INTERNAL]  Is the operation
binary as opposed to unary.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__ADD_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_ADD > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__AND_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__ATAN2_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_ATAN2 > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__CONSTPOW_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_CONSTPOW > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_COPYSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__DIV_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_DIV > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__EQ_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_EQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__FMAX_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_FMAX > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__FMIN_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_FMIN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_IF_ELSE_ZERO > " [INTERNAL]
C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__MUL_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_MUL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__NE_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_NE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__OR_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_OR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__POW_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_POW > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__PRINTME_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_PRINTME > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryChecker_3_01OP__SUB_01_4.xml
%feature("docstring") CasADi::BinaryChecker< OP_SUB > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: classCasADi_1_1BinaryMX.xml
%feature("docstring") CasADi::BinaryMX::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::BinaryMX::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::BinaryMX::evaluateMX "

>  void CasADi::BinaryMX< ScX, ScY >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::BinaryMX::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::BinaryMX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::BinaryMX::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::BinaryMX::size2 "[INTERNAL] ";

%feature("docstring") CasADi::BinaryMX::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::BinaryMX::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::BinaryMX::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::BinaryMX::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::BinaryMX::size "[INTERNAL] ";

%feature("docstring") CasADi::BinaryMX::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::BinaryMX::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::BinaryMX::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::BinaryMX::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::BinaryMX::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") CasADi::BinaryMX::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::BinaryMX::size1 "[INTERNAL] ";

%feature("docstring") CasADi::BinaryMX::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::BinaryMX::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") CasADi::BinaryMX::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::BinaryMX::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::BinaryMX::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::BinaryMX::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::BinaryMX::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::BinaryMX::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::BinaryMX::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") CasADi::BinaryMX::printPart "[INTERNAL]  Print a part
of the expression.

";

%feature("docstring") CasADi::BinaryMX::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::BinaryMX::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::BinaryMX::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::BinaryMX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::BinaryMX::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::BinaryMX::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") CasADi::BinaryMX::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::BinaryMX::~BinaryMX "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::BinaryMX::shape "[INTERNAL] ";

%feature("docstring") CasADi::BinaryMX::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::BinaryMX::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") CasADi::BinaryMX::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::BinaryMX::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::BinaryMX::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::BinaryMX::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::BinaryMX::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::BinaryMX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::BinaryMX::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::BinaryMX::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::BinaryMX::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::BinaryMX::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::BinaryMX::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::BinaryMX::getBinary "[INTERNAL]  Get a binary
operation operation.

";

%feature("docstring") CasADi::BinaryMX "[INTERNAL]  Represents any binary
operation that involves two matrices.

Joel Andersson

C++ includes: binary_mx.hpp ";

%feature("docstring") CasADi::BinaryMX::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") CasADi::BinaryMX::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::BinaryMX::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::BinaryMX::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::BinaryMX::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::BinaryMX::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::BinaryMX::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::BinaryMX::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::BinaryMX::BinaryMX "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::BinaryMX::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::BinaryMX::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::BinaryMX::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::BinaryMX::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::BinaryMX::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::BinaryMX::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::BinaryMX::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::BinaryMX::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::BinaryMX::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::BinaryMX::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") CasADi::BinaryMX::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::BinaryMX::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::BinaryMX::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::BinaryMX::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::BinaryMX::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::BinaryMX::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::BinaryMX::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::BinaryMX::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::BinaryMX::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::BinaryMX::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";


// File: structCasADi_1_1BinaryOperation.xml
%feature("docstring") CasADi::BinaryOperation "[INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__ADD_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_ADD > " [INTERNAL]
Addition.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__AND_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_AND > " [INTERNAL]
Logical and.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__ATAN2_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_ATAN2 > " [INTERNAL]
Arctan2.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__CONSTPOW_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_CONSTPOW > " [INTERNAL]
Power, defined only for y constant.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_COPYSIGN > " [INTERNAL]
Copysign.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__DIV_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_DIV > " [INTERNAL]
Division.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__EQ_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_EQ > " [INTERNAL]  Equal
to.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__FMAX_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_FMAX > " [INTERNAL]
Maximum.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__FMIN_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_FMIN > " [INTERNAL]
Minimum.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_IF_ELSE_ZERO > "
[INTERNAL]  Conditional assignment.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__LE_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_LE > " [INTERNAL]  Less or
equal to.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__LIFT_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_LIFT > " [INTERNAL]
Inverse of error function.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__LT_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_LT > " [INTERNAL]  Less
than.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__MUL_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_MUL > " [INTERNAL]
Multiplication.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__NE_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_NE > " [INTERNAL]  Not
equal to.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__OR_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_OR > " [INTERNAL]  Logical
or.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__POW_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_POW > " [INTERNAL]  Power,
defined only for x>=0.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__PRINTME_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_PRINTME > " [INTERNAL]
Identity operator with the side effect of printing.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperation_3_01OP__SUB_01_4.xml
%feature("docstring") CasADi::BinaryOperation< OP_SUB > " [INTERNAL]
Subtraction.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperationE.xml
%feature("docstring") CasADi::BinaryOperationE "[INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperationSS.xml
%feature("docstring") CasADi::BinaryOperationSS "[INTERNAL]  Perform a
binary operation on two scalars.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperationSV.xml
%feature("docstring") CasADi::BinaryOperationSV "[INTERNAL]  Perform a
binary operation on a scalar and a vector.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperationVS.xml
%feature("docstring") CasADi::BinaryOperationVS "[INTERNAL]  Perform a
binary operation on a vector and a scalar.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1BinaryOperationVV.xml
%feature("docstring") CasADi::BinaryOperationVV "[INTERNAL]  Perform a
binary operation on two vectors.

C++ includes: casadi_calculus.hpp ";


// File: classCasADi_1_1BinarySX.xml
%feature("docstring") CasADi::BinarySX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") CasADi::BinarySX "[INTERNAL]  Represents a basic
binary operation on two SXElement nodes.

Joel Andersson

C++ includes: binary_sx.hpp ";

%feature("docstring") CasADi::BinarySX::hasDep "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::BinarySX::isNan "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::BinarySX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::BinarySX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::BinarySX::getIntValue "[INTERNAL]  Get value
of a constant node.

";

%feature("docstring") CasADi::BinarySX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::BinarySX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::BinarySX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") CasADi::BinarySX::getValue "[INTERNAL]  Get value of
a constant node.

";

%feature("docstring") CasADi::BinarySX::getName "[INTERNAL] ";

%feature("docstring") CasADi::BinarySX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::BinarySX::~BinarySX "[INTERNAL]  Destructor
This is a rather complex destructor which is necessary since the default
destructor can cause stack overflow due to recursive calling.

";

%feature("docstring") CasADi::BinarySX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::BinarySX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::BinarySX::isOne "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::BinarySX::isConstant "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::BinarySX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::BinarySX::print "

>  virtual void CasADi::BinarySX::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print the expression (recursively with a maximum number of levels)

>  void CasADi::SXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
print

";

%feature("docstring") CasADi::BinarySX::marked "[INTERNAL] ";

%feature("docstring") CasADi::BinarySX::isInf "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::BinarySX::dep "

>  virtual const SXElement& CasADi::BinarySX::dep(int i) const 
------------------------------------------------------------------------
[INTERNAL] 
get the reference of a dependency

>  virtual SXElement& CasADi::BinarySX::dep(int i)
------------------------------------------------------------------------
[INTERNAL] 
get the reference of a child

";

%feature("docstring") CasADi::BinarySX::isZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::BinarySX::mark "[INTERNAL] ";


// File: classCasADi_1_1Callback.xml
%feature("docstring") CasADi::Callback::isInit "

Is initialized?

";

%feature("docstring") CasADi::Callback::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") CasADi::Callback::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::Callback::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::Callback "[INTERNAL]   Callback.

In C++, supply a CallbackCPtr function pointer When the callback function
returns a non-zero integer, the host is signalled of a problem. E.g. an
NLPSolver may halt iterations if the Callback is something else than 0

In python, supply a callable, annotated with pycallback decorator

C++ includes: functor.hpp ";

%feature("docstring") CasADi::Callback::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::Callback::checkNode "[INTERNAL]  Assert that
the node is pointing to the right type of object

";

%feature("docstring") CasADi::Callback::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Callback::Callback "

>  CasADi::Callback::Callback()
------------------------------------------------------------------------

Default constructor.

>  CasADi::Callback::Callback(CallbackCPtr ptr)
------------------------------------------------------------------------

Construct from C pointer.

";

%feature("docstring") CasADi::Callback::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::Callback::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::Callback::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::Callback::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::Callback::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::Callback::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::Callback::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") CasADi::Callback::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::Callback::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Callback::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::Callback::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";


// File: classCasADi_1_1CallFunction.xml
%feature("docstring") CasADi::CallFunction "[INTERNAL]

Joel Andersson

C++ includes: call_function.hpp ";

%feature("docstring") CasADi::CallFunction::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::CallFunction::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") CasADi::CallFunction::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::CallFunction::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") CasADi::CallFunction::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::CallFunction::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::CallFunction::addDependency "[INTERNAL]  Add
a dependency.

";

%feature("docstring") CasADi::CallFunction::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::CallFunction::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::CallFunction::evaluateMX "

>  void CasADi::CallFunction::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::CallFunction::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::CallFunction::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") CasADi::CallFunction::init "[INTERNAL]  Initialize
the object.

";

%feature("docstring") CasADi::CallFunction::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::CallFunction::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::CallFunction::propagateSparsity "

>  void CasADi::CallFunction::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::CallFunction::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::CallFunction::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") CasADi::CallFunction::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::CallFunction::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::CallFunction::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::CallFunction::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::CallFunction::shape "[INTERNAL] ";

%feature("docstring") CasADi::CallFunction::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::CallFunction::setSparsity "[INTERNAL]  Set
the sparsity.

";

%feature("docstring") CasADi::CallFunction::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::CallFunction::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::CallFunction::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") CasADi::CallFunction::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::CallFunction::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::CallFunction::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::CallFunction::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring") CasADi::CallFunction::getVertcat "[INTERNAL]  Create
a vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::CallFunction::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") CasADi::CallFunction::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::CallFunction::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::CallFunction::size2 "[INTERNAL] ";

%feature("docstring") CasADi::CallFunction::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::CallFunction::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::CallFunction::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::CallFunction::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::CallFunction::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::CallFunction::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::CallFunction::getHorzcat "[INTERNAL]  Create
a horizontal concatenation node.

";

%feature("docstring") CasADi::CallFunction::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::CallFunction::CallFunction "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::CallFunction::size "[INTERNAL] ";

%feature("docstring") CasADi::CallFunction::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") CasADi::CallFunction::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") CasADi::CallFunction::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") CasADi::CallFunction::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::CallFunction::sparsity "

>  const Sparsity & CasADi::CallFunction::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

";

%feature("docstring") CasADi::CallFunction::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::CallFunction::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") CasADi::CallFunction::~CallFunction "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::CallFunction::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::CallFunction::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::CallFunction::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::CallFunction::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") CasADi::CallFunction::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") CasADi::CallFunction::size1 "[INTERNAL] ";

%feature("docstring") CasADi::CallFunction::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::CallFunction::isIdentity "[INTERNAL]  Check
if identity matrix.

";

%feature("docstring") CasADi::CallFunction::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") CasADi::CallFunction::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::CallFunction::isBinaryOp "[INTERNAL]  Check
if binary operation.

";

%feature("docstring") CasADi::CallFunction::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::CallFunction::getBinarySwitch "[INTERNAL]
Get a binary operation operation.

";

%feature("docstring") CasADi::CallFunction::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::CallFunction::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::CallFunction::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::CallFunction::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::CallFunction::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::CallFunction::isInit "[INTERNAL]  Check if
the object has been initialized.

";

%feature("docstring") CasADi::CallFunction::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") CasADi::CallFunction::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::CallFunction::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") CasADi::CallFunction::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::CallFunction::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") CasADi::CallFunction::isEqual "[INTERNAL]  Check if
two nodes are equivalent up to a given depth.

";


// File: classCasADi_1_1casadi__limits.xml
%feature("docstring") CasADi::casadi_limits "[INTERNAL]   casadi_limits
class

The following class, which acts as a complements to the standard
numeric_limits class, allows to specify certain properties of scalar
objects. The template can be specialized for e.g. symbolic scalars Joel
Andersson

C++ includes: casadi_limits.hpp ";


// File: classCasADi_1_1casadi__limits_3_01SXElement_01_4.xml
%feature("docstring") CasADi::casadi_limits< SXElement > " [INTERNAL] C++
includes: sx_element.hpp ";


// File: structCasADi_1_1casadi__math.xml
%feature("docstring") CasADi::casadi_math "[INTERNAL]  Easy access to all
the functions for a particular type.

C++ includes: casadi_math.hpp ";


// File: structCasADi_1_1casadi__math_3_01int_01_4.xml
%feature("docstring") CasADi::casadi_math< int > " [INTERNAL]  Specialize
the class so that it can be used with integer type.

C++ includes: casadi_math.hpp ";


// File: classCasADi_1_1CasadiException.xml
%feature("docstring") CasADi::CasadiException::~CasadiException "throw ()
Destructor.

";

%feature("docstring") CasADi::CasadiException::CasadiException "

>  CasADi::CasadiException::CasadiException()
------------------------------------------------------------------------

Default constructor.

>  CasADi::CasadiException::CasadiException(const std::string &msg)
------------------------------------------------------------------------

Form message string.

";

%feature("docstring") CasADi::CasadiException "[INTERNAL]  Casadi exception
class.

Joel Andersson

C++ includes: casadi_exception.hpp ";

%feature("docstring") CasADi::CasadiException::what "throw () Display
error.

";


// File: classCasADi_1_1CasadiMeta.xml
%feature("docstring") CasADi::CasadiMeta "[INTERNAL]  Collects global
CasADi meta information.

Joris Gillis

C++ includes: casadi_meta.hpp ";


// File: classCasADi_1_1CasadiOptions.xml
%feature("docstring") CasADi::CasadiOptions "[INTERNAL]  Collects global
CasADi options.

Note to developers: use sparingly. Global options are - in general - a
rather bad idea

this class must never be instantiated. Access its static members directly

Joris Gillis

C++ includes: casadi_options.hpp ";


// File: classCasADi_1_1CodeGenerator.xml
%feature("docstring") CasADi::CodeGenerator::addAuxiliary "[INTERNAL]  Add
a built-in axiliary function.

";

%feature("docstring") CasADi::CodeGenerator::addInclude "[INTERNAL]  Add an
include file optionally using a relative path \"...\" instead of an absolute
path <...>

";

%feature("docstring") CasADi::CodeGenerator "[INTERNAL] C++ includes:
code_generator.hpp ";

%feature("docstring") CasADi::CodeGenerator::addDependency "[INTERNAL]  Add
a dependent function.

";

%feature("docstring") CasADi::CodeGenerator::flush "[INTERNAL]  Flush
generated file to a stream.

";

%feature("docstring") CasADi::CodeGenerator::getConstant "

>  int CasADi::CodeGenerator::getConstant(const std::vector< double > &v, bool allow_adding=false)
------------------------------------------------------------------------
[INTERNAL] 
Get or add a constant.

>  int CasADi::CodeGenerator::getConstant(const std::vector< int > &v, bool allow_adding=false)
------------------------------------------------------------------------
[INTERNAL] 
Get or add am integer constant.

";

%feature("docstring") CasADi::CodeGenerator::getDependency "[INTERNAL]  Get
the index of an existing dependency.

";

%feature("docstring") CasADi::CodeGenerator::addSparsity "[INTERNAL]  Add
an include file optionally using a relative path \"...\" instead of an
absolute path <...>

";

%feature("docstring") CasADi::CodeGenerator::copyVector "[INTERNAL]  Copy a
vector to another.

";

%feature("docstring") CasADi::CodeGenerator::getSparsity "[INTERNAL]  Get
the index of an existing sparsity pattern.

";

%feature("docstring") CasADi::CodeGenerator::casadi_dot "[INTERNAL]
Codegen casadi_dot

";


// File: classCasADi_1_1CollocationIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::CollocationIntegrator::printPtr " [INTERNAL]  Print the pointer to
the internal class

";

%feature("docstring") CasADi::CollocationIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::CollocationIntegrator::spInit "[INTERNAL]
Reset the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CollocationIntegrator::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::CollocationIntegrator::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::CollocationIntegrator::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::CollocationIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::CollocationIntegrator::solve "

the same as evaluate()

";

%feature("docstring") CasADi::CollocationIntegrator::weak "[INTERNAL]  Get
a weak reference to the object.

";

%feature("docstring") CasADi::CollocationIntegrator::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::CollocationIntegrator::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") CasADi::CollocationIntegrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::CollocationIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::CollocationIntegrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::CollocationIntegrator::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::CollocationIntegrator::CollocationIntegrator "

>  CasADi::CollocationIntegrator::CollocationIntegrator()
------------------------------------------------------------------------

Default constructor.

>  CasADi::CollocationIntegrator::CollocationIntegrator(const Function &f, const Function &g=Function())
------------------------------------------------------------------------

Create an integrator for explicit ODEs.

Parameters:
-----------

f:  dynamical system

>Input scheme: CasADi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: CasADi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: CasADi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: CasADi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring") CasADi::CollocationIntegrator::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::CollocationIntegrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::CollocationIntegrator::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::CollocationIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::CollocationIntegrator::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::CollocationIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::CollocationIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::CollocationIntegrator::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::CollocationIntegrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::CollocationIntegrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::CollocationIntegrator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::CollocationIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::CollocationIntegrator::spCanEvaluate "[INTERNAL]  Is the class able to propate seeds through the algorithm? (for
usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CollocationIntegrator::setOptionByAllowedIndex
"[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::CollocationIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") CasADi::CollocationIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::CollocationIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::CollocationIntegrator::inputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::CollocationIntegrator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::CollocationIntegrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::CollocationIntegrator::schemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CollocationIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::CollocationIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::CollocationIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::CollocationIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") CasADi::CollocationIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") CasADi::CollocationIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::CollocationIntegrator::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::CollocationIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::CollocationIntegrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::CollocationIntegrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::CollocationIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::CollocationIntegrator::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::CollocationIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::CollocationIntegrator::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::CollocationIntegrator::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::CollocationIntegrator::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::CollocationIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::CollocationIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::CollocationIntegrator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::CollocationIntegrator::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::CollocationIntegrator::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::CollocationIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") CasADi::CollocationIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::CollocationIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::CollocationIntegrator::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::CollocationIntegrator::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::CollocationIntegrator::checkInputs "[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::CollocationIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::CollocationIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::CollocationIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::CollocationIntegrator::getOption "

get an option value

";

%feature("docstring") CasADi::CollocationIntegrator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::CollocationIntegrator::output_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::CollocationIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::CollocationIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::CollocationIntegrator::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::CollocationIntegrator::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::CollocationIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::CollocationIntegrator::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::CollocationIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::CollocationIntegrator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CollocationIntegrator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::CollocationIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::CollocationIntegrator::evaluate "

Evaluate.

";

%feature("docstring") CasADi::CollocationIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::CollocationIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::CollocationIntegrator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::CollocationIntegrator::resetB "

Reset the backward problem Time will be set to tf and backward state to
input(INTEGRATOR_RX0)

";

%feature("docstring") CasADi::CollocationIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") CasADi::CollocationIntegrator::clone "

Clone.

";

%feature("docstring") CasADi::CollocationIntegrator::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CollocationIntegrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::CollocationIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::CollocationIntegrator::input_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::CollocationIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::CollocationIntegrator "[INTERNAL]  Fixed-step
implicit Runge-Kutta integrator ODE/DAE integrator based on collocation
schemes.

The method is still under development

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x,z,p,t) Forward ODE  0 = fz(x,z,p,t)
Forward algebraic equations  der(q) = fq(x,z,p,t)                  Forward
quadratures Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  = 0
Backward integration from t=tf to t=t0  der(rx) = gx(rx,rz,rp,x,z,p,t)
Backward ODE  0 = gz(rx,rz,rp,x,z,p,t)        Backward algebraic equations
der(rq) = gq(rx,rz,rp,x,z,p,t)        Backward quadratures where we assume
that both the forward and backwards integrations are index-1  (i.e. dfz/dz,
dgz/drz are invertible) and furthermore that gx, gz and gq have a linear
dependency on rx, rz and rp.

Joel Andersson

>Input scheme: CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | CasADi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| collocation_ | OT_STRING    | \"radau\"      | Collocation  | CasADi::Coll |
| scheme       |              |              | scheme (rada | ocationInteg |
|              |              |              | u|legendre)  | ratorInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | CasADi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_sol | OT_IMPLICITF | GenericType( | An implicit  | CasADi::Impl |
| ver          | UNCTION      | )            | function     | icitFixedSte |
|              |              |              | solver       | pIntegratorI |
|              |              |              |              | nternal      |
+--------------+--------------+--------------+--------------+--------------+
| implicit_sol | OT_DICTIONAR | GenericType( | Options to   | CasADi::Impl |
| ver_options  | Y            | )            | be passed to | icitFixedSte |
|              |              |              | the NLP      | pIntegratorI |
|              |              |              | Solver       | nternal      |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| interpolatio | OT_INTEGER   | 3            | Order of the | CasADi::Coll |
| n_order      |              |              | interpolatin | ocationInteg |
|              |              |              | g            | ratorInterna |
|              |              |              | polynomials  | l            |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_fi | OT_INTEGER   | 20           | Number of    | CasADi::Fixe |
| nite_element |              |              | finite       | dStepIntegra |
| s            |              |              | elements     | torInternal  |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | CasADi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | CasADi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | CasADi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: collocation_integrator.hpp ";

%feature("docstring") CasADi::CollocationIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") CasADi::CollocationIntegrator::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::CollocationIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::CollocationIntegrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::CollocationIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::CollocationIntegrator::isInit "

Is initialized?

";

%feature("docstring") CasADi::CollocationIntegrator::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") CasADi::CollocationIntegrator::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::CollocationIntegrator::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CollocationIntegrator::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";


// File: structCasADi_1_1CommChecker.xml
%feature("docstring") CasADi::CommChecker "[INTERNAL]  Is commutative.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1CommChecker_3_01OP__ADD_01_4.xml
%feature("docstring") CasADi::CommChecker< OP_ADD > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1CommChecker_3_01OP__AND_01_4.xml
%feature("docstring") CasADi::CommChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1CommChecker_3_01OP__EQ_01_4.xml
%feature("docstring") CasADi::CommChecker< OP_EQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1CommChecker_3_01OP__MUL_01_4.xml
%feature("docstring") CasADi::CommChecker< OP_MUL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1CommChecker_3_01OP__NE_01_4.xml
%feature("docstring") CasADi::CommChecker< OP_NE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1CommChecker_3_01OP__OR_01_4.xml
%feature("docstring") CasADi::CommChecker< OP_OR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1CompiletimeConst.xml
%feature("docstring") CasADi::CompiletimeConst "[INTERNAL]   Constant known
at compiletime.

C++ includes: constant_mx.hpp ";


// File: classCasADi_1_1Concat.xml
%feature("docstring") CasADi::Concat::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Concat::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") CasADi::Concat::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Concat::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") CasADi::Concat::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::Concat::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") CasADi::Concat::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Concat::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::Concat::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") CasADi::Concat::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Concat::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") CasADi::Concat::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Concat::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Concat::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Concat::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::Concat::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") CasADi::Concat::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Concat::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") CasADi::Concat::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Concat::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Concat::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Concat::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") CasADi::Concat::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Concat::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Concat::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::Concat::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Concat::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Concat::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Concat::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::Concat::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Concat::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::Concat::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Concat::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Concat::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Concat::~Concat "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::Concat::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") CasADi::Concat::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Concat::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::Concat "[INTERNAL]  Concatenation: Join
multiple expressions stacking the nonzeros.

Joel Andersson

C++ includes: concat.hpp ";

%feature("docstring") CasADi::Concat::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Concat::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::Concat::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Concat::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Concat::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Concat::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Concat::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Concat::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Concat::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::Concat::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Concat::shape "[INTERNAL] ";

%feature("docstring") CasADi::Concat::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Concat::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::Concat::Concat "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::Concat::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Concat::evaluateGen "[INTERNAL]  Evaluate the
function (template)

";

%feature("docstring") CasADi::Concat::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") CasADi::Concat::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Concat::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Concat::printPart "[INTERNAL]  Print a part
of the expression.

";

%feature("docstring") CasADi::Concat::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::Concat::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Concat::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::Concat::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Concat::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Concat::size "[INTERNAL] ";

%feature("docstring") CasADi::Concat::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") CasADi::Concat::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::Concat::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Concat::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Concat::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Concat::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Concat::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Concat::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Concat::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Concat::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") CasADi::Concat::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::Concat::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Concat::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::Concat::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Concat::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::Concat::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Concat::evaluateMX "

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";


// File: classCasADi_1_1Constant.xml
%feature("docstring") CasADi::Constant::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Constant::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Constant::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Constant::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::Constant::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::Constant::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Constant::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Constant::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Constant::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Constant::Constant "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::Constant::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::Constant::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Constant::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") CasADi::Constant::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::Constant::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") CasADi::Constant::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Constant::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Constant::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Constant::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Constant::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::Constant::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") CasADi::Constant::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::Constant::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Constant::shape "[INTERNAL] ";

%feature("docstring") CasADi::Constant::__nonzero__ "[INTERNAL]  Return
truth value of an MX.

";

%feature("docstring") CasADi::Constant::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Constant::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Constant::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::Constant::evaluateMX "

>  void CasADi::ConstantMX::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Constant::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Constant::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::Constant::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Constant::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Constant::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Constant::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Constant::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::Constant::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Constant::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Constant::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Constant::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::Constant::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Constant::getBinary "[INTERNAL]  Get a binary
operation operation.

";

%feature("docstring") CasADi::Constant::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Constant::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Constant::isZero "[INTERNAL]  Check if a
particular integer value.

";

%feature("docstring") CasADi::Constant::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::Constant::size "[INTERNAL] ";

%feature("docstring") CasADi::Constant "[INTERNAL]  A constant with all
entries identical.

C++ includes: constant_mx.hpp ";

%feature("docstring") CasADi::Constant::getSetSparse "[INTERNAL]  Get
densification.

";

%feature("docstring") CasADi::Constant::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Constant::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Constant::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Constant::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Constant::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::Constant::printPart "[INTERNAL]  Print a part
of the expression.

";

%feature("docstring") CasADi::Constant::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Constant::getInnerProd "[INTERNAL]   Matrix
multiplcation.

Inner product

";

%feature("docstring") CasADi::Constant::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::Constant::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Constant::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::Constant::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Constant::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Constant::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::Constant::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Constant::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") CasADi::Constant::~Constant "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::Constant::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Constant::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Constant::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::Constant::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Constant::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Constant::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::Constant::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::Constant::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::Constant::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") CasADi::Constant::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Constant::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::Constant::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::Constant::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Constant::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Constant::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";


// File: classCasADi_1_1ConstantDMatrix.xml
%feature("docstring") CasADi::ConstantDMatrix::getMultiplication "[INTERNAL]   Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::ConstantDMatrix::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::ConstantDMatrix::isValue "[INTERNAL]  Check
if a certain value.

";

%feature("docstring") CasADi::ConstantDMatrix::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::ConstantDMatrix::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::ConstantDMatrix::numInplace "[INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::ConstantDMatrix::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") CasADi::ConstantDMatrix::setSparsity "[INTERNAL]  Set
the sparsity.

";

%feature("docstring") CasADi::ConstantDMatrix::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::ConstantDMatrix::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") CasADi::ConstantDMatrix::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::ConstantDMatrix::~ConstantDMatrix "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::ConstantDMatrix::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::ConstantDMatrix::getInnerProd "[INTERNAL]
Matrix multiplcation.

Inner product

";

%feature("docstring") CasADi::ConstantDMatrix::shape "[INTERNAL] ";

%feature("docstring") CasADi::ConstantDMatrix::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::ConstantDMatrix::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") CasADi::ConstantDMatrix::isUnaryOp "[INTERNAL]  Check
if unary operation.

";

%feature("docstring") CasADi::ConstantDMatrix::ConstantDMatrix "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::ConstantDMatrix::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::ConstantDMatrix::isMinusOne "[INTERNAL] ";

%feature("docstring") CasADi::ConstantDMatrix::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") CasADi::ConstantDMatrix::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::ConstantDMatrix::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::ConstantDMatrix::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::ConstantDMatrix::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::ConstantDMatrix::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::ConstantDMatrix::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") CasADi::ConstantDMatrix "[INTERNAL]  A constant given
as a DMatrix.

C++ includes: constant_mx.hpp ";

%feature("docstring") CasADi::ConstantDMatrix::size2 "[INTERNAL] ";

%feature("docstring") CasADi::ConstantDMatrix::size1 "[INTERNAL] ";

%feature("docstring") CasADi::ConstantDMatrix::isZero "[INTERNAL]  Check if
a particular integer value.

";

%feature("docstring") CasADi::ConstantDMatrix::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") CasADi::ConstantDMatrix::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") CasADi::ConstantDMatrix::getValue "[INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") CasADi::ConstantDMatrix::nTmp "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") CasADi::ConstantDMatrix::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::ConstantDMatrix::init "[INTERNAL]  Initialize
the object.

";

%feature("docstring") CasADi::ConstantDMatrix::getSolve "[INTERNAL]   Solve
a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::ConstantDMatrix::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::ConstantDMatrix::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") CasADi::ConstantDMatrix::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::ConstantDMatrix::evaluateMX "

>  void CasADi::ConstantMX::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::ConstantDMatrix::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") CasADi::ConstantDMatrix::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::ConstantDMatrix::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") CasADi::ConstantDMatrix::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") CasADi::ConstantDMatrix::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::ConstantDMatrix::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::ConstantDMatrix::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") CasADi::ConstantDMatrix::isNonLinear "[INTERNAL]  Is
the node nonlinear.

";

%feature("docstring") CasADi::ConstantDMatrix::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") CasADi::ConstantDMatrix::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::ConstantDMatrix::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::ConstantDMatrix::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") CasADi::ConstantDMatrix::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") CasADi::ConstantDMatrix::getOutput "[INTERNAL]  Get
an output.

";

%feature("docstring") CasADi::ConstantDMatrix::isEqual "[INTERNAL]  Check
if two nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::ConstantDMatrix::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") CasADi::ConstantDMatrix::__nonzero__ "[INTERNAL]
Return truth value of an MX.

";

%feature("docstring") CasADi::ConstantDMatrix::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::ConstantDMatrix::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::ConstantDMatrix::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") CasADi::ConstantDMatrix::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::ConstantDMatrix::printPart "[INTERNAL]  Print
a part of the expression.

";

%feature("docstring") CasADi::ConstantDMatrix::isIdentity "[INTERNAL]
Check if identity matrix.

";

%feature("docstring") CasADi::ConstantDMatrix::isInit "[INTERNAL]  Check if
the object has been initialized.

";

%feature("docstring") CasADi::ConstantDMatrix::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::ConstantDMatrix::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") CasADi::ConstantDMatrix::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::ConstantDMatrix::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") CasADi::ConstantDMatrix::isBinaryOp "[INTERNAL]
Check if binary operation.

";

%feature("docstring") CasADi::ConstantDMatrix::size "[INTERNAL] ";

%feature("docstring") CasADi::ConstantDMatrix::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::ConstantDMatrix::getNorm2 "[INTERNAL]
Spectran norm.

";

%feature("docstring") CasADi::ConstantDMatrix::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") CasADi::ConstantDMatrix::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") CasADi::ConstantDMatrix::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") CasADi::ConstantDMatrix::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") CasADi::ConstantDMatrix::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") CasADi::ConstantDMatrix::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") CasADi::ConstantDMatrix::getBinarySwitch "[INTERNAL]
Get a binary operation operation.

";


// File: classCasADi_1_1ConstantMX.xml
%feature("docstring") CasADi::ConstantMX::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::ConstantMX::size "[INTERNAL] ";

%feature("docstring") CasADi::ConstantMX::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::ConstantMX::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::ConstantMX::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::ConstantMX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::ConstantMX::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::ConstantMX::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::ConstantMX::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::ConstantMX::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::ConstantMX::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::ConstantMX::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") CasADi::ConstantMX::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::ConstantMX::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::ConstantMX::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::ConstantMX "[INTERNAL]  Represents an MX that
is only composed of a constant.

Joel Andersson  A regular user is not supposed to work with this Node class.
This user can call MX(double) directly, or even rely on implicit
typecasting. See:  zeros , ones

C++ includes: constant_mx.hpp ";

%feature("docstring") CasADi::ConstantMX::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::ConstantMX::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") CasADi::ConstantMX::getBinarySwitch "[INTERNAL]  Get
a binary operation operation.

";

%feature("docstring") CasADi::ConstantMX::__nonzero__ "[INTERNAL]  Return
truth value of an MX.

";

%feature("docstring") CasADi::ConstantMX::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::ConstantMX::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::ConstantMX::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") CasADi::ConstantMX::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::ConstantMX::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::ConstantMX::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::ConstantMX::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::ConstantMX::size2 "[INTERNAL] ";

%feature("docstring") CasADi::ConstantMX::~ConstantMX "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::ConstantMX::evaluateMX "

>  void CasADi::ConstantMX::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::ConstantMX::size1 "[INTERNAL] ";

%feature("docstring") CasADi::ConstantMX::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::ConstantMX::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::ConstantMX::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::ConstantMX::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::ConstantMX::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::ConstantMX::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::ConstantMX::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::ConstantMX::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::ConstantMX::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") CasADi::ConstantMX::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::ConstantMX::getHorzsplit "[INTERNAL]  Create
a horizontal split node.

";

%feature("docstring") CasADi::ConstantMX::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") CasADi::ConstantMX::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::ConstantMX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::ConstantMX::shape "[INTERNAL] ";

%feature("docstring") CasADi::ConstantMX::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::ConstantMX::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::ConstantMX::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::ConstantMX::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::ConstantMX::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::ConstantMX::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::ConstantMX::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::ConstantMX::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::ConstantMX::getInnerProd "[INTERNAL]   Matrix
multiplcation.

Inner product

";

%feature("docstring") CasADi::ConstantMX::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::ConstantMX::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::ConstantMX::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") CasADi::ConstantMX::ConstantMX "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::ConstantMX::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::ConstantMX::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::ConstantMX::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::ConstantMX::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::ConstantMX::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::ConstantMX::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") CasADi::ConstantMX::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") CasADi::ConstantMX::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::ConstantMX::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::ConstantMX::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::ConstantMX::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") CasADi::ConstantMX::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::ConstantMX::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::ConstantMX::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::ConstantMX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::ConstantMX::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::ConstantMX::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::ConstantMX::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::ConstantMX::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::ConstantMX::getVertsplit "[INTERNAL]  Create
a vertical split node (vectors only)

";

%feature("docstring") CasADi::ConstantMX::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::ConstantMX::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";


// File: classCasADi_1_1ConstantSX.xml
%feature("docstring") CasADi::ConstantSX "[INTERNAL]  Represents a constant
SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") CasADi::ConstantSX::isZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::ConstantSX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::ConstantSX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") CasADi::ConstantSX::isNan "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::ConstantSX::marked "[INTERNAL] ";

%feature("docstring") CasADi::ConstantSX::isOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::ConstantSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::ConstantSX::hasDep "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::ConstantSX::getIntValue "[INTERNAL]  Get
value of a constant node.

";

%feature("docstring") CasADi::ConstantSX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") CasADi::ConstantSX::isInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::ConstantSX::getName "[INTERNAL] ";

%feature("docstring") CasADi::ConstantSX::isConstant "[INTERNAL]
Properties.

";

%feature("docstring") CasADi::ConstantSX::mark "[INTERNAL] ";

%feature("docstring") CasADi::ConstantSX::dep "[INTERNAL]  get the
reference of a child

";

%feature("docstring") CasADi::ConstantSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::ConstantSX::print "[INTERNAL]  print

";

%feature("docstring") CasADi::ConstantSX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::ConstantSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::ConstantSX::~ConstantSX "[INTERNAL] ";

%feature("docstring") CasADi::ConstantSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::ConstantSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::ConstantSX::getValue "[INTERNAL]  Get the
value must be defined.

";

%feature("docstring") CasADi::ConstantSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";


// File: classCasADi_1_1ControlledDAEInputIOSchemeVector.xml
%feature("docstring") CasADi::ControlledDAEInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::ControlledDAEInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")
CasADi::ControlledDAEInputIOSchemeVector::getDescription "[INTERNAL]
Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::ControlledDAEInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
CasADi::ControlledDAEInputIOSchemeVector::ControlledDAEInputIOSchemeVector "[INTERNAL] ";

%feature("docstring")
CasADi::ControlledDAEInputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::ControlledDAEInputIOSchemeVector::print "[INTERNAL]  Print a destription of the object.

";

%feature("docstring") CasADi::ControlledDAEInputIOSchemeVector "[INTERNAL]
Helper function for 'ControlledDAEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::ControlledDAEInputIOSchemeVector::__getitem__
"[INTERNAL] ";


// File: classCasADi_1_1ControlSimulator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::ControlSimulator::getMajorIndex "

Get the index i such that gridminor[i] == gridmajor.

";

%feature("docstring") CasADi::ControlSimulator::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::ControlSimulator::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::ControlSimulator::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::ControlSimulator::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::ControlSimulator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::ControlSimulator::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::ControlSimulator::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::ControlSimulator::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::ControlSimulator::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::ControlSimulator::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::ControlSimulator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::ControlSimulator::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::ControlSimulator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::ControlSimulator::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::ControlSimulator::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::ControlSimulator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::ControlSimulator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::ControlSimulator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::ControlSimulator::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::ControlSimulator::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::ControlSimulator::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::ControlSimulator::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::ControlSimulator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::ControlSimulator::evaluate "

Evaluate.

";

%feature("docstring") CasADi::ControlSimulator::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::ControlSimulator::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::ControlSimulator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::ControlSimulator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::ControlSimulator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::ControlSimulator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::ControlSimulator::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::ControlSimulator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::ControlSimulator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::ControlSimulator::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::ControlSimulator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::ControlSimulator::ControlSimulator "

>  CasADi::ControlSimulator::ControlSimulator()
------------------------------------------------------------------------

Default constructor.

>  CasADi::ControlSimulator::ControlSimulator(const Function &dae, const Function &output_fcn, const std::vector< double > &grid)
------------------------------------------------------------------------

Creates a piecewise simulator.

Parameters:
-----------

ffcn:  Continuous time dynamics, an CasADi::Function with the folowing
mapping:

>Input scheme: CasADi::ControlledDAEInput (CONTROL_DAE_NUM_IN = 10) [controldaeIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROL_DAE_T          | t                      | Global physical time.  |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X          | x                      | State vector           |
|                        |                        | (dimension nx-by-1).   |
|                        |                        | Should have same       |
|                        |                        | amount of non-zeros as |
|                        |                        | DAEOutput:DAE_RES .    |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_Z          | z                      | Algebraic state vector |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_P          | p                      | Parameter vector       |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U          | u                      | Control vector         |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U_INTERP   | u_interp               | Control vector,        |
|                        |                        | linearly interpolated  |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X_MAJOR    | x_major                | State vector           |
|                        |                        | (dimension nx-by-1) at |
|                        |                        | the last major time-   |
|                        |                        | step .                 |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_T0         | t0                     | Time at start of       |
|                        |                        | control interval       |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_TF         | tf                     | Time at end of control |
|                        |                        | interval (1-by-1) .    |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

output_fcn:  output function which maps ControlledDAEInput or DAEInput to n
outputs.

>Input scheme: CasADi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Input scheme: CasADi::ControlledDAEInput (CONTROL_DAE_NUM_IN = 10) [controldaeIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROL_DAE_T          | t                      | Global physical time.  |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X          | x                      | State vector           |
|                        |                        | (dimension nx-by-1).   |
|                        |                        | Should have same       |
|                        |                        | amount of non-zeros as |
|                        |                        | DAEOutput:DAE_RES .    |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_Z          | z                      | Algebraic state vector |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_P          | p                      | Parameter vector       |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U          | u                      | Control vector         |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U_INTERP   | u_interp               | Control vector,        |
|                        |                        | linearly interpolated  |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X_MAJOR    | x_major                | State vector           |
|                        |                        | (dimension nx-by-1) at |
|                        |                        | the last major time-   |
|                        |                        | step .                 |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_T0         | t0                     | Time at start of       |
|                        |                        | control interval       |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_TF         | tf                     | Time at end of control |
|                        |                        | interval (1-by-1) .    |
+------------------------+------------------------+------------------------+

Parameters:
-----------

grid:  the major time grid

>  CasADi::ControlSimulator::ControlSimulator(const Function &dae, const std::vector< double > &grid)
------------------------------------------------------------------------

Output function equal to the state.

";

%feature("docstring") CasADi::ControlSimulator::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::ControlSimulator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::ControlSimulator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::ControlSimulator "[INTERNAL]  Piecewise
Simulation class.

A ControlSimulator can be seen as a chain of Simulators whereby some
parameters change from one Simulator to the next.

These changing parameters can typically be interpreted as \"controls\" in
the context of dynamic optimization.

We discriminate between the following time steps: Major time-steps. These
are the time steps provided by the supplied grid. Controls are constant
inbetween major time-steps  Minor time-steps. These are time steps linearly
interpolated from one major time-step to the next. The option 'nf' regulates
how many minor time-steps are taken.  Integration time-steps. Time steps
that the supplied integrator might choose to integrate the continous
dynamics. They are not important what ControlSimulator is concerned.  np
Number of parameters nu Number of controls ns The number of major grid
points, as supplied in the constructor nf The number of minor grid points
per major interval

Joris Gillis

>Input scheme: CasADi::ControlSimulatorInput (CONTROLSIMULATOR_NUM_IN = 4) [controlsimulatorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROLSIMULATOR_X0    | x0                     | Differential or        |
|                        |                        | algebraic state at t0  |
|                        |                        | (dimension nx-by-1) .  |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_P     | p                      | Parameters that are    |
|                        |                        | fixed over the entire  |
|                        |                        | horizon (dimension np- |
|                        |                        | by-1) .                |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_U     | u                      | Parameters that change |
|                        |                        | over the integration   |
|                        |                        | intervals (dimension   |
|                        |                        | nu-by-(ns-1)) .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| control_endp | OT_BOOLEAN   | false        | Include a    | CasADi::Cont |
| oint         |              |              | control      | rolSimulator |
|              |              |              | value at the | Internal     |
|              |              |              | end of the   |              |
|              |              |              | simulation   |              |
|              |              |              | domain. Used |              |
|              |              |              | for interpol |              |
|              |              |              | ation.       |              |
+--------------+--------------+--------------+--------------+--------------+
| control_inte | OT_STRING    | \"none\"       | none|nearest | CasADi::Cont |
| rpolation    |              |              | |linear      | rolSimulator |
|              |              |              |              | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| integrator   | OT_INTEGRATO | GenericType( | An           | CasADi::Cont |
|              | R            | )            | integrator   | rolSimulator |
|              |              |              | creator      | Internal     |
|              |              |              | function     |              |
+--------------+--------------+--------------+--------------+--------------+
| integrator_o | OT_DICTIONAR | GenericType( | Options to   | CasADi::Cont |
| ptions       | Y            | )            | be passed to | rolSimulator |
|              |              |              | the          | Internal     |
|              |              |              | integrator   |              |
+--------------+--------------+--------------+--------------+--------------+
| minor_grid   | OT_INTEGERVE | GenericType( | The local    | CasADi::Cont |
|              | CTOR         | )            | grid used on | rolSimulator |
|              |              |              | each major   | Internal     |
|              |              |              | interval,    |              |
|              |              |              | with time    |              |
|              |              |              | normalized   |              |
|              |              |              | to 1. By     |              |
|              |              |              | default,     |              |
|              |              |              | option 'nf'  |              |
|              |              |              | is used to   |              |
|              |              |              | construct a  |              |
|              |              |              | linearly     |              |
|              |              |              | spaced grid. |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nf           | OT_INTEGER   | 1            | Number of    | CasADi::Cont |
|              |              |              | minor        | rolSimulator |
|              |              |              | grained      | Internal     |
|              |              |              | integration  |              |
|              |              |              | steps per    |              |
|              |              |              | major        |              |
|              |              |              | interval.    |              |
|              |              |              | nf>0 must    |              |
|              |              |              | hold. This   |              |
|              |              |              | option is    |              |
|              |              |              | not used     |              |
|              |              |              | when         |              |
|              |              |              | 'minor_grid' |              |
|              |              |              | is provided. |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| simulator_op | OT_DICTIONAR | GenericType( | Options to   | CasADi::Cont |
| tions        | Y            | )            | be passed to | rolSimulator |
|              |              |              | the          | Internal     |
|              |              |              | simulator    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: control_simulator.hpp ";

%feature("docstring") CasADi::ControlSimulator::spCanEvaluate "[INTERNAL]
Is the class able to propate seeds through the algorithm? (for usage, see
the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::ControlSimulator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::ControlSimulator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::ControlSimulator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::ControlSimulator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::ControlSimulator::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::ControlSimulator::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::ControlSimulator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::ControlSimulator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::ControlSimulator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::ControlSimulator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::ControlSimulator::spInit "[INTERNAL]  Reset
the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::ControlSimulator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::ControlSimulator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::ControlSimulator::solve "

the same as evaluate()

";

%feature("docstring") CasADi::ControlSimulator::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::ControlSimulator::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::ControlSimulator::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::ControlSimulator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::ControlSimulator::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::ControlSimulator::getMinorT "

Get the (minor) time grid The length is (ns-1)*nf + 1

";

%feature("docstring") CasADi::ControlSimulator::getMinorU "

Get the controls, sampled on the minor timescale. Number of rows is
(ns-1)*nf.

";

%feature("docstring") CasADi::ControlSimulator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::ControlSimulator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::ControlSimulator::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::ControlSimulator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::ControlSimulator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::ControlSimulator::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::ControlSimulator::isInit "

Is initialized?

";

%feature("docstring") CasADi::ControlSimulator::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::ControlSimulator::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::ControlSimulator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::ControlSimulator::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::ControlSimulator::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::ControlSimulator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::ControlSimulator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::ControlSimulator::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::ControlSimulator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::ControlSimulator::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::ControlSimulator::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::ControlSimulator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::ControlSimulator::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::ControlSimulator::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::ControlSimulator::getOption "

get an option value

";

%feature("docstring") CasADi::ControlSimulator::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::ControlSimulator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::ControlSimulator::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::ControlSimulator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::ControlSimulator::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::ControlSimulator::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::ControlSimulator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::ControlSimulator::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::ControlSimulator::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::ControlSimulator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::ControlSimulator::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::ControlSimulator::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::ControlSimulator::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") CasADi::ControlSimulator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";


// File: classCasADi_1_1ControlSimulatorInputIOSchemeVector.xml
%feature("docstring") CasADi::ControlSimulatorInputIOSchemeVector::print "[INTERNAL]  Print a destription of the object.

";

%feature("docstring")
CasADi::ControlSimulatorInputIOSchemeVector::ControlSimulatorInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") CasADi::ControlSimulatorInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::ControlSimulatorInputIOSchemeVector "[INTERNAL]  Helper function for 'ControlSimulatorInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::ControlSimulatorInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") CasADi::ControlSimulatorInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
CasADi::ControlSimulatorInputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring")
CasADi::ControlSimulatorInputIOSchemeVector::getDescription "[INTERNAL]
Return a string with a destription (for SWIG)

";

%feature("docstring")
CasADi::ControlSimulatorInputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classCasADi_1_1CplexSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::CplexSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::CplexSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::CplexSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::CplexSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::CplexSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") CasADi::CplexSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::CplexSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::CplexSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CplexSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::CplexSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::CplexSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::CplexSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::CplexSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::CplexSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") CasADi::CplexSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::CplexSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::CplexSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::CplexSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::CplexSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::CplexSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::CplexSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::CplexSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::CplexSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::CplexSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::CplexSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CplexSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::CplexSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::CplexSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::CplexSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CplexSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::CplexSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::CplexSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::CplexSolver "[INTERNAL]  Interface to Cplex
solver for sparse Quadratic Programs.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x   x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX                  with :       H sparse (n x n) positive
definite       g dense  (n x 1) n: number of decision variables (x)     nc:
number of constraints (A)

If H is not positive-definite, the solver should throw an error. Attila
Kozma, Joel Andersson

>Input scheme: CasADi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| barrier_maxi | OT_INTEGER   | 2.100e+09    | Maximum      | CasADi::Cple |
| ter          |              |              | number of    | xInternal    |
|              |              |              | barrier      |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| convex       | OT_BOOLEAN   | true         | Indicates if | CasADi::Cple |
|              |              |              | the QP is    | xInternal    |
|              |              |              | convex or    |              |
|              |              |              | not (affects |              |
|              |              |              | only the     |              |
|              |              |              | barrier      |              |
|              |              |              | method).     |              |
+--------------+--------------+--------------+--------------+--------------+
| dep_check    | OT_STRING    | \"off\"        | Detect       | CasADi::Cple |
|              |              |              | redundant    | xInternal    |
|              |              |              | constraints. |              |
|              |              |              | (automatic:- |              |
|              |              |              | 1|off:0|begi |              |
|              |              |              | n:1|end:2|bo |              |
|              |              |              | th:3)        |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| dump_filenam | OT_STRING    | \"qp.dat\"     | The filename | CasADi::Cple |
| e            |              |              | to dump to.  | xInternal    |
+--------------+--------------+--------------+--------------+--------------+
| dump_to_file | OT_BOOLEAN   | false        | Dumps QP to  | CasADi::Cple |
|              |              |              | file in      | xInternal    |
|              |              |              | CPLEX        |              |
|              |              |              | format.      |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_method    | OT_STRING    | \"automatic\"  | Determines   | CasADi::Cple |
|              |              |              | which CPLEX  | xInternal    |
|              |              |              | algorithm to |              |
|              |              |              | use. (automa |              |
|              |              |              | tic|primal_s |              |
|              |              |              | implex|dual_ |              |
|              |              |              | simplex|netw |              |
|              |              |              | ork|barrier| |              |
|              |              |              | sifting|conc |              |
|              |              |              | urrent|cross |              |
|              |              |              | over)        |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| simplex_maxi | OT_INTEGER   | 2.100e+09    | Maximum      | CasADi::Cple |
| ter          |              |              | number of    | xInternal    |
|              |              |              | simplex      |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| tol          | OT_REAL      | 0.000        | Tolerance of | CasADi::Cple |
|              |              |              | solver       | xInternal    |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start   | OT_BOOLEAN   | false        | Use warm     | CasADi::Cple |
|              |              |              | start with   | xInternal    |
|              |              |              | simplex      |              |
|              |              |              | methods      |              |
|              |              |              | (affects     |              |
|              |              |              | only the     |              |
|              |              |              | simplex      |              |
|              |              |              | methods).    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: cplex_solver.hpp ";

%feature("docstring") CasADi::CplexSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::CplexSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::CplexSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::CplexSolver::getOption "

get an option value

";

%feature("docstring") CasADi::CplexSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::CplexSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::CplexSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::CplexSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::CplexSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::CplexSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::CplexSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::CplexSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::CplexSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::CplexSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::CplexSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::CplexSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::CplexSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::CplexSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::CplexSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::CplexSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::CplexSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::CplexSolver::CplexSolver "

>  CasADi::CplexSolver::CplexSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::CplexSolver::CplexSolver(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") CasADi::CplexSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::CplexSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::CplexSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::CplexSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::CplexSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::CplexSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CplexSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::CplexSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::CplexSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::CplexSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::CplexSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::CplexSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::CplexSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::CplexSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::CplexSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::CplexSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CplexSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::CplexSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::CplexSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::CplexSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::CplexSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::CplexSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::CplexSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::CplexSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::CplexSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::CplexSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::CplexSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::CplexSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::CplexSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::CplexSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::CplexSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::CplexSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::CplexSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::CplexSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::CplexSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::CplexSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::CplexSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::CplexSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::CplexSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::CplexSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::CplexSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::CplexSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::CplexSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";


// File: classCasADi_1_1CSparse.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::CSparse::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::CSparse::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::CSparse::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::CSparse::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::CSparse::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::CSparse::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::CSparse::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::CSparse::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::CSparse::CSparse "

>  CasADi::CSparse::CSparse()
------------------------------------------------------------------------

Default (empty) constructor.

>  CasADi::CSparse::CSparse(const Sparsity &sp, int nrhs=1)
------------------------------------------------------------------------

Create a linear solver given a sparsity pattern.

";

%feature("docstring") CasADi::CSparse::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") CasADi::CSparse::prepare "

Factorize the matrix.

";

%feature("docstring") CasADi::CSparse::spSolve "[INTERNAL]  Propagate
sparsity through a linear solve.

";

%feature("docstring") CasADi::CSparse::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::CSparse::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::CSparse::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::CSparse::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::CSparse::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::CSparse::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CSparse::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::CSparse::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::CSparse::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::CSparse::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::CSparse::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::CSparse::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::CSparse::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CSparse::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::CSparse::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::CSparse::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::CSparse::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::CSparse::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::CSparse::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::CSparse::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::CSparse::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::CSparse::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::CSparse::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::CSparse::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::CSparse::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::CSparse::prepared "

Check if prepared.

";

%feature("docstring") CasADi::CSparse::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::CSparse::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::CSparse::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::CSparse::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::CSparse::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::CSparse::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::CSparse::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::CSparse::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::CSparse::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::CSparse::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CSparse::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::CSparse::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::CSparse::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::CSparse::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::CSparse::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::CSparse "[INTERNAL]   LinearSolver with
CSparse Interface.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

CSparse is an CasADi::Function mapping from 2 inputs [ A (matrix),b
(vector)] to one output [x (vector)].

The usual procedure to use CSparse is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

>Input scheme: CasADi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: CasADi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: csparse.hpp ";

%feature("docstring") CasADi::CSparse::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::CSparse::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::CSparse::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::CSparse::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::CSparse::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::CSparse::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::CSparse::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::CSparse::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::CSparse::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::CSparse::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::CSparse::solve "

>  void CasADi::LinearSolver::solve(bool transpose=false)
------------------------------------------------------------------------

Solve the system of equations, internal vector.

>  void CasADi::LinearSolver::solve(double *x, int nrhs=1, bool transpose=false)
------------------------------------------------------------------------
[INTERNAL] 
 Solve the factorized system of equations.

>  MX CasADi::LinearSolver::solve(const MX &A, const MX &B, bool transpose=false)
------------------------------------------------------------------------

Create a solve node.

>  void CasADi::Function::solve()
------------------------------------------------------------------------

the same as evaluate()

";

%feature("docstring") CasADi::CSparse::evaluate "

Evaluate.

";

%feature("docstring") CasADi::CSparse::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::CSparse::callDerivative "[INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring") CasADi::CSparse::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::CSparse::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::CSparse::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::CSparse::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::CSparse::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::CSparse::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CSparse::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::CSparse::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::CSparse::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::CSparse::isInit "

Is initialized?

";

%feature("docstring") CasADi::CSparse::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::CSparse::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::CSparse::outputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CSparse::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::CSparse::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::CSparse::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") CasADi::CSparse::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") CasADi::CSparse::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::CSparse::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::CSparse::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::CSparse::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::CSparse::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::CSparse::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::CSparse::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::CSparse::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::CSparse::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::CSparse::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::CSparse::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::CSparse::getOption "

get an option value

";

%feature("docstring") CasADi::CSparse::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CSparse::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";


// File: classCasADi_1_1CSparseCholesky.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::CSparseCholesky::getCount " [INTERNAL]  Get the reference count.

";

%feature("docstring") CasADi::CSparseCholesky::prepare "

Factorize the matrix.

";

%feature("docstring") CasADi::CSparseCholesky::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::CSparseCholesky::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::CSparseCholesky::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::CSparseCholesky::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::CSparseCholesky::isInit "

Is initialized?

";

%feature("docstring") CasADi::CSparseCholesky::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::CSparseCholesky::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CSparseCholesky::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::CSparseCholesky::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::CSparseCholesky::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CSparseCholesky::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::CSparseCholesky::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::CSparseCholesky::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::CSparseCholesky::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::CSparseCholesky::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::CSparseCholesky::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::CSparseCholesky::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CSparseCholesky::spCanEvaluate "[INTERNAL]
Is the class able to propate seeds through the algorithm? (for usage, see
the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CSparseCholesky::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::CSparseCholesky::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::CSparseCholesky::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::CSparseCholesky::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::CSparseCholesky::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::CSparseCholesky::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::CSparseCholesky::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::CSparseCholesky::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::CSparseCholesky::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::CSparseCholesky::getFactorizationSparsity "

Obtain a symbolic Cholesky factorization.

";

%feature("docstring") CasADi::CSparseCholesky::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::CSparseCholesky::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::CSparseCholesky::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::CSparseCholesky::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::CSparseCholesky::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::CSparseCholesky::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::CSparseCholesky::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::CSparseCholesky::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::CSparseCholesky::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::CSparseCholesky::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::CSparseCholesky::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::CSparseCholesky::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::CSparseCholesky::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::CSparseCholesky::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::CSparseCholesky::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::CSparseCholesky::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::CSparseCholesky::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") CasADi::CSparseCholesky::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::CSparseCholesky::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::CSparseCholesky::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::CSparseCholesky::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::CSparseCholesky::CSparseCholesky "

>  CasADi::CSparseCholesky::CSparseCholesky()
------------------------------------------------------------------------

Default (empty) constructor.

>  CasADi::CSparseCholesky::CSparseCholesky(const Sparsity &sp, int nrhs=1)
------------------------------------------------------------------------

Create a linear solver given a sparsity pattern.

";

%feature("docstring") CasADi::CSparseCholesky::getOption "

get an option value

";

%feature("docstring") CasADi::CSparseCholesky::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::CSparseCholesky::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::CSparseCholesky::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::CSparseCholesky::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::CSparseCholesky::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::CSparseCholesky::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::CSparseCholesky::evaluate "

Evaluate.

";

%feature("docstring") CasADi::CSparseCholesky "[INTERNAL]   LinearSolver
with CSparseCholesky Interface.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

CSparseCholesky is an CasADi::Function mapping from 2 inputs [ A (matrix),b
(vector)] to one output [x (vector)].

A = LL' Ax = b LL'x = b L'x = L^-1 b

The usual procedure to use CSparseCholesky is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

>Input scheme: CasADi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: CasADi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: csparse_cholesky.hpp ";

%feature("docstring") CasADi::CSparseCholesky::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::CSparseCholesky::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::CSparseCholesky::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::CSparseCholesky::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::CSparseCholesky::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::CSparseCholesky::spInit "[INTERNAL]  Reset
the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CSparseCholesky::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::CSparseCholesky::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::CSparseCholesky::solve "

>  void CasADi::LinearSolver::solve(bool transpose=false)
------------------------------------------------------------------------

Solve the system of equations, internal vector.

>  void CasADi::LinearSolver::solve(double *x, int nrhs=1, bool transpose=false)
------------------------------------------------------------------------
[INTERNAL] 
 Solve the factorized system of equations.

>  MX CasADi::LinearSolver::solve(const MX &A, const MX &B, bool transpose=false)
------------------------------------------------------------------------

Create a solve node.

>  void CasADi::Function::solve()
------------------------------------------------------------------------

the same as evaluate()

";

%feature("docstring") CasADi::CSparseCholesky::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::CSparseCholesky::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::CSparseCholesky::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::CSparseCholesky::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CSparseCholesky::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::CSparseCholesky::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::CSparseCholesky::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::CSparseCholesky::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::CSparseCholesky::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::CSparseCholesky::getFactorization "

Obtain a numeric Cholesky factorization.

";

%feature("docstring") CasADi::CSparseCholesky::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::CSparseCholesky::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::CSparseCholesky::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::CSparseCholesky::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::CSparseCholesky::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::CSparseCholesky::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::CSparseCholesky::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::CSparseCholesky::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::CSparseCholesky::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::CSparseCholesky::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::CSparseCholesky::spSolve "[INTERNAL]
Propagate sparsity through a linear solve.

";

%feature("docstring") CasADi::CSparseCholesky::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::CSparseCholesky::solveL "

Solve the system of equations Lx = b.

";

%feature("docstring") CasADi::CSparseCholesky::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::CSparseCholesky::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::CSparseCholesky::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::CSparseCholesky::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::CSparseCholesky::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::CSparseCholesky::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::CSparseCholesky::prepared "

Check if prepared.

";

%feature("docstring") CasADi::CSparseCholesky::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::CSparseCholesky::evalMX "

[DEPRECATED]

";


// File: classCasADi_1_1CustomEvaluate.xml
%feature("docstring") CasADi::CustomEvaluate::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::CustomEvaluate::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::CustomEvaluate::checkNode "[INTERNAL]  Assert
that the node is pointing to the right type of object

";

%feature("docstring") CasADi::CustomEvaluate::CustomEvaluate "

>  CasADi::CustomEvaluate::CustomEvaluate()
------------------------------------------------------------------------

Default constructor.

>  CasADi::CustomEvaluate::CustomEvaluate(CustomEvaluateCPtr ptr)
------------------------------------------------------------------------

Construct from C pointer.

";

%feature("docstring") CasADi::CustomEvaluate::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::CustomEvaluate::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::CustomEvaluate::isInit "

Is initialized?

";

%feature("docstring") CasADi::CustomEvaluate::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::CustomEvaluate::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::CustomEvaluate::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::CustomEvaluate::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::CustomEvaluate::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::CustomEvaluate "[INTERNAL]   CustomEvaluate.

In C++, supply a CustomEvaluateCPtr function pointer

In python, supply a callable, annotated with pyevaluate decorator

C++ includes: functor.hpp ";

%feature("docstring") CasADi::CustomEvaluate::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::CustomEvaluate::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::CustomEvaluate::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::CustomEvaluate::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::CustomEvaluate::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::CustomEvaluate::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::CustomEvaluate::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";


// File: classCasADi_1_1CustomFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::CustomFunction::CustomFunction "

>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const std::vector< Sparsity > &inputscheme, const std::vector< Sparsity > &outputscheme)

>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const IOSchemeVector< Sparsity > &inputscheme, const std::vector< Sparsity > &outputscheme)

>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const std::vector< Sparsity > &inputscheme, const IOSchemeVector< Sparsity > &outputscheme)

>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const IOSchemeVector< Sparsity > &inputscheme, const IOSchemeVector< Sparsity > &outputscheme)
------------------------------------------------------------------------

Create a function with input/output schemes given.

>  CasADi::CustomFunction::CustomFunction()
------------------------------------------------------------------------

default constructor

>  CasADi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn)
------------------------------------------------------------------------

Create a function, user sets inputs outputs manually.

";

%feature("docstring") CasADi::CustomFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::CustomFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::CustomFunction::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::CustomFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::CustomFunction::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::CustomFunction::getOption "

get an option value

";

%feature("docstring") CasADi::CustomFunction::checkNode "

Check if the pointer points towards a valid object.

";

%feature("docstring") CasADi::CustomFunction::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::CustomFunction::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::CustomFunction::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::CustomFunction::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::CustomFunction::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::CustomFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::CustomFunction::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::CustomFunction::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::CustomFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::CustomFunction::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::CustomFunction::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CustomFunction::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::CustomFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::CustomFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::CustomFunction::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::CustomFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::CustomFunction::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CustomFunction::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::CustomFunction::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::CustomFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::CustomFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::CustomFunction::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::CustomFunction::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CustomFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::CustomFunction::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::CustomFunction::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::CustomFunction::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::CustomFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::CustomFunction::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::CustomFunction::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::CustomFunction::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::CustomFunction::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::CustomFunction::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::CustomFunction::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::CustomFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::CustomFunction::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::CustomFunction::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::CustomFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::CustomFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::CustomFunction::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::CustomFunction::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::CustomFunction::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CustomFunction::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::CustomFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::CustomFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::CustomFunction::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CustomFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::CustomFunction::solve "

the same as evaluate()

";

%feature("docstring") CasADi::CustomFunction::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::CustomFunction::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CustomFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::CustomFunction::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::CustomFunction::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::CustomFunction::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::CustomFunction::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::CustomFunction::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::CustomFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::CustomFunction::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::CustomFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::CustomFunction::evaluate "

Evaluate.

";

%feature("docstring") CasADi::CustomFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::CustomFunction::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::CustomFunction::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::CustomFunction::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::CustomFunction "[INTERNAL]  Interface to a
custom function.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: custom_function.hpp ";

%feature("docstring") CasADi::CustomFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::CustomFunction::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::CustomFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::CustomFunction::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::CustomFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::CustomFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::CustomFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::CustomFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::CustomFunction::isInit "

Is initialized?

";

%feature("docstring") CasADi::CustomFunction::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::CustomFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::CustomFunction::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::CustomFunction::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::CustomFunction::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::CustomFunction::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::CustomFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::CustomFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::CustomFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::CustomFunction::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::CustomFunction::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::CustomFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::CustomFunction::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::CustomFunction::hasSetOption "

check if the user has there is an option str

";


// File: classCasADi_1_1CVodesIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::CVodesIntegrator::assertInit " [INTERNAL]  Assert that it is
initialized

";

%feature("docstring") CasADi::CVodesIntegrator::resetB "

Reset the backward problem Time will be set to tf and backward state to
input(INTEGRATOR_RX0)

";

%feature("docstring") CasADi::CVodesIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::CVodesIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::CVodesIntegrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::CVodesIntegrator::spInit "[INTERNAL]  Reset
the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CVodesIntegrator::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::CVodesIntegrator::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::CVodesIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") CasADi::CVodesIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::CVodesIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::CVodesIntegrator::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::CVodesIntegrator::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::CVodesIntegrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::CVodesIntegrator::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::CVodesIntegrator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::CVodesIntegrator::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::CVodesIntegrator::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::CVodesIntegrator::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::CVodesIntegrator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::CVodesIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::CVodesIntegrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::CVodesIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::CVodesIntegrator::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::CVodesIntegrator::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CVodesIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::CVodesIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::CVodesIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") CasADi::CVodesIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::CVodesIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::CVodesIntegrator::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::CVodesIntegrator::isInit "

Is initialized?

";

%feature("docstring") CasADi::CVodesIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::CVodesIntegrator::getOption "

get an option value

";

%feature("docstring") CasADi::CVodesIntegrator::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::CVodesIntegrator::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::CVodesIntegrator::evaluate "

Evaluate.

";

%feature("docstring") CasADi::CVodesIntegrator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CVodesIntegrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::CVodesIntegrator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::CVodesIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::CVodesIntegrator::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::CVodesIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::CVodesIntegrator::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::CVodesIntegrator::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::CVodesIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::CVodesIntegrator::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CVodesIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::CVodesIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::CVodesIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::CVodesIntegrator::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::CVodesIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::CVodesIntegrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::CVodesIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::CVodesIntegrator::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::CVodesIntegrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::CVodesIntegrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::CVodesIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::CVodesIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::CVodesIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::CVodesIntegrator::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::CVodesIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::CVodesIntegrator::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::CVodesIntegrator::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::CVodesIntegrator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::CVodesIntegrator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::CVodesIntegrator "[INTERNAL]  Interface to
CVodes from the Sundials suite.

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x,z,p,t) Forward ODE  0 = fz(x,z,p,t)
Forward algebraic equations  der(q) = fq(x,z,p,t)                  Forward
quadratures Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  = 0
Backward integration from t=tf to t=t0  der(rx) = gx(rx,rz,rp,x,z,p,t)
Backward ODE  0 = gz(rx,rz,rp,x,z,p,t)        Backward algebraic equations
der(rq) = gq(rx,rz,rp,x,z,p,t)        Backward quadratures where we assume
that both the forward and backwards integrations are index-1  (i.e. dfz/dz,
dgz/drz are invertible) and furthermore that gx, gz and gq have a linear
dependency on rx, rz and rp.

A call to evaluate will integrate to the end.

You can retrieve the entire state trajectory as follows, after the evaluate
call: Call reset. Then call integrate(t_i) and getOuput for a series of
times t_i.

>Input scheme: CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| abstol       | OT_REAL      | 0.000        | Absolute     | CasADi::Sund |
|              |              |              | tolerence    | ialsInternal |
|              |              |              | for the IVP  |              |
|              |              |              | solution     |              |
+--------------+--------------+--------------+--------------+--------------+
| abstolB      | OT_REAL      | GenericType( | Absolute     | CasADi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | abstol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | CasADi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| disable_inte | OT_BOOLEAN   | false        | Disable      | CasADi::CVod |
| rnal_warning |              |              | CVodes       | esInternal   |
| s            |              |              | internal     |              |
|              |              |              | warning      |              |
|              |              |              | messages     |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | true         | Use exact    | CasADi::Sund |
| an           |              |              | Jacobian     | ialsInternal |
|              |              |              | information  |              |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | GenericType( | Use exact    | CasADi::Sund |
| anB          |              | )            | Jacobian     | ialsInternal |
|              |              |              | information  |              |
|              |              |              | for the      |              |
|              |              |              | backward     |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to exa |              |
|              |              |              | ct_jacobian] |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | CasADi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| finite_diffe | OT_BOOLEAN   | false        | Use finite   | CasADi::Sund |
| rence_fsens  |              |              | differences  | ialsInternal |
|              |              |              | to           |              |
|              |              |              | approximate  |              |
|              |              |              | the forward  |              |
|              |              |              | sensitivity  |              |
|              |              |              | equations    |              |
|              |              |              | (if AD is    |              |
|              |              |              | not          |              |
|              |              |              | available)   |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_abstol | OT_REAL      | GenericType( | Absolute     | CasADi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | abstol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_all_at | OT_BOOLEAN   | true         | Calculate    | CasADi::CVod |
| _once        |              |              | all right    | esInternal   |
|              |              |              | hand sides   |              |
|              |              |              | of the       |              |
|              |              |              | sensitivity  |              |
|              |              |              | equations at |              |
|              |              |              | once         |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_err_co | OT_BOOLEAN   | true         | include the  | CasADi::Sund |
| n            |              |              | forward sens | ialsInternal |
|              |              |              | itivities in |              |
|              |              |              | all error    |              |
|              |              |              | controls     |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_reltol | OT_REAL      | GenericType( | Relative     | CasADi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | reltol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_scalin | OT_REALVECTO | GenericType( | Scaling      | CasADi::Sund |
| g_factors    | R            | )            | factor for   | ialsInternal |
|              |              |              | the          |              |
|              |              |              | components   |              |
|              |              |              | if finite    |              |
|              |              |              | differences  |              |
|              |              |              | is used      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_sensit | OT_INTEGERVE | GenericType( | Specifies    | CasADi::Sund |
| iviy_paramet | CTOR         | )            | which        | ialsInternal |
| ers          |              |              | components   |              |
|              |              |              | will be used |              |
|              |              |              | when         |              |
|              |              |              | estimating   |              |
|              |              |              | the          |              |
|              |              |              | sensitivity  |              |
|              |              |              | equations    |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| interpolatio | OT_STRING    | \"hermite\"    | Type of inte | CasADi::Sund |
| n_type       |              |              | rpolation    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint sens |              |
|              |              |              | itivities (h |              |
|              |              |              | ermite|polyn |              |
|              |              |              | omial)       |              |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | \"gmres\"      | (gmres|bcgst | CasADi::Sund |
| lver         |              |              | ab|tfqmr)    | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | GenericType( | (gmres|bcgst | CasADi::Sund |
| lverB        |              | )            | ab|tfqmr)    | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| linear_multi | OT_STRING    | \"bdf\"        | Integrator   | CasADi::CVod |
| step_method  |              |              | scheme       | esInternal   |
|              |              |              | (bdf|adams)  |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | A custom     | CasADi::Sund |
| r            | VER          | )            | linear       | ialsInternal |
|              |              |              | solver       |              |
|              |              |              | creator      |              |
|              |              |              | function     |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | A custom     | CasADi::Sund |
| rB           | VER          | )            | linear       | ialsInternal |
|              |              |              | solver       |              |
|              |              |              | creator      |              |
|              |              |              | function for |              |
|              |              |              | backwards    |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to lin |              |
|              |              |              | ear_solver]  |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | CasADi::Sund |
| r_options    | Y            | )            | be passed to | ialsInternal |
|              |              |              | the linear   |              |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | CasADi::Sund |
| r_optionsB   | Y            | )            | be passed to | ialsInternal |
|              |              |              | the linear   |              |
|              |              |              | solver for   |              |
|              |              |              | backwards    |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to lin |              |
|              |              |              | ear_solver_o |              |
|              |              |              | ptions]      |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | \"dense\"      | (user_define | CasADi::Sund |
| r_type       |              |              | d|dense|band | ialsInternal |
|              |              |              | ed|iterative |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | GenericType( | (user_define | CasADi::Sund |
| r_typeB      |              | )            | d|dense|band | ialsInternal |
|              |              |              | ed|iterative |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | Lower band-  | CasADi::Sund |
| dth          |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | Jacobian (es |              |
|              |              |              | timations)   |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | lower band-  | CasADi::Sund |
| dthB         |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | jacobians    |              |
|              |              |              | for backward |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to low |              |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_krylov   | OT_INTEGER   | 10           | Maximum      | CasADi::Sund |
|              |              |              | Krylov       | ialsInternal |
|              |              |              | subspace     |              |
|              |              |              | size         |              |
+--------------+--------------+--------------+--------------+--------------+
| max_krylovB  | OT_INTEGER   | GenericType( | Maximum      | CasADi::Sund |
|              |              | )            | krylov       | ialsInternal |
|              |              |              | subspace     |              |
|              |              |              | size         |              |
+--------------+--------------+--------------+--------------+--------------+
| max_multiste | OT_INTEGER   | 5            |              | CasADi::Sund |
| p_order      |              |              |              | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| max_num_step | OT_INTEGER   | 10000        | Maximum      | CasADi::Sund |
| s            |              |              | number of    | ialsInternal |
|              |              |              | integrator   |              |
|              |              |              | steps        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | CasADi::CVod |
|              |              |              | uts)  (res|r | esInternal   |
|              |              |              | esB|resQB|re |              |
|              |              |              | set|psetupB| |              |
|              |              |              | djacB)       |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nonlinear_so | OT_STRING    | \"newton\"     | (newton|func | CasADi::CVod |
| lver_iterati |              |              | tional)      | esInternal   |
| on           |              |              |              |              |
+--------------+--------------+--------------+--------------+--------------+
| pretype      | OT_STRING    | \"none\"       | (none|left|r | CasADi::Sund |
|              |              |              | ight|both)   | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| pretypeB     | OT_STRING    | GenericType( | (none|left|r | CasADi::Sund |
|              |              | )            | ight|both)   | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | CasADi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| quad_err_con | OT_BOOLEAN   | false        | Should the   | CasADi::Sund |
|              |              |              | quadratures  | ialsInternal |
|              |              |              | affect the   |              |
|              |              |              | step size    |              |
|              |              |              | control      |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| reltol       | OT_REAL      | 0.000        | Relative     | CasADi::Sund |
|              |              |              | tolerence    | ialsInternal |
|              |              |              | for the IVP  |              |
|              |              |              | solution     |              |
+--------------+--------------+--------------+--------------+--------------+
| reltolB      | OT_REAL      | GenericType( | Relative     | CasADi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | reltol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| sensitivity_ | OT_STRING    | \"simultaneou | (simultaneou | CasADi::Sund |
| method       |              | s\"           | s|staggered) | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| steps_per_ch | OT_INTEGER   | 20           | Number of    | CasADi::Sund |
| eckpoint     |              |              | steps        | ialsInternal |
|              |              |              | between two  |              |
|              |              |              | consecutive  |              |
|              |              |              | checkpoints  |              |
+--------------+--------------+--------------+--------------+--------------+
| stop_at_end  | OT_BOOLEAN   | true         | Stop the     | CasADi::Sund |
|              |              |              | integrator   | ialsInternal |
|              |              |              | at the end   |              |
|              |              |              | of the       |              |
|              |              |              | interval     |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | CasADi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | CasADi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | Upper band-  | CasADi::Sund |
| dth          |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | Jacobian (es |              |
|              |              |              | timations)   |              |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | Upper band-  | CasADi::Sund |
| dthB         |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | jacobians    |              |
|              |              |              | for backward |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to upp |              |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | false        | Precondition | CasADi::Sund |
| tioner       |              |              | an iterative | ialsInternal |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | GenericType( | Precondition | CasADi::Sund |
| tionerB      |              | )            | an iterative | ialsInternal |
|              |              |              | solver for   |              |
|              |              |              | the          |              |
|              |              |              | backwards    |              |
|              |              |              | problem      |              |
|              |              |              | [default:    |              |
|              |              |              | equal to use |              |
|              |              |              | _preconditio |              |
|              |              |              | ner]         |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+---------+--------------------------+
|   Id    |         Used in          |
+=========+==========================+
| djacB   | CasADi::CVodesInternal   |
+---------+--------------------------+
| inputs  | CasADi::FunctionInternal |
+---------+--------------------------+
| outputs | CasADi::FunctionInternal |
+---------+--------------------------+
| psetupB | CasADi::CVodesInternal   |
+---------+--------------------------+
| res     | CasADi::CVodesInternal   |
+---------+--------------------------+
| resB    | CasADi::CVodesInternal   |
+---------+--------------------------+
| resQB   | CasADi::CVodesInternal   |
+---------+--------------------------+
| reset   | CasADi::CVodesInternal   |
+---------+--------------------------+

>List of available stats
+-------------+------------------------+
|     Id      |        Used in         |
+=============+========================+
| nlinsetups  | CasADi::CVodesInternal |
+-------------+------------------------+
| nlinsetupsB | CasADi::CVodesInternal |
+-------------+------------------------+
| nsteps      | CasADi::CVodesInternal |
+-------------+------------------------+
| nstepsB     | CasADi::CVodesInternal |
+-------------+------------------------+

Diagrams

C++ includes: cvodes_integrator.hpp ";

%feature("docstring") CasADi::CVodesIntegrator::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::CVodesIntegrator::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::CVodesIntegrator::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::CVodesIntegrator::setStopTime "

Set a stop time for the forward integration.

";

%feature("docstring") CasADi::CVodesIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::CVodesIntegrator::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::CVodesIntegrator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::CVodesIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::CVodesIntegrator::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::CVodesIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::CVodesIntegrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::CVodesIntegrator::clone "

Clone.

";

%feature("docstring") CasADi::CVodesIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") CasADi::CVodesIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::CVodesIntegrator::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::CVodesIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::CVodesIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::CVodesIntegrator::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::CVodesIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") CasADi::CVodesIntegrator::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::CVodesIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::CVodesIntegrator::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::CVodesIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") CasADi::CVodesIntegrator::CVodesIntegrator "

>  CasADi::CVodesIntegrator::CVodesIntegrator()
------------------------------------------------------------------------

Default constructor.

>  CasADi::CVodesIntegrator::CVodesIntegrator(const Function &f, const Function &g=Function())
------------------------------------------------------------------------

Create an integrator for explicit ODEs.

Parameters:
-----------

f:  dynamical system

>Input scheme: CasADi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: CasADi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: CasADi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: CasADi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring") CasADi::CVodesIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::CVodesIntegrator::solve "

the same as evaluate()

";

%feature("docstring") CasADi::CVodesIntegrator::spCanEvaluate "[INTERNAL]
Is the class able to propate seeds through the algorithm? (for usage, see
the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::CVodesIntegrator::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::CVodesIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::CVodesIntegrator::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::CVodesIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::CVodesIntegrator::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::CVodesIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") CasADi::CVodesIntegrator::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::CVodesIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::CVodesIntegrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::CVodesIntegrator::getOutputScheme "

Get output scheme.

";


// File: classCasADi_1_1DAEInputIOSchemeVector.xml
%feature("docstring") CasADi::DAEInputIOSchemeVector::DAEInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") CasADi::DAEInputIOSchemeVector "[INTERNAL]  Helper
function for 'DAEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::DAEInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::DAEInputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::DAEInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::DAEInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::DAEInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::DAEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::DAEInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classCasADi_1_1DAEOutputIOSchemeVector.xml
%feature("docstring") CasADi::DAEOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring")
CasADi::DAEOutputIOSchemeVector::DAEOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::DAEOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::DAEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::DAEOutputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::DAEOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::DAEOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::DAEOutputIOSchemeVector "[INTERNAL]  Helper
function for 'DAEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::DAEOutputIOSchemeVector::__len__ "[INTERNAL]
";


// File: classCasADi_1_1DenseMultiplication.xml
%feature("docstring") CasADi::DenseMultiplication::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::DenseMultiplication::getDeterminant "[INTERNAL]   Determinant.

";

%feature("docstring") CasADi::DenseMultiplication::getBinarySwitch "[INTERNAL]  Get a binary operation operation.

";

%feature("docstring") CasADi::DenseMultiplication::sameOpAndDeps "[INTERNAL]  Checks if two nodes have the same operation and have equivalent
dependencies up to a given depth.

";

%feature("docstring") CasADi::DenseMultiplication::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") CasADi::DenseMultiplication::isBinaryOp "[INTERNAL]
Check if binary operation.

";

%feature("docstring") CasADi::DenseMultiplication::repr "[INTERNAL]  Print
a representation.

";

%feature("docstring") CasADi::DenseMultiplication::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::DenseMultiplication::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") CasADi::DenseMultiplication::DenseMultiplication "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::DenseMultiplication::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::DenseMultiplication::mapping "[INTERNAL]  Get
an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::DenseMultiplication::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::DenseMultiplication::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") CasADi::DenseMultiplication::~DenseMultiplication "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::DenseMultiplication::getBinary "[INTERNAL]
Get a binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::DenseMultiplication::getNorm1 "[INTERNAL]
1-norm

";

%feature("docstring") CasADi::DenseMultiplication "[INTERNAL]  An MX atomic
for matrix-matrix product, note that the factor must be provided transposed.

Joel Andersson

C++ includes: multiplication.hpp ";

%feature("docstring") CasADi::DenseMultiplication::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") CasADi::DenseMultiplication::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") CasADi::DenseMultiplication::numInplace "[INTERNAL]
Can the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::DenseMultiplication::deepCopyMembers "[INTERNAL]  Deep copy data members.

";

%feature("docstring") CasADi::DenseMultiplication::size2 "[INTERNAL] ";

%feature("docstring") CasADi::DenseMultiplication::size1 "[INTERNAL] ";

%feature("docstring") CasADi::DenseMultiplication::getFunction "[INTERNAL]
Get function reference.

";

%feature("docstring") CasADi::DenseMultiplication::isMultipleOutput "[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") CasADi::DenseMultiplication::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") CasADi::DenseMultiplication::getSetNonzeros "[INTERNAL]  Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::DenseMultiplication::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::DenseMultiplication::getUnary "[INTERNAL]
Get a unary operation.

";

%feature("docstring") CasADi::DenseMultiplication::getAddNonzeros "[INTERNAL]  Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::DenseMultiplication::getOutput "[INTERNAL]
Get an output.

";

%feature("docstring") CasADi::DenseMultiplication::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") CasADi::DenseMultiplication::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::DenseMultiplication::getSubRef "[INTERNAL]
Get submatrix reference.

";

%feature("docstring") CasADi::DenseMultiplication::isEqual "[INTERNAL]
Check if two nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::DenseMultiplication::evaluateMX "

>  void CasADi::Multiplication< TrX, TrY >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::DenseMultiplication::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::DenseMultiplication::isIdentity "[INTERNAL]
Check if identity matrix.

";

%feature("docstring") CasADi::DenseMultiplication::isNonLinear "[INTERNAL]
Is the node nonlinear.

";

%feature("docstring") CasADi::DenseMultiplication::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::DenseMultiplication::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::DenseMultiplication::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") CasADi::DenseMultiplication::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") CasADi::DenseMultiplication::getGetNonzeros "[INTERNAL]  Get the nonzeros of matrix.

";

%feature("docstring") CasADi::DenseMultiplication::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::DenseMultiplication::getValue "[INTERNAL]
Get the value (only for scalar constant nodes)

";

%feature("docstring") CasADi::DenseMultiplication::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") CasADi::DenseMultiplication::isInit "[INTERNAL]
Check if the object has been initialized.

";

%feature("docstring") CasADi::DenseMultiplication::hasDep "[INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") CasADi::DenseMultiplication::setSparsity "[INTERNAL]
Set the sparsity.

";

%feature("docstring") CasADi::DenseMultiplication::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") CasADi::DenseMultiplication::getMultiplication "[INTERNAL]   Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::DenseMultiplication::shape "[INTERNAL] ";

%feature("docstring") CasADi::DenseMultiplication::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") CasADi::DenseMultiplication::isValue "[INTERNAL]
Check if a certain value.

";

%feature("docstring") CasADi::DenseMultiplication::printPart "[INTERNAL]
Print a part of the expression.

";

%feature("docstring") CasADi::DenseMultiplication::size "[INTERNAL] ";

%feature("docstring") CasADi::DenseMultiplication::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") CasADi::DenseMultiplication::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") CasADi::DenseMultiplication::getMatrixValue "[INTERNAL]  Get the value (only for constant nodes)

";

%feature("docstring") CasADi::DenseMultiplication::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") CasADi::DenseMultiplication::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") CasADi::DenseMultiplication::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") CasADi::DenseMultiplication::getFunctionInput "[INTERNAL]  Get function input.

";

%feature("docstring") CasADi::DenseMultiplication::isOne "[INTERNAL]  Check
if identically one.

";

%feature("docstring") CasADi::DenseMultiplication::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") CasADi::DenseMultiplication::addDependency "[INTERNAL]  Add a dependency.

";

%feature("docstring") CasADi::DenseMultiplication::getName "[INTERNAL]  Get
the name.

";

%feature("docstring") CasADi::DenseMultiplication::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::DenseMultiplication::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") CasADi::DenseMultiplication::isUnaryOp "[INTERNAL]
Check if unary operation.

";

%feature("docstring") CasADi::DenseMultiplication::getSolve "[INTERNAL]
Solve a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::DenseMultiplication::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::DenseMultiplication::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::DenseMultiplication::getNumOutputs "[INTERNAL]  Number of outputs.

";

%feature("docstring") CasADi::DenseMultiplication::nTmp "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") CasADi::DenseMultiplication::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") CasADi::DenseMultiplication::getOp "[INTERNAL]  Get
the operation.

";

%feature("docstring") CasADi::DenseMultiplication::ndep "[INTERNAL]  Number
of dependencies.

";

%feature("docstring") CasADi::DenseMultiplication::isZero "[INTERNAL]
Check if identically zero.

";

%feature("docstring") CasADi::DenseMultiplication::getNorm2 "[INTERNAL]
Spectran norm.

";


// File: classCasADi_1_1DenseTranspose.xml
%feature("docstring") CasADi::DenseTranspose::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") CasADi::DenseTranspose::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::DenseTranspose::getBinarySwitch "[INTERNAL]
Get a binary operation operation.

";

%feature("docstring") CasADi::DenseTranspose::isUnaryOp "[INTERNAL]  Check
if unary operation.

";

%feature("docstring") CasADi::DenseTranspose::getSolve "[INTERNAL]   Solve
a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::DenseTranspose::printPart "[INTERNAL]  Print
a part of the expression */.

";

%feature("docstring") CasADi::DenseTranspose::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::DenseTranspose::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") CasADi::DenseTranspose::DenseTranspose "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::DenseTranspose::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::DenseTranspose::setSparsity "[INTERNAL]  Set
the sparsity.

";

%feature("docstring") CasADi::DenseTranspose::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::DenseTranspose::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::DenseTranspose::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") CasADi::DenseTranspose::numInplace "[INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::DenseTranspose::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") CasADi::DenseTranspose::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::DenseTranspose::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::DenseTranspose::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") CasADi::DenseTranspose::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") CasADi::DenseTranspose::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") CasADi::DenseTranspose::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") CasADi::DenseTranspose::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") CasADi::DenseTranspose::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") CasADi::DenseTranspose::isIdentity "[INTERNAL]  Check
if identity matrix.

";

%feature("docstring") CasADi::DenseTranspose::size "[INTERNAL] ";

%feature("docstring") CasADi::DenseTranspose::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") CasADi::DenseTranspose::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::DenseTranspose::evaluateMX "

>  void CasADi::Transpose::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::DenseTranspose::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") CasADi::DenseTranspose::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::DenseTranspose::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") CasADi::DenseTranspose::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") CasADi::DenseTranspose::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::DenseTranspose::nTmp "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") CasADi::DenseTranspose::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") CasADi::DenseTranspose::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::DenseTranspose::size1 "[INTERNAL] ";

%feature("docstring") CasADi::DenseTranspose "[INTERNAL]   Matrix transpose
(dense)

Joel Andersson

C++ includes: transpose.hpp ";

%feature("docstring") CasADi::DenseTranspose::size2 "[INTERNAL] ";

%feature("docstring") CasADi::DenseTranspose::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::DenseTranspose::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::DenseTranspose::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::DenseTranspose::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::DenseTranspose::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::DenseTranspose::isInit "[INTERNAL]  Check if
the object has been initialized.

";

%feature("docstring") CasADi::DenseTranspose::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::DenseTranspose::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") CasADi::DenseTranspose::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") CasADi::DenseTranspose::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::DenseTranspose::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::DenseTranspose::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::DenseTranspose::isBinaryOp "[INTERNAL]  Check
if binary operation.

";

%feature("docstring") CasADi::DenseTranspose::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") CasADi::DenseTranspose::shape "[INTERNAL] ";

%feature("docstring") CasADi::DenseTranspose::isValue "[INTERNAL]  Check if
a certain value.

";

%feature("docstring") CasADi::DenseTranspose::isNonLinear "[INTERNAL]  Is
the node nonlinear.

";

%feature("docstring") CasADi::DenseTranspose::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::DenseTranspose::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::DenseTranspose::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::DenseTranspose::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::DenseTranspose::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") CasADi::DenseTranspose::propagateSparsity "

>  void CasADi::DenseTranspose::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::DenseTranspose::~DenseTranspose "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::DenseTranspose::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::DenseTranspose::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") CasADi::DenseTranspose::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::DenseTranspose::getNorm2 "[INTERNAL]
Spectran norm.

";

%feature("docstring") CasADi::DenseTranspose::isEqual "[INTERNAL]   Solve
for square linear system.

Check if two nodes are equivalent up to a given depth

";

%feature("docstring") CasADi::DenseTranspose::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") CasADi::DenseTranspose::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") CasADi::DenseTranspose::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::DenseTranspose::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::DenseTranspose::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::DenseTranspose::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::DenseTranspose::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") CasADi::DenseTranspose::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::DenseTranspose::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") CasADi::DenseTranspose::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::DenseTranspose::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::DenseTranspose::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::DenseTranspose::init "[INTERNAL]  Initialize
the object.

";


// File: structCasADi_1_1DerBinaryOpertion.xml
%feature("docstring") CasADi::DerBinaryOpertion "[INTERNAL]  Calculate
function and derivative.

C++ includes: casadi_calculus.hpp ";


// File: classCasADi_1_1DerivativeGenerator.xml
%feature("docstring") CasADi::DerivativeGenerator::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") CasADi::DerivativeGenerator::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::DerivativeGenerator::DerivativeGenerator "

>  CasADi::DerivativeGenerator::DerivativeGenerator()
------------------------------------------------------------------------

Default constructor.

>  CasADi::DerivativeGenerator::DerivativeGenerator(DerivativeGeneratorCPtr ptr)
------------------------------------------------------------------------

Construct from C pointer.

";

%feature("docstring") CasADi::DerivativeGenerator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::DerivativeGenerator::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") CasADi::DerivativeGenerator::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::DerivativeGenerator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::DerivativeGenerator::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") CasADi::DerivativeGenerator::isInit "

Is initialized?

";

%feature("docstring") CasADi::DerivativeGenerator::checkNode "[INTERNAL]
Assert that the node is pointing to the right type of object

";

%feature("docstring") CasADi::DerivativeGenerator "[INTERNAL]  Derivative
Generator Functor.

In C++, supply a DerivativeGeneratorCPtr function pointer

In python, supply a callable, annotated with derivativegenerator decorator

C++ includes: functor.hpp ";

%feature("docstring") CasADi::DerivativeGenerator::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::DerivativeGenerator::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::DerivativeGenerator::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::DerivativeGenerator::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::DerivativeGenerator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::DerivativeGenerator::print "[INTERNAL]  Print
a destription of the object.

";

%feature("docstring") CasADi::DerivativeGenerator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::DerivativeGenerator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::DerivativeGenerator::swap "[INTERNAL]  Swap
content with another instance.

";


// File: classCasADi_1_1Determinant.xml
%feature("docstring") CasADi::Determinant::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Determinant::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Determinant::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Determinant::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::Determinant::isEqual "[INTERNAL]  Check if
two nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Determinant::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Determinant::getVertsplit "[INTERNAL]  Create
a vertical split node (vectors only)

";

%feature("docstring") CasADi::Determinant::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Determinant::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::Determinant::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Determinant::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") CasADi::Determinant::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Determinant::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Determinant::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::Determinant::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Determinant::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") CasADi::Determinant::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Determinant::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Determinant::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") CasADi::Determinant::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::Determinant::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Determinant::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Determinant::getBinarySwitch "[INTERNAL]  Get
a binary operation operation.

";

%feature("docstring") CasADi::Determinant::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::Determinant::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::Determinant::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") CasADi::Determinant::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Determinant::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::Determinant::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::Determinant::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Determinant::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Determinant::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Determinant::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") CasADi::Determinant::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::Determinant::size "[INTERNAL] ";

%feature("docstring") CasADi::Determinant::evaluateMX "

>  void CasADi::Determinant::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Determinant::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::Determinant::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") CasADi::Determinant::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::Determinant::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") CasADi::Determinant::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Determinant::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::Determinant::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Determinant::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::Determinant::Determinant "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::Determinant::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::Determinant::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Determinant::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::Determinant::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Determinant::shape "[INTERNAL] ";

%feature("docstring") CasADi::Determinant::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Determinant::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Determinant::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") CasADi::Determinant::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Determinant::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Determinant::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::Determinant "[INTERNAL]   Matrix determinant.

Joel Andersson

C++ includes: determinant.hpp ";

%feature("docstring") CasADi::Determinant::printPart "[INTERNAL]  Print a
part of the expression */.

";

%feature("docstring") CasADi::Determinant::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::Determinant::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") CasADi::Determinant::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") CasADi::Determinant::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::Determinant::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Determinant::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Determinant::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::Determinant::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Determinant::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Determinant::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Determinant::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Determinant::getHorzsplit "[INTERNAL]  Create
a horizontal split node.

";

%feature("docstring") CasADi::Determinant::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Determinant::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") CasADi::Determinant::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Determinant::~Determinant "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::Determinant::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Determinant::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") CasADi::Determinant::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Determinant::propagateSparsity "

>  virtual void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::Determinant::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Determinant::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::Determinant::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";


// File: classCasADi_1_1DirectCollocation.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::DirectCollocation::clone " [INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::DirectCollocation::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::DirectCollocation::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::DirectCollocation::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::DirectCollocation::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::DirectCollocation::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::DirectCollocation::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") CasADi::DirectCollocation::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::DirectCollocation::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::DirectCollocation::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::DirectCollocation::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::DirectCollocation::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::DirectCollocation::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::DirectCollocation::evaluate "

Evaluate.

";

%feature("docstring") CasADi::DirectCollocation::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::DirectCollocation::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::DirectCollocation::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::DirectCollocation::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::DirectCollocation::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::DirectCollocation::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::DirectCollocation::DirectCollocation "

>  CasADi::DirectCollocation::DirectCollocation()
------------------------------------------------------------------------

Default constructor.

>  CasADi::DirectCollocation::DirectCollocation(const Function &ffcn, const Function &mfcn, const Function &cfcn=Function(), const Function &rfcn=Function())
------------------------------------------------------------------------

Constructor.

";

%feature("docstring") CasADi::DirectCollocation::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::DirectCollocation::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::DirectCollocation::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::DirectCollocation::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::DirectCollocation::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::DirectCollocation::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::DirectCollocation::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::DirectCollocation::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::DirectCollocation::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::DirectCollocation::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::DirectCollocation::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::DirectCollocation::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::DirectCollocation::getOption "

get an option value

";

%feature("docstring") CasADi::DirectCollocation::getReportConstraints "

Return the report as a string.

";

%feature("docstring") CasADi::DirectCollocation::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::DirectCollocation::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::DirectCollocation::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::DirectCollocation::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::DirectCollocation::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::DirectCollocation::solve "

the same as evaluate()

";

%feature("docstring") CasADi::DirectCollocation::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::DirectCollocation::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::DirectCollocation::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::DirectCollocation::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::DirectCollocation::getGuess "

Get the variables.

";

%feature("docstring") CasADi::DirectCollocation::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::DirectCollocation::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::DirectCollocation::getCfcn "";

%feature("docstring") CasADi::DirectCollocation::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::DirectCollocation::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::DirectCollocation::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::DirectCollocation::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::DirectCollocation::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::DirectCollocation::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::DirectCollocation::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::DirectCollocation::spCanEvaluate "[INTERNAL]
Is the class able to propate seeds through the algorithm? (for usage, see
the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DirectCollocation::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::DirectCollocation::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::DirectCollocation "[INTERNAL]  Direct
collocation.

Joel Andersson

>Input scheme: CasADi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

>Output scheme: CasADi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| collocation_ | OT_STRING    | \"radau\"      | Collocation  | CasADi::Dire |
| scheme       |              |              | scheme (rada | ctCollocatio |
|              |              |              | u|legendre)  | nInternal    |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| final_time   | OT_REAL      | 1            |              | CasADi::OCPS |
|              |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| interpolatio | OT_INTEGER   | 3            | Order of the | CasADi::Dire |
| n_order      |              |              | interpolatin | ctCollocatio |
|              |              |              | g            | nInternal    |
|              |              |              | polynomials  |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver   | OT_NLPSOLVER | GenericType( | An NLPSolver | CasADi::Dire |
|              |              | )            | creator      | ctCollocatio |
|              |              |              | function     | nInternal    |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver_o | OT_DICTIONAR | GenericType( | Options to   | CasADi::Dire |
| ptions       | Y            | )            | be passed to | ctCollocatio |
|              |              |              | the NLP      | nInternal    |
|              |              |              | Solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| number_of_gr | OT_INTEGER   | 20           |              | CasADi::OCPS |
| id_points    |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| number_of_pa | OT_INTEGER   | 0            |              | CasADi::OCPS |
| rameters     |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: direct_collocation.hpp ";

%feature("docstring") CasADi::DirectCollocation::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::DirectCollocation::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::DirectCollocation::getRfcn "";

%feature("docstring") CasADi::DirectCollocation::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::DirectCollocation::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::DirectCollocation::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::DirectCollocation::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::DirectCollocation::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::DirectCollocation::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DirectCollocation::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::DirectCollocation::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::DirectCollocation::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::DirectCollocation::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DirectCollocation::isInit "

Is initialized?

";

%feature("docstring") CasADi::DirectCollocation::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::DirectCollocation::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DirectCollocation::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::DirectCollocation::getVariableBounds "

Get the variables.

";

%feature("docstring") CasADi::DirectCollocation::getConstraintBounds "

Get the constraints.

";

%feature("docstring") CasADi::DirectCollocation::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::DirectCollocation::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::DirectCollocation::setOptimalSolution "

Set the optimal solution.

";

%feature("docstring") CasADi::DirectCollocation::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::DirectCollocation::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DirectCollocation::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::DirectCollocation::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::DirectCollocation::getFfcn "";

%feature("docstring") CasADi::DirectCollocation::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::DirectCollocation::getMfcn "";

%feature("docstring") CasADi::DirectCollocation::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::DirectCollocation::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::DirectCollocation::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::DirectCollocation::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::DirectCollocation::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::DirectCollocation::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::DirectCollocation::getNLPSolver "

Access the underlying NLPSolver object.

";

%feature("docstring") CasADi::DirectCollocation::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::DirectCollocation::spInit "[INTERNAL]  Reset
the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DirectCollocation::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::DirectCollocation::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::DirectCollocation::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::DirectCollocation::checkNode "[INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::DirectCollocation::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::DirectCollocation::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::DirectCollocation::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::DirectCollocation::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::DirectCollocation::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";


// File: classCasADi_1_1DirectMultipleShooting.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::DirectMultipleShooting::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::DirectMultipleShooting::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::DirectMultipleShooting::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::DirectMultipleShooting::clone "[INTERNAL]
Deep copy.

";

%feature("docstring") CasADi::DirectMultipleShooting::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::DirectMultipleShooting::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::DirectMultipleShooting::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::DirectMultipleShooting::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::DirectMultipleShooting::spEvaluate "[INTERNAL]  Propagate the sparsity pattern through a set of directional
derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DirectMultipleShooting::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::DirectMultipleShooting::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") CasADi::DirectMultipleShooting::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring")
CasADi::DirectMultipleShooting::setOptionByAllowedIndex "[INTERNAL]  Set a
certain option by giving its index into the allowed values.

";

%feature("docstring") CasADi::DirectMultipleShooting::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::DirectMultipleShooting::schemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DirectMultipleShooting::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::DirectMultipleShooting::getConstraintBounds "

Get the constraints.

";

%feature("docstring") CasADi::DirectMultipleShooting::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::DirectMultipleShooting::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::DirectMultipleShooting::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DirectMultipleShooting::checkNode "[INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::DirectMultipleShooting::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::DirectMultipleShooting::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::DirectMultipleShooting::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::DirectMultipleShooting::getGuess "

Get the variables.

";

%feature("docstring") CasADi::DirectMultipleShooting::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::DirectMultipleShooting::solve "

the same as evaluate()

";

%feature("docstring") CasADi::DirectMultipleShooting::swap "[INTERNAL]
Swap content with another instance.

";

%feature("docstring") CasADi::DirectMultipleShooting::input_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::DirectMultipleShooting::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::DirectMultipleShooting::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::DirectMultipleShooting::weak "[INTERNAL]  Get
a weak reference to the object.

";

%feature("docstring") CasADi::DirectMultipleShooting::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::DirectMultipleShooting::setOptimalSolution "

Set the optimal solution.

";

%feature("docstring") CasADi::DirectMultipleShooting::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::DirectMultipleShooting::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::DirectMultipleShooting::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::DirectMultipleShooting::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::DirectMultipleShooting::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::DirectMultipleShooting::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::DirectMultipleShooting::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::DirectMultipleShooting::evaluate "

Evaluate.

";

%feature("docstring") CasADi::DirectMultipleShooting::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::DirectMultipleShooting::checkInputs "[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::DirectMultipleShooting::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::DirectMultipleShooting::DirectMultipleShooting
"

>  CasADi::DirectMultipleShooting::DirectMultipleShooting()
------------------------------------------------------------------------

Default constructor.

>  CasADi::DirectMultipleShooting::DirectMultipleShooting(const Function &ffcn, const Function &mfcn, const Function &cfcn=Function(), const Function &rfcn=Function())
------------------------------------------------------------------------

Create a multiple shooting OCP solver.

Parameters:
-----------

ffcn:  Continuous time dynamics, an CasADi::Function with the folowing
mapping:

>Input scheme: CasADi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: CasADi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+
 Important notes:
In the above table, INTEGRATOR_P input is not really of shape (np x
1), but rather ( (np+nu) x 1 ).

The first np entries of the INTEGRATOR_P input are interpreted as parameters
to be optimized but constant over the whole domain. The remainder are
interpreted as controls.

BEWARE: if the right hand side of ffcn is dependent on time, the results
will be incorrect.

Parameters:
-----------

mfcn:  Mayer term, CasADi::Function mapping to cost (1 x 1)

>Input scheme: CasADi::MayerInput (MAYER_NUM_IN = 3) [mayerIn]
+-----------+-------+---------------------------------------------+
| Full name | Short |                 Description                 |
+===========+=======+=============================================+
| MAYER_X   | x     | States at the end of integration (nx x 1) . |
+-----------+-------+---------------------------------------------+
| MAYER_P   | p     | Problem parameters (np x 1) .               |
+-----------+-------+---------------------------------------------+

Parameters:
-----------

cfcn:  Path constraints, CasADi::Function mapping to (nh x 1)

>Input scheme: CasADi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

Parameters:
-----------

rfcn:  Initial value constraints

";

%feature("docstring") CasADi::DirectMultipleShooting::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::DirectMultipleShooting::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::DirectMultipleShooting::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::DirectMultipleShooting::getOptionAllowedIndex
"[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::DirectMultipleShooting::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::DirectMultipleShooting::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::DirectMultipleShooting::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::DirectMultipleShooting::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::DirectMultipleShooting::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::DirectMultipleShooting::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::DirectMultipleShooting::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::DirectMultipleShooting::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") CasADi::DirectMultipleShooting::getReportConstraints "";

%feature("docstring") CasADi::DirectMultipleShooting::spCanEvaluate "[INTERNAL]  Is the class able to propate seeds through the algorithm? (for
usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DirectMultipleShooting::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::DirectMultipleShooting::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::DirectMultipleShooting::reportConstraints "";

%feature("docstring") CasADi::DirectMultipleShooting::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::DirectMultipleShooting::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::DirectMultipleShooting::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::DirectMultipleShooting::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::DirectMultipleShooting::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::DirectMultipleShooting::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::DirectMultipleShooting::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::DirectMultipleShooting::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::DirectMultipleShooting::inputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::DirectMultipleShooting::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::DirectMultipleShooting::assignNode "[INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::DirectMultipleShooting::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::DirectMultipleShooting::getOption "

get an option value

";

%feature("docstring") CasADi::DirectMultipleShooting::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::DirectMultipleShooting::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::DirectMultipleShooting "[INTERNAL]  Direct
Multiple Shooting.

ns: Number of shooting nodes: from option number_of_grid_points  nx: Number
of differential states: from ffcn.input(INTEGRATOR_X0).size()  nc: Number of
constants during intergation: ffcn.input(INTEGRATOR_P).size() nu: Number of
controls: from nc - np  np: Number of parameters: from option
number_of_parameters  nh: Number of point constraints: from
cfcn.input(0).size()

Joel Andersson

>Input scheme: CasADi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

>Output scheme: CasADi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| final_time   | OT_REAL      | 1            |              | CasADi::OCPS |
|              |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| integrator   | OT_INTEGRATO | GenericType( | An           | CasADi::Dire |
|              | R            | )            | integrator   | ctMultipleSh |
|              |              |              | creator      | ootingIntern |
|              |              |              | function     | al           |
+--------------+--------------+--------------+--------------+--------------+
| integrator_o | OT_DICTIONAR | GenericType( | Options to   | CasADi::Dire |
| ptions       | Y            | )            | be passed to | ctMultipleSh |
|              |              |              | the          | ootingIntern |
|              |              |              | integrator   | al           |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver   | OT_NLPSOLVER | GenericType( | An NLPSolver | CasADi::Dire |
|              |              | )            | creator      | ctMultipleSh |
|              |              |              | function     | ootingIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver_o | OT_DICTIONAR | GenericType( | Options to   | CasADi::Dire |
| ptions       | Y            | )            | be passed to | ctMultipleSh |
|              |              |              | the NLP      | ootingIntern |
|              |              |              | Solver       | al           |
+--------------+--------------+--------------+--------------+--------------+
| number_of_gr | OT_INTEGER   | 20           |              | CasADi::OCPS |
| id_points    |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| number_of_pa | OT_INTEGER   | 0            |              | CasADi::OCPS |
| rameters     |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | GenericType( | Passed on to | CasADi::Dire |
| ion          |              | )            | CasADi::Para | ctMultipleSh |
|              |              |              | llelizer     | ootingIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: direct_multiple_shooting.hpp ";

%feature("docstring") CasADi::DirectMultipleShooting::getMfcn "";

%feature("docstring") CasADi::DirectMultipleShooting::output_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::DirectMultipleShooting::getCfcn "";

%feature("docstring") CasADi::DirectMultipleShooting::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::DirectMultipleShooting::spInit "[INTERNAL]
Reset the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DirectMultipleShooting::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::DirectMultipleShooting::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::DirectMultipleShooting::getVariableBounds "

Get the variables.

";

%feature("docstring") CasADi::DirectMultipleShooting::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::DirectMultipleShooting::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::DirectMultipleShooting::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::DirectMultipleShooting::getFfcn "";

%feature("docstring") CasADi::DirectMultipleShooting::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::DirectMultipleShooting::isInit "

Is initialized?

";

%feature("docstring") CasADi::DirectMultipleShooting::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::DirectMultipleShooting::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::DirectMultipleShooting::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::DirectMultipleShooting::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::DirectMultipleShooting::getNLPSolver "";

%feature("docstring") CasADi::DirectMultipleShooting::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::DirectMultipleShooting::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::DirectMultipleShooting::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DirectMultipleShooting::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::DirectMultipleShooting::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::DirectMultipleShooting::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::DirectMultipleShooting::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::DirectMultipleShooting::getRfcn "";

%feature("docstring") CasADi::DirectMultipleShooting::assertInit "[INTERNAL]  Assert that it is initialized

";


// File: classCasADi_1_1DirectSingleShooting.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::DirectSingleShooting::getNLPSolver " ";

%feature("docstring") CasADi::DirectSingleShooting::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::DirectSingleShooting::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::DirectSingleShooting::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::DirectSingleShooting::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DirectSingleShooting::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::DirectSingleShooting::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::DirectSingleShooting::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::DirectSingleShooting::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::DirectSingleShooting::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::DirectSingleShooting::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::DirectSingleShooting::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::DirectSingleShooting::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::DirectSingleShooting::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::DirectSingleShooting::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::DirectSingleShooting::setOptimalSolution "

Set the optimal solution.

";

%feature("docstring") CasADi::DirectSingleShooting::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::DirectSingleShooting::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::DirectSingleShooting::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::DirectSingleShooting::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::DirectSingleShooting::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::DirectSingleShooting::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::DirectSingleShooting::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DirectSingleShooting::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::DirectSingleShooting::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::DirectSingleShooting::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::DirectSingleShooting::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::DirectSingleShooting::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::DirectSingleShooting::solve "

the same as evaluate()

";

%feature("docstring") CasADi::DirectSingleShooting::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DirectSingleShooting::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::DirectSingleShooting::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::DirectSingleShooting::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::DirectSingleShooting::getOption "

get an option value

";

%feature("docstring") CasADi::DirectSingleShooting::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::DirectSingleShooting::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::DirectSingleShooting::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::DirectSingleShooting::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::DirectSingleShooting::getRfcn "";

%feature("docstring") CasADi::DirectSingleShooting::setOptionByAllowedIndex
"[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::DirectSingleShooting::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::DirectSingleShooting::getGuess "

Get the variables.

";

%feature("docstring") CasADi::DirectSingleShooting::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::DirectSingleShooting::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::DirectSingleShooting::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::DirectSingleShooting::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::DirectSingleShooting::spInit "[INTERNAL]
Reset the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DirectSingleShooting::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::DirectSingleShooting::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::DirectSingleShooting::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::DirectSingleShooting::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::DirectSingleShooting::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::DirectSingleShooting::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::DirectSingleShooting::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::DirectSingleShooting::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::DirectSingleShooting::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::DirectSingleShooting::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::DirectSingleShooting::getFfcn "";

%feature("docstring") CasADi::DirectSingleShooting::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::DirectSingleShooting::getConstraintBounds "

Get the constraints.

";

%feature("docstring") CasADi::DirectSingleShooting::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::DirectSingleShooting::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") CasADi::DirectSingleShooting::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::DirectSingleShooting "[INTERNAL]  Direct
Single Shooting.

ns: Number of shooting nodes: from option number_of_grid_points  nx: Number
of differential states: from ffcn.input(INTEGRATOR_X0).size()  nc: Number of
constants during intergation: ffcn.input(INTEGRATOR_P).size() nu: Number of
controls: from nc - np  np: Number of parameters: from option
number_of_parameters  nh: Number of point constraints: from
cfcn.input(0).size()

Joel Andersson

>Input scheme: CasADi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

>Output scheme: CasADi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| final_time   | OT_REAL      | 1            |              | CasADi::OCPS |
|              |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| integrator   | OT_INTEGRATO | GenericType( | An           | CasADi::Dire |
|              | R            | )            | integrator   | ctSingleShoo |
|              |              |              | creator      | tingInternal |
|              |              |              | function     |              |
+--------------+--------------+--------------+--------------+--------------+
| integrator_o | OT_DICTIONAR | GenericType( | Options to   | CasADi::Dire |
| ptions       | Y            | )            | be passed to | ctSingleShoo |
|              |              |              | the          | tingInternal |
|              |              |              | integrator   |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver   | OT_NLPSOLVER | GenericType( | An NLPSolver | CasADi::Dire |
|              |              | )            | creator      | ctSingleShoo |
|              |              |              | function     | tingInternal |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver_o | OT_DICTIONAR | GenericType( | Options to   | CasADi::Dire |
| ptions       | Y            | )            | be passed to | ctSingleShoo |
|              |              |              | the NLP      | tingInternal |
|              |              |              | Solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| number_of_gr | OT_INTEGER   | 20           |              | CasADi::OCPS |
| id_points    |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| number_of_pa | OT_INTEGER   | 0            |              | CasADi::OCPS |
| rameters     |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | GenericType( | Passed on to | CasADi::Dire |
| ion          |              | )            | CasADi::Para | ctSingleShoo |
|              |              |              | llelizer     | tingInternal |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: direct_single_shooting.hpp ";

%feature("docstring") CasADi::DirectSingleShooting::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::DirectSingleShooting::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::DirectSingleShooting::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") CasADi::DirectSingleShooting::reportConstraints "";

%feature("docstring") CasADi::DirectSingleShooting::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::DirectSingleShooting::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::DirectSingleShooting::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::DirectSingleShooting::DirectSingleShooting "

>  CasADi::DirectSingleShooting::DirectSingleShooting()
------------------------------------------------------------------------

Default constructor.

>  CasADi::DirectSingleShooting::DirectSingleShooting(const Function &ffcn, const Function &mfcn, const Function &cfcn=Function(), const Function &rfcn=Function())
------------------------------------------------------------------------

Create a multiple shooting OCP solver.

Parameters:
-----------

ffcn:  Continuous time dynamics, an CasADi::Function with the folowing
mapping:

>Input scheme: CasADi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: CasADi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+
 Important notes:
In the above table, INTEGRATOR_P input is not really of shape (np x
1), but rather ( (np+nu) x 1 ).

The first np entries of the INTEGRATOR_P input are interpreted as parameters
to be optimized but constant over the whole domain. The remainder are
interpreted as controls.

BEWARE: if the right hand side of ffcn is dependent on time, the results
will be incorrect.

Parameters:
-----------

mfcn:  Mayer term, CasADi::Function mapping to cost (1 x 1)

>Input scheme: CasADi::MayerInput (MAYER_NUM_IN = 3) [mayerIn]
+-----------+-------+---------------------------------------------+
| Full name | Short |                 Description                 |
+===========+=======+=============================================+
| MAYER_X   | x     | States at the end of integration (nx x 1) . |
+-----------+-------+---------------------------------------------+
| MAYER_P   | p     | Problem parameters (np x 1) .               |
+-----------+-------+---------------------------------------------+

Parameters:
-----------

cfcn:  Path constraints, CasADi::Function mapping to (nh x 1)

>Input scheme: CasADi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

Parameters:
-----------

rfcn:  Initial value constraints

";

%feature("docstring") CasADi::DirectSingleShooting::getReportConstraints "";

%feature("docstring") CasADi::DirectSingleShooting::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::DirectSingleShooting::spCanEvaluate "[INTERNAL]  Is the class able to propate seeds through the algorithm? (for
usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DirectSingleShooting::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::DirectSingleShooting::output_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::DirectSingleShooting::checkNode "[INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::DirectSingleShooting::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") CasADi::DirectSingleShooting::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::DirectSingleShooting::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::DirectSingleShooting::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::DirectSingleShooting::getCfcn "";

%feature("docstring") CasADi::DirectSingleShooting::evaluate "

Evaluate.

";

%feature("docstring") CasADi::DirectSingleShooting::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::DirectSingleShooting::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::DirectSingleShooting::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::DirectSingleShooting::getMfcn "";

%feature("docstring") CasADi::DirectSingleShooting::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::DirectSingleShooting::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::DirectSingleShooting::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::DirectSingleShooting::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") CasADi::DirectSingleShooting::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::DirectSingleShooting::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::DirectSingleShooting::getVariableBounds "

Get the variables.

";

%feature("docstring") CasADi::DirectSingleShooting::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::DirectSingleShooting::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::DirectSingleShooting::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::DirectSingleShooting::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DirectSingleShooting::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::DirectSingleShooting::isInit "

Is initialized?

";

%feature("docstring") CasADi::DirectSingleShooting::input_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::DirectSingleShooting::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::DirectSingleShooting::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::DirectSingleShooting::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::DirectSingleShooting::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::DirectSingleShooting::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";


// File: classCasADi_1_1DPLEInputIOSchemeVector.xml
%feature("docstring") CasADi::DPLEInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::DPLEInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::DPLEInputIOSchemeVector "[INTERNAL]  Helper
function for 'DPLEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::DPLEInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::DPLEInputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::DPLEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
CasADi::DPLEInputIOSchemeVector::DPLEInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::DPLEInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::DPLEInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";


// File: classCasADi_1_1DPLEOutputIOSchemeVector.xml
%feature("docstring") CasADi::DPLEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::DPLEOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::DPLEOutputIOSchemeVector "[INTERNAL]  Helper
function for 'DPLEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::DPLEOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::DPLEOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::DPLEOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::DPLEOutputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::DPLEOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")
CasADi::DPLEOutputIOSchemeVector::DPLEOutputIOSchemeVector "[INTERNAL] ";


// File: classCasADi_1_1DpleSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::DpleSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::DpleSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::DpleSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::DpleSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::DpleSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::DpleSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DpleSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::DpleSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::DpleSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::DpleSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::DpleSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::DpleSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::DpleSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::DpleSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::DpleSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::DpleSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::DpleSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DpleSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::DpleSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::DpleSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::DpleSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::DpleSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::DpleSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::DpleSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::DpleSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::DpleSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::DpleSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::DpleSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::DpleSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::DpleSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::DpleSolver::getOption "

get an option value

";

%feature("docstring") CasADi::DpleSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::DpleSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::DpleSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::DpleSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::DpleSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::DpleSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::DpleSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::DpleSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::DpleSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DpleSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::DpleSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::DpleSolver "[INTERNAL]  Base class for
Discrete Periodic Lyapunov Equation Solvers.

Given matrices A_k and symmetric V_k, k = 0..K-1

A_k in R^(n x n) V_k in R^n

provides all of P_k that satisfy:

P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k P_k+1 = A_k*P_k*A_k' + V_k for k =
1..K-1 Joris gillis

>Input scheme: CasADi::DPLEInput (DPLE_NUM_IN = 3) [dpleIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_A                 | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+
| DPLE_V                 | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::DPLEOutput (DPLE_NUM_OUT = 2) [dpleOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_P                 | p                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, blkdiag     |
|                        |                        | otherwise) (cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| const_dim    | OT_BOOLEAN   | true         | Assume       | CasADi::Dple |
|              |              |              | constant     | Internal     |
|              |              |              | dimension of |              |
|              |              |              | P            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | CasADi::Dple |
|              |              |              | unstability  | Internal     |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| error_unstab | OT_BOOLEAN   | false        | Throw an     | CasADi::Dple |
| le           |              |              | exception    | Internal     |
|              |              |              | when it is   |              |
|              |              |              | detected     |              |
|              |              |              | that Product |              |
|              |              |              | (A_i,i=N..1) |              |
|              |              |              | has          |              |
|              |              |              | eigenvalues  |              |
|              |              |              | greater than |              |
|              |              |              | 1-eps_unstab |              |
|              |              |              | le           |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pos_def      | OT_BOOLEAN   | false        | Assume P     | CasADi::Dple |
|              |              |              | positive     | Internal     |
|              |              |              | definite     |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: dple_solver.hpp ";

%feature("docstring") CasADi::DpleSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::DpleSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::DpleSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::DpleSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::DpleSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::DpleSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::DpleSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::DpleSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::DpleSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::DpleSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::DpleSolver::DpleSolver "

Default constructor.

";

%feature("docstring") CasADi::DpleSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::DpleSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::DpleSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::DpleSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::DpleSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::DpleSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::DpleSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::DpleSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::DpleSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::DpleSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::DpleSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::DpleSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DpleSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::DpleSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::DpleSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::DpleSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::DpleSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DpleSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::DpleSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::DpleSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::DpleSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::DpleSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::DpleSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::DpleSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::DpleSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::DpleSolver::clone "

Clone.

";

%feature("docstring") CasADi::DpleSolver::printStats "

Print solver statistics.

";

%feature("docstring") CasADi::DpleSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::DpleSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::DpleSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::DpleSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DpleSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::DpleSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::DpleSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::DpleSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::DpleSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::DpleSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::DpleSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::DpleSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::DpleSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::DpleSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::DpleSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::DpleSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";


// File: classCasADi_1_1DSDPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::DSDPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::DSDPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::DSDPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::DSDPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::DSDPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::DSDPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::DSDPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::DSDPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::DSDPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::DSDPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::DSDPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::DSDPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::DSDPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::DSDPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::DSDPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::DSDPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::DSDPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::DSDPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::DSDPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::DSDPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::DSDPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::DSDPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::DSDPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::DSDPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::DSDPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::DSDPSolver::setSOCPOptions "

Set options that make the SDP solver more suitable for solving SOCPs.

";

%feature("docstring") CasADi::DSDPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::DSDPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::DSDPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::DSDPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::DSDPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::DSDPSolver::DSDPSolver "

>  CasADi::DSDPSolver::DSDPSolver()
------------------------------------------------------------------------

Default constructor.

";

%feature("docstring") CasADi::DSDPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::DSDPSolver "[INTERNAL]  Interface to DSDP
Solver for semi definite programming.

Solves an SDP problem in standard form.
Seehttp://sdpa.indsys.chuo-u.ac.jp/sdpa/files/sdpa-c.6.2.0.manual.pdf

Primal:

min          c' x   x  subject to               P = Sum_i^m F_i x_i - G
P negative semidefinite LBA <= A x <= UBA             LBX <= x   <= UBX
with x ( n x 1)          c ( n x 1 )          G, F_i  sparse symmetric (m x
m)          X dense symmetric ( m x m )          A sparse matrix ( nc x n)
LBA, UBA dense vector (nc x 1)          LBX, UBX dense vector (n x 1)

This formulation is chosen as primal, because it does not call for a large
decision variable space.

Dual:

max          trace(G Y)  Y   subject to             trace(F_i Y) = c_i Y
positive semidefinite                  with Y dense symmetric ( m x m)

On generality: you might have formulation with block partitioning:

Primal:

min          c' x   x  subject to               Pj = Sum_i^m F_ij x_i - gj
for all j               Pj negative semidefinite   for all j with x ( n x 1)
c ( n x 1 )          G, F_i  sparse symmetric (m x m)          X dense
symmetric ( m x m )

Dual:max          Sum_j trace(Gj Yj)  Yj   subject to             Sum_j
trace(F_ij Yj) = c_i   for all j             Yj positive semidefinite for
all j                  with Y dense symmetric ( m x m)

You can cast this into the standard form with: G = blkdiag(Gj for all j) Fi
= blkdiag(F_ij for all j)

Implementations of SDPSolver are encouraged to exploit this block structure.

Warning: The solver DSDP is not good at handling linear equalities. There
are several options if you notice difficulties: play around with the
parameter \"_penalty\" leave a gap manually switch to another SDP Solver

Joris Gillis

>Input scheme: CasADi::SDPInput (SDP_SOLVER_NUM_IN = 9) [sdpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_F           | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_C           | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_G           | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_A           | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBA         | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBA         | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBX         | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBX         | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::SDPOutput (SDP_SOLVER_NUM_OUT = 8) [sdpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_X           | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_P           | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL        | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_COST        | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL_COST   | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_A       | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_X       | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| _loglevel    | OT_INTEGER   | 0            | An integer   | CasADi::DSDP |
|              |              |              | that         | Internal     |
|              |              |              | specifies    |              |
|              |              |              | how much     |              |
|              |              |              | logging is   |              |
|              |              |              | done on      |              |
|              |              |              | stdout.      |              |
+--------------+--------------+--------------+--------------+--------------+
| _penalty     | OT_REAL      | 100000       | Penality     | CasADi::DSDP |
|              |              |              | parameter    | Internal     |
|              |              |              | lambda. Must |              |
|              |              |              | exceed the   |              |
|              |              |              | trace of Y.  |              |
|              |              |              | This         |              |
|              |              |              | parameter    |              |
|              |              |              | heavily      |              |
|              |              |              | influences   |              |
|              |              |              | the ability  |              |
|              |              |              | of DSDP to   |              |
|              |              |              | treat linear |              |
|              |              |              | equalities.  |              |
|              |              |              | The DSDP     |              |
|              |              |              | standard     |              |
|              |              |              | default      |              |
|              |              |              | (1e8) will   |              |
|              |              |              | make a       |              |
|              |              |              | problem with |              |
|              |              |              | linear       |              |
|              |              |              | equality     |              |
|              |              |              | return       |              |
|              |              |              | unusable     |              |
|              |              |              | solutions.   |              |
+--------------+--------------+--------------+--------------+--------------+
| _printlevel  | OT_INTEGER   | 1            | A printlevel | CasADi::DSDP |
|              |              |              | of zero will | Internal     |
|              |              |              | disable all  |              |
|              |              |              | output.      |              |
|              |              |              | Another      |              |
|              |              |              | number       |              |
|              |              |              | indicates    |              |
|              |              |              | how often a  |              |
|              |              |              | line is      |              |
|              |              |              | printed.     |              |
+--------------+--------------+--------------+--------------+--------------+
| _reuse       | OT_INTEGER   | 4            | Maximum on   | CasADi::DSDP |
|              |              |              | the number   | Internal     |
|              |              |              | of times the |              |
|              |              |              | Schur        |              |
|              |              |              | complement   |              |
|              |              |              | matrix is    |              |
|              |              |              | reused       |              |
+--------------+--------------+--------------+--------------+--------------+
| _rho         | OT_REAL      | 4            | Potential    | CasADi::DSDP |
|              |              |              | parameter.   | Internal     |
|              |              |              | Must be >=1  |              |
+--------------+--------------+--------------+--------------+--------------+
| _use_penalty | OT_BOOLEAN   | true         | Modifies the | CasADi::DSDP |
|              |              |              | algorithm to | Internal     |
|              |              |              | use a        |              |
|              |              |              | penality     |              |
|              |              |              | gamma on r.  |              |
+--------------+--------------+--------------+--------------+--------------+
| _zbar        | OT_REAL      | 1.000e+10    | Initial      | CasADi::DSDP |
|              |              |              | upper bound  | Internal     |
|              |              |              | on the       |              |
|              |              |              | objective of |              |
|              |              |              | the dual     |              |
|              |              |              | problem.     |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_dual    | OT_BOOLEAN   | true         | Indicate if  | CasADi::SDPS |
|              |              |              | dual should  | olverInterna |
|              |              |              | be allocated | l            |
|              |              |              | and          |              |
|              |              |              | calculated.  |              |
|              |              |              | You may want |              |
|              |              |              | to avoid     |              |
|              |              |              | calculating  |              |
|              |              |              | this         |              |
|              |              |              | variable for |              |
|              |              |              | problems     |              |
|              |              |              | with n       |              |
|              |              |              | large, as is |              |
|              |              |              | always dense |              |
|              |              |              | (m x m).     |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_p       | OT_BOOLEAN   | true         | Indicate if  | CasADi::SDPS |
|              |              |              | the P-part   | olverInterna |
|              |              |              | of primal    | l            |
|              |              |              | solution     |              |
|              |              |              | should be    |              |
|              |              |              | allocated    |              |
|              |              |              | and          |              |
|              |              |              | calculated.  |              |
|              |              |              | You may want |              |
|              |              |              | to avoid     |              |
|              |              |              | calculating  |              |
|              |              |              | this         |              |
|              |              |              | variable for |              |
|              |              |              | problems     |              |
|              |              |              | with n       |              |
|              |              |              | large, as is |              |
|              |              |              | always dense |              |
|              |              |              | (m x m).     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| dualTol      | OT_REAL      | 0.000        | Tolerance    | CasADi::DSDP |
|              |              |              | for dual inf | Internal     |
|              |              |              | easibility   |              |
|              |              |              | (translates  |              |
|              |              |              | to primal in |              |
|              |              |              | feasibility  |              |
|              |              |              | in dsdp      |              |
|              |              |              | terms)       |              |
+--------------+--------------+--------------+--------------+--------------+
| gapTol       | OT_REAL      | 0.000        | Convergence  | CasADi::DSDP |
|              |              |              | criterion    | Internal     |
|              |              |              | based on     |              |
|              |              |              | distance     |              |
|              |              |              | between      |              |
|              |              |              | primal and   |              |
|              |              |              | dual         |              |
|              |              |              | objective    |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inf          | OT_REAL      | 1.000e+30    | Treat        | CasADi::DSDP |
|              |              |              | numbers      | Internal     |
|              |              |              | higher than  |              |
|              |              |              | this as      |              |
|              |              |              | infinity     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| maxIter      | OT_INTEGER   | 500          | Maximum      | CasADi::DSDP |
|              |              |              | number of    | Internal     |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| primalTol    | OT_REAL      | 0.000        | Tolerance    | CasADi::DSDP |
|              |              |              | for primal i | Internal     |
|              |              |              | nfeasibility |              |
|              |              |              | (translates  |              |
|              |              |              | to dual infe |              |
|              |              |              | asibility in |              |
|              |              |              | dsdp terms)  |              |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | CasADi::SDPS |
| m            |              |              | problem      | olverInterna |
|              |              |              | statement    | l            |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| stepTol      | OT_REAL      | 0.050        | Terminate    | CasADi::DSDP |
|              |              |              | the solver   | Internal     |
|              |              |              | if the step  |              |
|              |              |              | length in    |              |
|              |              |              | the primal   |              |
|              |              |              | is below     |              |
|              |              |              | this         |              |
|              |              |              | tolerance.   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+--------------------+----------------------+
|         Id         |       Used in        |
+====================+======================+
| solution_type      | CasADi::DSDPInternal |
+--------------------+----------------------+
| termination_reason | CasADi::DSDPInternal |
+--------------------+----------------------+

Diagrams

C++ includes: dsdp_solver.hpp ";

%feature("docstring") CasADi::DSDPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::DSDPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::DSDPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::DSDPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::DSDPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::DSDPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DSDPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::DSDPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::DSDPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::DSDPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DSDPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::DSDPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::DSDPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::DSDPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::DSDPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::DSDPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::DSDPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::DSDPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DSDPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::DSDPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::DSDPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::DSDPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::DSDPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::DSDPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::DSDPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DSDPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::DSDPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::DSDPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::DSDPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::DSDPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::DSDPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::DSDPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::DSDPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::DSDPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::DSDPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::DSDPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::DSDPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::DSDPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::DSDPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::DSDPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::DSDPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::DSDPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::DSDPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::DSDPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::DSDPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::DSDPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::DSDPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::DSDPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::DSDPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::DSDPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::DSDPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::DSDPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::DSDPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::DSDPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::DSDPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::DSDPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::DSDPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::DSDPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::DSDPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::DSDPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::DSDPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::DSDPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::DSDPSolver::getNumOutputs "

Get the number of function outputs.

";


// File: classCasADi_1_1EmptySparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
CasADi::EmptySparsity::row "

>  const std::vector< int > & CasADi::Sparsity::row() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to row-vector, containing rows for all non-zero
elements (see class description)

>  int CasADi::Sparsity::row(int el) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the row of a non-zero element.

";

%feature("docstring") CasADi::EmptySparsity::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::EmptySparsity::getDiag "[INTERNAL]  Get the
diagonal of the matrix/create a diagonal matrix (mapping will contain the
nonzero mapping) When the input is square, the diagonal elements are
returned. If the input is vector-like, a diagonal matrix is constructed with
it.

";

%feature("docstring") CasADi::EmptySparsity::size "[INTERNAL]  Get the
number of (structural) non-zeros.

See:   numel()

";

%feature("docstring") CasADi::EmptySparsity::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::EmptySparsity::getTril "[INTERNAL]  Get lower
triangular part.

";

%feature("docstring") CasADi::EmptySparsity::getCol "[INTERNAL]  Get the
column for each non-zero entry Together with the row-vector, this vector
gives the sparsity of the matrix in sparse triplet format, i.e. the column
and row for each non-zero elements.

";

%feature("docstring") CasADi::EmptySparsity::rowRef "[INTERNAL]  Get a
reference to the rows of all non-zero element (copy if not unique!)

";

%feature("docstring") CasADi::EmptySparsity::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
If there are other references to the object, then make a deep copy of
it and point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::EmptySparsity::isTriu "[INTERNAL]  Is upper
triangular?

";

%feature("docstring") CasADi::EmptySparsity::reserve "[INTERNAL]  Reserve
space.

";

%feature("docstring") CasADi::EmptySparsity::patternUnion "[INTERNAL]
Union of two sparsity patterns.

";

%feature("docstring") CasADi::EmptySparsity::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::EmptySparsity::unit "[INTERNAL]  Create the
sparsity pattern for a unit vector of length n and a nonzero on position el.

";

%feature("docstring") CasADi::EmptySparsity::isTril "[INTERNAL]  Is lower
triangular?

";

%feature("docstring") CasADi::EmptySparsity::isTranspose "[INTERNAL]  Check
if the sparsity is the transpose of another.

";

%feature("docstring") CasADi::EmptySparsity::getTriu "[INTERNAL]  Get upper
triangular part.

";

%feature("docstring") CasADi::EmptySparsity::enlarge "[INTERNAL]  Enlarge
matrix Make the matrix larger by inserting empty rows and columns, keeping
the existing non-zeros.

For the matrices A to B A(m,n) length(jj)=m , length(ii)=n B(nrow,ncol)

A=enlarge(m,n,ii,jj) makes sure that

B[jj,ii] == A

";

%feature("docstring") CasADi::EmptySparsity::set "

>  void CasADi::Sparsity::set(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Assign the nonzero entries of one sparsity pattern to the nonzero
entries of another sparsity pattern.

>  void CasADi::Sparsity::set(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::EmptySparsity "[INTERNAL] ";

%feature("docstring") CasADi::EmptySparsity::appendColumns "[INTERNAL]
Append another sparsity patten horizontally.

";

%feature("docstring") CasADi::EmptySparsity::getNZ "

>  int CasADi::Sparsity::getNZ(int rr, int cc)
------------------------------------------------------------------------
[INTERNAL] 
Get the index of a non-zero element Add the element if it does not
exist and copy object if it's not unique.

>  int CasADi::Sparsity::getNZ(int rr, int cc) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the index of an existing non-zero element return -1 if the element
does not exists.

>  std::vector< int > CasADi::Sparsity::getNZ(const std::vector< int > &rr, const std::vector< int > &cc) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a set of non-zero element return -1 if the element does not
exists.

";

%feature("docstring") CasADi::EmptySparsity::sub "[INTERNAL]  Get a
submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring") CasADi::EmptySparsity::patternProduct "[INTERNAL]
Sparsity pattern for a matrix-matrix product Returns the sparsity pattern
resulting from premultiplying the pattern with the transpose of x. Returns
the new sparsity pattern as well as a mapping with the same length as the
number of non-zero elements The mapping contains a vector of the index pairs
that makes up the scalar products for each non-zero.

";

%feature("docstring") CasADi::EmptySparsity::append "[INTERNAL]  Append
another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring") CasADi::EmptySparsity::getTriplet "[INTERNAL]  Get
the sparsity in sparse triplet format.

";

%feature("docstring") CasADi::EmptySparsity::colind "

>  const std::vector< int > & CasADi::Sparsity::colind() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to the colindex of all column element (see class
description)

>  int CasADi::Sparsity::colind(int i) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to the colindex of col i (see class description)

";

%feature("docstring") CasADi::EmptySparsity::starColoring2 "[INTERNAL]
Perform a star coloring of a symmetric matrix: A new greedy distance-2
coloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A. TARAFDAR, F.
MANNE, A. POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring") CasADi::EmptySparsity::isDiagonal "[INTERNAL]  Is
diagonal?

";

%feature("docstring") CasADi::EmptySparsity::isEmpty "[INTERNAL]  Check if
the sparsity is empty, i.e. if one of the dimensions is zero (or optionally
both dimensions)

";

%feature("docstring") CasADi::EmptySparsity::getNZInplace "[INTERNAL]  Get
the nonzero index for a set of elements The index vector is used both for
input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

";

%feature("docstring") CasADi::EmptySparsity::transpose "

>  Sparsity CasADi::Sparsity::transpose() const 
------------------------------------------------------------------------
[INTERNAL] 
 Transpose the matrix.

>  Sparsity CasADi::Sparsity::transpose(std::vector< int > &mapping, bool invert_mapping=false) const 
------------------------------------------------------------------------
[INTERNAL] 
 Transpose the matrix and get the reordering of the non-zero entries, i.e. the
non-zeros of the original matrix for each non-zero of the new matrix.

";

%feature("docstring") CasADi::EmptySparsity::enlargeColumns "[INTERNAL]
Enlarge the matrix along the second dimension (i.e. insert columns)

";

%feature("docstring") CasADi::EmptySparsity::spy "[INTERNAL]  Print a
textual representation of sparsity.

";

%feature("docstring") CasADi::EmptySparsity::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::EmptySparsity::T "[INTERNAL]   Transpose the
matrix (shorthand)

";

%feature("docstring") CasADi::EmptySparsity::size2 "[INTERNAL]  Get the
number of columns.

";

%feature("docstring") CasADi::EmptySparsity::size1 "[INTERNAL]  Get the
number of rows.

";

%feature("docstring") CasADi::EmptySparsity::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::EmptySparsity::makeDense "[INTERNAL]  Make a
patten dense.

";

%feature("docstring") CasADi::EmptySparsity::isNull "[INTERNAL]  Is a null
pointer?

";

%feature("docstring") CasADi::EmptySparsity::getUpperNZ "[INTERNAL]  Get
nonzeros in upper triangular part.

";

%feature("docstring") CasADi::EmptySparsity::getDescription "[INTERNAL]
Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::EmptySparsity::stronglyConnectedComponents "[INTERNAL]  Find the strongly connected components of the bigraph defined by
the sparsity pattern of a square matrix See Direct Methods for Sparse Linear
Systems by Davis (2006). Returns:

Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n =
A.stronglyConnectedComponents(p,r)

=> A[p,p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring") CasADi::EmptySparsity::checkNode "[INTERNAL]  Check
if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::EmptySparsity::createDiagonal "

[DEPRECATED]

";

%feature("docstring") CasADi::EmptySparsity::patternInverse "[INTERNAL]
Take the inverse of a sparsity pattern; flip zeros and non-zeros.

";

%feature("docstring") CasADi::EmptySparsity::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::EmptySparsity::sizeU "[INTERNAL]  Number of
non-zeros in the upper triangular half, i.e. the number of elements (i,j)
with j>=i.

";

%feature("docstring") CasADi::EmptySparsity::isSymmetric "[INTERNAL]  Is
symmetric?

";

%feature("docstring") CasADi::EmptySparsity::sizeL "[INTERNAL]  Number of
non-zeros in the lower triangular half, i.e. the number of elements (i,j)
with j<=i.

";

%feature("docstring") CasADi::EmptySparsity::sparse "[INTERNAL]  Create a
sparse (empty) rectangular sparsity pattern.

";

%feature("docstring") CasADi::EmptySparsity::sizeD "[INTERNAL]  Number of
non-zeros on the diagonal, i.e. the number of elements (i,j) with j==i.

";

%feature("docstring") CasADi::EmptySparsity::EmptySparsity "[INTERNAL] ";

%feature("docstring") CasADi::EmptySparsity::isReshape "[INTERNAL]  Check
if the sparsity is a reshape of another.

";

%feature("docstring") CasADi::EmptySparsity::getCRS "[INTERNAL]  Get the
sparsity in compressed row storage (CRS) format.

";

%feature("docstring") CasADi::EmptySparsity::erase "[INTERNAL]  Erase rows
and/or columns of a matrix.

";

%feature("docstring") CasADi::EmptySparsity::init "[INTERNAL]  Initialize
or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::EmptySparsity::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::EmptySparsity::getElements "

>  std::vector< int > CasADi::Sparsity::getElements(bool col_major=true) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the location of all non-zero elements as they would appear in a
Dense matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5
structural non-zeros.

k = A.getElements() A[k] will contain the elements of A that are non- zero
in B

>  void CasADi::Sparsity::getElements(std::vector< int > &loc, bool col_major=true) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the location of all nonzero elements (inplace version)

";

%feature("docstring") CasADi::EmptySparsity::hash "[INTERNAL] ";

%feature("docstring") CasADi::EmptySparsity::resize "[INTERNAL]  Resize.

";

%feature("docstring") CasADi::EmptySparsity::dulmageMendelsohn "[INTERNAL]
Compute the Dulmage-Mendelsohn decomposition See Direct Methods for Sparse
Linear Systems by Davis (2006).

Dulmage-Mendelsohn will try to bring your matrix into lower block-
triangular (LBT) form. It will not care about the distance of off- diagonal
elements to the diagonal: there is no guarantee you will get a block-
diagonal matrix if you supply a randomly permuted block- diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   stronglyConnectedComponents

";

%feature("docstring") CasADi::EmptySparsity::upperNZ "

[DEPRECATED]

";

%feature("docstring") CasADi::EmptySparsity::isSingular "[INTERNAL]  Check
whether the sparsity-pattern inidcates structural singularity.

";

%feature("docstring") CasADi::EmptySparsity::add "

>  void CasADi::Sparsity::add(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Add the nonzero entries of one sparsity pattern to the nonzero entries
of another sparsity pattern.

>  void CasADi::Sparsity::add(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::EmptySparsity::depthFirstSearch "[INTERNAL]
Depth-first search on the adjacency graph of the sparsity See Direct Methods
for Sparse Linear Systems by Davis (2006).

";

%feature("docstring") CasADi::EmptySparsity::colindRef "[INTERNAL]  Get a
reference to the colindex of all column element (copy if not unique!)

";

%feature("docstring") CasADi::EmptySparsity::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::EmptySparsity::reCache "[INTERNAL]  Check if
there is an identical copy of the sparsity pattern in the cache, and if so,
make a shallow copy of that one.

";

%feature("docstring") CasADi::EmptySparsity::largestFirstOrdering "[INTERNAL]  Order the cols by decreasing degree.

";

%feature("docstring") CasADi::EmptySparsity::hasNZ "[INTERNAL]  Returns
true if the pattern has a non-zero at location rr,cc.

";

%feature("docstring") CasADi::EmptySparsity::getCCS "[INTERNAL]  Get the
sparsity in compressed column storage (CCS) format.

";

%feature("docstring") CasADi::EmptySparsity::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::EmptySparsity::unidirectionalColoring "[INTERNAL]  Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring") CasADi::EmptySparsity::isScalar "[INTERNAL]  Is
scalar?

";

%feature("docstring") CasADi::EmptySparsity::enlargeRows "[INTERNAL]
Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") CasADi::EmptySparsity::dimString "[INTERNAL]  Get the
dimension as a string.

";

%feature("docstring") CasADi::EmptySparsity::reshape "[INTERNAL]   Reshape
a sparsity, order of nonzeros remains the same.

";

%feature("docstring") CasADi::EmptySparsity::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::EmptySparsity::getSparsityCRS "

[DEPRECATED]

";

%feature("docstring") CasADi::EmptySparsity::printCompact "[INTERNAL]
Print a compact description of the sparsity pattern.

";

%feature("docstring") CasADi::EmptySparsity::patternIntersection "[INTERNAL]  Intersection of two sparsity patterns Returns the new sparsity
pattern as well as a mapping with the same length as the number of non-zero
elements The value is 1 if the non-zero comes from the first (i.e. this)
object, 2 if it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring") CasADi::EmptySparsity::getLowerNZ "[INTERNAL]  Get
nonzeros in lower triangular part.

";

%feature("docstring") CasADi::EmptySparsity::sanityCheck "[INTERNAL]  Check
if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") CasADi::EmptySparsity::isInit "[INTERNAL]  Is
initialized?

";

%feature("docstring") CasADi::EmptySparsity::isSquare "[INTERNAL]  Is
square?

";

%feature("docstring") CasADi::EmptySparsity::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::EmptySparsity::compress "[INTERNAL]  Compress
a sparsity pattern.

";

%feature("docstring") CasADi::EmptySparsity::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::EmptySparsity::isDense "[INTERNAL]  Is dense?

";

%feature("docstring") CasADi::EmptySparsity::dense "[INTERNAL]  Create a
dense rectangular sparsity pattern.

";

%feature("docstring") CasADi::EmptySparsity::eliminationTree "[INTERNAL]
Calculate the elimination tree See Direct Methods for Sparse Linear Systems
by Davis (2006). If the parameter ata is false, the algorithm is equivalent
to Matlab's etree(A), except that the indices are zero- based. If ata is
true, the algorithm is equivalent to Matlab's etree(A,'row').

";

%feature("docstring") CasADi::EmptySparsity::isEqual "[INTERNAL] ";

%feature("docstring") CasADi::EmptySparsity::removeDuplicates "[INTERNAL]
Remove duplicate entries: The same indices will be removed from the mapping
vector, which must have the same length as the number of nonzeros.

";

%feature("docstring") CasADi::EmptySparsity::shape "[INTERNAL]  Get the
shape.

";

%feature("docstring") CasADi::EmptySparsity::diag "[INTERNAL]  Create
diagonal sparsity pattern.

";

%feature("docstring") CasADi::EmptySparsity::getSparsity "

[DEPRECATED]

";

%feature("docstring") CasADi::EmptySparsity::starColoring "[INTERNAL]
Perform a star coloring of a symmetric matrix: A greedy distance-2 coloring
algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) Ordering
options: None (0), largest first (1)

";

%feature("docstring") CasADi::EmptySparsity::getSparsityCCS "

[DEPRECATED]

";

%feature("docstring") CasADi::EmptySparsity::compressed "[INTERNAL]  Create
from a single vector containing the pattern in compressed column storage
format: The format: The first two entries are the number of rows (nrow) and
columns (ncol) The next ncol+1 entries are the column offsets (colind). Note
that the last element, colind[ncol], gives the number of nonzeros The last
colind[ncol] entries are the row indices

";

%feature("docstring") CasADi::EmptySparsity::pmult "[INTERNAL]  Permute
rows and/or columns Multiply the sparsity with a permutation matrix from the
left and/or from the right P * A * trans(P), A * trans(P) or A * trans(P)
with P defined by an index vector containing the row for each col. As an
alternative, P can be transposed (inverted).

";

%feature("docstring") CasADi::EmptySparsity::rowsSequential "[INTERNAL]  Do
the rows appear sequentially on each column (if strictly==true, then do not
allow multiple entries)

";

%feature("docstring") CasADi::EmptySparsity::scalar "[INTERNAL]  Create a
scalar sparsity pattern.

";

%feature("docstring") CasADi::EmptySparsity::isVector "[INTERNAL]  Is
vector (i.e. size2()==1)

";

%feature("docstring") CasADi::EmptySparsity::bor "

>  void CasADi::Sparsity::bor(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Bitwise or of the nonzero entries of one sparsity pattern and the
nonzero entries of another sparsity pattern.

>  void CasADi::Sparsity::bor(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::EmptySparsity::numel "[INTERNAL]  The total
number of elements, including structural zeros, i.e. size2()*size1()

See:   size()

";

%feature("docstring") CasADi::EmptySparsity::spyMatlab "[INTERNAL]
Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring") CasADi::EmptySparsity::lowerNZ "

[DEPRECATED]

";

%feature("docstring") CasADi::EmptySparsity::patternCombine "[INTERNAL]
Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";


// File: classCasADi_1_1ExternalFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::ExternalFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::ExternalFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::ExternalFunction::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::ExternalFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::ExternalFunction::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::ExternalFunction::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::ExternalFunction::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::ExternalFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::ExternalFunction::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::ExternalFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::ExternalFunction::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::ExternalFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::ExternalFunction::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::ExternalFunction::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::ExternalFunction::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::ExternalFunction::ExternalFunction "

>  CasADi::ExternalFunction::ExternalFunction()
------------------------------------------------------------------------

CONSTRUCTORS:

default constructor

>  CasADi::ExternalFunction::ExternalFunction(const std::string &bin_name)
------------------------------------------------------------------------

Create an empty function.

";

%feature("docstring") CasADi::ExternalFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::ExternalFunction::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::ExternalFunction::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::ExternalFunction::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::ExternalFunction::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::ExternalFunction::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::ExternalFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::ExternalFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::ExternalFunction::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::ExternalFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::ExternalFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::ExternalFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::ExternalFunction::solve "

the same as evaluate()

";

%feature("docstring") CasADi::ExternalFunction::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::ExternalFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::ExternalFunction::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::ExternalFunction::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::ExternalFunction::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::ExternalFunction::isInit "

Is initialized?

";

%feature("docstring") CasADi::ExternalFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::ExternalFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::ExternalFunction::spCanEvaluate "[INTERNAL]
Is the class able to propate seeds through the algorithm? (for usage, see
the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::ExternalFunction::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::ExternalFunction::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::ExternalFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::ExternalFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::ExternalFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::ExternalFunction::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::ExternalFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::ExternalFunction::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::ExternalFunction::checkNode "

Check if the pointer points towards a valid object.

";

%feature("docstring") CasADi::ExternalFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::ExternalFunction::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::ExternalFunction "[INTERNAL]  Interface for a
function that is not implemented by CasADi symbolics.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: external_function.hpp ";

%feature("docstring") CasADi::ExternalFunction::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::ExternalFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::ExternalFunction::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::ExternalFunction::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::ExternalFunction::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::ExternalFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::ExternalFunction::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::ExternalFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::ExternalFunction::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::ExternalFunction::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::ExternalFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::ExternalFunction::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::ExternalFunction::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::ExternalFunction::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::ExternalFunction::spInit "[INTERNAL]  Reset
the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::ExternalFunction::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::ExternalFunction::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::ExternalFunction::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::ExternalFunction::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::ExternalFunction::getOption "

get an option value

";

%feature("docstring") CasADi::ExternalFunction::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::ExternalFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::ExternalFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::ExternalFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::ExternalFunction::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::ExternalFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::ExternalFunction::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::ExternalFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::ExternalFunction::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::ExternalFunction::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::ExternalFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::ExternalFunction::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::ExternalFunction::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::ExternalFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::ExternalFunction::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::ExternalFunction::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::ExternalFunction::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") CasADi::ExternalFunction::evaluate "

Evaluate.

";

%feature("docstring") CasADi::ExternalFunction::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::ExternalFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::ExternalFunction::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::ExternalFunction::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::ExternalFunction::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::ExternalFunction::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::ExternalFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::ExternalFunction::evalSX "

[DEPRECATED]

";


// File: structCasADi_1_1F00Checker.xml
%feature("docstring") CasADi::F00Checker "[INTERNAL]  If evaluated with
both arguments zero, is the result zero?

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F00Checker_3_01OP__ADD_01_4.xml
%feature("docstring") CasADi::F00Checker< OP_ADD > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F00Checker_3_01OP__AND_01_4.xml
%feature("docstring") CasADi::F00Checker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F00Checker_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") CasADi::F00Checker< OP_COPYSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F00Checker_3_01OP__FMAX_01_4.xml
%feature("docstring") CasADi::F00Checker< OP_FMAX > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F00Checker_3_01OP__FMIN_01_4.xml
%feature("docstring") CasADi::F00Checker< OP_FMIN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F00Checker_3_01OP__OR_01_4.xml
%feature("docstring") CasADi::F00Checker< OP_OR > " [INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structCasADi_1_1F00Checker_3_01OP__SUB_01_4.xml
%feature("docstring") CasADi::F00Checker< OP_SUB > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker.xml
%feature("docstring") CasADi::F0XChecker "[INTERNAL]  If evaluated with the
first argument zero, is the result zero?

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__AND_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__ASIN_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_ASIN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__ASINH_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_ASINH > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__ASSIGN_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_ASSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__ATAN_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_ATAN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__ATANH_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_ATANH > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__CEIL_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_CEIL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__CONSTPOW_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_CONSTPOW > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_COPYSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__DIV_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_DIV > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__ERF_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_ERF > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__ERFINV_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_ERFINV > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__FABS_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_FABS > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__FLOOR_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_FLOOR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_IF_ELSE_ZERO > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__MUL_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_MUL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__NEG_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_NEG > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__POW_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_POW > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__SIGN_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_SIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__SIN_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_SIN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__SINH_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_SINH > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__SQ_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_SQ > " [INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__SQRT_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_SQRT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__TAN_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_TAN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__TANH_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_TANH > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1F0XChecker_3_01OP__TWICE_01_4.xml
%feature("docstring") CasADi::F0XChecker< OP_TWICE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: classCasADi_1_1FixedStepIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::FixedStepIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") CasADi::FixedStepIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::FixedStepIntegrator::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::FixedStepIntegrator::spCanEvaluate "[INTERNAL]  Is the class able to propate seeds through the algorithm? (for
usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::FixedStepIntegrator::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") CasADi::FixedStepIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::FixedStepIntegrator::evaluate "

Evaluate.

";

%feature("docstring") CasADi::FixedStepIntegrator "[INTERNAL]  Base class
for fixed step integrators.

Joel Andersson

>Input scheme: CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | CasADi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | CasADi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_fi | OT_INTEGER   | 20           | Number of    | CasADi::Fixe |
| nite_element |              |              | finite       | dStepIntegra |
| s            |              |              | elements     | torInternal  |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | CasADi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | CasADi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | CasADi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: fixed_step_integrator.hpp ";

%feature("docstring") CasADi::FixedStepIntegrator::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::FixedStepIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") CasADi::FixedStepIntegrator::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::FixedStepIntegrator::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::FixedStepIntegrator::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::FixedStepIntegrator::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::FixedStepIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::FixedStepIntegrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::FixedStepIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::FixedStepIntegrator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::FixedStepIntegrator::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") CasADi::FixedStepIntegrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::FixedStepIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") CasADi::FixedStepIntegrator::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") CasADi::FixedStepIntegrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::FixedStepIntegrator::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::FixedStepIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::FixedStepIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::FixedStepIntegrator::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::FixedStepIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") CasADi::FixedStepIntegrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::FixedStepIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::FixedStepIntegrator::getOption "

get an option value

";

%feature("docstring") CasADi::FixedStepIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::FixedStepIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::FixedStepIntegrator::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::FixedStepIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::FixedStepIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::FixedStepIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::FixedStepIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::FixedStepIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::FixedStepIntegrator::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::FixedStepIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::FixedStepIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::FixedStepIntegrator::clone "

Clone.

";

%feature("docstring") CasADi::FixedStepIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::FixedStepIntegrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::FixedStepIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::FixedStepIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::FixedStepIntegrator::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::FixedStepIntegrator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::FixedStepIntegrator::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::FixedStepIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") CasADi::FixedStepIntegrator::resetB "

Reset the backward problem Time will be set to tf and backward state to
input(INTEGRATOR_RX0)

";

%feature("docstring") CasADi::FixedStepIntegrator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::FixedStepIntegrator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::FixedStepIntegrator::isInit "

Is initialized?

";

%feature("docstring") CasADi::FixedStepIntegrator::output_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::FixedStepIntegrator::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::FixedStepIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::FixedStepIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") CasADi::FixedStepIntegrator::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::FixedStepIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::FixedStepIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::FixedStepIntegrator::spInit "[INTERNAL]
Reset the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::FixedStepIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::FixedStepIntegrator::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::FixedStepIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::FixedStepIntegrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::FixedStepIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::FixedStepIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::FixedStepIntegrator::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::FixedStepIntegrator::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::FixedStepIntegrator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::FixedStepIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::FixedStepIntegrator::print "[INTERNAL]  Print
a destription of the object.

";

%feature("docstring") CasADi::FixedStepIntegrator::solve "

the same as evaluate()

";

%feature("docstring") CasADi::FixedStepIntegrator::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::FixedStepIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::FixedStepIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::FixedStepIntegrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::FixedStepIntegrator::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::FixedStepIntegrator::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::FixedStepIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::FixedStepIntegrator::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::FixedStepIntegrator::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::FixedStepIntegrator::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::FixedStepIntegrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::FixedStepIntegrator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::FixedStepIntegrator::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::FixedStepIntegrator::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::FixedStepIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::FixedStepIntegrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::FixedStepIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::FixedStepIntegrator::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::FixedStepIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::FixedStepIntegrator::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::FixedStepIntegrator::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::FixedStepIntegrator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::FixedStepIntegrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::FixedStepIntegrator::FixedStepIntegrator "

Default constructor.

";

%feature("docstring") CasADi::FixedStepIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::FixedStepIntegrator::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::FixedStepIntegrator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::FixedStepIntegrator::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";


// File: classCasADi_1_1Function.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::Function::inputScheme " [INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::Function::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::Function::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::Function::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::Function::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::Function::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::Function::solve "

the same as evaluate()

";

%feature("docstring") CasADi::Function::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::Function::outputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Function::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::Function::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::Function::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") CasADi::Function::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::Function::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::Function::Function "

default constructor

";

%feature("docstring") CasADi::Function::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::Function::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::Function::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::Function::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::Function::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::Function::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::Function::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::Function::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::Function::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::Function::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::Function::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::Function::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::Function "[INTERNAL]  General function.

A general function $f$ in casadi can be multi-input, multi-output. Number of
inputs: nin getNumInputs() Number of outputs: nout getNumOutputs()  We can
view this function as a being composed of a (nin, nout) grid of single-
input, single-output primitive functions. Each such primitive function
$f_{i,j} \\\\forall i \\\\in [0,nin-1], j \\\\in [0,nout-1]$ can map as
$\\\\mathbf{R}^{n,m}\\\\to\\\\mathbf{R}^{p,q}$, in which n,m,p,q can take
different values for every (i,j) pair.  When passing input, you specify
which partition i is active. You pass the numbers vectorized, as a vector of
size $(n*m)$. When requesting output, you specify which partition j is
active. You get the numbers vectorized, as a vector of size $(p*q)$.  To
calculate jacobians, you need to have $(m=1,q=1)$.

Write the jacobian as $J_{i,j} = \\\\nabla f_{i,j} = \\\\frac{\\\\partial
f_{i,j}(\\\\vec{x})}{\\\\partial \\\\vec{x}}$.

Using $\\\\vec{v} \\\\in \\\\mathbf{R}^n$ as a forward seed: setFwdSeed(v,i)
Retrieving $\\\\vec{s}_f \\\\in \\\\mathbf{R}^p$ from: getFwdSens(sf,j)
Using $\\\\vec{w} \\\\in \\\\mathbf{R}^p$ as a forward seed: setAdjSeed(w,j)
Retrieving $\\\\vec{s}_a \\\\in \\\\mathbf{R}^n $ from: getAdjSens(sa,i)  We
have the following relationships for function mapping from a row vector to a
row vector:

$ \\\\vec{s}_f = \\\\nabla f_{i,j} . \\\\vec{v}$ $ \\\\vec{s}_a = (\\\\nabla
f_{i,j})^T . \\\\vec{w}$

Some quantities is these formulas must be transposed:  input col: transpose
$ \\\\vec{v} $ and $\\\\vec{s}_a$ output col: transpose $ \\\\vec{w} $ and
$\\\\vec{s}_f$  NOTE: Function's are allowed to modify their input arguments
when evaluating: implicitFunction, IDAS solver Futher releases may disallow
this.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+---------+--------------------------+
|   Id    |         Used in          |
+=========+==========================+
| inputs  | CasADi::FunctionInternal |
+---------+--------------------------+
| outputs | CasADi::FunctionInternal |
+---------+--------------------------+

C++ includes: function.hpp ";

%feature("docstring") CasADi::Function::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::Function::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Function::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::Function::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::Function::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::Function::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::Function::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::Function::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::Function::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::Function::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::Function::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Function::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::Function::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::Function::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::Function::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::Function::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::Function::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::Function::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::Function::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::Function::evaluate "

Evaluate.

";

%feature("docstring") CasADi::Function::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::Function::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::Function::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::Function::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::Function::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::Function::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::Function::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::Function::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::Function::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::Function::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::Function::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::Function::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::Function::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::Function::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::Function::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::Function::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::Function::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Function::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Function::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::Function::~Function "

Destructor.

";

%feature("docstring") CasADi::Function::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::Function::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::Function::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::Function::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::Function::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::Function::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::Function::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::Function::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::Function::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::Function::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Function::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Function::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::Function::checkNode "[INTERNAL]  Check if the
node is pointing to the right type of object.

";

%feature("docstring") CasADi::Function::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") CasADi::Function::getOption "

get an option value

";

%feature("docstring") CasADi::Function::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::Function::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") CasADi::Function::isInit "

Is initialized?

";

%feature("docstring") CasADi::Function::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::Function::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Function::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::Function::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::Function::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::Function::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::Function::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::Function::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::Function::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::Function::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::Function::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";


// File: structCasADi_1_1Function0Checker.xml
%feature("docstring") CasADi::Function0Checker "[INTERNAL]  If evaluated
with the second argument zero, is the result zero?

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1Function0Checker_3_01OP__AND_01_4.xml
%feature("docstring") CasADi::Function0Checker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1Function0Checker_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") CasADi::Function0Checker< OP_IF_ELSE_ZERO > "
[INTERNAL] C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1Function0Checker_3_01OP__MUL_01_4.xml
%feature("docstring") CasADi::Function0Checker< OP_MUL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: classCasADi_1_1Functor.xml
%feature("docstring") CasADi::Functor::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::Functor::checkNode "[INTERNAL]  Assert that
the node is pointing to the right type of object

";

%feature("docstring") CasADi::Functor::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") CasADi::Functor::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::Functor::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::Functor::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::Functor::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Functor::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::Functor::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::Functor "[INTERNAL]   Functor.

Joris Gillis

C++ includes: functor.hpp ";

%feature("docstring") CasADi::Functor::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::Functor::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::Functor::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::Functor::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::Functor::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Functor::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") CasADi::Functor::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::Functor::isInit "

Is initialized?

";

%feature("docstring") CasADi::Functor::clone "[INTERNAL]  Deep copy.

";


// File: classCasADi_1_1FX.xml
%feature("docstring") CasADi::FX "[INTERNAL]  Diagrams

C++ includes: e0_diagram.hpp ";


// File: classCasADi_1_1GenericExpression.xml


/*  Operations from the left  */

/* For Python

*/ %feature("docstring") CasADi::GenericExpression::__rne__ " ";

%feature("docstring") CasADi::GenericExpression::__rtruediv__ "";

%feature("docstring") CasADi::GenericExpression::__rle__ "";

%feature("docstring") CasADi::GenericExpression::__rge__ "";

%feature("docstring") CasADi::GenericExpression::__ge__ "

No need to have both <= and >=.

";

%feature("docstring") CasADi::GenericExpression::__rsub__ "";

%feature("docstring") CasADi::GenericExpression::__rdiv__ "";

%feature("docstring") CasADi::GenericExpression::__req__ "";

%feature("docstring") CasADi::GenericExpression::__mldivide__ "

Matrix division from left.

";

%feature("docstring") CasADi::GenericExpression::__rmul__ "";

%feature("docstring") CasADi::GenericExpression::__radd__ "";

%feature("docstring") CasADi::GenericExpression::__truediv__ "

Division (with future.division in effect)

";

%feature("docstring") CasADi::GenericExpression "[INTERNAL]  Expression
interface.

This is a common base class for SX, MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom. Joel Andersson

C++ includes: generic_expression.hpp ";

%feature("docstring") CasADi::GenericExpression::__rlt__ "";

%feature("docstring") CasADi::GenericExpression::__gt__ "

No need to have both < and >

";

%feature("docstring") CasADi::GenericExpression::__rgt__ "";


// File: classCasADi_1_1GenericMatrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") CasADi::GenericMatrix::sizeD "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") CasADi::GenericMatrix::isSquare "

Check if the matrix expression is square.

";

%feature("docstring") CasADi::GenericMatrix::sizeL "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") CasADi::GenericMatrix::isVector "

Check if the matrix is a vector (i.e. size2()==1)

";

%feature("docstring") CasADi::GenericMatrix::sizeU "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") CasADi::GenericMatrix::sym "

>  static MatType CasADi::GenericMatrix< MatType >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static MatType CasADi::GenericMatrix< MatType >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  MatType CasADi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  std::vector< MatType > CasADi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<MatType > CasADi::GenericMatrix< MatType >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  std::vector< std::vector< MatType > > CasADi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<MatType> > CasADi::GenericMatrix< MatType >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") CasADi::GenericMatrix::sparse "

create a sparse matrix with all zeros

";

%feature("docstring") CasADi::GenericMatrix::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring") CasADi::GenericMatrix::shape "[INTERNAL]  Get the
shape.

";

%feature("docstring") CasADi::GenericMatrix::sparsity "

Get the sparsity pattern.

";

%feature("docstring") CasADi::GenericMatrix::sparsityRef "

Access the sparsity, make a copy if there are multiple references to it.

";

%feature("docstring") CasADi::GenericMatrix::dimString "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring") CasADi::GenericMatrix::numel "

Get the number of elements.

";

%feature("docstring") CasADi::GenericMatrix::isEmpty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") CasADi::GenericMatrix::size "

>  int CasADi::GenericMatrix< MatType >::size() const 
------------------------------------------------------------------------

Get the number of (structural) non-zero elements.

>  int CasADi::GenericMatrix< MatType >::size(SparsityType sp) const 
------------------------------------------------------------------------

Get the number if non-zeros for a given sparsity pattern.

";

%feature("docstring") CasADi::GenericMatrix "[INTERNAL]   Matrix base
class.

This is a common base class for MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom.  The class is designed with the idea that
\"everything is a matrix\", that is, also scalars and vectors. This
philosophy makes it easy to use and to interface in particularily with
Python and Matlab/Octave.  The syntax tries to stay as close as possible to
the ublas syntax when it comes to vector/matrix operations.  Index starts
with 0. Index vec happens as follows: (rr,cc) -> k = rr+cc*size1() Vectors
are column vectors.  The storage format is Compressed Column Storage (CCS),
similar to that used for sparse matrices in Matlab, but unlike this format,
we do allow for elements to be structurally non-zero but numerically zero.
The sparsity pattern, which is reference counted and cached, can be accessed
with Sparsity& sparsity() Joel Andersson

C++ includes: generic_matrix.hpp ";

%feature("docstring") CasADi::GenericMatrix::mul_smart "

Matrix-matrix multiplication. Attempts to identify quick returns on matrix-
level and delegates to MatType::mul_full if no such quick returns are found.

";

%feature("docstring") CasADi::GenericMatrix::isTriu "

Check if the matrix is upper triangular.

";

%feature("docstring") CasADi::GenericMatrix::isScalar "

Check if the matrix expression is scalar.

";

%feature("docstring") CasADi::GenericMatrix::isTril "

Check if the matrix is lower triangular.

";

%feature("docstring") CasADi::GenericMatrix::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") CasADi::GenericMatrix::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") CasADi::GenericMatrix::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") CasADi::GenericMatrix::isDense "

Check if the matrix expression is dense.

";


// File: classCasADi_1_1GenericType.xml
%feature("docstring") CasADi::GenericType::isString "

Is a string?

";

%feature("docstring") CasADi::GenericType::toFunction "

Convert to shared object.

";

%feature("docstring") CasADi::GenericType::isDoubleVector "

Is a vector of doubles?

";

%feature("docstring") CasADi::GenericType::isEmptyVector "

Is an empty vector?

";

%feature("docstring") CasADi::GenericType::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::GenericType::isSharedObject "

Is a shared object?

";

%feature("docstring") CasADi::GenericType::isFunction "

Is a shared object?

";

%feature("docstring") CasADi::GenericType::getType "";

%feature("docstring") CasADi::GenericType::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::GenericType::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::GenericType::isInt "

Is an integer?

";

%feature("docstring") CasADi::GenericType::toDictionary "[INTERNAL]
Convert to Dictionary.

";

%feature("docstring") CasADi::GenericType::get_description "

Get a description of the object's type.

";

%feature("docstring") CasADi::GenericType::can_cast_to "";

%feature("docstring") CasADi::GenericType::isInit "

Is initialized?

";

%feature("docstring") CasADi::GenericType::toStringVector "

Convert to vector of strings.

";

%feature("docstring") CasADi::GenericType::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::GenericType::toSharedObject "

Convert to shared object.

";

%feature("docstring") CasADi::GenericType::isStringVector "

Is a vector of strings.

";

%feature("docstring") CasADi::GenericType::is_a "[INTERNAL]  Check if it is
of a certain type (implementation in generic_type_internal.hpp)

";

%feature("docstring") CasADi::GenericType::toDoubleVector "[INTERNAL]
Convert to vector of doubles.

";

%feature("docstring") CasADi::GenericType::toInt "

Convert to int.

";

%feature("docstring") CasADi::GenericType::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::GenericType::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::GenericType::toBool "

Convert to boolean.

";

%feature("docstring") CasADi::GenericType::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::GenericType::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::GenericType::GenericType "

>  CasADi::GenericType::GenericType(void *ptr)
------------------------------------------------------------------------
[INTERNAL]

>  CasADi::GenericType::GenericType(NLPSolverCreator ptr)
------------------------------------------------------------------------

Creator functions.

";

%feature("docstring") CasADi::GenericType::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::GenericType::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::GenericType "[INTERNAL]  Generic data type.

Joel Andersson

C++ includes: generic_type.hpp ";

%feature("docstring") CasADi::GenericType::toString "

Convert to string.

";

%feature("docstring") CasADi::GenericType::isIntVector "

Is a vector of ints?

";

%feature("docstring") CasADi::GenericType::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::GenericType::toDouble "

Convert to double.

";

%feature("docstring") CasADi::GenericType::toVoidPointer "

Convert to void pointer.

";

%feature("docstring") CasADi::GenericType::toIntVector "[INTERNAL]  Convert
to vector of ints.

";

%feature("docstring") CasADi::GenericType::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::GenericType::isDouble "

Is a double?

";

%feature("docstring") CasADi::GenericType::isBool "

Is boolean?

";

%feature("docstring") CasADi::GenericType::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::GenericType::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::GenericType::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::GenericType::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::GenericType::isDictionary "

Is a shared object?

";

%feature("docstring") CasADi::GenericType::checkNode "[INTERNAL]  Assert
that the node is pointing to the right type of object

";


// File: classCasADi_1_1GetNonzeros.xml
%feature("docstring") CasADi::GetNonzeros::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::GetNonzeros::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::GetNonzeros "[INTERNAL]  Get nonzeros of a
matrix.

Joel Andersson

C++ includes: getnonzeros.hpp ";

%feature("docstring") CasADi::GetNonzeros::isEqual "[INTERNAL]  Check if
two nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::GetNonzeros::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::GetNonzeros::~GetNonzeros "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::GetNonzeros::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::GetNonzeros::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::GetNonzeros::propagateSparsity "

>  virtual void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::GetNonzeros::getAll "[INTERNAL]  Get all the
nonzeros.

";

%feature("docstring") CasADi::GetNonzeros::getHorzsplit "[INTERNAL]  Create
a horizontal split node.

";

%feature("docstring") CasADi::GetNonzeros::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::GetNonzeros::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::GetNonzeros::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::GetNonzeros::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::GetNonzeros::size "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzeros::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::GetNonzeros::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::GetNonzeros::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring") CasADi::GetNonzeros::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") CasADi::GetNonzeros::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::GetNonzeros::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::GetNonzeros::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::GetNonzeros::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::GetNonzeros::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::GetNonzeros::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::GetNonzeros::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::GetNonzeros::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::GetNonzeros::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::GetNonzeros::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") CasADi::GetNonzeros::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::GetNonzeros::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") CasADi::GetNonzeros::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::GetNonzeros::size1 "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzeros::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::GetNonzeros::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") CasADi::GetNonzeros::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") CasADi::GetNonzeros::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::GetNonzeros::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::GetNonzeros::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") CasADi::GetNonzeros::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::GetNonzeros::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::GetNonzeros::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") CasADi::GetNonzeros::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::GetNonzeros::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::GetNonzeros::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::GetNonzeros::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::GetNonzeros::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::GetNonzeros::size2 "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzeros::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::GetNonzeros::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::GetNonzeros::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") CasADi::GetNonzeros::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::GetNonzeros::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::GetNonzeros::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") CasADi::GetNonzeros::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::GetNonzeros::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") CasADi::GetNonzeros::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") CasADi::GetNonzeros::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::GetNonzeros::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::GetNonzeros::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::GetNonzeros::shape "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzeros::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::GetNonzeros::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::GetNonzeros::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::GetNonzeros::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::GetNonzeros::getBinarySwitch "[INTERNAL]  Get
a binary operation operation.

";

%feature("docstring") CasADi::GetNonzeros::GetNonzeros "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::GetNonzeros::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") CasADi::GetNonzeros::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::GetNonzeros::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::GetNonzeros::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") CasADi::GetNonzeros::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::GetNonzeros::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::GetNonzeros::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::GetNonzeros::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::GetNonzeros::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::GetNonzeros::getVertsplit "[INTERNAL]  Create
a vertical split node (vectors only)

";

%feature("docstring") CasADi::GetNonzeros::evaluateMX "

>  void CasADi::GetNonzeros::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::GetNonzeros::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::GetNonzeros::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::GetNonzeros::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";


// File: classCasADi_1_1GetNonzerosSlice.xml
%feature("docstring") CasADi::GetNonzerosSlice::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::GetNonzerosSlice::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") CasADi::GetNonzerosSlice::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::GetNonzerosSlice::getSolve "[INTERNAL]
Solve a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::GetNonzerosSlice::GetNonzerosSlice "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::GetNonzerosSlice::getOutput "[INTERNAL]  Get
an output.

";

%feature("docstring") CasADi::GetNonzerosSlice::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") CasADi::GetNonzerosSlice::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") CasADi::GetNonzerosSlice::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") CasADi::GetNonzerosSlice::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::GetNonzerosSlice::evaluateMX "

>  void CasADi::GetNonzeros::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::GetNonzerosSlice::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") CasADi::GetNonzerosSlice::~GetNonzerosSlice "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::GetNonzerosSlice::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") CasADi::GetNonzerosSlice::getFunction "[INTERNAL]
Get function reference.

";

%feature("docstring") CasADi::GetNonzerosSlice::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") CasADi::GetNonzerosSlice::isMultipleOutput "[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") CasADi::GetNonzerosSlice::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") CasADi::GetNonzerosSlice::isValue "[INTERNAL]  Check
if a certain value.

";

%feature("docstring") CasADi::GetNonzerosSlice::isIdentity "[INTERNAL]
Check if the instance is in fact an identity mapping (that can be
simplified)

";

%feature("docstring") CasADi::GetNonzerosSlice::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") CasADi::GetNonzerosSlice::isInit "[INTERNAL]  Check
if the object has been initialized.

";

%feature("docstring") CasADi::GetNonzerosSlice::getName "[INTERNAL]  Get
the name.

";

%feature("docstring") CasADi::GetNonzerosSlice::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::GetNonzerosSlice::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") CasADi::GetNonzerosSlice::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") CasADi::GetNonzerosSlice::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::GetNonzerosSlice::getValue "[INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") CasADi::GetNonzerosSlice::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") CasADi::GetNonzerosSlice "[INTERNAL] C++ includes:
getnonzeros.hpp ";

%feature("docstring") CasADi::GetNonzerosSlice::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::GetNonzerosSlice::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::GetNonzerosSlice::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") CasADi::GetNonzerosSlice::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::GetNonzerosSlice::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") CasADi::GetNonzerosSlice::getMultiplication "[INTERNAL]   Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::GetNonzerosSlice::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::GetNonzerosSlice::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") CasADi::GetNonzerosSlice::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") CasADi::GetNonzerosSlice::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::GetNonzerosSlice::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") CasADi::GetNonzerosSlice::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::GetNonzerosSlice::numInplace "[INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::GetNonzerosSlice::getBinary "[INTERNAL]  Get
a binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::GetNonzerosSlice::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") CasADi::GetNonzerosSlice::size2 "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzerosSlice::getAll "[INTERNAL]  Get all
the nonzeros.

";

%feature("docstring") CasADi::GetNonzerosSlice::simplifyMe "[INTERNAL]
Simplify.

";

%feature("docstring") CasADi::GetNonzerosSlice::nTmp "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") CasADi::GetNonzerosSlice::isUnaryOp "[INTERNAL]
Check if unary operation.

";

%feature("docstring") CasADi::GetNonzerosSlice::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") CasADi::GetNonzerosSlice::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") CasADi::GetNonzerosSlice::hasDep "[INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") CasADi::GetNonzerosSlice::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::GetNonzerosSlice::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::GetNonzerosSlice::size1 "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzerosSlice::printPart "[INTERNAL]
Print a part of the expression */.

";

%feature("docstring") CasADi::GetNonzerosSlice::setSparsity "[INTERNAL]
Set the sparsity.

";

%feature("docstring") CasADi::GetNonzerosSlice::getNorm1 "[INTERNAL]
1-norm

";

%feature("docstring") CasADi::GetNonzerosSlice::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") CasADi::GetNonzerosSlice::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::GetNonzerosSlice::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::GetNonzerosSlice::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::GetNonzerosSlice::shape "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzerosSlice::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::GetNonzerosSlice::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::GetNonzerosSlice::isEqual "[INTERNAL]  Check
if two nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::GetNonzerosSlice::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::GetNonzerosSlice::isZero "[INTERNAL]  Check
if identically zero.

";

%feature("docstring") CasADi::GetNonzerosSlice::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") CasADi::GetNonzerosSlice::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::GetNonzerosSlice::size "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzerosSlice::getBinarySwitch "[INTERNAL]
Get a binary operation operation.

";

%feature("docstring") CasADi::GetNonzerosSlice::isBinaryOp "[INTERNAL]
Check if binary operation.

";

%feature("docstring") CasADi::GetNonzerosSlice::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::GetNonzerosSlice::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::GetNonzerosSlice::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") CasADi::GetNonzerosSlice::isNonLinear "[INTERNAL]  Is
the node nonlinear.

";

%feature("docstring") CasADi::GetNonzerosSlice::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") CasADi::GetNonzerosSlice::getFunctionInput "[INTERNAL]  Get function input.

";

%feature("docstring") CasADi::GetNonzerosSlice::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") CasADi::GetNonzerosSlice::getNorm2 "[INTERNAL]
Spectran norm.

";

%feature("docstring") CasADi::GetNonzerosSlice::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";


// File: classCasADi_1_1GetNonzerosSlice2.xml
%feature("docstring") CasADi::GetNonzerosSlice2::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::GetNonzerosSlice2::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::GetNonzerosSlice2::getName "[INTERNAL]  Get
the name.

";

%feature("docstring") CasADi::GetNonzerosSlice2::mapping "[INTERNAL]  Get
an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::GetNonzerosSlice2::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getValue "[INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") CasADi::GetNonzerosSlice2::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::GetNonzerosSlice2::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") CasADi::GetNonzerosSlice2 "[INTERNAL] C++ includes:
getnonzeros.hpp ";

%feature("docstring") CasADi::GetNonzerosSlice2::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") CasADi::GetNonzerosSlice2::isBinaryOp "[INTERNAL]
Check if binary operation.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getUnary "[INTERNAL]  Get
a unary operation.

";

%feature("docstring") CasADi::GetNonzerosSlice2::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") CasADi::GetNonzerosSlice2::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::GetNonzerosSlice2::isInit "[INTERNAL]  Check
if the object has been initialized.

";

%feature("docstring") CasADi::GetNonzerosSlice2::isNonLinear "[INTERNAL]
Is the node nonlinear.

";

%feature("docstring") CasADi::GetNonzerosSlice2::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getBinary "[INTERNAL]  Get
a binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::GetNonzerosSlice2::getNorm2 "[INTERNAL]
Spectran norm.

";

%feature("docstring") CasADi::GetNonzerosSlice2::numInplace "[INTERNAL]
Can the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::GetNonzerosSlice2::ndep "[INTERNAL]  Number
of dependencies.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getFunction "[INTERNAL]
Get function reference.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::GetNonzerosSlice2::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getAll "[INTERNAL]  Get
all the nonzeros.

";

%feature("docstring") CasADi::GetNonzerosSlice2::evaluateMX "

>  void CasADi::GetNonzeros::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::GetNonzerosSlice2::hasDep "[INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") CasADi::GetNonzerosSlice2::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") CasADi::GetNonzerosSlice2::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getFunctionInput "[INTERNAL]  Get function input.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") CasADi::GetNonzerosSlice2::GetNonzerosSlice2 "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::GetNonzerosSlice2::printPart "[INTERNAL]
Print a part of the expression */.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::GetNonzerosSlice2::isOne "[INTERNAL]  Check
if identically one.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::GetNonzerosSlice2::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::GetNonzerosSlice2::isEqual "[INTERNAL]  Check
if two nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::GetNonzerosSlice2::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::GetNonzerosSlice2::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::GetNonzerosSlice2::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") CasADi::GetNonzerosSlice2::isZero "[INTERNAL]  Check
if identically zero.

";

%feature("docstring") CasADi::GetNonzerosSlice2::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getMultiplication "[INTERNAL]   Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::GetNonzerosSlice2::size "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzerosSlice2::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getSolve "[INTERNAL]
Solve a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::GetNonzerosSlice2::~GetNonzerosSlice2 "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getBinarySwitch "[INTERNAL]  Get a binary operation operation.

";

%feature("docstring") CasADi::GetNonzerosSlice2::isMultipleOutput "[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") CasADi::GetNonzerosSlice2::nTmp "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") CasADi::GetNonzerosSlice2::deepCopyMembers "[INTERNAL]  Deep copy data members.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getNorm1 "[INTERNAL]
1-norm

";

%feature("docstring") CasADi::GetNonzerosSlice2::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::GetNonzerosSlice2::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") CasADi::GetNonzerosSlice2::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::GetNonzerosSlice2::setSparsity "[INTERNAL]
Set the sparsity.

";

%feature("docstring") CasADi::GetNonzerosSlice2::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") CasADi::GetNonzerosSlice2::size2 "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzerosSlice2::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::GetNonzerosSlice2::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") CasADi::GetNonzerosSlice2::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") CasADi::GetNonzerosSlice2::isIdentity "[INTERNAL]
Check if identity matrix.

";

%feature("docstring") CasADi::GetNonzerosSlice2::isUnaryOp "[INTERNAL]
Check if unary operation.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getOutput "[INTERNAL]  Get
an output.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::GetNonzerosSlice2::size1 "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzerosSlice2::shape "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzerosSlice2::isValue "[INTERNAL]  Check
if a certain value.

";

%feature("docstring") CasADi::GetNonzerosSlice2::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";


// File: classCasADi_1_1GetNonzerosVector.xml
%feature("docstring") CasADi::GetNonzerosVector::isZero "[INTERNAL]  Check
if identically zero.

";

%feature("docstring") CasADi::GetNonzerosVector::deepCopyMembers "[INTERNAL]  Deep copy data members.

";

%feature("docstring") CasADi::GetNonzerosVector::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") CasADi::GetNonzerosVector::hasDep "[INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") CasADi::GetNonzerosVector::GetNonzerosVector "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::GetNonzerosVector::isOne "[INTERNAL]  Check
if identically one.

";

%feature("docstring") CasADi::GetNonzerosVector::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") CasADi::GetNonzerosVector::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") CasADi::GetNonzerosVector::isValue "[INTERNAL]  Check
if a certain value.

";

%feature("docstring") CasADi::GetNonzerosVector::size1 "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzerosVector::isIdentity "[INTERNAL]
Check if identity matrix.

";

%feature("docstring") CasADi::GetNonzerosVector::size "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzerosVector::getMultiplication "[INTERNAL]   Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::GetNonzerosVector::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") CasADi::GetNonzerosVector::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::GetNonzerosVector::printPart "[INTERNAL]
Print a part of the expression */.

";

%feature("docstring") CasADi::GetNonzerosVector::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::GetNonzerosVector::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::GetNonzerosVector "[INTERNAL] C++ includes:
getnonzeros.hpp ";

%feature("docstring") CasADi::GetNonzerosVector::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") CasADi::GetNonzerosVector::getBinary "[INTERNAL]  Get
a binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::GetNonzerosVector::isBinaryOp "[INTERNAL]
Check if binary operation.

";

%feature("docstring") CasADi::GetNonzerosVector::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") CasADi::GetNonzerosVector::getFunction "[INTERNAL]
Get function reference.

";

%feature("docstring") CasADi::GetNonzerosVector::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") CasADi::GetNonzerosVector::getNorm1 "[INTERNAL]
1-norm

";

%feature("docstring") CasADi::GetNonzerosVector::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") CasADi::GetNonzerosVector::getFunctionInput "[INTERNAL]  Get function input.

";

%feature("docstring") CasADi::GetNonzerosVector::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::GetNonzerosVector::getName "[INTERNAL]  Get
the name.

";

%feature("docstring") CasADi::GetNonzerosVector::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::GetNonzerosVector::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") CasADi::GetNonzerosVector::isEqual "[INTERNAL]  Check
if two nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::GetNonzerosVector::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") CasADi::GetNonzerosVector::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") CasADi::GetNonzerosVector::evaluateMX "

>  void CasADi::GetNonzeros::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::GetNonzerosVector::getSolve "[INTERNAL]
Solve a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::GetNonzerosVector::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") CasADi::GetNonzerosVector::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") CasADi::GetNonzerosVector::~GetNonzerosVector "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::GetNonzerosVector::getNorm2 "[INTERNAL]
Spectran norm.

";

%feature("docstring") CasADi::GetNonzerosVector::numInplace "[INTERNAL]
Can the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::GetNonzerosVector::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") CasADi::GetNonzerosVector::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::GetNonzerosVector::isUnaryOp "[INTERNAL]
Check if unary operation.

";

%feature("docstring") CasADi::GetNonzerosVector::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") CasADi::GetNonzerosVector::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::GetNonzerosVector::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::GetNonzerosVector::mapping "[INTERNAL]  Get
an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::GetNonzerosVector::getUnary "[INTERNAL]  Get
a unary operation.

";

%feature("docstring") CasADi::GetNonzerosVector::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") CasADi::GetNonzerosVector::getValue "[INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") CasADi::GetNonzerosVector::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::GetNonzerosVector::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::GetNonzerosVector::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") CasADi::GetNonzerosVector::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") CasADi::GetNonzerosVector::nTmp "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") CasADi::GetNonzerosVector::ndep "[INTERNAL]  Number
of dependencies.

";

%feature("docstring") CasADi::GetNonzerosVector::getAll "[INTERNAL]  Get
all the nonzeros.

";

%feature("docstring") CasADi::GetNonzerosVector::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::GetNonzerosVector::isInit "[INTERNAL]  Check
if the object has been initialized.

";

%feature("docstring") CasADi::GetNonzerosVector::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::GetNonzerosVector::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") CasADi::GetNonzerosVector::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") CasADi::GetNonzerosVector::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::GetNonzerosVector::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") CasADi::GetNonzerosVector::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::GetNonzerosVector::size2 "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzerosVector::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") CasADi::GetNonzerosVector::shape "[INTERNAL] ";

%feature("docstring") CasADi::GetNonzerosVector::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::GetNonzerosVector::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::GetNonzerosVector::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") CasADi::GetNonzerosVector::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") CasADi::GetNonzerosVector::getOutput "[INTERNAL]  Get
an output.

";

%feature("docstring") CasADi::GetNonzerosVector::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::GetNonzerosVector::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::GetNonzerosVector::isNonLinear "[INTERNAL]
Is the node nonlinear.

";

%feature("docstring") CasADi::GetNonzerosVector::getBinarySwitch "[INTERNAL]  Get a binary operation operation.

";

%feature("docstring") CasADi::GetNonzerosVector::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::GetNonzerosVector::setSparsity "[INTERNAL]
Set the sparsity.

";

%feature("docstring") CasADi::GetNonzerosVector::isMultipleOutput "[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") CasADi::GetNonzerosVector::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";


// File: classCasADi_1_1GradFInputIOSchemeVector.xml
%feature("docstring") CasADi::GradFInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::GradFInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::GradFInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::GradFInputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::GradFInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::GradFInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::GradFInputIOSchemeVector "[INTERNAL]  Helper
function for 'GradFInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::GradFInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
CasADi::GradFInputIOSchemeVector::GradFInputIOSchemeVector "[INTERNAL] ";


// File: classCasADi_1_1GradFOutputIOSchemeVector.xml
%feature("docstring") CasADi::GradFOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") CasADi::GradFOutputIOSchemeVector "[INTERNAL]  Helper
function for 'GradFOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::GradFOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::GradFOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::GradFOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::GradFOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring")
CasADi::GradFOutputIOSchemeVector::GradFOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::GradFOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::GradFOutputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";


// File: classCasADi_1_1HessLagInputIOSchemeVector.xml
%feature("docstring") CasADi::HessLagInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") CasADi::HessLagInputIOSchemeVector "[INTERNAL]
Helper function for 'HessLagInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::HessLagInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring")
CasADi::HessLagInputIOSchemeVector::HessLagInputIOSchemeVector "[INTERNAL]
";

%feature("docstring") CasADi::HessLagInputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::HessLagInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::HessLagInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::HessLagInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::HessLagInputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";


// File: classCasADi_1_1HessLagOutputIOSchemeVector.xml
%feature("docstring") CasADi::HessLagOutputIOSchemeVector "[INTERNAL]
Helper function for 'HessLagOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
CasADi::HessLagOutputIOSchemeVector::HessLagOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::HessLagOutputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::HessLagOutputIOSchemeVector::print "[INTERNAL]  Print a destription of the object.

";

%feature("docstring") CasADi::HessLagOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::HessLagOutputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::HessLagOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") CasADi::HessLagOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::HessLagOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classCasADi_1_1HNLPInputIOSchemeVector.xml
%feature("docstring") CasADi::HNLPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::HNLPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::HNLPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::HNLPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::HNLPInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::HNLPInputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::HNLPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::HNLPInputIOSchemeVector "[INTERNAL]  Helper
function for 'HNLPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
CasADi::HNLPInputIOSchemeVector::HNLPInputIOSchemeVector "[INTERNAL] ";


// File: classCasADi_1_1HomotopyNLPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::HomotopyNLPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::HomotopyNLPSolver "[INTERNAL]  Base class for
Homotopy NLP Solvers.

Solves the following parametric nonlinear program (NLP):min
F(x,p,tau)  x  subject to             LBX <=   x    <= UBX             LBG
<= G(x,p) <= UBG                        p  == P nx: number of decision
variables     ng: number of constraints     np: number of parameters

In a homotopy from tau = 0 to tau = 1.

Joris Gillis

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | CasADi::Homo |
|              |              |              | NLP function | topyNLPInter |
|              |              |              | in terms of  | nal          |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

C++ includes: homotopy_nlp_solver.hpp ";

%feature("docstring") CasADi::HomotopyNLPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::HomotopyNLPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::HomotopyNLPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::HomotopyNLPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::HomotopyNLPSolver::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::HomotopyNLPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::HomotopyNLPSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::HomotopyNLPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::HomotopyNLPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::HomotopyNLPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::HomotopyNLPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::HomotopyNLPSolver::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::HomotopyNLPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::HomotopyNLPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::HomotopyNLPSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::HomotopyNLPSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::HomotopyNLPSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::HomotopyNLPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::HomotopyNLPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::HomotopyNLPSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::HomotopyNLPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::HomotopyNLPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::HomotopyNLPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::HomotopyNLPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::HomotopyNLPSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::HomotopyNLPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::HomotopyNLPSolver::spCanEvaluate "[INTERNAL]
Is the class able to propate seeds through the algorithm? (for usage, see
the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::HomotopyNLPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::HomotopyNLPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::HomotopyNLPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::HomotopyNLPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::HomotopyNLPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::HomotopyNLPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::HomotopyNLPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::HomotopyNLPSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::HomotopyNLPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::HomotopyNLPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::HomotopyNLPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::HomotopyNLPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::HomotopyNLPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::HomotopyNLPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::HomotopyNLPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::HomotopyNLPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::HomotopyNLPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::HomotopyNLPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::HomotopyNLPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::HomotopyNLPSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::HomotopyNLPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::HomotopyNLPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::HomotopyNLPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::HomotopyNLPSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::HomotopyNLPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::HomotopyNLPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::HomotopyNLPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::HomotopyNLPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::HomotopyNLPSolver::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") CasADi::HomotopyNLPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::HomotopyNLPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::HomotopyNLPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::HomotopyNLPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::HomotopyNLPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::HomotopyNLPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::HomotopyNLPSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::HomotopyNLPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::HomotopyNLPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::HomotopyNLPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::HomotopyNLPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::HomotopyNLPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::HomotopyNLPSolver::HomotopyNLPSolver "

Default constructor.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::HomotopyNLPSolver::spInit "[INTERNAL]  Reset
the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::HomotopyNLPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::HomotopyNLPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::HomotopyNLPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::HomotopyNLPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::HomotopyNLPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::HomotopyNLPSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::HomotopyNLPSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::HomotopyNLPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::HomotopyNLPSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";


// File: classCasADi_1_1Horzcat.xml
%feature("docstring") CasADi::Horzcat::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::Horzcat::shape "[INTERNAL] ";

%feature("docstring") CasADi::Horzcat::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Horzcat::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Horzcat::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::Horzcat::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") CasADi::Horzcat::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") CasADi::Horzcat::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Horzcat::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Horzcat::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Horzcat::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Horzcat "[INTERNAL]  Horizontal
concatenation.

Joel Andersson

C++ includes: concat.hpp ";

%feature("docstring") CasADi::Horzcat::Horzcat "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::Horzcat::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Horzcat::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Horzcat::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Horzcat::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Horzcat::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") CasADi::Horzcat::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::Horzcat::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Horzcat::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Horzcat::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Horzcat::printPart "[INTERNAL]  Print a part
of the expression */.

";

%feature("docstring") CasADi::Horzcat::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::Horzcat::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Horzcat::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Horzcat::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Horzcat::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Horzcat::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::Horzcat::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Horzcat::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Horzcat::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Horzcat::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Horzcat::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Horzcat::size "[INTERNAL] ";

%feature("docstring") CasADi::Horzcat::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Horzcat::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Horzcat::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::Horzcat::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") CasADi::Horzcat::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Horzcat::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::Horzcat::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::Horzcat::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::Horzcat::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") CasADi::Horzcat::evaluateMX "

>  void CasADi::Horzcat::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Horzcat::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Horzcat::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Horzcat::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Horzcat::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::Horzcat::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::Horzcat::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::Horzcat::~Horzcat "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::Horzcat::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Horzcat::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Horzcat::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Horzcat::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Horzcat::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Horzcat::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::Horzcat::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Horzcat::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::Horzcat::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Horzcat::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Horzcat::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Horzcat::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::Horzcat::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Horzcat::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::Horzcat::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::Horzcat::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::Horzcat::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::Horzcat::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::Horzcat::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Horzcat::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Horzcat::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Horzcat::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Horzcat::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Horzcat::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Horzcat::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::Horzcat::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") CasADi::Horzcat::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::Horzcat::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Horzcat::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Horzcat::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";


// File: classCasADi_1_1Horzsplit.xml
%feature("docstring") CasADi::Horzsplit::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Horzsplit::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Horzsplit::sparsity "

>  virtual const Sparsity& CasADi::Split::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

";

%feature("docstring") CasADi::Horzsplit::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") CasADi::Horzsplit::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Horzsplit::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Horzsplit::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Horzsplit::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Horzsplit::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Horzsplit::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Horzsplit::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::Horzsplit::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") CasADi::Horzsplit::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") CasADi::Horzsplit::Horzsplit "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::Horzsplit::evaluateMX "

>  void CasADi::Horzsplit::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Horzsplit::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::Horzsplit::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::Horzsplit::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Horzsplit::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Horzsplit::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Horzsplit::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") CasADi::Horzsplit::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Horzsplit "[INTERNAL]  Horizontal split, x ->
x0, x1,...

Joel Andersson

C++ includes: split.hpp ";

%feature("docstring") CasADi::Horzsplit::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Horzsplit::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::Horzsplit::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::Horzsplit::~Horzsplit "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::Horzsplit::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::Horzsplit::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::Horzsplit::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::Horzsplit::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::Horzsplit::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Horzsplit::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Horzsplit::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::Horzsplit::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Horzsplit::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Horzsplit::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Horzsplit::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::Horzsplit::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Horzsplit::printPart "[INTERNAL]  Print a
part of the expression */.

";

%feature("docstring") CasADi::Horzsplit::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Horzsplit::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Horzsplit::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Horzsplit::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Horzsplit::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::Horzsplit::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Horzsplit::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Horzsplit::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::Horzsplit::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Horzsplit::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::Horzsplit::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Horzsplit::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::Horzsplit::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Horzsplit::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Horzsplit::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Horzsplit::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Horzsplit::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Horzsplit::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Horzsplit::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Horzsplit::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Horzsplit::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") CasADi::Horzsplit::shape "[INTERNAL] ";

%feature("docstring") CasADi::Horzsplit::size "[INTERNAL] ";

%feature("docstring") CasADi::Horzsplit::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Horzsplit::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::Horzsplit::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") CasADi::Horzsplit::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Horzsplit::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::Horzsplit::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Horzsplit::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Horzsplit::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Horzsplit::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::Horzsplit::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Horzsplit::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Horzsplit::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::Horzsplit::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::Horzsplit::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Horzsplit::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Horzsplit::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Horzsplit::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Horzsplit::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::Horzsplit::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";


// File: classCasADi_1_1IdasIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::IdasIntegrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::IdasIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::IdasIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::IdasIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::IdasIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::IdasIntegrator::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::IdasIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::IdasIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::IdasIntegrator::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::IdasIntegrator::correctInitialConditions "

Correct the initial value for yp and z after resetting the solver.

";

%feature("docstring") CasADi::IdasIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::IdasIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::IdasIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::IdasIntegrator::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::IdasIntegrator::isInit "

Is initialized?

";

%feature("docstring") CasADi::IdasIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::IdasIntegrator::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::IdasIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::IdasIntegrator::clone "

Clone.

";

%feature("docstring") CasADi::IdasIntegrator::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::IdasIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") CasADi::IdasIntegrator::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::IdasIntegrator::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::IdasIntegrator::evaluate "

Evaluate.

";

%feature("docstring") CasADi::IdasIntegrator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::IdasIntegrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::IdasIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::IdasIntegrator::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::IdasIntegrator::resetB "

Reset the backward problem Time will be set to tf and backward state to
input(INTEGRATOR_RX0)

";

%feature("docstring") CasADi::IdasIntegrator::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::IdasIntegrator::setStopTime "

Set a stop time for the forward integration.

";

%feature("docstring") CasADi::IdasIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::IdasIntegrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::IdasIntegrator::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::IdasIntegrator::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::IdasIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::IdasIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::IdasIntegrator::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::IdasIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::IdasIntegrator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::IdasIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::IdasIntegrator::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::IdasIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::IdasIntegrator::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::IdasIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::IdasIntegrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::IdasIntegrator::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::IdasIntegrator::getOption "

get an option value

";

%feature("docstring") CasADi::IdasIntegrator::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::IdasIntegrator::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::IdasIntegrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::IdasIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::IdasIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::IdasIntegrator::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::IdasIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") CasADi::IdasIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") CasADi::IdasIntegrator::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::IdasIntegrator::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::IdasIntegrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::IdasIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::IdasIntegrator::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::IdasIntegrator::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::IdasIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::IdasIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::IdasIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::IdasIntegrator::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::IdasIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::IdasIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::IdasIntegrator::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::IdasIntegrator "[INTERNAL]  Interface to IDAS
from the Sundials suite.

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x,z,p,t) Forward ODE  0 = fz(x,z,p,t)
Forward algebraic equations  der(q) = fq(x,z,p,t)                  Forward
quadratures Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  = 0
Backward integration from t=tf to t=t0  der(rx) = gx(rx,rz,rp,x,z,p,t)
Backward ODE  0 = gz(rx,rz,rp,x,z,p,t)        Backward algebraic equations
der(rq) = gq(rx,rz,rp,x,z,p,t)        Backward quadratures where we assume
that both the forward and backwards integrations are index-1  (i.e. dfz/dz,
dgz/drz are invertible) and furthermore that gx, gz and gq have a linear
dependency on rx, rz and rp.

Joel Andersson

>Input scheme: CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| abstol       | OT_REAL      | 0.000        | Absolute     | CasADi::Sund |
|              |              |              | tolerence    | ialsInternal |
|              |              |              | for the IVP  |              |
|              |              |              | solution     |              |
+--------------+--------------+--------------+--------------+--------------+
| abstolB      | OT_REAL      | GenericType( | Absolute     | CasADi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | abstol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| abstolv      | OT_REALVECTO |              |              | CasADi::Idas |
|              | R            |              |              | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | CasADi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_ic      | OT_BOOLEAN   | true         | Use          | CasADi::Idas |
|              |              |              | IDACalcIC to | Internal     |
|              |              |              | get          |              |
|              |              |              | consistent   |              |
|              |              |              | initial      |              |
|              |              |              | conditions.  |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_icB     | OT_BOOLEAN   | GenericType( | Use          | CasADi::Idas |
|              |              | )            | IDACalcIC to | Internal     |
|              |              |              | get          |              |
|              |              |              | consistent   |              |
|              |              |              | initial      |              |
|              |              |              | conditions   |              |
|              |              |              | for          |              |
|              |              |              | backwards    |              |
|              |              |              | system       |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | calc_ic].    |              |
+--------------+--------------+--------------+--------------+--------------+
| cj_scaling   | OT_BOOLEAN   | false        | IDAS scaling | CasADi::Idas |
|              |              |              | on cj for    | Internal     |
|              |              |              | the user-    |              |
|              |              |              | defined      |              |
|              |              |              | linear       |              |
|              |              |              | solver       |              |
|              |              |              | module       |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| disable_inte | OT_BOOLEAN   | false        | Disable IDAS | CasADi::Idas |
| rnal_warning |              |              | internal     | Internal     |
| s            |              |              | warning      |              |
|              |              |              | messages     |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | true         | Use exact    | CasADi::Sund |
| an           |              |              | Jacobian     | ialsInternal |
|              |              |              | information  |              |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | GenericType( | Use exact    | CasADi::Sund |
| anB          |              | )            | Jacobian     | ialsInternal |
|              |              |              | information  |              |
|              |              |              | for the      |              |
|              |              |              | backward     |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to exa |              |
|              |              |              | ct_jacobian] |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | CasADi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| extra_fsens_ | OT_BOOLEAN   | false        | Call calc ic | CasADi::Idas |
| calc_ic      |              |              | an extra     | Internal     |
|              |              |              | time, with   |              |
|              |              |              | fsens=0      |              |
+--------------+--------------+--------------+--------------+--------------+
| finite_diffe | OT_BOOLEAN   | false        | Use finite   | CasADi::Sund |
| rence_fsens  |              |              | differences  | ialsInternal |
|              |              |              | to           |              |
|              |              |              | approximate  |              |
|              |              |              | the forward  |              |
|              |              |              | sensitivity  |              |
|              |              |              | equations    |              |
|              |              |              | (if AD is    |              |
|              |              |              | not          |              |
|              |              |              | available)   |              |
+--------------+--------------+--------------+--------------+--------------+
| first_time   | OT_REAL      | GenericType( | First        | CasADi::Idas |
|              |              | )            | requested    | Internal     |
|              |              |              | time as a    |              |
|              |              |              | fraction of  |              |
|              |              |              | the time     |              |
|              |              |              | interval     |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_abstol | OT_REAL      | GenericType( | Absolute     | CasADi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | abstol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_abstol | OT_REALVECTO |              |              | CasADi::Idas |
| v            | R            |              |              | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| fsens_err_co | OT_BOOLEAN   | true         | include the  | CasADi::Sund |
| n            |              |              | forward sens | ialsInternal |
|              |              |              | itivities in |              |
|              |              |              | all error    |              |
|              |              |              | controls     |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_reltol | OT_REAL      | GenericType( | Relative     | CasADi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | reltol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_scalin | OT_REALVECTO | GenericType( | Scaling      | CasADi::Sund |
| g_factors    | R            | )            | factor for   | ialsInternal |
|              |              |              | the          |              |
|              |              |              | components   |              |
|              |              |              | if finite    |              |
|              |              |              | differences  |              |
|              |              |              | is used      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_sensit | OT_INTEGERVE | GenericType( | Specifies    | CasADi::Sund |
| iviy_paramet | CTOR         | )            | which        | ialsInternal |
| ers          |              |              | components   |              |
|              |              |              | will be used |              |
|              |              |              | when         |              |
|              |              |              | estimating   |              |
|              |              |              | the          |              |
|              |              |              | sensitivity  |              |
|              |              |              | equations    |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| init_xdot    | OT_REALVECTO | GenericType( | Initial      | CasADi::Idas |
|              | R            | )            | values for   | Internal     |
|              |              |              | the state    |              |
|              |              |              | derivatives  |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| interpolatio | OT_STRING    | \"hermite\"    | Type of inte | CasADi::Sund |
| n_type       |              |              | rpolation    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint sens |              |
|              |              |              | itivities (h |              |
|              |              |              | ermite|polyn |              |
|              |              |              | omial)       |              |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | \"gmres\"      | (gmres|bcgst | CasADi::Sund |
| lver         |              |              | ab|tfqmr)    | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | GenericType( | (gmres|bcgst | CasADi::Sund |
| lverB        |              | )            | ab|tfqmr)    | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | A custom     | CasADi::Sund |
| r            | VER          | )            | linear       | ialsInternal |
|              |              |              | solver       |              |
|              |              |              | creator      |              |
|              |              |              | function     |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | A custom     | CasADi::Sund |
| rB           | VER          | )            | linear       | ialsInternal |
|              |              |              | solver       |              |
|              |              |              | creator      |              |
|              |              |              | function for |              |
|              |              |              | backwards    |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to lin |              |
|              |              |              | ear_solver]  |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | CasADi::Sund |
| r_options    | Y            | )            | be passed to | ialsInternal |
|              |              |              | the linear   |              |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | CasADi::Sund |
| r_optionsB   | Y            | )            | be passed to | ialsInternal |
|              |              |              | the linear   |              |
|              |              |              | solver for   |              |
|              |              |              | backwards    |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to lin |              |
|              |              |              | ear_solver_o |              |
|              |              |              | ptions]      |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | \"dense\"      | (user_define | CasADi::Sund |
| r_type       |              |              | d|dense|band | ialsInternal |
|              |              |              | ed|iterative |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | GenericType( | (user_define | CasADi::Sund |
| r_typeB      |              | )            | d|dense|band | ialsInternal |
|              |              |              | ed|iterative |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | Lower band-  | CasADi::Sund |
| dth          |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | Jacobian (es |              |
|              |              |              | timations)   |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | lower band-  | CasADi::Sund |
| dthB         |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | jacobians    |              |
|              |              |              | for backward |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to low |              |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_krylov   | OT_INTEGER   | 10           | Maximum      | CasADi::Sund |
|              |              |              | Krylov       | ialsInternal |
|              |              |              | subspace     |              |
|              |              |              | size         |              |
+--------------+--------------+--------------+--------------+--------------+
| max_krylovB  | OT_INTEGER   | GenericType( | Maximum      | CasADi::Sund |
|              |              | )            | krylov       | ialsInternal |
|              |              |              | subspace     |              |
|              |              |              | size         |              |
+--------------+--------------+--------------+--------------+--------------+
| max_multiste | OT_INTEGER   | 5            |              | CasADi::Sund |
| p_order      |              |              |              | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| max_num_step | OT_INTEGER   | 10000        | Maximum      | CasADi::Sund |
| s            |              |              | number of    | ialsInternal |
|              |              |              | integrator   |              |
|              |              |              | steps        |              |
+--------------+--------------+--------------+--------------+--------------+
| max_step_siz | OT_REAL      | 0            | Maximim step | CasADi::Idas |
| e            |              |              | size         | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | CasADi::Idas |
|              |              |              | uts)  (corre | Internal     |
|              |              |              | ctInitialCon |              |
|              |              |              | ditions|res| |              |
|              |              |              | resS|resB|rh |              |
|              |              |              | sQB|bjacB|jt |              |
|              |              |              | imesB|psetup |              |
|              |              |              | B|psolveB|ps |              |
|              |              |              | etup)        |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pretype      | OT_STRING    | \"none\"       | (none|left|r | CasADi::Sund |
|              |              |              | ight|both)   | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| pretypeB     | OT_STRING    | GenericType( | (none|left|r | CasADi::Sund |
|              |              | )            | ight|both)   | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | CasADi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| quad_err_con | OT_BOOLEAN   | false        | Should the   | CasADi::Sund |
|              |              |              | quadratures  | ialsInternal |
|              |              |              | affect the   |              |
|              |              |              | step size    |              |
|              |              |              | control      |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| reltol       | OT_REAL      | 0.000        | Relative     | CasADi::Sund |
|              |              |              | tolerence    | ialsInternal |
|              |              |              | for the IVP  |              |
|              |              |              | solution     |              |
+--------------+--------------+--------------+--------------+--------------+
| reltolB      | OT_REAL      | GenericType( | Relative     | CasADi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | reltol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| sensitivity_ | OT_STRING    | \"simultaneou | (simultaneou | CasADi::Sund |
| method       |              | s\"           | s|staggered) | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| steps_per_ch | OT_INTEGER   | 20           | Number of    | CasADi::Sund |
| eckpoint     |              |              | steps        | ialsInternal |
|              |              |              | between two  |              |
|              |              |              | consecutive  |              |
|              |              |              | checkpoints  |              |
+--------------+--------------+--------------+--------------+--------------+
| stop_at_end  | OT_BOOLEAN   | true         | Stop the     | CasADi::Sund |
|              |              |              | integrator   | ialsInternal |
|              |              |              | at the end   |              |
|              |              |              | of the       |              |
|              |              |              | interval     |              |
+--------------+--------------+--------------+--------------+--------------+
| suppress_alg | OT_BOOLEAN   | false        | Supress      | CasADi::Idas |
| ebraic       |              |              | algebraic    | Internal     |
|              |              |              | variables in |              |
|              |              |              | the error    |              |
|              |              |              | testing      |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | CasADi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | CasADi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | Upper band-  | CasADi::Sund |
| dth          |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | Jacobian (es |              |
|              |              |              | timations)   |              |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | Upper band-  | CasADi::Sund |
| dthB         |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | jacobians    |              |
|              |              |              | for backward |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to upp |              |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | false        | Precondition | CasADi::Sund |
| tioner       |              |              | an iterative | ialsInternal |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | GenericType( | Precondition | CasADi::Sund |
| tionerB      |              | )            | an iterative | ialsInternal |
|              |              |              | solver for   |              |
|              |              |              | the          |              |
|              |              |              | backwards    |              |
|              |              |              | problem      |              |
|              |              |              | [default:    |              |
|              |              |              | equal to use |              |
|              |              |              | _preconditio |              |
|              |              |              | ner]         |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+--------------------------+--------------------------+
|            Id            |         Used in          |
+==========================+==========================+
| bjacB                    | CasADi::IdasInternal     |
+--------------------------+--------------------------+
| correctInitialConditions | CasADi::IdasInternal     |
+--------------------------+--------------------------+
| inputs                   | CasADi::FunctionInternal |
+--------------------------+--------------------------+
| jtimesB                  | CasADi::IdasInternal     |
+--------------------------+--------------------------+
| outputs                  | CasADi::FunctionInternal |
+--------------------------+--------------------------+
| psetup                   | CasADi::IdasInternal     |
+--------------------------+--------------------------+
| psetupB                  | CasADi::IdasInternal     |
+--------------------------+--------------------------+
| psolveB                  | CasADi::IdasInternal     |
+--------------------------+--------------------------+
| res                      | CasADi::IdasInternal     |
+--------------------------+--------------------------+
| resB                     | CasADi::IdasInternal     |
+--------------------------+--------------------------+
| resS                     | CasADi::IdasInternal     |
+--------------------------+--------------------------+
| rhsQB                    | CasADi::IdasInternal     |
+--------------------------+--------------------------+

>List of available stats
+-------------+----------------------+
|     Id      |       Used in        |
+=============+======================+
| nlinsetups  | CasADi::IdasInternal |
+-------------+----------------------+
| nlinsetupsB | CasADi::IdasInternal |
+-------------+----------------------+
| nsteps      | CasADi::IdasInternal |
+-------------+----------------------+
| nstepsB     | CasADi::IdasInternal |
+-------------+----------------------+

Diagrams

C++ includes: idas_integrator.hpp ";

%feature("docstring") CasADi::IdasIntegrator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::IdasIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::IdasIntegrator::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::IdasIntegrator::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::IdasIntegrator::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::IdasIntegrator::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::IdasIntegrator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::IdasIntegrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::IdasIntegrator::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::IdasIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::IdasIntegrator::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::IdasIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::IdasIntegrator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::IdasIntegrator::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::IdasIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::IdasIntegrator::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::IdasIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::IdasIntegrator::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::IdasIntegrator::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::IdasIntegrator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::IdasIntegrator::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::IdasIntegrator::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::IdasIntegrator::IdasIntegrator "

>  CasADi::IdasIntegrator::IdasIntegrator()
------------------------------------------------------------------------

Default constructor.

>  CasADi::IdasIntegrator::IdasIntegrator(const Function &f, const Function &g=Function())
------------------------------------------------------------------------

Create an integrator for a fully implicit DAE with quadrature states (nz is
the number of states not to be included in the state vector)

Create an integrator for a fully implicit DAE with quadrature states (nz is
the number of states not to be included in the state vector)

Parameters:
-----------

f:  dynamical system

>Input scheme: CasADi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: CasADi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: CasADi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: CasADi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring") CasADi::IdasIntegrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::IdasIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") CasADi::IdasIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::IdasIntegrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::IdasIntegrator::solve "

the same as evaluate()

";

%feature("docstring") CasADi::IdasIntegrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::IdasIntegrator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::IdasIntegrator::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::IdasIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") CasADi::IdasIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::IdasIntegrator::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::IdasIntegrator::getDAE "

Get the DAE.

";


// File: classCasADi_1_1ImplicitFixedStepIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::ImplicitFixedStepIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")
CasADi::ImplicitFixedStepIntegrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getRepresentation
"

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::assignNode "[INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::weak "[INTERNAL]
Get a weak reference to the object.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getCount "[INTERNAL]  Get the reference count.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::printPtr "[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring")
CasADi::ImplicitFixedStepIntegrator::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator "[INTERNAL]  Base
class for implicit fixed step integrators.

Joel Andersson

>Input scheme: CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | CasADi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | CasADi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_sol | OT_IMPLICITF | GenericType( | An implicit  | CasADi::Impl |
| ver          | UNCTION      | )            | function     | icitFixedSte |
|              |              |              | solver       | pIntegratorI |
|              |              |              |              | nternal      |
+--------------+--------------+--------------+--------------+--------------+
| implicit_sol | OT_DICTIONAR | GenericType( | Options to   | CasADi::Impl |
| ver_options  | Y            | )            | be passed to | icitFixedSte |
|              |              |              | the NLP      | pIntegratorI |
|              |              |              | Solver       | nternal      |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_fi | OT_INTEGER   | 20           | Number of    | CasADi::Fixe |
| nite_element |              |              | finite       | dStepIntegra |
| s            |              |              | elements     | torInternal  |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | CasADi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | CasADi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | CasADi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: implicit_fixed_step_integrator.hpp ";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::checkInputs "[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::isInit "

Is initialized?

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::assignNodeNoCount
"[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::resetB "

Reset the backward problem Time will be set to tf and backward state to
input(INTEGRATOR_RX0)

";

%feature("docstring")
CasADi::ImplicitFixedStepIntegrator::setOptionByEnumValue "[INTERNAL]  Set
a certain option by giving an enum value.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::spInit "[INTERNAL]  Reset the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::inputSchemeEntry
"[INTERNAL]  Find the index for a string describing a particular entry of
an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getOptionDefault
"

INTERNAL.

Get the default of a certain option

";

%feature("docstring")
CasADi::ImplicitFixedStepIntegrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::print "[INTERNAL]  Print a destription of the object.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::spEvaluate "[INTERNAL]  Propagate the sparsity pattern through a set of directional
derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")
CasADi::ImplicitFixedStepIntegrator::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::solve "

the same as evaluate()

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::spCanEvaluate "[INTERNAL]  Is the class able to propate seeds through the algorithm? (for
usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::clone "

Clone.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")
CasADi::ImplicitFixedStepIntegrator::ImplicitFixedStepIntegrator "

Default constructor.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::swap "[INTERNAL]
Swap content with another instance.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::indexed_one_based
"

[DEPRECATED]

";

%feature("docstring")
CasADi::ImplicitFixedStepIntegrator::getOptionAllowedIndex "[INTERNAL]  Get
the index into allowed options of a certain option.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring")
CasADi::ImplicitFixedStepIntegrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::output_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::assertInit "[INTERNAL]  Assert that it is initialized

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::outputSchemeEntry
"[INTERNAL]  Find the index for a string describing a particular entry of
an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")
CasADi::ImplicitFixedStepIntegrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::schemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getOptionAllowed
"

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::inputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::evaluate "

Evaluate.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getOptionTypeName
"

Get the type name of a certain option.

";

%feature("docstring")
CasADi::ImplicitFixedStepIntegrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getOption "

get an option value

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::input_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring")
CasADi::ImplicitFixedStepIntegrator::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::ImplicitFixedStepIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";


// File: classCasADi_1_1ImplicitFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::ImplicitFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::ImplicitFunction::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::ImplicitFunction::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::ImplicitFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::ImplicitFunction::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::ImplicitFunction::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::ImplicitFunction::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::ImplicitFunction::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::ImplicitFunction::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::ImplicitFunction::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::ImplicitFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::ImplicitFunction::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::ImplicitFunction::getLinsol "

Access linear solver.

";

%feature("docstring") CasADi::ImplicitFunction::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::ImplicitFunction::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::ImplicitFunction::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::ImplicitFunction::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::ImplicitFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::ImplicitFunction::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::ImplicitFunction::evaluate "

Evaluate.

";

%feature("docstring") CasADi::ImplicitFunction::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::ImplicitFunction::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::ImplicitFunction::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::ImplicitFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::ImplicitFunction::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::ImplicitFunction::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::ImplicitFunction::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::ImplicitFunction::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::ImplicitFunction::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::ImplicitFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::ImplicitFunction::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::ImplicitFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::ImplicitFunction::spCanEvaluate "[INTERNAL]
Is the class able to propate seeds through the algorithm? (for usage, see
the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::ImplicitFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::ImplicitFunction::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::ImplicitFunction::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::ImplicitFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::ImplicitFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::ImplicitFunction::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::ImplicitFunction::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::ImplicitFunction::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::ImplicitFunction::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::ImplicitFunction::isInit "

Is initialized?

";

%feature("docstring") CasADi::ImplicitFunction::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::ImplicitFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::ImplicitFunction::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") CasADi::ImplicitFunction::spInit "[INTERNAL]  Reset
the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::ImplicitFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::ImplicitFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::ImplicitFunction::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::ImplicitFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::ImplicitFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::ImplicitFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::ImplicitFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::ImplicitFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::ImplicitFunction::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::ImplicitFunction::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::ImplicitFunction::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::ImplicitFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::ImplicitFunction::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::ImplicitFunction::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::ImplicitFunction::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::ImplicitFunction::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::ImplicitFunction::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::ImplicitFunction::getF "

Access F.

";

%feature("docstring") CasADi::ImplicitFunction::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::ImplicitFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::ImplicitFunction::getJac "

Access Jacobian.

";

%feature("docstring") CasADi::ImplicitFunction::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::ImplicitFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::ImplicitFunction::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::ImplicitFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::ImplicitFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::ImplicitFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::ImplicitFunction::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::ImplicitFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::ImplicitFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::ImplicitFunction::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::ImplicitFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::ImplicitFunction::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::ImplicitFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::ImplicitFunction::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::ImplicitFunction::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::ImplicitFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::ImplicitFunction::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::ImplicitFunction::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::ImplicitFunction::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::ImplicitFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::ImplicitFunction::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::ImplicitFunction::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::ImplicitFunction::solve "

the same as evaluate()

";

%feature("docstring") CasADi::ImplicitFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::ImplicitFunction::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::ImplicitFunction "[INTERNAL]  Abstract base
class for the implicit function classes.

The equation:

F(z, x1, x2, ..., xn) == 0

where d_F/dz is invertable, implicitly defines the equation:

z := G(x1, x2, ..., xn)

F should be an Function mapping from (n+1) inputs to m outputs. The first
output is the residual that should be zero.

ImplicitFunction (G) is an Function mapping from n inputs to m outputs. n
may be zero. The first output is the solved for z.

You can provide an initial guess for z by setting output(0) of
ImplicitFunction.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| constraints  | OT_INTEGERVE | GenericType( | Constrain    | CasADi::Impl |
|              | CTOR         | )            | the          | icitFunction |
|              |              |              | unknowns. 0  | Internal     |
|              |              |              | (default):   |              |
|              |              |              | no           |              |
|              |              |              | constraint   |              |
|              |              |              | on ui, 1: ui |              |
|              |              |              | >= 0.0, -1:  |              |
|              |              |              | ui <= 0.0,   |              |
|              |              |              | 2: ui > 0.0, |              |
|              |              |              | -2: ui <     |              |
|              |              |              | 0.0.         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_inp | OT_INTEGER   | 0            | Index of the | CasADi::Impl |
| ut           |              |              | input that   | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_out | OT_INTEGER   | 0            | Index of the | CasADi::Impl |
| put          |              |              | output that  | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | User-defined | CasADi::Impl |
| r            | VER          | )            | linear       | icitFunction |
|              |              |              | solver       | Internal     |
|              |              |              | class.       |              |
|              |              |              | Needed for s |              |
|              |              |              | ensitivities |              |
|              |              |              | .            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | CasADi::Impl |
| r_options    | Y            | )            | be passed to | icitFunction |
|              |              |              | the linear   | Internal     |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: implicit_function.hpp ";

%feature("docstring") CasADi::ImplicitFunction::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::ImplicitFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::ImplicitFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::ImplicitFunction::getOption "

get an option value

";


// File: classCasADi_1_1IndexList.xml
%feature("docstring") CasADi::IndexList::IndexList "

>  CasADi::IndexList::IndexList()
------------------------------------------------------------------------
[INTERNAL] 
Constructor.

>  CasADi::IndexList::IndexList(int i)

>  CasADi::IndexList::IndexList(const std::vector< int > &i)

>  CasADi::IndexList::IndexList(const Slice &i)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::IndexList "[INTERNAL]  Class representing a
non-regular (and thus non-slice) index list

C++ includes: slice.hpp ";

%feature("docstring") CasADi::IndexList::getAll "[INTERNAL]  Get a vector
of indices.

";


// File: classCasADi_1_1InfSX.xml
%feature("docstring") CasADi::InfSX::isSmooth "[INTERNAL]  Check if smooth.

";

%feature("docstring") CasADi::InfSX::getValue "[INTERNAL]  Get the value.

";

%feature("docstring") CasADi::InfSX::isZero "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::InfSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::InfSX::~InfSX "[INTERNAL] ";

%feature("docstring") CasADi::InfSX::init "[INTERNAL]  Initialize the node
(currently used only to give a similar interface to MXNode)

";

%feature("docstring") CasADi::InfSX::mark "[INTERNAL] ";

%feature("docstring") CasADi::InfSX::print "[INTERNAL]  print

";

%feature("docstring") CasADi::InfSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::InfSX::isInf "[INTERNAL]  Properties.

";

%feature("docstring") CasADi::InfSX::InfSX "[INTERNAL] ";

%feature("docstring") CasADi::InfSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::InfSX::getName "[INTERNAL] ";

%feature("docstring") CasADi::InfSX::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") CasADi::InfSX::dep "[INTERNAL]  get the reference of
a child

";

%feature("docstring") CasADi::InfSX::hasDep "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::InfSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::InfSX::marked "[INTERNAL] ";

%feature("docstring") CasADi::InfSX::isOne "[INTERNAL]  check properties of
a node

";

%feature("docstring") CasADi::InfSX "[INTERNAL]  Represents an infinity SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") CasADi::InfSX::isNan "[INTERNAL]  check properties of
a node

";

%feature("docstring") CasADi::InfSX::isConstant "[INTERNAL]  Properties.

";

%feature("docstring") CasADi::InfSX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::InfSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::InfSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::InfSX::getIntValue "[INTERNAL]  Get value of
a constant node.

";


// File: classCasADi_1_1InnerProd.xml
%feature("docstring") CasADi::InnerProd::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::InnerProd::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::InnerProd::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::InnerProd::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::InnerProd::printPart "[INTERNAL]  Print a
part of the expression */.

";

%feature("docstring") CasADi::InnerProd::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::InnerProd::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::InnerProd::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::InnerProd::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::InnerProd::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::InnerProd::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::InnerProd::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::InnerProd::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::InnerProd::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::InnerProd::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::InnerProd::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::InnerProd::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::InnerProd::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::InnerProd::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") CasADi::InnerProd::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::InnerProd::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::InnerProd::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::InnerProd::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::InnerProd::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::InnerProd::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::InnerProd::InnerProd "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::InnerProd::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") CasADi::InnerProd::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::InnerProd::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::InnerProd::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::InnerProd::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::InnerProd::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::InnerProd::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") CasADi::InnerProd::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::InnerProd::size "[INTERNAL] ";

%feature("docstring") CasADi::InnerProd::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::InnerProd::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::InnerProd::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::InnerProd::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::InnerProd::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") CasADi::InnerProd::shape "[INTERNAL] ";

%feature("docstring") CasADi::InnerProd::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::InnerProd::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::InnerProd::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::InnerProd::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::InnerProd::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::InnerProd::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::InnerProd::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::InnerProd::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::InnerProd::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::InnerProd::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::InnerProd::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::InnerProd::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::InnerProd::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::InnerProd::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::InnerProd::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::InnerProd::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::InnerProd::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::InnerProd::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::InnerProd::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::InnerProd::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::InnerProd::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::InnerProd::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::InnerProd::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::InnerProd "[INTERNAL]   Matrix inner_prod.

Joel Andersson

C++ includes: inner_prod.hpp ";

%feature("docstring") CasADi::InnerProd::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::InnerProd::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::InnerProd::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") CasADi::InnerProd::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::InnerProd::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::InnerProd::size1 "[INTERNAL] ";

%feature("docstring") CasADi::InnerProd::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::InnerProd::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::InnerProd::size2 "[INTERNAL] ";

%feature("docstring") CasADi::InnerProd::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::InnerProd::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::InnerProd::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::InnerProd::evaluateMX "

>  void CasADi::InnerProd::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::InnerProd::~InnerProd "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::InnerProd::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::InnerProd::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::InnerProd::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";


// File: classCasADi_1_1IntegerSX.xml
%feature("docstring") CasADi::IntegerSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::IntegerSX::hasDep "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::IntegerSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::IntegerSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::IntegerSX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") CasADi::IntegerSX::isInteger "[INTERNAL]  Properties.

";

%feature("docstring") CasADi::IntegerSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::IntegerSX::getIntValue "[INTERNAL]  evaluate
function

";

%feature("docstring") CasADi::IntegerSX::getValue "[INTERNAL]  evaluate
function

";

%feature("docstring") CasADi::IntegerSX::dep "[INTERNAL]  get the reference
of a child

";

%feature("docstring") CasADi::IntegerSX::~IntegerSX "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::IntegerSX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::IntegerSX::marked "[INTERNAL] ";

%feature("docstring") CasADi::IntegerSX::mark "[INTERNAL] ";

%feature("docstring") CasADi::IntegerSX::isConstant "[INTERNAL]
Properties.

";

%feature("docstring") CasADi::IntegerSX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") CasADi::IntegerSX::isNan "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::IntegerSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::IntegerSX::print "[INTERNAL]  print

";

%feature("docstring") CasADi::IntegerSX::isZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::IntegerSX::isInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::IntegerSX "[INTERNAL]  Represents a constant
integer SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") CasADi::IntegerSX::getName "[INTERNAL] ";

%feature("docstring") CasADi::IntegerSX::isOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::IntegerSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";


// File: classCasADi_1_1Integrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::Integrator::assignNodeNoCount " [INTERNAL]  Assign the node to a
node class pointer without reference counting: inproper use will cause
memory leaks!

";

%feature("docstring") CasADi::Integrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::Integrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::Integrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::Integrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::Integrator::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::Integrator::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::Integrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::Integrator::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::Integrator::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::Integrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") CasADi::Integrator::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::Integrator::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::Integrator::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Integrator::Integrator "

Default constructor.

";

%feature("docstring") CasADi::Integrator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::Integrator::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::Integrator::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::Integrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::Integrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::Integrator::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::Integrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::Integrator::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::Integrator::printStats "

Print solver statistics.

";

%feature("docstring") CasADi::Integrator::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::Integrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::Integrator::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::Integrator::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::Integrator::solve "

the same as evaluate()

";

%feature("docstring") CasADi::Integrator::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::Integrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::Integrator::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::Integrator::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::Integrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::Integrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") CasADi::Integrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::Integrator::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Integrator::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Integrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::Integrator::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::Integrator::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::Integrator::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::Integrator::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::Integrator::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::Integrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::Integrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::Integrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::Integrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::Integrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::Integrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::Integrator::isInit "

Is initialized?

";

%feature("docstring") CasADi::Integrator::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Integrator::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Integrator::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::Integrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::Integrator::clone "

Clone.

";

%feature("docstring") CasADi::Integrator::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::Integrator::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::Integrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::Integrator::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::Integrator::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::Integrator "[INTERNAL]  Base class for
integrators.

Integrator abstract base class

Solves an initial value problem (IVP) coupled to a terminal value problem
with differential equation given as an implicit ODE coupled to an algebraic
equation and a set of quadratures: Initial conditions at t=t0  x(t0)  = x0
q(t0)  = 0   Forward integration from t=t0 to t=tf  der(x) =
function(x,z,p,t) Forward ODE  0 = fz(x,z,p,t)                  Forward
algebraic equations  der(q) = fq(x,z,p,t)                  Forward
quadratures Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  = 0
Backward integration from t=tf to t=t0  der(rx) = gx(rx,rz,rp,x,z,p,t)
Backward ODE  0 = gz(rx,rz,rp,x,z,p,t)        Backward algebraic equations
der(rq) = gq(rx,rz,rp,x,z,p,t)        Backward quadratures where we assume
that both the forward and backwards integrations are index-1  (i.e. dfz/dz,
dgz/drz are invertible) and furthermore that gx, gz and gq have a linear
dependency on rx, rz and rp.

The Integrator class provides some additional functionality, such as getting
the value of the state and/or sensitivities at certain time points.

The class does not specify the method used for the integration. This is
defined in derived classes.

Joel Andersson

>Input scheme: CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | CasADi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | CasADi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | CasADi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | CasADi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | CasADi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: integrator.hpp ";

%feature("docstring") CasADi::Integrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::Integrator::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::Integrator::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Integrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::Integrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::Integrator::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::Integrator::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::Integrator::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::Integrator::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::Integrator::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::Integrator::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::Integrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::Integrator::evaluate "

Evaluate.

";

%feature("docstring") CasADi::Integrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::Integrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::Integrator::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::Integrator::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::Integrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") CasADi::Integrator::resetB "

Reset the backward problem Time will be set to tf and backward state to
input(INTEGRATOR_RX0)

";

%feature("docstring") CasADi::Integrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::Integrator::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Integrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::Integrator::getDAE "

Get the DAE.

";

%feature("docstring") CasADi::Integrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") CasADi::Integrator::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::Integrator::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::Integrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::Integrator::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::Integrator::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::Integrator::getOption "

get an option value

";

%feature("docstring") CasADi::Integrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::Integrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::Integrator::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Integrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::Integrator::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::Integrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::Integrator::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::Integrator::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::Integrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::Integrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::Integrator::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";


// File: classCasADi_1_1IntegratorInputIOSchemeVector.xml
%feature("docstring") CasADi::IntegratorInputIOSchemeVector "[INTERNAL]
Helper function for 'IntegratorInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
CasADi::IntegratorInputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::IntegratorInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") CasADi::IntegratorInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::IntegratorInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::IntegratorInputIOSchemeVector::print "[INTERNAL]  Print a destription of the object.

";

%feature("docstring") CasADi::IntegratorInputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring")
CasADi::IntegratorInputIOSchemeVector::IntegratorInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::IntegratorInputIOSchemeVector::__len__ "[INTERNAL] ";


// File: classCasADi_1_1IntegratorOutputIOSchemeVector.xml
%feature("docstring")
CasADi::IntegratorOutputIOSchemeVector::IntegratorOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring")
CasADi::IntegratorOutputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::IntegratorOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") CasADi::IntegratorOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") CasADi::IntegratorOutputIOSchemeVector "[INTERNAL]
Helper function for 'IntegratorOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::IntegratorOutputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::IntegratorOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::IntegratorOutputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::IntegratorOutputIOSchemeVector::print "[INTERNAL]  Print a destription of the object.

";


// File: classCasADi_1_1Inverse.xml
%feature("docstring") CasADi::Inverse::printPart "[INTERNAL]  Print a part
of the expression */.

";

%feature("docstring") CasADi::Inverse::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Inverse::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Inverse::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::Inverse::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Inverse::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::Inverse::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Inverse::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Inverse::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") CasADi::Inverse::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Inverse::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::Inverse::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") CasADi::Inverse::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Inverse::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::Inverse::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Inverse::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Inverse::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Inverse::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Inverse::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::Inverse::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Inverse::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") CasADi::Inverse::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Inverse::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::Inverse::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Inverse::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::Inverse::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Inverse::Inverse "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::Inverse::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Inverse::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::Inverse::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") CasADi::Inverse::shape "[INTERNAL] ";

%feature("docstring") CasADi::Inverse::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::Inverse::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") CasADi::Inverse::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Inverse::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Inverse::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Inverse::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Inverse::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Inverse::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Inverse::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Inverse::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Inverse::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::Inverse::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Inverse::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Inverse::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::Inverse::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::Inverse::~Inverse "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::Inverse::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::Inverse::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Inverse::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::Inverse::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Inverse::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Inverse::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::Inverse::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Inverse::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Inverse::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Inverse::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::Inverse::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Inverse::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Inverse::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Inverse::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Inverse::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Inverse::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Inverse::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::Inverse::propagateSparsity "

>  virtual void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::Inverse::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::Inverse::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Inverse::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Inverse::evaluateMX "

>  void CasADi::Inverse::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Inverse::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Inverse "[INTERNAL]   Matrix inverse.

Joel Andersson

C++ includes: inverse.hpp ";

%feature("docstring") CasADi::Inverse::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Inverse::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Inverse::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Inverse::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Inverse::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::Inverse::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::Inverse::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::Inverse::size "[INTERNAL] ";

%feature("docstring") CasADi::Inverse::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Inverse::getAssertion "[INTERNAL]
Assertion.

";


// File: classCasADi_1_1IOInterface.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */ %feature("docstring") CasADi::IOInterface::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::IOInterface::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::IOInterface::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::IOInterface::getInput "

>  Matrix<double> CasADi::IOInterface< Derived >::getInput(int iind=0) const 
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Derived >::getInput(const std::string &iname) const 
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Derived >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Derived >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::IOInterface::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::IOInterface::inputS "

>  DMatrix& CasADi::IOInterface< Derived >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Derived >::inputS(int i) const 
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::IOInterface::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::IOInterface::setOutput "

>  void CasADi::IOInterface< Derived >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Derived >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::IOInterface::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::IOInterface::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::IOInterface::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::IOInterface "[INTERNAL]  Interface for
accessing input and output data structures.

Joel Andersson

C++ includes: io_interface.hpp ";

%feature("docstring") CasADi::IOInterface::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::IOInterface::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::IOInterface::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::IOInterface::setInput "

>  void CasADi::IOInterface< Derived >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Derived >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::IOInterface::outputS "

>  DMatrix& CasADi::IOInterface< Derived >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Derived >::outputS(int i) const 
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::IOInterface::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::IOInterface::getOutput "

>  Matrix<double> CasADi::IOInterface< Derived >::getOutput(int oind=0) const 
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Derived >::getOutput(const std::string &oname) const 
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Derived >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Derived >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::IOInterface::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";


// File: classCasADi_1_1IOScheme.xml
%feature("docstring") CasADi::IOScheme::IOScheme "

>  CasADi::IOScheme::IOScheme()
------------------------------------------------------------------------

Default constructor.

>  CasADi::IOScheme::IOScheme(InputOutputScheme scheme)
------------------------------------------------------------------------

Constructor with enum.

>  CasADi::IOScheme::IOScheme(const std::vector< std::string > &entries, const std::vector< std::string > &descriptions=std::vector< std::string >())
------------------------------------------------------------------------

Constructor with entry names.

";

%feature("docstring") CasADi::IOScheme::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::IOScheme::entryLabel "

Get the entry label by index If scheme is unknown, returns the index as a
string.

";

%feature("docstring") CasADi::IOScheme "[INTERNAL]  Class with mapping
between names and indices.

Joris Gillis

C++ includes: io_scheme.hpp ";

%feature("docstring") CasADi::IOScheme::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::IOScheme::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::IOScheme::entryNames "

List available entries.

";

%feature("docstring") CasADi::IOScheme::index "

Get index by entry name.

";

%feature("docstring") CasADi::IOScheme::compatibleSize "

Check wether this scheme is compatible with the given size.

";

%feature("docstring") CasADi::IOScheme::describeOutput "

Describe the index as an output.

";

%feature("docstring") CasADi::IOScheme::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::IOScheme::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::IOScheme::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::IOScheme::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::IOScheme::describeInput "

Describe the index as an input.

";

%feature("docstring") CasADi::IOScheme::name "

Name of the scheme.

";

%feature("docstring") CasADi::IOScheme::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::IOScheme::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::IOScheme::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") CasADi::IOScheme::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") CasADi::IOScheme::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::IOScheme::known "

Check wether the scheme is known.

";

%feature("docstring") CasADi::IOScheme::size "

Number of entries.

";

%feature("docstring") CasADi::IOScheme::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::IOScheme::entryEnum "

Get the entry enum name by index.

";

%feature("docstring") CasADi::IOScheme::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::IOScheme::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::IOScheme::isInit "

Is initialized?

";

%feature("docstring") CasADi::IOScheme::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::IOScheme::describe "

Describe the index.

";

%feature("docstring") CasADi::IOScheme::entry "

Get the entry name by index.

";

%feature("docstring") CasADi::IOScheme::isNull "

Is a null pointer?

";


// File: classCasADi_1_1IOSchemeVector.xml
%feature("docstring") CasADi::IOSchemeVector::__len__ "";

%feature("docstring") CasADi::IOSchemeVector::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::IOSchemeVector::IOSchemeVector "";

%feature("docstring") CasADi::IOSchemeVector::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::IOSchemeVector::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::IOSchemeVector "[INTERNAL]  A vector
container with associated IOScheme A class.

C++ includes: io_scheme_vector.hpp ";

%feature("docstring") CasADi::IOSchemeVector::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::IOSchemeVector::__getitem__ "";

%feature("docstring") CasADi::IOSchemeVector::vector "";


// File: classCasADi_1_1IpoptSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::IpoptSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::IpoptSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::IpoptSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::IpoptSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::IpoptSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::IpoptSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::IpoptSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::IpoptSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::IpoptSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::IpoptSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::IpoptSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::IpoptSolver::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: CasADi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: CasADi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") CasADi::IpoptSolver::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") CasADi::IpoptSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::IpoptSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::IpoptSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::IpoptSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::IpoptSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::IpoptSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::IpoptSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::IpoptSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::IpoptSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::IpoptSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::IpoptSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::IpoptSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::IpoptSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::IpoptSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::IpoptSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::IpoptSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::IpoptSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::IpoptSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::IpoptSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::IpoptSolver "[INTERNAL]  interface to IPOPT
NLP solver

Solves the following parametric nonlinear program (NLP):min          F(x,p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x,p) <= UBG
p  == P nx: number of decision variables     ng: number of constraints
np: number of parameters

When in warmstart mode, output NLP_SOLVER_LAM_X may be used as input

NOTE: Even when max_iter == 0, it is not guaranteed that
input(NLP_SOLVER_X0) == output(NLP_SOLVER_X). Indeed if bounds on X or
constraints are unmet, they will differ.

For a good tutorial on IPOPT,
seehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf

A good resource about the algorithms in IPOPT is: Wachter and L. T. Biegler,
On the Implementation of an Interior-Point Filter Line-Search Algorithm for
Large-Scale Nonlinear Programming, Mathematical Programming 106(1), pp.
25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson Research Center,
Yorktown, USA

Caveats: with default options, multipliers for the decision variables are
wrong for equality constraints. Change the 'fixed_variable_treatment' to
'make_constraint' or 'relax_bounds' to obtain correct results.

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| accept_after | OT_INTEGER   | -1           | Accept a     | CasADi::Ipop |
| _max_steps   |              |              | trial point  | tInternal    |
|              |              |              | after        |              |
|              |              |              | maximal this |              |
|              |              |              | number of    |              |
|              |              |              | steps. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| accept_every | OT_STRING    | no           | Always       | CasADi::Ipop |
| _trial_step  |              |              | accept the   | tInternal    |
|              |              |              | first trial  |              |
|              |              |              | step. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_c | OT_REAL      | 0.010        | \"Acceptance\" | CasADi::Ipop |
| ompl_inf_tol |              |              | threshold    | tInternal    |
|              |              |              | for the comp |              |
|              |              |              | lementarity  |              |
|              |              |              | conditions.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_c | OT_REAL      | 0.010        | \"Acceptance\" | CasADi::Ipop |
| onstr_viol_t |              |              | threshold    | tInternal    |
| ol           |              |              | for the      |              |
|              |              |              | constraint   |              |
|              |              |              | violation.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_d | OT_REAL      | 1.000e+10    | \"Acceptance\" | CasADi::Ipop |
| ual_inf_tol  |              |              | threshold    | tInternal    |
|              |              |              | for the dual |              |
|              |              |              | infeasibilit |              |
|              |              |              | y. (see      |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_i | OT_INTEGER   | 15           | Number of    | CasADi::Ipop |
| ter          |              |              | \"acceptable\" | tInternal    |
|              |              |              | iterates     |              |
|              |              |              | before       |              |
|              |              |              | triggering   |              |
|              |              |              | termination. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_o | OT_REAL      | 1.000e+20    | \"Acceptance\" | CasADi::Ipop |
| bj_change_to |              |              | stopping     | tInternal    |
| l            |              |              | criterion    |              |
|              |              |              | based on     |              |
|              |              |              | objective    |              |
|              |              |              | function     |              |
|              |              |              | change. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_t | OT_REAL      | 0.000        | \"Acceptable\" | CasADi::Ipop |
| ol           |              |              | convergence  | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | (relative).  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_STRING    | obj-constr-  | Globalizatio | CasADi::Ipop |
| globalizatio |              | filter       | n strategy   | tInternal    |
| n            |              |              | for the      |              |
|              |              |              | adaptive mu  |              |
|              |              |              | selection    |              |
|              |              |              | mode. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_STRING    | 2-norm-      | Norm used    | CasADi::Ipop |
| kkt_norm_typ |              | squared      | for the KKT  | tInternal    |
| e            |              |              | error in the |              |
|              |              |              | adaptive mu  |              |
|              |              |              | globalizatio |              |
|              |              |              | n            |              |
|              |              |              | strategies.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_REAL      | 1.000        | Sufficient   | CasADi::Ipop |
| kkterror_red |              |              | decrease     | tInternal    |
| _fact        |              |              | factor for   |              |
|              |              |              | \"kkt-error\"  |              |
|              |              |              | globalizatio |              |
|              |              |              | n strategy.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_INTEGER   | 4            | Maximum      | CasADi::Ipop |
| kkterror_red |              |              | number of    | tInternal    |
| _iters       |              |              | iterations   |              |
|              |              |              | requiring    |              |
|              |              |              | sufficient   |              |
|              |              |              | progress.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_REAL      | 0.800        | Determines   | CasADi::Ipop |
| monotone_ini |              |              | the initial  | tInternal    |
| t_factor     |              |              | value of the |              |
|              |              |              | barrier      |              |
|              |              |              | parameter    |              |
|              |              |              | when         |              |
|              |              |              | switching to |              |
|              |              |              | the monotone |              |
|              |              |              | mode. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_STRING    | no           | Indicates if | CasADi::Ipop |
| restore_prev |              |              | the previous | tInternal    |
| ious_iterate |              |              | iterate      |              |
|              |              |              | should be    |              |
|              |              |              | restored if  |              |
|              |              |              | the monotone |              |
|              |              |              | mode is      |              |
|              |              |              | entered.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_REAL      | 0            | (see IPOPT d | CasADi::Ipop |
| safeguard_fa |              |              | ocumentation | tInternal    |
| ctor         |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| alpha_for_y  | OT_STRING    | primal       | Method to    | CasADi::Ipop |
|              |              |              | determine    | tInternal    |
|              |              |              | the step     |              |
|              |              |              | size for     |              |
|              |              |              | constraint   |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| alpha_for_y_ | OT_REAL      | 10           | Tolerance    | CasADi::Ipop |
| tol          |              |              | for          | tInternal    |
|              |              |              | switching to |              |
|              |              |              | full         |              |
|              |              |              | equality     |              |
|              |              |              | multiplier   |              |
|              |              |              | steps. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| alpha_min_fr | OT_REAL      | 0.050        | Safety       | CasADi::Ipop |
| ac           |              |              | factor for   | tInternal    |
|              |              |              | the minimal  |              |
|              |              |              | step size    |              |
|              |              |              | (before      |              |
|              |              |              | switching to |              |
|              |              |              | restoration  |              |
|              |              |              | phase). (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| alpha_red_fa | OT_REAL      | 0.500        | Fractional   | CasADi::Ipop |
| ctor         |              |              | reduction of | tInternal    |
|              |              |              | the trial    |              |
|              |              |              | step size in |              |
|              |              |              | the          |              |
|              |              |              | backtracking |              |
|              |              |              | line search. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| barrier_tol_ | OT_REAL      | 10           | Factor for   | CasADi::Ipop |
| factor       |              |              | mu in        | tInternal    |
|              |              |              | barrier stop |              |
|              |              |              | test. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_frac   | OT_REAL      | 0.010        | Desired      | CasADi::Ipop |
|              |              |              | minimum      | tInternal    |
|              |              |              | relative     |              |
|              |              |              | distance     |              |
|              |              |              | from the     |              |
|              |              |              | initial      |              |
|              |              |              | point to     |              |
|              |              |              | bound. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_mult_i | OT_STRING    | constant     | Initializati | CasADi::Ipop |
| nit_method   |              |              | on method    | tInternal    |
|              |              |              | for bound    |              |
|              |              |              | multipliers  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_mult_i | OT_REAL      | 1            | Initial      | CasADi::Ipop |
| nit_val      |              |              | value for    | tInternal    |
|              |              |              | the bound    |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_mult_r | OT_REAL      | 1000         | Threshold    | CasADi::Ipop |
| eset_thresho |              |              | for          | tInternal    |
| ld           |              |              | resetting    |              |
|              |              |              | bound        |              |
|              |              |              | multipliers  |              |
|              |              |              | after the    |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_push   | OT_REAL      | 0.010        | Desired      | CasADi::Ipop |
|              |              |              | minimum      | tInternal    |
|              |              |              | absolute     |              |
|              |              |              | distance     |              |
|              |              |              | from the     |              |
|              |              |              | initial      |              |
|              |              |              | point to     |              |
|              |              |              | bound. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_relax_ | OT_REAL      | 0.000        | Factor for   | CasADi::Ipop |
| factor       |              |              | initial      | tInternal    |
|              |              |              | relaxation   |              |
|              |              |              | of the       |              |
|              |              |              | bounds. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| check_deriva | OT_STRING    | no           | Indicates    | CasADi::Ipop |
| tives_for_na |              |              | whether it   | tInternal    |
| ninf         |              |              | is desired   |              |
|              |              |              | to check for |              |
|              |              |              | Nan/Inf in   |              |
|              |              |              | derivative   |              |
|              |              |              | matrices     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| chi_cup      | OT_REAL      | 1.500        | LIFENG       | CasADi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| chi_hat      | OT_REAL      | 2            | LIFENG       | CasADi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| chi_tilde    | OT_REAL      | 5            | LIFENG       | CasADi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| compl_inf_to | OT_REAL      | 0.000        | Desired      | CasADi::Ipop |
| l            |              |              | threshold    | tInternal    |
|              |              |              | for the comp |              |
|              |              |              | lementarity  |              |
|              |              |              | conditions.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| con_integer_ | OT_DICTIONAR | None         | Integer      | CasADi::Ipop |
| md           | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of integers) |              |
|              |              |              | about        |              |
|              |              |              | constraints  |              |
|              |              |              | to be passed |              |
|              |              |              | to IPOPT     |              |
+--------------+--------------+--------------+--------------+--------------+
| con_numeric_ | OT_DICTIONAR | None         | Numeric      | CasADi::Ipop |
| md           | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of reals)    |              |
|              |              |              | about        |              |
|              |              |              | constraints  |              |
|              |              |              | to be passed |              |
|              |              |              | to IPOPT     |              |
+--------------+--------------+--------------+--------------+--------------+
| con_string_m | OT_DICTIONAR | None         | String       | CasADi::Ipop |
| d            | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of strings)  |              |
|              |              |              | about        |              |
|              |              |              | constraints  |              |
|              |              |              | to be passed |              |
|              |              |              | to IPOPT     |              |
+--------------+--------------+--------------+--------------+--------------+
| constr_mult_ | OT_REAL      | 1000         | Maximum      | CasADi::Ipop |
| init_max     |              |              | allowed      | tInternal    |
|              |              |              | least-square |              |
|              |              |              | guess of     |              |
|              |              |              | constraint   |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| constr_mult_ | OT_REAL      | 0            | Threshold    | CasADi::Ipop |
| reset_thresh |              |              | for          | tInternal    |
| old          |              |              | resetting    |              |
|              |              |              | equality and |              |
|              |              |              | inequality   |              |
|              |              |              | multipliers  |              |
|              |              |              | after        |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| constr_viol_ | OT_REAL      | 0.000        | Desired      | CasADi::Ipop |
| tol          |              |              | threshold    | tInternal    |
|              |              |              | for the      |              |
|              |              |              | constraint   |              |
|              |              |              | violation.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| constraint_v | OT_STRING    | 1-norm       | Norm to be   | CasADi::Ipop |
| iolation_nor |              |              | used for the | tInternal    |
| m_type       |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the line     |              |
|              |              |              | search. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| corrector_co | OT_REAL      | 1            | Complementar | CasADi::Ipop |
| mpl_avrg_red |              |              | ity          | tInternal    |
| _fact        |              |              | tolerance    |              |
|              |              |              | factor for   |              |
|              |              |              | accepting    |              |
|              |              |              | corrector    |              |
|              |              |              | step (unsupp |              |
|              |              |              | orted!).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| corrector_ty | OT_STRING    | none         | The type of  | CasADi::Ipop |
| pe           |              |              | corrector    | tInternal    |
|              |              |              | steps that   |              |
|              |              |              | should be    |              |
|              |              |              | taken (unsup |              |
|              |              |              | ported!).    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| delta        | OT_REAL      | 1            | Multiplier   | CasADi::Ipop |
|              |              |              | for          | tInternal    |
|              |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the          |              |
|              |              |              | switching    |              |
|              |              |              | rule. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| delta_y_max  | OT_REAL      | 1.000e+12    | a parameter  | CasADi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| dependency_d | OT_STRING    | no           | Indicates if | CasADi::Ipop |
| etection_wit |              |              | the right    | tInternal    |
| h_rhs        |              |              | hand sides   |              |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | should be    |              |
|              |              |              | considered   |              |
|              |              |              | during       |              |
|              |              |              | dependency   |              |
|              |              |              | detection    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| dependency_d | OT_STRING    | none         | Indicates    | CasADi::Ipop |
| etector      |              |              | which linear | tInternal    |
|              |              |              | solver       |              |
|              |              |              | should be    |              |
|              |              |              | used to      |              |
|              |              |              | detect       |              |
|              |              |              | linearly     |              |
|              |              |              | dependent    |              |
|              |              |              | equality     |              |
|              |              |              | constraints. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_STRING    | none         | Enable       | CasADi::Ipop |
| est          |              |              | derivative   | tInternal    |
|              |              |              | checker (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_INTEGER   | -2           | Index of     | CasADi::Ipop |
| est_first_in |              |              | first        | tInternal    |
| dex          |              |              | quantity to  |              |
|              |              |              | be checked   |              |
|              |              |              | by           |              |
|              |              |              | derivative   |              |
|              |              |              | checker (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_REAL      | 0.000        | Size of the  | CasADi::Ipop |
| est_perturba |              |              | finite       | tInternal    |
| tion         |              |              | difference   |              |
|              |              |              | perturbation |              |
|              |              |              | in           |              |
|              |              |              | derivative   |              |
|              |              |              | test. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_STRING    | no           | Indicates    | CasADi::Ipop |
| est_print_al |              |              | whether      | tInternal    |
| l            |              |              | information  |              |
|              |              |              | for all      |              |
|              |              |              | estimated    |              |
|              |              |              | derivatives  |              |
|              |              |              | should be    |              |
|              |              |              | printed.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_REAL      | 0.000        | Threshold    | CasADi::Ipop |
| est_tol      |              |              | for          | tInternal    |
|              |              |              | indicating   |              |
|              |              |              | wrong        |              |
|              |              |              | derivative.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| diverging_it | OT_REAL      | 1.000e+20    | Threshold    | CasADi::Ipop |
| erates_tol   |              |              | for maximal  | tInternal    |
|              |              |              | value of     |              |
|              |              |              | primal       |              |
|              |              |              | iterates.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| dual_inf_tol | OT_REAL      | 1            | Desired      | CasADi::Ipop |
|              |              |              | threshold    | tInternal    |
|              |              |              | for the dual |              |
|              |              |              | infeasibilit |              |
|              |              |              | y. (see      |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| epsilon_c    | OT_REAL      | 0.010        | LIFENG       | CasADi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| eta_min      | OT_REAL      | 10           | LIFENG       | CasADi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| eta_penalty  | OT_REAL      | 0.000        | Relaxation   | CasADi::Ipop |
|              |              |              | factor in    | tInternal    |
|              |              |              | the Armijo   |              |
|              |              |              | condition    |              |
|              |              |              | for the      |              |
|              |              |              | penalty      |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| eta_phi      | OT_REAL      | 0.000        | Relaxation   | CasADi::Ipop |
|              |              |              | factor in    | tInternal    |
|              |              |              | the Armijo   |              |
|              |              |              | condition.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| evaluate_ori | OT_STRING    | yes          | Determines   | CasADi::Ipop |
| g_obj_at_res |              |              | if the       | tInternal    |
| to_trial     |              |              | original     |              |
|              |              |              | objective    |              |
|              |              |              | function     |              |
|              |              |              | should be    |              |
|              |              |              | evaluated at |              |
|              |              |              | restoration  |              |
|              |              |              | phase trial  |              |
|              |              |              | points. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | CasADi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | objective    | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | constraint   | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| expect_infea | OT_STRING    | no           | Enable       | CasADi::Ipop |
| sible_proble |              |              | heuristics   | tInternal    |
| m            |              |              | to quickly   |              |
|              |              |              | detect an    |              |
|              |              |              | infeasible   |              |
|              |              |              | problem.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| expect_infea | OT_REAL      | 0.001        | Threshold    | CasADi::Ipop |
| sible_proble |              |              | for          | tInternal    |
| m_ctol       |              |              | disabling \"e |              |
|              |              |              | xpect_infeas |              |
|              |              |              | ible_problem |              |
|              |              |              | \" option.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| expect_infea | OT_REAL      | 100000000    | Multiplier   | CasADi::Ipop |
| sible_proble |              |              | threshold    | tInternal    |
| m_ytol       |              |              | for          |              |
|              |              |              | activating \" |              |
|              |              |              | expect_infea |              |
|              |              |              | sible_proble |              |
|              |              |              | m\" option.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| fast_des_fac | OT_REAL      | 0.100        | a parameter  | CasADi::Ipop |
| t            |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| fast_step_co | OT_STRING    | no           | Indicates if | CasADi::Ipop |
| mputation    |              |              | the linear   | tInternal    |
|              |              |              | system       |              |
|              |              |              | should be    |              |
|              |              |              | solved       |              |
|              |              |              | quickly.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| file_print_l | OT_INTEGER   | 5            | Verbosity    | CasADi::Ipop |
| evel         |              |              | level for    | tInternal    |
|              |              |              | output file. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| filter_margi | OT_REAL      | 0.000        | Factor       | CasADi::Ipop |
| n_fact       |              |              | determining  | tInternal    |
|              |              |              | width of     |              |
|              |              |              | margin for   |              |
|              |              |              | obj-constr-  |              |
|              |              |              | filter       |              |
|              |              |              | adaptive glo |              |
|              |              |              | balization   |              |
|              |              |              | strategy.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| filter_max_m | OT_REAL      | 1            | Maximum      | CasADi::Ipop |
| argin        |              |              | width of     | tInternal    |
|              |              |              | margin in    |              |
|              |              |              | obj-constr-  |              |
|              |              |              | filter       |              |
|              |              |              | adaptive glo |              |
|              |              |              | balization   |              |
|              |              |              | strategy.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| filter_reset | OT_INTEGER   | 5            | Number of    | CasADi::Ipop |
| _trigger     |              |              | iterations   | tInternal    |
|              |              |              | that trigger |              |
|              |              |              | the filter   |              |
|              |              |              | reset. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| findiff_pert | OT_REAL      | 0.000        | Size of the  | CasADi::Ipop |
| urbation     |              |              | finite       | tInternal    |
|              |              |              | difference   |              |
|              |              |              | perturbation |              |
|              |              |              | for          |              |
|              |              |              | derivative a |              |
|              |              |              | pproximation |              |
|              |              |              | . (see IPOPT |              |
|              |              |              | documentatio |              |
|              |              |              | n)           |              |
+--------------+--------------+--------------+--------------+--------------+
| first_hessia | OT_REAL      | 0.000        | Size of      | CasADi::Ipop |
| n_perturbati |              |              | first x-s    | tInternal    |
| on           |              |              | perturbation |              |
|              |              |              | tried. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| fixed_mu_ora | OT_STRING    | average_comp | Oracle for   | CasADi::Ipop |
| cle          |              | l            | the barrier  | tInternal    |
|              |              |              | parameter    |              |
|              |              |              | when         |              |
|              |              |              | switching to |              |
|              |              |              | fixed mode.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| fixed_variab | OT_STRING    | make_paramet | Determines   | CasADi::Ipop |
| le_treatment |              | er           | how fixed    | tInternal    |
|              |              |              | variables    |              |
|              |              |              | should be    |              |
|              |              |              | handled.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gamma_hat    | OT_REAL      | 0.040        | LIFENG       | CasADi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gamma_phi    | OT_REAL      | 0.000        | Relaxation   | CasADi::Ipop |
|              |              |              | factor in    | tInternal    |
|              |              |              | the filter   |              |
|              |              |              | margin for   |              |
|              |              |              | the barrier  |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gamma_theta  | OT_REAL      | 0.000        | Relaxation   | CasADi::Ipop |
|              |              |              | factor in    | tInternal    |
|              |              |              | the filter   |              |
|              |              |              | margin for   |              |
|              |              |              | the          |              |
|              |              |              | constraint   |              |
|              |              |              | violation.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gamma_tilde  | OT_REAL      | 4            | LIFENG       | CasADi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| gauss_newton | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option. Use  | olverInterna |
|              |              |              | Gauss Newton | l            |
|              |              |              | Hessian appr |              |
|              |              |              | oximation    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| dient        |              | )            | option.      | olverInterna |
|              |              |              | Generate a   | l            |
|              |              |              | function for |              |
|              |              |              | calculating  |              |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | objective.   |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_hes | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| sian         |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Hessian of   |              |
|              |              |              | the          |              |
|              |              |              | Lagrangian   |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_jac | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| obian        |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Jacobian of  |              |
|              |              |              | the          |              |
|              |              |              | constraints  |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_f       | OT_Function  | None         | Function for | CasADi::Ipop |
|              |              |              | calculating  | tInternal    |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (column, aut |              |
|              |              |              | ogenerated   |              |
|              |              |              | by default)  |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_lag     | OT_Function  | None         | Function for | CasADi::Ipop |
|              |              |              | calculating  | tInternal    |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hess_lag     | OT_Function  | None         | Function for | CasADi::Ipop |
|              |              |              | calculating  | tInternal    |
|              |              |              | the Hessian  |              |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_appr | OT_STRING    | exact        | Indicates    | CasADi::Ipop |
| oximation    |              |              | what Hessian | tInternal    |
|              |              |              | information  |              |
|              |              |              | is to be     |              |
|              |              |              | used. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_appr | OT_STRING    | nonlinear-   | Indicates in | CasADi::Ipop |
| oximation_sp |              | variables    | which        | tInternal    |
| ace          |              |              | subspace the |              |
|              |              |              | Hessian      |              |
|              |              |              | information  |              |
|              |              |              | is to be app |              |
|              |              |              | roximated.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_cons | OT_STRING    | no           | Indicates    | CasADi::Ipop |
| tant         |              |              | whether the  | tInternal    |
|              |              |              | problem is a |              |
|              |              |              | quadratic    |              |
|              |              |              | problem (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| honor_origin | OT_STRING    | yes          | Indicates    | CasADi::Ipop |
| al_bounds    |              |              | whether      | tInternal    |
|              |              |              | final points |              |
|              |              |              | should be    |              |
|              |              |              | projected    |              |
|              |              |              | into         |              |
|              |              |              | original     |              |
|              |              |              | bounds. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inf_pr_outpu | OT_STRING    | original     | Determines   | CasADi::Ipop |
| t            |              |              | what value   | tInternal    |
|              |              |              | is printed   |              |
|              |              |              | in the       |              |
|              |              |              | \"inf_pr\"     |              |
|              |              |              | output       |              |
|              |              |              | column. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | CasADi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | CasADi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_c_consta | OT_STRING    | no           | Indicates    | CasADi::Ipop |
| nt           |              |              | whether all  | tInternal    |
|              |              |              | equality     |              |
|              |              |              | constraints  |              |
|              |              |              | are linear   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_d_consta | OT_STRING    | no           | Indicates    | CasADi::Ipop |
| nt           |              |              | whether all  | tInternal    |
|              |              |              | inequality   |              |
|              |              |              | constraints  |              |
|              |              |              | are linear   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_f        | OT_Function  | None         | Function for | CasADi::Ipop |
|              |              |              | calculating  | tInternal    |
|              |              |              | the jacobian |              |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (sparse row, |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_g        | OT_Function  | None         | Function for | CasADi::Ipop |
|              |              |              | calculating  | tInternal    |
|              |              |              | the Jacobian |              |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | (autogenerat |              |
|              |              |              | ed by        |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jacobian_app | OT_STRING    | exact        | Specifies    | CasADi::Ipop |
| roximation   |              |              | technique to | tInternal    |
|              |              |              | compute      |              |
|              |              |              | constraint   |              |
|              |              |              | Jacobian     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| jacobian_reg | OT_REAL      | 0.250        | Exponent for | CasADi::Ipop |
| ularization_ |              |              | mu in the re | tInternal    |
| exponent     |              |              | gularization |              |
|              |              |              | for rank-    |              |
|              |              |              | deficient    |              |
|              |              |              | constraint   |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| jacobian_reg | OT_REAL      | 0.000        | Size of the  | CasADi::Ipop |
| ularization_ |              |              | regularizati | tInternal    |
| value        |              |              | on for rank- |              |
|              |              |              | deficient    |              |
|              |              |              | constraint   |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_d      | OT_REAL      | 0.000        | Weight for   | CasADi::Ipop |
|              |              |              | linear       | tInternal    |
|              |              |              | damping term |              |
|              |              |              | (to handle   |              |
|              |              |              | one-sided    |              |
|              |              |              | bounds).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_sigma  | OT_REAL      | 1.000e+10    | Factor       | CasADi::Ipop |
|              |              |              | limiting the | tInternal    |
|              |              |              | deviation of |              |
|              |              |              | dual         |              |
|              |              |              | variables    |              |
|              |              |              | from primal  |              |
|              |              |              | estimates.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_soc    | OT_REAL      | 0.990        | Factor in    | CasADi::Ipop |
|              |              |              | the          | tInternal    |
|              |              |              | sufficient   |              |
|              |              |              | reduction    |              |
|              |              |              | rule for     |              |
|              |              |              | second order |              |
|              |              |              | correction.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_x_dis  | OT_REAL      | 100          | a parameter  | CasADi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_y_dis  | OT_REAL      | 10000        | a parameter  | CasADi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| least_square | OT_STRING    | no           | Least square | CasADi::Ipop |
| _init_duals  |              |              | initializati | tInternal    |
|              |              |              | on of all    |              |
|              |              |              | dual         |              |
|              |              |              | variables    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| least_square | OT_STRING    | no           | Least square | CasADi::Ipop |
| _init_primal |              |              | initializati | tInternal    |
|              |              |              | on of the    |              |
|              |              |              | primal       |              |
|              |              |              | variables    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_STRING    | sherman-     | Strategy for | CasADi::Ipop |
| ry_aug_solve |              | morrison     | solving the  | tInternal    |
| r            |              |              | augmented    |              |
|              |              |              | system for   |              |
|              |              |              | low-rank     |              |
|              |              |              | Hessian.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_REAL      | 1            | Value for B0 | CasADi::Ipop |
| ry_init_val  |              |              | in low-rank  | tInternal    |
|              |              |              | update. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_REAL      | 100000000    | Upper bound  | CasADi::Ipop |
| ry_init_val_ |              |              | on value for | tInternal    |
| max          |              |              | B0 in low-   |              |
|              |              |              | rank update. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_REAL      | 0.000        | Lower bound  | CasADi::Ipop |
| ry_init_val_ |              |              | on value for | tInternal    |
| min          |              |              | B0 in low-   |              |
|              |              |              | rank update. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_STRING    | scalar1      | Initializati | CasADi::Ipop |
| ry_initializ |              |              | on strategy  | tInternal    |
| ation        |              |              | for the      |              |
|              |              |              | limited      |              |
|              |              |              | memory       |              |
|              |              |              | quasi-Newton |              |
|              |              |              | approximatio |              |
|              |              |              | n. (see      |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_INTEGER   | 6            | Maximum size | CasADi::Ipop |
| ry_max_histo |              |              | of the       | tInternal    |
| ry           |              |              | history for  |              |
|              |              |              | the limited  |              |
|              |              |              | quasi-Newton |              |
|              |              |              | Hessian appr |              |
|              |              |              | oximation.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_INTEGER   | 2            | Threshold    | CasADi::Ipop |
| ry_max_skipp |              |              | for          | tInternal    |
| ing          |              |              | successive   |              |
|              |              |              | iterations   |              |
|              |              |              | where update |              |
|              |              |              | is skipped.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_STRING    | no           | Determines   | CasADi::Ipop |
| ry_special_f |              |              | if the       | tInternal    |
| or_resto     |              |              | quasi-Newton |              |
|              |              |              | updates      |              |
|              |              |              | should be    |              |
|              |              |              | special      |              |
|              |              |              | during the   |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_STRING    | bfgs         | Quasi-Newton | CasADi::Ipop |
| ry_update_ty |              |              | update       | tInternal    |
| pe           |              |              | formula for  |              |
|              |              |              | the limited  |              |
|              |              |              | memory appro |              |
|              |              |              | ximation.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| line_search_ | OT_STRING    | filter       | Globalizatio | CasADi::Ipop |
| method       |              |              | n method     | tInternal    |
|              |              |              | used in      |              |
|              |              |              | backtracking |              |
|              |              |              | line search  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_scali | OT_STRING    | yes          | Flag         | CasADi::Ipop |
| ng_on_demand |              |              | indicating   | tInternal    |
|              |              |              | that linear  |              |
|              |              |              | scaling is   |              |
|              |              |              | only done if |              |
|              |              |              | it seems     |              |
|              |              |              | required.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | ma27         | Linear       | CasADi::Ipop |
| r            |              |              | solver used  | tInternal    |
|              |              |              | for step com |              |
|              |              |              | putations.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_syste | OT_STRING    | mc19         | Method for   | CasADi::Ipop |
| m_scaling    |              |              | scaling the  | tInternal    |
|              |              |              | linear       |              |
|              |              |              | system. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_ignore_ | OT_STRING    | no           | Enables      | CasADi::Ipop |
| singularity  |              |              | MA27's       | tInternal    |
|              |              |              | ability to   |              |
|              |              |              | solve a      |              |
|              |              |              | linear       |              |
|              |              |              | system even  |              |
|              |              |              | if the       |              |
|              |              |              | matrix is    |              |
|              |              |              | singular.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_la_init | OT_REAL      | 5            | Real         | CasADi::Ipop |
| _factor      |              |              | workspace    | tInternal    |
|              |              |              | memory for   |              |
|              |              |              | MA27. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_liw_ini | OT_REAL      | 5            | Integer      | CasADi::Ipop |
| t_factor     |              |              | workspace    | tInternal    |
|              |              |              | memory for   |              |
|              |              |              | MA27. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_meminc_ | OT_REAL      | 10           | Increment    | CasADi::Ipop |
| factor       |              |              | factor for   | tInternal    |
|              |              |              | workspace    |              |
|              |              |              | size for     |              |
|              |              |              | MA27. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_pivtol  | OT_REAL      | 0.000        | Pivot        | CasADi::Ipop |
|              |              |              | tolerance    | tInternal    |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA27. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_pivtolm | OT_REAL      | 0.000        | Maximum      | CasADi::Ipop |
| ax           |              |              | pivot        | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA27. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_skip_in | OT_STRING    | no           | Always       | CasADi::Ipop |
| ertia_check  |              |              | pretend      | tInternal    |
|              |              |              | inertia is   |              |
|              |              |              | correct.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma28_pivtol  | OT_REAL      | 0.010        | Pivot        | CasADi::Ipop |
|              |              |              | tolerance    | tInternal    |
|              |              |              | for linear   |              |
|              |              |              | solver MA28. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_automat | OT_STRING    | yes          | Controls     | CasADi::Ipop |
| ic_scaling   |              |              | MA57         | tInternal    |
|              |              |              | automatic    |              |
|              |              |              | scaling (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_block_s | OT_INTEGER   | 16           | Controls     | CasADi::Ipop |
| ize          |              |              | block size   | tInternal    |
|              |              |              | used by      |              |
|              |              |              | Level 3 BLAS |              |
|              |              |              | in MA57BD    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_node_am | OT_INTEGER   | 16           | Node         | CasADi::Ipop |
| algamation   |              |              | amalgamation | tInternal    |
|              |              |              | parameter    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_pivot_o | OT_INTEGER   | 5            | Controls     | CasADi::Ipop |
| rder         |              |              | pivot order  | tInternal    |
|              |              |              | in MA57 (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_pivtol  | OT_REAL      | 0.000        | Pivot        | CasADi::Ipop |
|              |              |              | tolerance    | tInternal    |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA57. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_pivtolm | OT_REAL      | 0.000        | Maximum      | CasADi::Ipop |
| ax           |              |              | pivot        | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA57. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_pre_all | OT_REAL      | 1.050        | Safety       | CasADi::Ipop |
| oc           |              |              | factor for   | tInternal    |
|              |              |              | work space   |              |
|              |              |              | memory       |              |
|              |              |              | allocation   |              |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA57. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_small_p | OT_INTEGER   | 0            | If set to 1, | CasADi::Ipop |
| ivot_flag    |              |              | then when    | tInternal    |
|              |              |              | small        |              |
|              |              |              | entries      |              |
|              |              |              | defined by   |              |
|              |              |              | CNTL(2) are  |              |
|              |              |              | detected     |              |
|              |              |              | they are     |              |
|              |              |              | removed and  |              |
|              |              |              | the correspo |              |
|              |              |              | nding pivots |              |
|              |              |              | placed at    |              |
|              |              |              | the end of   |              |
|              |              |              | the factoriz |              |
|              |              |              | ation. This  |              |
|              |              |              | can be       |              |
|              |              |              | particularly |              |
|              |              |              | efficient if |              |
|              |              |              | the matrix   |              |
|              |              |              | is highly    |              |
|              |              |              | rank         |              |
|              |              |              | deficient.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_nemin   | OT_INTEGER   | 32           | Node         | CasADi::Ipop |
|              |              |              | Amalgamation | tInternal    |
|              |              |              | parameter    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_print_l | OT_INTEGER   | 0            | Debug        | CasADi::Ipop |
| evel         |              |              | printing     | tInternal    |
|              |              |              | level for    |              |
|              |              |              | the linear   |              |
|              |              |              | solver MA86  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_small   | OT_REAL      | 0.000        | Zero Pivot   | CasADi::Ipop |
|              |              |              | Threshold    | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_static  | OT_REAL      | 0            | Static       | CasADi::Ipop |
|              |              |              | Pivoting     | tInternal    |
|              |              |              | Threshold    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_u       | OT_REAL      | 0.000        | Pivoting     | CasADi::Ipop |
|              |              |              | Threshold    | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_umax    | OT_REAL      | 0.000        | Maximum      | CasADi::Ipop |
|              |              |              | Pivoting     | tInternal    |
|              |              |              | Threshold    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| magic_steps  | OT_STRING    | no           | Enables      | CasADi::Ipop |
|              |              |              | magic steps. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_cpu_time | OT_REAL      | 1000000      | Maximum      | CasADi::Ipop |
|              |              |              | number of    | tInternal    |
|              |              |              | CPU seconds. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_filter_r | OT_INTEGER   | 5            | Maximal      | CasADi::Ipop |
| esets        |              |              | allowed      | tInternal    |
|              |              |              | number of    |              |
|              |              |              | filter       |              |
|              |              |              | resets (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| max_hessian_ | OT_REAL      | 1.000e+20    | Maximum      | CasADi::Ipop |
| perturbation |              |              | value of reg | tInternal    |
|              |              |              | ularization  |              |
|              |              |              | parameter    |              |
|              |              |              | for handling |              |
|              |              |              | negative     |              |
|              |              |              | curvature.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter     | OT_INTEGER   | 3000         | Maximum      | CasADi::Ipop |
|              |              |              | number of    | tInternal    |
|              |              |              | iterations.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_refineme | OT_INTEGER   | 10           | Maximum      | CasADi::Ipop |
| nt_steps     |              |              | number of    | tInternal    |
|              |              |              | iterative    |              |
|              |              |              | refinement   |              |
|              |              |              | steps per    |              |
|              |              |              | linear       |              |
|              |              |              | system       |              |
|              |              |              | solve. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| max_resto_it | OT_INTEGER   | 3000000      | Maximum      | CasADi::Ipop |
| er           |              |              | number of    | tInternal    |
|              |              |              | successive   |              |
|              |              |              | iterations   |              |
|              |              |              | in           |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| max_soc      | OT_INTEGER   | 4            | Maximum      | CasADi::Ipop |
|              |              |              | number of    | tInternal    |
|              |              |              | second order |              |
|              |              |              | correction   |              |
|              |              |              | trial steps  |              |
|              |              |              | at each      |              |
|              |              |              | iteration.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_soft_res | OT_INTEGER   | 10           | Maximum      | CasADi::Ipop |
| to_iters     |              |              | number of    | tInternal    |
|              |              |              | iterations   |              |
|              |              |              | performed    |              |
|              |              |              | successively |              |
|              |              |              | in soft      |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mehrotra_alg | OT_STRING    | no           | Indicates if | CasADi::Ipop |
| orithm       |              |              | we want to   | tInternal    |
|              |              |              | do           |              |
|              |              |              | Mehrotra's   |              |
|              |              |              | algorithm.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| min_alpha_pr | OT_REAL      | 0.000        | LIFENG       | CasADi::Ipop |
| imal         |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| min_hessian_ | OT_REAL      | 0.000        | Smallest     | CasADi::Ipop |
| perturbation |              |              | perturbation | tInternal    |
|              |              |              | of the       |              |
|              |              |              | Hessian      |              |
|              |              |              | block. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| min_refineme | OT_INTEGER   | 1            | Minimum      | CasADi::Ipop |
| nt_steps     |              |              | number of    | tInternal    |
|              |              |              | iterative    |              |
|              |              |              | refinement   |              |
|              |              |              | steps per    |              |
|              |              |              | linear       |              |
|              |              |              | system       |              |
|              |              |              | solve. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | CasADi::Ipop |
|              |              |              | uts)  (eval_ | tInternal    |
|              |              |              | f|eval_g|eva |              |
|              |              |              | l_jac_g|eval |              |
|              |              |              | _grad_f|eval |              |
|              |              |              | _h)          |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_allow_fas | OT_STRING    | yes          | Allow        | CasADi::Ipop |
| t_monotone_d |              |              | skipping of  | tInternal    |
| ecrease      |              |              | barrier      |              |
|              |              |              | problem if   |              |
|              |              |              | barrier test |              |
|              |              |              | is already   |              |
|              |              |              | met. (see    |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_init      | OT_REAL      | 0.100        | Initial      | CasADi::Ipop |
|              |              |              | value for    | tInternal    |
|              |              |              | the barrier  |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_linear_de | OT_REAL      | 0.200        | Determines   | CasADi::Ipop |
| crease_facto |              |              | linear       | tInternal    |
| r            |              |              | decrease     |              |
|              |              |              | rate of      |              |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_max       | OT_REAL      | 100000       | Maximum      | CasADi::Ipop |
|              |              |              | value for    | tInternal    |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_max_fact  | OT_REAL      | 1000         | Factor for i | CasADi::Ipop |
|              |              |              | nitializatio | tInternal    |
|              |              |              | n of maximum |              |
|              |              |              | value for    |              |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_min       | OT_REAL      | 0.000        | Minimum      | CasADi::Ipop |
|              |              |              | value for    | tInternal    |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_oracle    | OT_STRING    | quality-     | Oracle for a | CasADi::Ipop |
|              |              | function     | new barrier  | tInternal    |
|              |              |              | parameter in |              |
|              |              |              | the adaptive |              |
|              |              |              | strategy.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_strategy  | OT_STRING    | monotone     | Update       | CasADi::Ipop |
|              |              |              | strategy for | tInternal    |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_superline | OT_REAL      | 1.500        | Determines   | CasADi::Ipop |
| ar_decrease_ |              |              | superlinear  | tInternal    |
| power        |              |              | decrease     |              |
|              |              |              | rate of      |              |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_target    | OT_REAL      | 0            | Desired      | CasADi::Ipop |
|              |              |              | value of com | tInternal    |
|              |              |              | plementarity |              |
|              |              |              | . (see IPOPT |              |
|              |              |              | documentatio |              |
|              |              |              | n)           |              |
+--------------+--------------+--------------+--------------+--------------+
| mult_diverg_ | OT_REAL      | 0.000        | tolerance    | CasADi::Ipop |
| feasibility_ |              |              | for deciding | tInternal    |
| tol          |              |              | if the       |              |
|              |              |              | multipliers  |              |
|              |              |              | are          |              |
|              |              |              | diverging    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mult_diverg_ | OT_REAL      | 100000000    | tolerance    | CasADi::Ipop |
| y_tol        |              |              | for deciding | tInternal    |
|              |              |              | if the       |              |
|              |              |              | multipliers  |              |
|              |              |              | are          |              |
|              |              |              | diverging    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_dep_to | OT_REAL      | -1           | Pivot        | CasADi::Ipop |
| l            |              |              | threshold    | tInternal    |
|              |              |              | for          |              |
|              |              |              | detection of |              |
|              |              |              | linearly     |              |
|              |              |              | dependent    |              |
|              |              |              | constraints  |              |
|              |              |              | in MUMPS.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_mem_pe | OT_INTEGER   | 1000         | Percentage   | CasADi::Ipop |
| rcent        |              |              | increase in  | tInternal    |
|              |              |              | the          |              |
|              |              |              | estimated    |              |
|              |              |              | working      |              |
|              |              |              | space for    |              |
|              |              |              | MUMPS. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_permut | OT_INTEGER   | 7            | Controls     | CasADi::Ipop |
| ing_scaling  |              |              | permuting    | tInternal    |
|              |              |              | and scaling  |              |
|              |              |              | in MUMPS     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_pivot_ | OT_INTEGER   | 7            | Controls     | CasADi::Ipop |
| order        |              |              | pivot order  | tInternal    |
|              |              |              | in MUMPS     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_pivtol | OT_REAL      | 0.000        | Pivot        | CasADi::Ipop |
|              |              |              | tolerance    | tInternal    |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver       |              |
|              |              |              | MUMPS. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_pivtol | OT_REAL      | 0.100        | Maximum      | CasADi::Ipop |
| max          |              |              | pivot        | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver       |              |
|              |              |              | MUMPS. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_scalin | OT_INTEGER   | 77           | Controls     | CasADi::Ipop |
| g            |              |              | scaling in   | tInternal    |
|              |              |              | MUMPS (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| neg_curv_tes | OT_REAL      | 0            | Tolerance    | CasADi::Ipop |
| t_tol        |              |              | for          | tInternal    |
|              |              |              | heuristic to |              |
|              |              |              | ignore wrong |              |
|              |              |              | inertia.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| never_use_fa | OT_STRING    | no           | Toggle to    | CasADi::Ipop |
| ct_cgpen_dir |              |              | switch off   | tInternal    |
| ection       |              |              | the fast     |              |
|              |              |              | Chen-        |              |
|              |              |              | Goldfarb     |              |
|              |              |              | direction    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| never_use_pi | OT_STRING    | no           | Toggle to    | CasADi::Ipop |
| ecewise_pena |              |              | switch off   | tInternal    |
| lty_ls       |              |              | the          |              |
|              |              |              | piecewise    |              |
|              |              |              | penalty      |              |
|              |              |              | method (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_lower_bo | OT_REAL      | -1.000e+19   | any bound    | CasADi::Ipop |
| und_inf      |              |              | less or      | tInternal    |
|              |              |              | equal this   |              |
|              |              |              | value will   |              |
|              |              |              | be           |              |
|              |              |              | considered   |              |
|              |              |              | -inf (i.e.   |              |
|              |              |              | not lower    |              |
|              |              |              | bounded).    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_REAL      | 0            | Target value | CasADi::Ipop |
| constr_targe |              |              | for          | tInternal    |
| t_gradient   |              |              | constraint   |              |
|              |              |              | function     |              |
|              |              |              | gradient     |              |
|              |              |              | size. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_REAL      | 100          | Maximum      | CasADi::Ipop |
| max_gradient |              |              | gradient     | tInternal    |
|              |              |              | after NLP    |              |
|              |              |              | scaling.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_STRING    | gradient-    | Select the   | CasADi::Ipop |
| method       |              | based        | technique    | tInternal    |
|              |              |              | used for     |              |
|              |              |              | scaling the  |              |
|              |              |              | NLP. (see    |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_REAL      | 0.000        | Minimum      | CasADi::Ipop |
| min_value    |              |              | value of     | tInternal    |
|              |              |              | gradient-    |              |
|              |              |              | based        |              |
|              |              |              | scaling      |              |
|              |              |              | values. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_REAL      | 0            | Target value | CasADi::Ipop |
| obj_target_g |              |              | for          | tInternal    |
| radient      |              |              | objective    |              |
|              |              |              | function     |              |
|              |              |              | gradient     |              |
|              |              |              | size. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_upper_bo | OT_REAL      | 1.000e+19    | any bound    | CasADi::Ipop |
| und_inf      |              |              | greater or   | tInternal    |
|              |              |              | this value   |              |
|              |              |              | will be      |              |
|              |              |              | considered   |              |
|              |              |              | +inf (i.e.   |              |
|              |              |              | not upper    |              |
|              |              |              | bounded).    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| nu_inc       | OT_REAL      | 0.000        | Increment of | CasADi::Ipop |
|              |              |              | the penalty  | tInternal    |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| nu_init      | OT_REAL      | 0.000        | Initial      | CasADi::Ipop |
|              |              |              | value of the | tInternal    |
|              |              |              | penalty      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| num_linear_v | OT_INTEGER   | 0            | Number of    | CasADi::Ipop |
| ariables     |              |              | linear       | tInternal    |
|              |              |              | variables    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| obj_max_inc  | OT_REAL      | 5            | Determines   | CasADi::Ipop |
|              |              |              | the upper    | tInternal    |
|              |              |              | bound on the |              |
|              |              |              | acceptable   |              |
|              |              |              | increase of  |              |
|              |              |              | barrier      |              |
|              |              |              | objective    |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| obj_scaling_ | OT_REAL      | 1            | Scaling      | CasADi::Ipop |
| factor       |              |              | factor for   | tInternal    |
|              |              |              | the          |              |
|              |              |              | objective    |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| option_file_ | OT_STRING    |              | File name of | CasADi::Ipop |
| name         |              |              | options file | tInternal    |
|              |              |              | (to          |              |
|              |              |              | overwrite    |              |
|              |              |              | default).    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| output_file  | OT_STRING    |              | File name of | CasADi::Ipop |
|              |              |              | desired      | tInternal    |
|              |              |              | output file  |              |
|              |              |              | (leave unset |              |
|              |              |              | for no file  |              |
|              |              |              | output).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option.      | olverInterna |
|              |              |              | Expect F, G, | l            |
|              |              |              | H, J to have |              |
|              |              |              | an           |              |
|              |              |              | additional   |              |
|              |              |              | input        |              |
|              |              |              | argument     |              |
|              |              |              | appended at  |              |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_INTEGER   | 5000         | Maximum Size | CasADi::Ipop |
| _coarse_size |              |              | of Coarse    | tInternal    |
|              |              |              | Grid Matrix  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_REAL      | 0.500        | dropping     | CasADi::Ipop |
| _dropping_fa |              |              | value for    | tInternal    |
| ctor         |              |              | incomplete   |              |
|              |              |              | factor (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_REAL      | 0.100        | dropping     | CasADi::Ipop |
| _dropping_sc |              |              | value for    | tInternal    |
| hur          |              |              | sparsify     |              |
|              |              |              | schur        |              |
|              |              |              | complement   |              |
|              |              |              | factor (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_REAL      | 5000000      | (see IPOPT d | CasADi::Ipop |
| _inverse_nor |              |              | ocumentation | tInternal    |
| m_factor     |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_INTEGER   | 10           | Maximum Size | CasADi::Ipop |
| _max_levels  |              |              | of Grid      | tInternal    |
|              |              |              | Levels (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_INTEGER   | 10000000     | max fill for | CasADi::Ipop |
| _max_row_fil |              |              | each row     | tInternal    |
| l            |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_REAL      | 0.000        | Relative     | CasADi::Ipop |
| _relative_to |              |              | Residual     | tInternal    |
| l            |              |              | Convergence  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_STRING    | no           | Switch on    | CasADi::Ipop |
| ative        |              |              | iterative    | tInternal    |
|              |              |              | solver in    |              |
|              |              |              | Pardiso      |              |
|              |              |              | library (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_matc | OT_STRING    | complete+2x2 | Matching     | CasADi::Ipop |
| hing_strateg |              |              | strategy to  | tInternal    |
| y            |              |              | be used by   |              |
|              |              |              | Pardiso (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_max_ | OT_INTEGER   | 4            | Maximal      | CasADi::Ipop |
| droptol_corr |              |              | number of    | tInternal    |
| ections      |              |              | decreases of |              |
|              |              |              | drop         |              |
|              |              |              | tolerance    |              |
|              |              |              | during one   |              |
|              |              |              | solve. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_max_ | OT_INTEGER   | 500          | Maximum      | CasADi::Ipop |
| iter         |              |              | number of    | tInternal    |
|              |              |              | Krylov-      |              |
|              |              |              | Subspace     |              |
|              |              |              | Iteration    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_msgl | OT_INTEGER   | 0            | Pardiso      | CasADi::Ipop |
| vl           |              |              | message      | tInternal    |
|              |              |              | level (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_out_ | OT_INTEGER   | 0            | Enables out- | CasADi::Ipop |
| of_core_powe |              |              | of-core      | tInternal    |
| r            |              |              | variant of   |              |
|              |              |              | Pardiso (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_redo | OT_STRING    | no           | Toggle for   | CasADi::Ipop |
| _symbolic_fa |              |              | handling     | tInternal    |
| ct_only_if_i |              |              | case when    |              |
| nertia_wrong |              |              | elements     |              |
|              |              |              | were         |              |
|              |              |              | perturbed by |              |
|              |              |              | Pardiso.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_repe | OT_STRING    | no           | Interpretati | CasADi::Ipop |
| ated_perturb |              |              | on of        | tInternal    |
| ation_means_ |              |              | perturbed    |              |
| singular     |              |              | elements.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_skip | OT_STRING    | no           | Always       | CasADi::Ipop |
| _inertia_che |              |              | pretend      | tInternal    |
| ck           |              |              | inertia is   |              |
|              |              |              | correct.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pass_nonline | OT_BOOLEAN   | False        | n/a          | CasADi::Ipop |
| ar_variables |              |              |              | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| pen_des_fact | OT_REAL      | 0.200        | a parameter  | CasADi::Ipop |
|              |              |              | used in      | tInternal    |
|              |              |              | penalty      |              |
|              |              |              | parameter    |              |
|              |              |              | computation  |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pen_init_fac | OT_REAL      | 50           | a parameter  | CasADi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | choose       |              |
|              |              |              | initial      |              |
|              |              |              | penalty para |              |
|              |              |              | meterswhen   |              |
|              |              |              | the          |              |
|              |              |              | regularized  |              |
|              |              |              | Newton       |              |
|              |              |              | method is    |              |
|              |              |              | used. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pen_theta_ma | OT_REAL      | 10000        | Determines   | CasADi::Ipop |
| x_fact       |              |              | upper bound  | tInternal    |
|              |              |              | for          |              |
|              |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the filter.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_init | OT_REAL      | 100000       | Maximal      | CasADi::Ipop |
| _max         |              |              | value for    | tInternal    |
|              |              |              | the intial   |              |
|              |              |              | penalty      |              |
|              |              |              | parameter    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_init | OT_REAL      | 1            | Minimal      | CasADi::Ipop |
| _min         |              |              | value for    | tInternal    |
|              |              |              | the intial   |              |
|              |              |              | penalty      |              |
|              |              |              | parameter    |              |
|              |              |              | for line     |              |
|              |              |              | search(for   |              |
|              |              |              | Chen-        |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_max  | OT_REAL      | 1.000e+30    | Maximal      | CasADi::Ipop |
|              |              |              | value for    | tInternal    |
|              |              |              | the penalty  |              |
|              |              |              | parameter    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_upda | OT_REAL      | 10           | LIFENG       | CasADi::Ipop |
| te_compl_tol |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_upda | OT_REAL      | 0.000        | Threshold    | CasADi::Ipop |
| te_infeasibi |              |              | for infeasib | tInternal    |
| lity_tol     |              |              | ility in     |              |
|              |              |              | penalty      |              |
|              |              |              | parameter    |              |
|              |              |              | update test. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| perturb_alwa | OT_STRING    | no           | Active       | CasADi::Ipop |
| ys_cd        |              |              | permanent    | tInternal    |
|              |              |              | perturbation |              |
|              |              |              | of           |              |
|              |              |              | constraint l |              |
|              |              |              | inearization |              |
|              |              |              | . (see IPOPT |              |
|              |              |              | documentatio |              |
|              |              |              | n)           |              |
+--------------+--------------+--------------+--------------+--------------+
| perturb_dec_ | OT_REAL      | 0.333        | Decrease     | CasADi::Ipop |
| fact         |              |              | factor for   | tInternal    |
|              |              |              | x-s perturba |              |
|              |              |              | tion. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| perturb_inc_ | OT_REAL      | 8            | Increase     | CasADi::Ipop |
| fact         |              |              | factor for   | tInternal    |
|              |              |              | x-s perturba |              |
|              |              |              | tion. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| perturb_inc_ | OT_REAL      | 100          | Increase     | CasADi::Ipop |
| fact_first   |              |              | factor for   | tInternal    |
|              |              |              | x-s          |              |
|              |              |              | perturbation |              |
|              |              |              | for very     |              |
|              |              |              | first pertur |              |
|              |              |              | bation. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| piecewisepen | OT_REAL      | 0.000        | LIFENG       | CasADi::Ipop |
| alty_gamma_i |              |              | WRITES THIS. | tInternal    |
| nfeasi       |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| piecewisepen | OT_REAL      | 0.000        | LIFENG       | CasADi::Ipop |
| alty_gamma_o |              |              | WRITES THIS. | tInternal    |
| bj           |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| point_pertur | OT_REAL      | 10           | Maximal      | CasADi::Ipop |
| bation_radiu |              |              | perturbation | tInternal    |
| s            |              |              | of an        |              |
|              |              |              | evaluation   |              |
|              |              |              | point. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| print_info_s | OT_STRING    | no           | Enables      | CasADi::Ipop |
| tring        |              |              | printing of  | tInternal    |
|              |              |              | additional   |              |
|              |              |              | info string  |              |
|              |              |              | at end of    |              |
|              |              |              | iteration    |              |
|              |              |              | output. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| print_level  | OT_INTEGER   | 5            | Output       | CasADi::Ipop |
|              |              |              | verbosity    | tInternal    |
|              |              |              | level. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| print_option | OT_STRING    | no           | Switch to    | CasADi::Ipop |
| s_documentat |              |              | print all    | tInternal    |
| ion          |              |              | algorithmic  |              |
|              |              |              | options.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| print_option | OT_STRING    | no           | Undocumented | CasADi::Ipop |
| s_latex_mode |              |              | (see IPOPT d | tInternal    |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| print_time   | OT_BOOLEAN   | True         | print        | CasADi::Ipop |
|              |              |              | information  | tInternal    |
|              |              |              | about        |              |
|              |              |              | execution    |              |
|              |              |              | time         |              |
+--------------+--------------+--------------+--------------+--------------+
| print_timing | OT_STRING    | no           | Switch to    | CasADi::Ipop |
| _statistics  |              |              | print timing | tInternal    |
|              |              |              | statistics.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| print_user_o | OT_STRING    | no           | Print all    | CasADi::Ipop |
| ptions       |              |              | options set  | tInternal    |
|              |              |              | by the user. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_STRING    | none         | The          | CasADi::Ipop |
| tion_balanci |              |              | balancing    | tInternal    |
| ng_term      |              |              | term         |              |
|              |              |              | included in  |              |
|              |              |              | the quality  |              |
|              |              |              | function for |              |
|              |              |              | centrality.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_STRING    | none         | The penalty  | CasADi::Ipop |
| tion_central |              |              | term for     | tInternal    |
| ity          |              |              | centrality   |              |
|              |              |              | that is      |              |
|              |              |              | included in  |              |
|              |              |              | quality      |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_INTEGER   | 8            | Maximum      | CasADi::Ipop |
| tion_max_sec |              |              | number of    | tInternal    |
| tion_steps   |              |              | search steps |              |
|              |              |              | during       |              |
|              |              |              | direct       |              |
|              |              |              | search       |              |
|              |              |              | procedure    |              |
|              |              |              | determining  |              |
|              |              |              | the optimal  |              |
|              |              |              | centering    |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_STRING    | 2-norm-      | Norm used    | CasADi::Ipop |
| tion_norm_ty |              | squared      | for          | tInternal    |
| pe           |              |              | components   |              |
|              |              |              | of the       |              |
|              |              |              | quality      |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_REAL      | 0            | Tolerance    | CasADi::Ipop |
| tion_section |              |              | for the      | tInternal    |
| _qf_tol      |              |              | golden       |              |
|              |              |              | section      |              |
|              |              |              | search       |              |
|              |              |              | procedure    |              |
|              |              |              | determining  |              |
|              |              |              | the optimal  |              |
|              |              |              | centering    |              |
|              |              |              | parameter    |              |
|              |              |              | (in the      |              |
|              |              |              | function     |              |
|              |              |              | value        |              |
|              |              |              | space). (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_REAL      | 0.010        | Tolerance    | CasADi::Ipop |
| tion_section |              |              | for the      | tInternal    |
| _sigma_tol   |              |              | section      |              |
|              |              |              | search       |              |
|              |              |              | procedure    |              |
|              |              |              | determining  |              |
|              |              |              | the optimal  |              |
|              |              |              | centering    |              |
|              |              |              | parameter    |              |
|              |              |              | (in sigma    |              |
|              |              |              | space). (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| recalc_y     | OT_STRING    | no           | Tells the    | CasADi::Ipop |
|              |              |              | algorithm to | tInternal    |
|              |              |              | recalculate  |              |
|              |              |              | the equality |              |
|              |              |              | and          |              |
|              |              |              | inequality   |              |
|              |              |              | multipliers  |              |
|              |              |              | as least     |              |
|              |              |              | square       |              |
|              |              |              | estimates.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| recalc_y_fea | OT_REAL      | 0.000        | Feasibility  | CasADi::Ipop |
| s_tol        |              |              | threshold    | tInternal    |
|              |              |              | for recomput |              |
|              |              |              | ation of     |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| replace_boun | OT_STRING    | no           | Indicates if | CasADi::Ipop |
| ds           |              |              | all variable | tInternal    |
|              |              |              | bounds       |              |
|              |              |              | should be    |              |
|              |              |              | replaced by  |              |
|              |              |              | inequality   |              |
|              |              |              | constraints  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| required_inf | OT_REAL      | 0.900        | Required     | CasADi::Ipop |
| easibility_r |              |              | reduction of | tInternal    |
| eduction     |              |              | infeasibilit |              |
|              |              |              | y before     |              |
|              |              |              | leaving      |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| residual_imp | OT_REAL      | 1.000        | Minimal      | CasADi::Ipop |
| rovement_fac |              |              | required     | tInternal    |
| tor          |              |              | reduction of |              |
|              |              |              | residual     |              |
|              |              |              | test ratio   |              |
|              |              |              | in iterative |              |
|              |              |              | refinement.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| residual_rat | OT_REAL      | 0.000        | Iterative    | CasADi::Ipop |
| io_max       |              |              | refinement   | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| residual_rat | OT_REAL      | 0.000        | Threshold    | CasADi::Ipop |
| io_singular  |              |              | for          | tInternal    |
|              |              |              | declaring    |              |
|              |              |              | linear       |              |
|              |              |              | system       |              |
|              |              |              | singular     |              |
|              |              |              | after failed |              |
|              |              |              | iterative    |              |
|              |              |              | refinement.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| resto_failur | OT_REAL      | 0            | Threshold    | CasADi::Ipop |
| e_feasibilit |              |              | for primal i | tInternal    |
| y_threshold  |              |              | nfeasibility |              |
|              |              |              | to declare   |              |
|              |              |              | failure of   |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| resto_penalt | OT_REAL      | 1000         | Penalty      | CasADi::Ipop |
| y_parameter  |              |              | parameter in | tInternal    |
|              |              |              | the          |              |
|              |              |              | restoration  |              |
|              |              |              | phase        |              |
|              |              |              | objective    |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| resto_proxim | OT_REAL      | 1            | Weighting    | CasADi::Ipop |
| ity_weight   |              |              | factor for   | tInternal    |
|              |              |              | the          |              |
|              |              |              | proximity    |              |
|              |              |              | term in      |              |
|              |              |              | restoration  |              |
|              |              |              | phase        |              |
|              |              |              | objective.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| rho          | OT_REAL      | 0.100        | Value in     | CasADi::Ipop |
|              |              |              | penalty      | tInternal    |
|              |              |              | parameter    |              |
|              |              |              | update       |              |
|              |              |              | formula.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| s_max        | OT_REAL      | 100          | Scaling      | CasADi::Ipop |
|              |              |              | threshold    | tInternal    |
|              |              |              | for the NLP  |              |
|              |              |              | error. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| s_phi        | OT_REAL      | 2.300        | Exponent for | CasADi::Ipop |
|              |              |              | linear       | tInternal    |
|              |              |              | barrier      |              |
|              |              |              | function     |              |
|              |              |              | model in the |              |
|              |              |              | switching    |              |
|              |              |              | rule. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| s_theta      | OT_REAL      | 1.100        | Exponent for | CasADi::Ipop |
|              |              |              | current      | tInternal    |
|              |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the          |              |
|              |              |              | switching    |              |
|              |              |              | rule. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| sb           | OT_STRING    | no           | (see IPOPT d | CasADi::Ipop |
|              |              |              | ocumentation | tInternal    |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| sigma_max    | OT_REAL      | 100          | Maximum      | CasADi::Ipop |
|              |              |              | value of the | tInternal    |
|              |              |              | centering    |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| sigma_min    | OT_REAL      | 0.000        | Minimum      | CasADi::Ipop |
|              |              |              | value of the | tInternal    |
|              |              |              | centering    |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| skip_corr_if | OT_STRING    | yes          | Skip the     | CasADi::Ipop |
| _neg_curv    |              |              | corrector    | tInternal    |
|              |              |              | step in      |              |
|              |              |              | negative     |              |
|              |              |              | curvature    |              |
|              |              |              | iteration (u |              |
|              |              |              | nsupported!) |              |
|              |              |              | . (see IPOPT |              |
|              |              |              | documentatio |              |
|              |              |              | n)           |              |
+--------------+--------------+--------------+--------------+--------------+
| skip_corr_in | OT_STRING    | yes          | Skip the     | CasADi::Ipop |
| _monotone_mo |              |              | corrector    | tInternal    |
| de           |              |              | step during  |              |
|              |              |              | monotone     |              |
|              |              |              | barrier      |              |
|              |              |              | parameter    |              |
|              |              |              | mode (unsupp |              |
|              |              |              | orted!).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| skip_finaliz | OT_STRING    | no           | Indicates if | CasADi::Ipop |
| e_solution_c |              |              | call to NLP: | tInternal    |
| all          |              |              | :FinalizeSol |              |
|              |              |              | ution after  |              |
|              |              |              | optimization |              |
|              |              |              | should be    |              |
|              |              |              | suppressed   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| slack_bound_ | OT_REAL      | 0.010        | Desired      | CasADi::Ipop |
| frac         |              |              | minimum      | tInternal    |
|              |              |              | relative     |              |
|              |              |              | distance     |              |
|              |              |              | from the     |              |
|              |              |              | initial      |              |
|              |              |              | slack to     |              |
|              |              |              | bound. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| slack_bound_ | OT_REAL      | 0.010        | Desired      | CasADi::Ipop |
| push         |              |              | minimum      | tInternal    |
|              |              |              | absolute     |              |
|              |              |              | distance     |              |
|              |              |              | from the     |              |
|              |              |              | initial      |              |
|              |              |              | slack to     |              |
|              |              |              | bound. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| slack_move   | OT_REAL      | 0.000        | Correction   | CasADi::Ipop |
|              |              |              | size for     | tInternal    |
|              |              |              | very small   |              |
|              |              |              | slacks. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| soft_resto_p | OT_REAL      | 1.000        | Required     | CasADi::Ipop |
| derror_reduc |              |              | reduction in | tInternal    |
| tion_factor  |              |              | primal-dual  |              |
|              |              |              | error in the |              |
|              |              |              | soft         |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| start_with_r | OT_STRING    | no           | Tells        | CasADi::Ipop |
| esto         |              |              | algorithm to | tInternal    |
|              |              |              | switch to    |              |
|              |              |              | restoration  |              |
|              |              |              | phase in     |              |
|              |              |              | first        |              |
|              |              |              | iteration.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| suppress_all | OT_STRING    | no           | Undocumented | CasADi::Ipop |
| _output      |              |              | (see IPOPT d | tInternal    |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| tau_min      | OT_REAL      | 0.990        | Lower bound  | CasADi::Ipop |
|              |              |              | on fraction- | tInternal    |
|              |              |              | to-the-      |              |
|              |              |              | boundary     |              |
|              |              |              | parameter    |              |
|              |              |              | tau. (see    |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| theta_max_fa | OT_REAL      | 10000        | Determines   | CasADi::Ipop |
| ct           |              |              | upper bound  | tInternal    |
|              |              |              | for          |              |
|              |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the filter.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| theta_min    | OT_REAL      | 0.000        | LIFENG       | CasADi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| theta_min_fa | OT_REAL      | 0.000        | Determines   | CasADi::Ipop |
| ct           |              |              | constraint   | tInternal    |
|              |              |              | violation    |              |
|              |              |              | threshold in |              |
|              |              |              | the          |              |
|              |              |              | switching    |              |
|              |              |              | rule. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| tiny_step_to | OT_REAL      | 0.000        | Tolerance    | CasADi::Ipop |
| l            |              |              | for          | tInternal    |
|              |              |              | detecting    |              |
|              |              |              | numerically  |              |
|              |              |              | insignifican |              |
|              |              |              | t steps.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| tiny_step_y_ | OT_REAL      | 0.010        | Tolerance    | CasADi::Ipop |
| tol          |              |              | for quitting | tInternal    |
|              |              |              | because of   |              |
|              |              |              | numerically  |              |
|              |              |              | insignifican |              |
|              |              |              | t steps.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| tol          | OT_REAL      | 0.000        | Desired      | CasADi::Ipop |
|              |              |              | convergence  | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | (relative).  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| var_integer_ | OT_DICTIONAR | None         | Integer      | CasADi::Ipop |
| md           | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of integers) |              |
|              |              |              | about        |              |
|              |              |              | variables to |              |
|              |              |              | be passed to |              |
|              |              |              | IPOPT        |              |
+--------------+--------------+--------------+--------------+--------------+
| var_numeric_ | OT_DICTIONAR | None         | Numeric      | CasADi::Ipop |
| md           | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of reals)    |              |
|              |              |              | about        |              |
|              |              |              | variables to |              |
|              |              |              | be passed to |              |
|              |              |              | IPOPT        |              |
+--------------+--------------+--------------+--------------+--------------+
| var_string_m | OT_DICTIONAR | None         | String       | CasADi::Ipop |
| d            | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of strings)  |              |
|              |              |              | about        |              |
|              |              |              | variables to |              |
|              |              |              | be passed to |              |
|              |              |              | IPOPT        |              |
+--------------+--------------+--------------+--------------+--------------+
| vartheta     | OT_REAL      | 0.500        | a parameter  | CasADi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_b | OT_REAL      | 0.001        | same as      | CasADi::Ipop |
| ound_frac    |              |              | bound_frac   | tInternal    |
|              |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_b | OT_REAL      | 0.001        | same as      | CasADi::Ipop |
| ound_push    |              |              | bound_push   | tInternal    |
|              |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_e | OT_STRING    | no           | Tells        | CasADi::Ipop |
| ntire_iterat |              |              | algorithm    | tInternal    |
| e            |              |              | whether to   |              |
|              |              |              | use the GetW |              |
|              |              |              | armStartIter |              |
|              |              |              | ate method   |              |
|              |              |              | in the NLP.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_i | OT_STRING    | no           | Warm-start   | CasADi::Ipop |
| nit_point    |              |              | for initial  | tInternal    |
|              |              |              | point (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_m | OT_REAL      | 0.001        | same as mult | CasADi::Ipop |
| ult_bound_pu |              |              | _bound_push  | tInternal    |
| sh           |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_m | OT_REAL      | 1000000      | Maximum      | CasADi::Ipop |
| ult_init_max |              |              | initial      | tInternal    |
|              |              |              | value for    |              |
|              |              |              | the equality |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_s | OT_STRING    | no           | Indicates    | CasADi::Ipop |
| ame_structur |              |              | whether a    | tInternal    |
| e            |              |              | problem with |              |
|              |              |              | a structure  |              |
|              |              |              | identical to |              |
|              |              |              | the previous |              |
|              |              |              | one is to be |              |
|              |              |              | solved. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_s | OT_REAL      | 0.001        | same as slac | CasADi::Ipop |
| lack_bound_f |              |              | k_bound_frac | tInternal    |
| rac          |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_s | OT_REAL      | 0.001        | same as slac | CasADi::Ipop |
| lack_bound_p |              |              | k_bound_push | tInternal    |
| ush          |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_t | OT_REAL      | 0            | Unsupported! | CasADi::Ipop |
| arget_mu     |              |              | (see IPOPT d | tInternal    |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | CasADi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+
| watchdog_sho | OT_INTEGER   | 10           | Number of    | CasADi::Ipop |
| rtened_iter_ |              |              | shortened    | tInternal    |
| trigger      |              |              | iterations   |              |
|              |              |              | that trigger |              |
|              |              |              | the          |              |
|              |              |              | watchdog.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| watchdog_tri | OT_INTEGER   | 3            | Maximum      | CasADi::Ipop |
| al_iter_max  |              |              | number of    | tInternal    |
|              |              |              | watchdog     |              |
|              |              |              | iterations.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_inexact | OT_REAL      | 0            | Drop         | CasADi::Ipop |
| _droptol     |              |              | tolerance    | tInternal    |
|              |              |              | for inexact  |              |
|              |              |              | factorizatio |              |
|              |              |              | n preconditi |              |
|              |              |              | oner in      |              |
|              |              |              | WISMP. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_inexact | OT_REAL      | 0            | Fill-in      | CasADi::Ipop |
| _fillin_limi |              |              | limit for    | tInternal    |
| t            |              |              | inexact fact |              |
|              |              |              | orization pr |              |
|              |              |              | econditioner |              |
|              |              |              | in WISMP.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_iterati | OT_STRING    | no           | Switches to  | CasADi::Ipop |
| ve           |              |              | iterative    | tInternal    |
|              |              |              | solver in    |              |
|              |              |              | WSMP. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_max_ite | OT_INTEGER   | 1000         | Maximal      | CasADi::Ipop |
| r            |              |              | number of    | tInternal    |
|              |              |              | iterations   |              |
|              |              |              | in iterative |              |
|              |              |              | WISMP (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_no_pivo | OT_STRING    | no           | Use the      | CasADi::Ipop |
| ting         |              |              | static       | tInternal    |
|              |              |              | pivoting     |              |
|              |              |              | option of    |              |
|              |              |              | WSMP. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_num_thr | OT_INTEGER   | 1            | Number of    | CasADi::Ipop |
| eads         |              |              | threads to   | tInternal    |
|              |              |              | be used in   |              |
|              |              |              | WSMP (see    |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_orderin | OT_INTEGER   | 1            | Determines   | CasADi::Ipop |
| g_option     |              |              | how ordering | tInternal    |
|              |              |              | is done in   |              |
|              |              |              | WSMP         |              |
|              |              |              | (IPARM(16)   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_orderin | OT_INTEGER   | 1            | Determines   | CasADi::Ipop |
| g_option2    |              |              | how ordering | tInternal    |
|              |              |              | is done in   |              |
|              |              |              | WSMP         |              |
|              |              |              | (IPARM(20)   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_pivtol  | OT_REAL      | 0.000        | Pivot        | CasADi::Ipop |
|              |              |              | tolerance    | tInternal    |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver WSMP. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_pivtolm | OT_REAL      | 0.100        | Maximum      | CasADi::Ipop |
| ax           |              |              | pivot        | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver WSMP. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_scaling | OT_INTEGER   | 0            | Determines   | CasADi::Ipop |
|              |              |              | how the      | tInternal    |
|              |              |              | matrix is    |              |
|              |              |              | scaled by    |              |
|              |              |              | WSMP. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_singula | OT_REAL      | 0.000        | WSMP's       | CasADi::Ipop |
| rity_thresho |              |              | singularity  | tInternal    |
| ld           |              |              | threshold.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_skip_in | OT_STRING    | no           | Always       | CasADi::Ipop |
| ertia_check  |              |              | pretent      | tInternal    |
|              |              |              | inertia is   |              |
|              |              |              | correct.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_write_m | OT_INTEGER   | -1           | Iteration in | CasADi::Ipop |
| atrix_iterat |              |              | which the    | tInternal    |
| ion          |              |              | matrices are |              |
|              |              |              | written to   |              |
|              |              |              | files. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-------------+--------------------------+
|     Id      |         Used in          |
+=============+==========================+
| eval_f      | CasADi::IpoptInternal    |
+-------------+--------------------------+
| eval_g      | CasADi::IpoptInternal    |
+-------------+--------------------------+
| eval_grad_f | CasADi::IpoptInternal    |
+-------------+--------------------------+
| eval_h      | CasADi::IpoptInternal    |
+-------------+--------------------------+
| eval_jac_g  | CasADi::IpoptInternal    |
+-------------+--------------------------+
| inputs      | CasADi::FunctionInternal |
+-------------+--------------------------+
| outputs     | CasADi::FunctionInternal |
+-------------+--------------------------+

>List of available stats
+--------------------+-----------------------+
|         Id         |        Used in        |
+====================+=======================+
| con_integer_md     | CasADi::IpoptInternal |
+--------------------+-----------------------+
| con_numeric_md     | CasADi::IpoptInternal |
+--------------------+-----------------------+
| con_string_md      | CasADi::IpoptInternal |
+--------------------+-----------------------+
| iter_count         | CasADi::IpoptInternal |
+--------------------+-----------------------+
| iteration          | CasADi::IpoptInternal |
+--------------------+-----------------------+
| iterations         | CasADi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_f           | CasADi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_g           | CasADi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_grad_f      | CasADi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_h           | CasADi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_jac_g       | CasADi::IpoptInternal |
+--------------------+-----------------------+
| return_status      | CasADi::IpoptInternal |
+--------------------+-----------------------+
| t_callback_fun     | CasADi::IpoptInternal |
+--------------------+-----------------------+
| t_callback_prepare | CasADi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_f           | CasADi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_g           | CasADi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_grad_f      | CasADi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_h           | CasADi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_jac_g       | CasADi::IpoptInternal |
+--------------------+-----------------------+
| t_mainloop         | CasADi::IpoptInternal |
+--------------------+-----------------------+
| var_integer_md     | CasADi::IpoptInternal |
+--------------------+-----------------------+
| var_numeric_md     | CasADi::IpoptInternal |
+--------------------+-----------------------+
| var_string_md      | CasADi::IpoptInternal |
+--------------------+-----------------------+

Diagrams

C++ includes: ipopt_solver.hpp ";

%feature("docstring") CasADi::IpoptSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::IpoptSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::IpoptSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::IpoptSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::IpoptSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::IpoptSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::IpoptSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::IpoptSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::IpoptSolver::getReducedHessian "

Get the reduced Hessian. Requires a patched sIPOPT installation, see CasADi
documentation.

";

%feature("docstring") CasADi::IpoptSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::IpoptSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::IpoptSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::IpoptSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::IpoptSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::IpoptSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::IpoptSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::IpoptSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::IpoptSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::IpoptSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::IpoptSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::IpoptSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::IpoptSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::IpoptSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::IpoptSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::IpoptSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::IpoptSolver::getOption "

get an option value

";

%feature("docstring") CasADi::IpoptSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::IpoptSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::IpoptSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::IpoptSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::IpoptSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::IpoptSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::IpoptSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::IpoptSolver::jacG "

Access the Jacobian of the constraint function.

>Input scheme: CasADi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective. .           |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") CasADi::IpoptSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::IpoptSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::IpoptSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::IpoptSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::IpoptSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::IpoptSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::IpoptSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::IpoptSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::IpoptSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::IpoptSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::IpoptSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::IpoptSolver::getReportConstraints "";

%feature("docstring") CasADi::IpoptSolver::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") CasADi::IpoptSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::IpoptSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::IpoptSolver::nlp "

Access the NLP.

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::IpoptSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::IpoptSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::IpoptSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::IpoptSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::IpoptSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::IpoptSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::IpoptSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::IpoptSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::IpoptSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::IpoptSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::IpoptSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::IpoptSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::IpoptSolver::IpoptSolver "

>  CasADi::IpoptSolver::IpoptSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::IpoptSolver::IpoptSolver(const Function &F, const Function &G)
------------------------------------------------------------------------

[DEPRECATED] Create an NLP solver instance (legacy syntax)

>  CasADi::IpoptSolver::IpoptSolver(const Function &nlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") CasADi::IpoptSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::IpoptSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::IpoptSolver::gradF "

Access the objective gradient function>Input scheme: CasADi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") CasADi::IpoptSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::IpoptSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::IpoptSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::IpoptSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::IpoptSolver::solve "

the same as evaluate()

";


// File: classCasADi_1_1IpoptUserClass.xml
%feature("docstring") CasADi::IpoptUserClass::get_starting_point "[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring") CasADi::IpoptUserClass::intermediate_callback "[INTERNAL]  This method is called at every iteration

Code copied from TNLPAdapter::FinalizeSolution See also:http://list.coin-
or.org/pipermail/ipopt/2010-July/002078.html ";

%feature("docstring") CasADi::IpoptUserClass "[INTERNAL] C++ includes:
ipopt_nlp.hpp ";

%feature("docstring")
CasADi::IpoptUserClass::get_list_of_nonlinear_variables "[INTERNAL]
Specify which variables that appear in the Hessian

";

%feature("docstring") CasADi::IpoptUserClass::eval_grad_f "[INTERNAL]
Method to return the gradient of the objective

";

%feature("docstring") CasADi::IpoptUserClass::finalize_metadata "[INTERNAL]
Retrieve information about variables and constraints

";

%feature("docstring") CasADi::IpoptUserClass::~IpoptUserClass "[INTERNAL]
";

%feature("docstring") CasADi::IpoptUserClass::finalize_solution "[INTERNAL]
This method is called when the algorithm is complete so the TNLP can
store/write the solution

";

%feature("docstring") CasADi::IpoptUserClass::get_nlp_info "[INTERNAL]
Method to return some info about the nlp

";

%feature("docstring") CasADi::IpoptUserClass::eval_f "[INTERNAL]  Method to
return the objective value

";

%feature("docstring")
CasADi::IpoptUserClass::get_number_of_nonlinear_variables "[INTERNAL]
Specify the number of variables that appear in the Hessian

";

%feature("docstring") CasADi::IpoptUserClass::eval_jac_g "[INTERNAL]
Method to return: 1) The structure of the jacobian (if \"values\" is NULL)
2) The values of the jacobian (if \"values\" is not NULL)

";

%feature("docstring") CasADi::IpoptUserClass::get_var_con_metadata "[INTERNAL]  Allows setting information about variables and constraints

";

%feature("docstring") CasADi::IpoptUserClass::get_bounds_info "[INTERNAL]
Method to return the bounds for my problem

";

%feature("docstring") CasADi::IpoptUserClass::eval_h "[INTERNAL]  Method to
return: 1) The structure of the hessian of the lagrangian (if \"values\" is
NULL) 2) The values of the hessian of the lagrangian (if \"values\" is not
NULL)

";

%feature("docstring") CasADi::IpoptUserClass::eval_g "[INTERNAL]  Method to
return the constraint residuals

";

%feature("docstring") CasADi::IpoptUserClass::IpoptUserClass "[INTERNAL] ";


// File: classCasADi_1_1JacGInputIOSchemeVector.xml
%feature("docstring") CasADi::JacGInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::JacGInputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::JacGInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
CasADi::JacGInputIOSchemeVector::JacGInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::JacGInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::JacGInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::JacGInputIOSchemeVector "[INTERNAL]  Helper
function for 'JacGInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::JacGInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::JacGInputIOSchemeVector::vector "[INTERNAL]
";


// File: classCasADi_1_1JacGOutputIOSchemeVector.xml
%feature("docstring") CasADi::JacGOutputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::JacGOutputIOSchemeVector "[INTERNAL]  Helper
function for 'JacGOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::JacGOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::JacGOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::JacGOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::JacGOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::JacGOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
CasADi::JacGOutputIOSchemeVector::JacGOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::JacGOutputIOSchemeVector::__len__ "[INTERNAL]
";


// File: classCasADi_1_1KinsolSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::KinsolSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::KinsolSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::KinsolSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::KinsolSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::KinsolSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::KinsolSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::KinsolSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::KinsolSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::KinsolSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::KinsolSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::KinsolSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::KinsolSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::KinsolSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::KinsolSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::KinsolSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::KinsolSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::KinsolSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::KinsolSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::KinsolSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::KinsolSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::KinsolSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::KinsolSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::KinsolSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::KinsolSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::KinsolSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::KinsolSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::KinsolSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::KinsolSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::KinsolSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::KinsolSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::KinsolSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::KinsolSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::KinsolSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::KinsolSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::KinsolSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::KinsolSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::KinsolSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::KinsolSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::KinsolSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::KinsolSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::KinsolSolver::KinsolSolver "

>  CasADi::KinsolSolver::KinsolSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::KinsolSolver::KinsolSolver(const Function &f, const Function &jac=Function(), const LinearSolver &linsol=LinearSolver())
------------------------------------------------------------------------

Create an KINSOL instance.

Parameters:
-----------

f:   Function mapping from (n+1) inputs to 1 output

";

%feature("docstring") CasADi::KinsolSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::KinsolSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::KinsolSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::KinsolSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::KinsolSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::KinsolSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::KinsolSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::KinsolSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::KinsolSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::KinsolSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::KinsolSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::KinsolSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::KinsolSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::KinsolSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::KinsolSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::KinsolSolver::getJac "

Access Jacobian.

";

%feature("docstring") CasADi::KinsolSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::KinsolSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::KinsolSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::KinsolSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::KinsolSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::KinsolSolver::getF "

Access F.

";

%feature("docstring") CasADi::KinsolSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::KinsolSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::KinsolSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::KinsolSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::KinsolSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::KinsolSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::KinsolSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::KinsolSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::KinsolSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::KinsolSolver::getLinsol "

Access linear solver.

";

%feature("docstring") CasADi::KinsolSolver "[INTERNAL]  Kinsol solver
class.

The equation:

F(z, x1, x2, ..., xn) == 0

where d_F/dz is invertable, implicitly defines the equation:

z := G(x1, x2, ..., xn)

F should be an Function mapping from (n+1) inputs to m outputs. The first
output is the residual that should be zero.

ImplicitFunction (G) is an Function mapping from n inputs to m outputs. n
may be zero. The first output is the solved for z.

You can provide an initial guess for z by setting output(0) of
ImplicitFunction. You can provide an initial guess by setting output(0).  A
good initial guess may be needed to avoid errors like \"The linear solver's
setup function failed in an unrecoverable manner.\"

The constraints option expects an integer entry for each variable u:  0 then
no constraint is imposed on ui. 1 then ui will be constrained to be ui >=
0.0. 1 then ui will be constrained to be ui <= 0.0. 2 then ui will be
constrained to be ui > 0.0. 2 then ui will be constrained to be ui < 0.0.

See:   ImplicitFunction for more information

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| abstol       | OT_REAL      | 0.000        | Stopping     | CasADi::Kins |
|              |              |              | criterion    | olInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| constraints  | OT_INTEGERVE | GenericType( | Constrain    | CasADi::Impl |
|              | CTOR         | )            | the          | icitFunction |
|              |              |              | unknowns. 0  | Internal     |
|              |              |              | (default):   |              |
|              |              |              | no           |              |
|              |              |              | constraint   |              |
|              |              |              | on ui, 1: ui |              |
|              |              |              | >= 0.0, -1:  |              |
|              |              |              | ui <= 0.0,   |              |
|              |              |              | 2: ui > 0.0, |              |
|              |              |              | -2: ui <     |              |
|              |              |              | 0.0.         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| disable_inte | OT_BOOLEAN   | false        | Disable      | CasADi::Kins |
| rnal_warning |              |              | KINSOL       | olInternal   |
| s            |              |              | internal     |              |
|              |              |              | warning      |              |
|              |              |              | messages     |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | true         |              | CasADi::Kins |
| an           |              |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| f_scale      | OT_REALVECTO |              |              | CasADi::Kins |
|              | R            |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_inp | OT_INTEGER   | 0            | Index of the | CasADi::Impl |
| ut           |              |              | input that   | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_out | OT_INTEGER   | 0            | Index of the | CasADi::Impl |
| put          |              |              | output that  | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | \"gmres\"      | gmres|bcgsta | CasADi::Kins |
| lver         |              |              | b|tfqmr      | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | User-defined | CasADi::Impl |
| r            | VER          | )            | linear       | icitFunction |
|              |              |              | solver       | Internal     |
|              |              |              | class.       |              |
|              |              |              | Needed for s |              |
|              |              |              | ensitivities |              |
|              |              |              | .            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | CasADi::Impl |
| r_options    | Y            | )            | be passed to | icitFunction |
|              |              |              | the linear   | Internal     |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | \"dense\"      | dense|banded | CasADi::Kins |
| r_type       |              |              | |iterative|u | olInternal   |
|              |              |              | ser_defined  |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   |              |              | CasADi::Kins |
| dth          |              |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| max_iter     | OT_INTEGER   | 0            | Maximum      | CasADi::Kins |
|              |              |              | number of    | olInternal   |
|              |              |              | Newton       |              |
|              |              |              | iterations.  |              |
|              |              |              | Putting 0    |              |
|              |              |              | sets the     |              |
|              |              |              | default      |              |
|              |              |              | value of     |              |
|              |              |              | KinSol.      |              |
+--------------+--------------+--------------+--------------+--------------+
| max_krylov   | OT_INTEGER   | 0            |              | CasADi::Kins |
|              |              |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | CasADi::Kins |
|              |              |              | uts)  (eval_ | olInternal   |
|              |              |              | f|eval_djac) |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pretype      | OT_STRING    | \"none\"       | (none|left|r | CasADi::Kins |
|              |              |              | ight|both)   | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| strategy     | OT_STRING    | \"none\"       | Globalizatio | CasADi::Kins |
|              |              |              | n strategy ( | olInternal   |
|              |              |              | none|linesea |              |
|              |              |              | rch)         |              |
+--------------+--------------+--------------+--------------+--------------+
| u_scale      | OT_REALVECTO |              |              | CasADi::Kins |
|              | R            |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   |              |              | CasADi::Kins |
| dth          |              |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | false        | precondition | CasADi::Kins |
| tioner       |              |              | an iterative | olInternal   |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-----------+--------------------------+
|    Id     |         Used in          |
+===========+==========================+
| eval_djac | CasADi::KinsolInternal   |
+-----------+--------------------------+
| eval_f    | CasADi::KinsolInternal   |
+-----------+--------------------------+
| inputs    | CasADi::FunctionInternal |
+-----------+--------------------------+
| outputs   | CasADi::FunctionInternal |
+-----------+--------------------------+

Diagrams

C++ includes: kinsol_solver.hpp ";

%feature("docstring") CasADi::KinsolSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::KinsolSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::KinsolSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::KinsolSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::KinsolSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::KinsolSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::KinsolSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::KinsolSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::KinsolSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::KinsolSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::KinsolSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::KinsolSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::KinsolSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::KinsolSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::KinsolSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::KinsolSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::KinsolSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::KinsolSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::KinsolSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::KinsolSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::KinsolSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::KinsolSolver::getOption "

get an option value

";

%feature("docstring") CasADi::KinsolSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::KinsolSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::KinsolSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";


// File: classCasADi_1_1KnitroSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::KnitroSolver::inputSchemeEntry " [INTERNAL]  Find the index for a
string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::KnitroSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::KnitroSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::KnitroSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::KnitroSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::KnitroSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::KnitroSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::KnitroSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::KnitroSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::KnitroSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::KnitroSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::KnitroSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::KnitroSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::KnitroSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::KnitroSolver::setStringParam "

Set KNITRO string parameters.

";

%feature("docstring") CasADi::KnitroSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::KnitroSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::KnitroSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::KnitroSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::KnitroSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::KnitroSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::KnitroSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::KnitroSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::KnitroSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::KnitroSolver::getReportConstraints "";

%feature("docstring") CasADi::KnitroSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::KnitroSolver::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") CasADi::KnitroSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::KnitroSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::KnitroSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::KnitroSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::KnitroSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::KnitroSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::KnitroSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::KnitroSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::KnitroSolver::gradF "

Access the objective gradient function>Input scheme: CasADi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") CasADi::KnitroSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::KnitroSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::KnitroSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::KnitroSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::KnitroSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::KnitroSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::KnitroSolver::KnitroSolver "

>  CasADi::KnitroSolver::KnitroSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::KnitroSolver::KnitroSolver(const Function &F, const Function &G)
------------------------------------------------------------------------

[DEPRECATED] Create an NLP solver instance (legacy syntax)

>  CasADi::KnitroSolver::KnitroSolver(const Function &nlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") CasADi::KnitroSolver "[INTERNAL]  Interface to the
Knitro NLP solver.

Solves the following parametric nonlinear program (NLP):min          F(x,p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x,p) <= UBG
p  == P nx: number of decision variables     ng: number of constraints
np: number of parameters

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| BarRule      | OT_INTEGER   | 0            | Barrier Rule | CasADi::Knit |
|              |              |              |              | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| Debug        | OT_INTEGER   | 0            | Debug level  | CasADi::Knit |
|              |              |              |              | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| Delta        | OT_REAL      | 1            | Initial      | CasADi::Knit |
|              |              |              | region       | roInternal   |
|              |              |              | scaling      |              |
|              |              |              | factor       |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasModeTol  | OT_REAL      | 0.000        | Feasible     | CasADi::Knit |
|              |              |              | mode         | roInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasTol      | OT_REAL      | 0.000        | Feasible     | CasADi::Knit |
|              |              |              | tolerance    | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| FeasTolAbs   | OT_REAL      | 1            | Absolute     | CasADi::Knit |
|              |              |              | feasible     | roInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| Feasible     | OT_BOOLEAN   | 0            | Allow        | CasADi::Knit |
|              |              |              | infeasible   | roInternal   |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| GradOpt      | OT_INTEGER   | 1            | Gradient     | CasADi::Knit |
|              |              |              | calculation  | roInternal   |
|              |              |              | method       |              |
+--------------+--------------+--------------+--------------+--------------+
| HessOpt      | OT_INTEGER   | 1            | Hessian      | CasADi::Knit |
|              |              |              | calculation  | roInternal   |
|              |              |              | method       |              |
+--------------+--------------+--------------+--------------+--------------+
| HonorBnds    | OT_BOOLEAN   | 0            | Enforce      | CasADi::Knit |
|              |              |              | bounds       | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| InitPt       | OT_BOOLEAN   | 0            | Use initial  | CasADi::Knit |
|              |              |              | point        | roInternal   |
|              |              |              | strategy     |              |
+--------------+--------------+--------------+--------------+--------------+
| LPSolver     | OT_BOOLEAN   | 0            | Use LPSolver | CasADi::Knit |
|              |              |              |              | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| LmSize       | OT_INTEGER   | 10           | Memory       | CasADi::Knit |
|              |              |              | pairsize     | roInternal   |
|              |              |              | limit        |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxCgIt      | OT_INTEGER   | 0            | Maximum      | CasADi::Knit |
|              |              |              | conjugate    | roInternal   |
|              |              |              | gradient     |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxIt        | OT_INTEGER   | 10000        | Iteration    | CasADi::Knit |
|              |              |              | limit        | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| Mu           | OT_REAL      | 0.100        | Initial      | CasADi::Knit |
|              |              |              | barrier      | roInternal   |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| Multistart   | OT_BOOLEAN   | 0            | Use          | CasADi::Knit |
|              |              |              | multistart   | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| NewPoint     | OT_BOOLEAN   | 0            | Select new-  | CasADi::Knit |
|              |              |              | point        | roInternal   |
|              |              |              | feature      |              |
+--------------+--------------+--------------+--------------+--------------+
| ObjRange     | OT_REAL      | 0.000        | Maximum      | CasADi::Knit |
|              |              |              | objective    | roInternal   |
|              |              |              | value        |              |
+--------------+--------------+--------------+--------------+--------------+
| OptTol       | OT_REAL      | 0.000        | Relative     | CasADi::Knit |
|              |              |              | optimality   | roInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| OptTolAbs    | OT_REAL      | 0            | Absolute     | CasADi::Knit |
|              |              |              | optimality   | roInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| OutLev       | OT_INTEGER   | 2            | Log output   | CasADi::Knit |
|              |              |              | level        | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| Pivot        | OT_REAL      | 0.000        | Initial      | CasADi::Knit |
|              |              |              | pivot        | roInternal   |
|              |              |              | threshold    |              |
+--------------+--------------+--------------+--------------+--------------+
| Scale        | OT_BOOLEAN   | 1            | Perform      | CasADi::Knit |
|              |              |              | scaling      | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| ShiftInit    | OT_BOOLEAN   | 1            | Interior-    | CasADi::Knit |
|              |              |              | point        | roInternal   |
|              |              |              | shifting     |              |
|              |              |              | initial      |              |
|              |              |              | point        |              |
+--------------+--------------+--------------+--------------+--------------+
| Soc          | OT_INTEGER   | 1            | Second order | CasADi::Knit |
|              |              |              | correction   | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| XTol         | OT_REAL      | 0.000        | Relative     | CasADi::Knit |
|              |              |              | solution     | roInternal   |
|              |              |              | change       |              |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| contype      | OT_INTEGERVE |              |              | CasADi::Knit |
|              | CTOR         |              |              | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | CasADi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | objective    | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | constraint   | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| gauss_newton | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option. Use  | olverInterna |
|              |              |              | Gauss Newton | l            |
|              |              |              | Hessian appr |              |
|              |              |              | oximation    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| dient        |              | )            | option.      | olverInterna |
|              |              |              | Generate a   | l            |
|              |              |              | function for |              |
|              |              |              | calculating  |              |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | objective.   |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_hes | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| sian         |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Hessian of   |              |
|              |              |              | the          |              |
|              |              |              | Lagrangian   |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_jac | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| obian        |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Jacobian of  |              |
|              |              |              | the          |              |
|              |              |              | constraints  |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | CasADi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | CasADi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | CasADi::Knit |
|              |              |              | uts)  (eval_ | roInternal   |
|              |              |              | f|eval_g|eva |              |
|              |              |              | l_jac_g|eval |              |
|              |              |              | _grad_f|eval |              |
|              |              |              | _h)          |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option.      | olverInterna |
|              |              |              | Expect F, G, | l            |
|              |              |              | H, J to have |              |
|              |              |              | an           |              |
|              |              |              | additional   |              |
|              |              |              | input        |              |
|              |              |              | argument     |              |
|              |              |              | appended at  |              |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | CasADi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-------------+--------------------------+
|     Id      |         Used in          |
+=============+==========================+
| eval_f      | CasADi::KnitroInternal   |
+-------------+--------------------------+
| eval_g      | CasADi::KnitroInternal   |
+-------------+--------------------------+
| eval_grad_f | CasADi::KnitroInternal   |
+-------------+--------------------------+
| eval_h      | CasADi::KnitroInternal   |
+-------------+--------------------------+
| eval_jac_g  | CasADi::KnitroInternal   |
+-------------+--------------------------+
| inputs      | CasADi::FunctionInternal |
+-------------+--------------------------+
| outputs     | CasADi::FunctionInternal |
+-------------+--------------------------+

Diagrams

C++ includes: knitro_solver.hpp ";

%feature("docstring") CasADi::KnitroSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::KnitroSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::KnitroSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::KnitroSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::KnitroSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::KnitroSolver::nlp "

Access the NLP.

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::KnitroSolver::jacG "

Access the Jacobian of the constraint function.

>Input scheme: CasADi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective. .           |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") CasADi::KnitroSolver::getOption "

get an option value

";

%feature("docstring") CasADi::KnitroSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::KnitroSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::KnitroSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::KnitroSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::KnitroSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::KnitroSolver::setDoubleParam "

Set KNITRO double parameters.

";

%feature("docstring") CasADi::KnitroSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::KnitroSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::KnitroSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::KnitroSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::KnitroSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::KnitroSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::KnitroSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::KnitroSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::KnitroSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::KnitroSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::KnitroSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::KnitroSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::KnitroSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::KnitroSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::KnitroSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::KnitroSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::KnitroSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::KnitroSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::KnitroSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::KnitroSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::KnitroSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::KnitroSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::KnitroSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::KnitroSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::KnitroSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::KnitroSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::KnitroSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::KnitroSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::KnitroSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::KnitroSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::KnitroSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::KnitroSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::KnitroSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::KnitroSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::KnitroSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::KnitroSolver::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: CasADi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: CasADi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") CasADi::KnitroSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::KnitroSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::KnitroSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::KnitroSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::KnitroSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::KnitroSolver::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") CasADi::KnitroSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::KnitroSolver::setIntParam "

Set KNITRO integer parameters.

";

%feature("docstring") CasADi::KnitroSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::KnitroSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::KnitroSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::KnitroSolver::clone "[INTERNAL]  Deep copy.

";


// File: classCasADi_1_1LapackLUDense.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::LapackLUDense::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::LapackLUDense::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::LapackLUDense::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::LapackLUDense::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::LapackLUDense::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::LapackLUDense::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::LapackLUDense::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::LapackLUDense::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::LapackLUDense::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::LapackLUDense::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::LapackLUDense::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::LapackLUDense::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::LapackLUDense::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::LapackLUDense::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::LapackLUDense::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::LapackLUDense::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::LapackLUDense::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::LapackLUDense::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::LapackLUDense::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::LapackLUDense::solve "

>  void CasADi::LinearSolver::solve(bool transpose=false)
------------------------------------------------------------------------

Solve the system of equations, internal vector.

>  void CasADi::LinearSolver::solve(double *x, int nrhs=1, bool transpose=false)
------------------------------------------------------------------------
[INTERNAL] 
 Solve the factorized system of equations.

>  MX CasADi::LinearSolver::solve(const MX &A, const MX &B, bool transpose=false)
------------------------------------------------------------------------

Create a solve node.

>  void CasADi::Function::solve()
------------------------------------------------------------------------

the same as evaluate()

";

%feature("docstring") CasADi::LapackLUDense::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::LapackLUDense::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::LapackLUDense::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::LapackLUDense::evaluate "

Evaluate.

";

%feature("docstring") CasADi::LapackLUDense::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::LapackLUDense::prepared "

Check if prepared.

";

%feature("docstring") CasADi::LapackLUDense::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::LapackLUDense::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::LapackLUDense::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::LapackLUDense::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::LapackLUDense::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::LapackLUDense::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::LapackLUDense::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::LapackLUDense::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::LapackLUDense::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::LapackLUDense::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::LapackLUDense::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::LapackLUDense::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::LapackLUDense::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::LapackLUDense::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::LapackLUDense::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::LapackLUDense::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::LapackLUDense::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::LapackLUDense::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::LapackLUDense::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::LapackLUDense::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::LapackLUDense::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::LapackLUDense::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::LapackLUDense::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::LapackLUDense::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::LapackLUDense::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::LapackLUDense::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::LapackLUDense::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::LapackLUDense::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::LapackLUDense::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::LapackLUDense::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::LapackLUDense::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::LapackLUDense::getOption "

get an option value

";

%feature("docstring") CasADi::LapackLUDense::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::LapackLUDense::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::LapackLUDense::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::LapackLUDense::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::LapackLUDense::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::LapackLUDense::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::LapackLUDense::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::LapackLUDense::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::LapackLUDense::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::LapackLUDense::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::LapackLUDense::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::LapackLUDense::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::LapackLUDense::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::LapackLUDense::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::LapackLUDense::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::LapackLUDense::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::LapackLUDense::LapackLUDense "

>  CasADi::LapackLUDense::LapackLUDense()
------------------------------------------------------------------------

Default (empty) constructor.

>  CasADi::LapackLUDense::LapackLUDense(const Sparsity &sparsity, int nrhs=1)
------------------------------------------------------------------------

Create a linear solver given a sparsity pattern.

";

%feature("docstring") CasADi::LapackLUDense::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::LapackLUDense::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::LapackLUDense::isInit "

Is initialized?

";

%feature("docstring") CasADi::LapackLUDense::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::LapackLUDense::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::LapackLUDense::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::LapackLUDense::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::LapackLUDense::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::LapackLUDense::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::LapackLUDense::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::LapackLUDense "[INTERNAL]  LU LinearSolver
with Lapack Interface.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

LapackLUDense is an CasADi::Function mapping from 2 inputs [ A (matrix),b
(vector)] to one output [x (vector)].

The usual procedure to use LapackLUDense is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

>Input scheme: CasADi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: CasADi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| allow_equili | OT_BOOLEAN   | false        |              | CasADi::Lapa |
| bration_fail |              |              |              | ckLUDenseInt |
| ure          |              |              |              | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| equilibratio | OT_BOOLEAN   | true         |              | CasADi::Lapa |
| n            |              |              |              | ckLUDenseInt |
|              |              |              |              | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: lapack_lu_dense.hpp ";

%feature("docstring") CasADi::LapackLUDense::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::LapackLUDense::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::LapackLUDense::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::LapackLUDense::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::LapackLUDense::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::LapackLUDense::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::LapackLUDense::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::LapackLUDense::prepare "

Factorize the matrix.

";

%feature("docstring") CasADi::LapackLUDense::spSolve "[INTERNAL]  Propagate
sparsity through a linear solve.

";

%feature("docstring") CasADi::LapackLUDense::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::LapackLUDense::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::LapackLUDense::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::LapackLUDense::getOptionDefault "

INTERNAL.

Get the default of a certain option

";


// File: classCasADi_1_1LapackQRDense.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::LapackQRDense::spSolve " [INTERNAL]  Propagate sparsity through a
linear solve.

";

%feature("docstring") CasADi::LapackQRDense::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::LapackQRDense::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::LapackQRDense::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::LapackQRDense::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::LapackQRDense::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::LapackQRDense "[INTERNAL]  QR LinearSolver
with Lapack Interface.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

This class solves the linear system A.x=b by making an QR factorization of
A:  A = Q.R, with Q orthogonal and R upper triangular

LapackQRDense is an CasADi::Function mapping from 2 inputs [ A (matrix),b
(vector)] to one output [x (vector)].

The usual procedure to use LapackQRDense is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

>Input scheme: CasADi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: CasADi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: lapack_qr_dense.hpp ";

%feature("docstring") CasADi::LapackQRDense::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::LapackQRDense::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::LapackQRDense::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::LapackQRDense::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::LapackQRDense::prepare "

Factorize the matrix.

";

%feature("docstring") CasADi::LapackQRDense::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::LapackQRDense::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::LapackQRDense::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::LapackQRDense::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::LapackQRDense::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::LapackQRDense::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::LapackQRDense::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::LapackQRDense::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::LapackQRDense::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::LapackQRDense::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::LapackQRDense::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::LapackQRDense::evaluate "

Evaluate.

";

%feature("docstring") CasADi::LapackQRDense::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::LapackQRDense::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::LapackQRDense::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::LapackQRDense::getOption "

get an option value

";

%feature("docstring") CasADi::LapackQRDense::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::LapackQRDense::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::LapackQRDense::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::LapackQRDense::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::LapackQRDense::prepared "

Check if prepared.

";

%feature("docstring") CasADi::LapackQRDense::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::LapackQRDense::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::LapackQRDense::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::LapackQRDense::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::LapackQRDense::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::LapackQRDense::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::LapackQRDense::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::LapackQRDense::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::LapackQRDense::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::LapackQRDense::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::LapackQRDense::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::LapackQRDense::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::LapackQRDense::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::LapackQRDense::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::LapackQRDense::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::LapackQRDense::solve "

>  void CasADi::LinearSolver::solve(bool transpose=false)
------------------------------------------------------------------------

Solve the system of equations, internal vector.

>  void CasADi::LinearSolver::solve(double *x, int nrhs=1, bool transpose=false)
------------------------------------------------------------------------
[INTERNAL] 
 Solve the factorized system of equations.

>  MX CasADi::LinearSolver::solve(const MX &A, const MX &B, bool transpose=false)
------------------------------------------------------------------------

Create a solve node.

>  void CasADi::Function::solve()
------------------------------------------------------------------------

the same as evaluate()

";

%feature("docstring") CasADi::LapackQRDense::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::LapackQRDense::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::LapackQRDense::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::LapackQRDense::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::LapackQRDense::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::LapackQRDense::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::LapackQRDense::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::LapackQRDense::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::LapackQRDense::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::LapackQRDense::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::LapackQRDense::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::LapackQRDense::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::LapackQRDense::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::LapackQRDense::isInit "

Is initialized?

";

%feature("docstring") CasADi::LapackQRDense::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::LapackQRDense::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::LapackQRDense::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::LapackQRDense::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::LapackQRDense::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::LapackQRDense::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::LapackQRDense::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::LapackQRDense::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::LapackQRDense::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::LapackQRDense::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::LapackQRDense::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::LapackQRDense::LapackQRDense "

>  CasADi::LapackQRDense::LapackQRDense()
------------------------------------------------------------------------

Default (empty) constructor.

>  CasADi::LapackQRDense::LapackQRDense(const Sparsity &sparsity, int nrhs=1)
------------------------------------------------------------------------

Create a linear solver given a sparsity pattern.

";

%feature("docstring") CasADi::LapackQRDense::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::LapackQRDense::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::LapackQRDense::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::LapackQRDense::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::LapackQRDense::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::LapackQRDense::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::LapackQRDense::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::LapackQRDense::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::LapackQRDense::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::LapackQRDense::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::LapackQRDense::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::LapackQRDense::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::LapackQRDense::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::LapackQRDense::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::LapackQRDense::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::LapackQRDense::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::LapackQRDense::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::LapackQRDense::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::LapackQRDense::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::LapackQRDense::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::LapackQRDense::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::LapackQRDense::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::LapackQRDense::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::LapackQRDense::getCount "[INTERNAL]  Get the
reference count.

";


// File: classCasADi_1_1LinearSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::LinearSolver::assignNode " [INTERNAL]  Assign the node to a node
class pointer (or null)

";

%feature("docstring") CasADi::LinearSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::LinearSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::LinearSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::LinearSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::LinearSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::LinearSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::LinearSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::LinearSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::LinearSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::LinearSolver::solve "

>  void CasADi::LinearSolver::solve(bool transpose=false)
------------------------------------------------------------------------

Solve the system of equations, internal vector.

>  void CasADi::LinearSolver::solve(double *x, int nrhs=1, bool transpose=false)
------------------------------------------------------------------------
[INTERNAL] 
 Solve the factorized system of equations.

>  MX CasADi::LinearSolver::solve(const MX &A, const MX &B, bool transpose=false)
------------------------------------------------------------------------

Create a solve node.

>  void CasADi::Function::solve()
------------------------------------------------------------------------

the same as evaluate()

";

%feature("docstring") CasADi::LinearSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::LinearSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::LinearSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::LinearSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::LinearSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::LinearSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::LinearSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::LinearSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::LinearSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::LinearSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::LinearSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::LinearSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::LinearSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::LinearSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::LinearSolver::spSolve "[INTERNAL]  Propagate
sparsity through a linear solve.

";

%feature("docstring") CasADi::LinearSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::LinearSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::LinearSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::LinearSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::LinearSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::LinearSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::LinearSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::LinearSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::LinearSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::LinearSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::LinearSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::LinearSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::LinearSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::LinearSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::LinearSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::LinearSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::LinearSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::LinearSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::LinearSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::LinearSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::LinearSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::LinearSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::LinearSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::LinearSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::LinearSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::LinearSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::LinearSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::LinearSolver::prepared "

Check if prepared.

";

%feature("docstring") CasADi::LinearSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::LinearSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::LinearSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::LinearSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::LinearSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::LinearSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::LinearSolver::LinearSolver "

>  CasADi::LinearSolver::LinearSolver()
------------------------------------------------------------------------
[INTERNAL] 
Default (empty) constructor

>  CasADi::LinearSolver::LinearSolver(const Sparsity &sp, int nrhs=1)
------------------------------------------------------------------------

Create a linear solver given a sparsity pattern (creates a dummy solver
only)

";

%feature("docstring") CasADi::LinearSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::LinearSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::LinearSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::LinearSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::LinearSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::LinearSolver::prepare "

Factorize the matrix.

";

%feature("docstring") CasADi::LinearSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::LinearSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::LinearSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::LinearSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::LinearSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::LinearSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::LinearSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::LinearSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::LinearSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::LinearSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::LinearSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::LinearSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::LinearSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::LinearSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::LinearSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::LinearSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::LinearSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::LinearSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::LinearSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::LinearSolver "[INTERNAL]  Base class for the
linear solver classes.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail. Joel Andersson

>Input scheme: CasADi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: CasADi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: linear_solver.hpp ";

%feature("docstring") CasADi::LinearSolver::getOption "

get an option value

";

%feature("docstring") CasADi::LinearSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::LinearSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::LinearSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::LinearSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::LinearSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::LinearSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::LinearSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::LinearSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::LinearSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::LinearSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::LinearSolver::getOptionDescription "

Get the description of a certain option.

";


// File: classCasADi_1_1LinsolInputIOSchemeVector.xml
%feature("docstring") CasADi::LinsolInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::LinsolInputIOSchemeVector "[INTERNAL]  Helper
function for 'LinsolInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::LinsolInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::LinsolInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::LinsolInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") CasADi::LinsolInputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring")
CasADi::LinsolInputIOSchemeVector::LinsolInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::LinsolInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::LinsolInputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classCasADi_1_1LinsolOutputIOSchemeVector.xml
%feature("docstring") CasADi::LinsolOutputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::LinsolOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") CasADi::LinsolOutputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::LinsolOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
CasADi::LinsolOutputIOSchemeVector::LinsolOutputIOSchemeVector "[INTERNAL]
";

%feature("docstring") CasADi::LinsolOutputIOSchemeVector "[INTERNAL]
Helper function for 'LinsolOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::LinsolOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::LinsolOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::LinsolOutputIOSchemeVector::vector "[INTERNAL] ";


// File: classCasADi_1_1LPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::LPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::LPSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::LPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::LPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::LPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::LPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::LPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::LPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::LPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::LPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::LPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::LPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::LPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::LPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::LPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::LPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::LPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::LPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::LPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::LPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::LPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::LPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::LPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::LPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::LPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::LPSolver::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") CasADi::LPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::LPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::LPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::LPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::LPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::LPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::LPSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::LPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::LPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::LPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::LPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::LPSolver::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::LPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::LPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::LPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::LPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::LPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::LPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::LPSolver::LPSolver "

Default constructor.

";

%feature("docstring") CasADi::LPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::LPSolver::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") CasADi::LPSolver::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") CasADi::LPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::LPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::LPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::LPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::LPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::LPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::LPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::LPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::LPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::LPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::LPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::LPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::LPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::LPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::LPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::LPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::LPSolver::outputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::LPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::LPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::LPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::LPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::LPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::LPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::LPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::LPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::LPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::LPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::LPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::LPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::LPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::LPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::LPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::LPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::LPSolver "[INTERNAL]   LPSolver.

Solves the following linear problem:

min          c' x   x  subject to             LBA <= A x <= UBA LBX <= x
<= UBX                  with x ( n x 1)          c ( n x 1 )          A
sparse matrix ( nc x n)          LBA, UBA dense vector (nc x 1)
LBX, UBX dense vector (n x 1)                  n: number of decision
variables (x)     nc: number of constraints (A)

Joris Gillis

>Input scheme: CasADi::LPSolverInput (LP_SOLVER_NUM_IN = 7) [lpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_C            | c                      | The vector c: dense (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| LP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::LPSolverOutput (LP_SOLVER_NUM_OUT = 5) [lpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| LP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: lp_solver.hpp ";

%feature("docstring") CasADi::LPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::LPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::LPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::LPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::LPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::LPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::LPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::LPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::LPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::LPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::LPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::LPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::LPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::LPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";


// File: classCasADi_1_1LPSolverInputIOSchemeVector.xml
%feature("docstring") CasADi::LPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::LPSolverInputIOSchemeVector::print "[INTERNAL]  Print a destription of the object.

";

%feature("docstring") CasADi::LPSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")
CasADi::LPSolverInputIOSchemeVector::LPSolverInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::LPSolverInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::LPSolverInputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::LPSolverInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::LPSolverInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::LPSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'LPSolverInput'

C++ includes: schemes_helpers.hpp ";


// File: classCasADi_1_1LPSolverOutputIOSchemeVector.xml
%feature("docstring") CasADi::LPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::LPSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'LPSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::LPSolverOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
CasADi::LPSolverOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return
a string with a representation (for SWIG)

";

%feature("docstring") CasADi::LPSolverOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::LPSolverOutputIOSchemeVector::print "[INTERNAL]  Print a destription of the object.

";

%feature("docstring") CasADi::LPSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")
CasADi::LPSolverOutputIOSchemeVector::LPSolverOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::LPSolverOutputIOSchemeVector::vector "[INTERNAL] ";


// File: classCasADi_1_1LPStructIOSchemeVector.xml
%feature("docstring") CasADi::LPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::LPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::LPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::LPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::LPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::LPStructIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::LPStructIOSchemeVector "[INTERNAL]  Helper
function for 'LPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") CasADi::LPStructIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::LPStructIOSchemeVector::LPStructIOSchemeVector
"[INTERNAL] ";


// File: classCasADi_1_1Matrix.xml


/*  Operations from the left  */

/* For Python

*/

/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") CasADi::Matrix::remove " [INTERNAL]  Remove cols or
rows Rremove/delete rows and/or columns of a matrix.

";

%feature("docstring") CasADi::Matrix::matrix_matrix "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") CasADi::Matrix::isVector "

Check if the matrix is a vector (i.e. size2()==1)

";

%feature("docstring") CasADi::Matrix::__rmul__ "";

%feature("docstring") CasADi::Matrix::sinh "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::className "[INTERNAL]  Printing.

";

%feature("docstring") CasADi::Matrix::getArrayBV "[INTERNAL]  Bitwise get
the non-zero elements, array.

";

%feature("docstring") CasADi::Matrix::__ge__ "

No need to have both <= and >=.

";

%feature("docstring") CasADi::Matrix::setZeroBV "[INTERNAL]  Bitwise set,
reinterpreting the data as a bvec_t array

";

%feature("docstring") CasADi::Matrix::indexed_zero_based_assignment "

>  void CasADi::Matrix< T >::indexed_zero_based_assignment(const Matrix< int > &k, const Matrix< DataType > &m)

>  void CasADi::Matrix< T >::indexed_zero_based_assignment(int rr, int cc, const DataType &m)
------------------------------------------------------------------------
[INTERNAL] 
Indexing for interfaced languages get a non-zero

>  void CasADi::Matrix< T >::indexed_zero_based_assignment(int rr, const DataType &m)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Matrix::getBand "[INTERNAL]  Save the result
to the LAPACK banded format see LAPACK documentation kl: The number of
subdiagonals in res ku: The number of superdiagonals in res ldres: The
leading dimension in res res: The number of superdiagonals.

";

%feature("docstring") CasADi::Matrix::printme "[INTERNAL]  Operations
defined in the standard namespace for unambigous access and Numpy
compatibility.

";

%feature("docstring") CasADi::Matrix::sqrt "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::getArray "

>  void CasADi::Matrix< DataType >::getArray(DataType *val, int len, SparsityType sp=SPARSE) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the non-zero elements, array.

>  void CasADi::Matrix< DataType >::getArray(DataType *val) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the non-zero elements, array, sparse and correct length.

";

%feature("docstring") CasADi::Matrix::__sub__ "[INTERNAL]  Elementwise
operations Octave/Python naming.

";

%feature("docstring") CasADi::Matrix::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::Matrix::isIdentity "[INTERNAL]  check if the
matrix is an identity matrix (note that false negative answers are possible)

";

%feature("docstring") CasADi::Matrix::addSub "[INTERNAL]  Add a submatrix
to an existing matrix (TODO: remove memory allocation)

";

%feature("docstring") CasADi::Matrix::arcsin "[INTERNAL]  Operations
defined in the standard namespace for unambigous access and Numpy
compatibility.

";

%feature("docstring") CasADi::Matrix::__rdiv__ "";

%feature("docstring") CasADi::Matrix::enlarge "[INTERNAL]  Enlarge matrix
Make the matrix larger by inserting empty rows and columns, keeping the
existing non-zeros.

";

%feature("docstring") CasADi::Matrix::ceil "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::indexed_one_based_assignment "

>  void CasADi::Matrix< T >::indexed_one_based_assignment(const Matrix< int > &k, const Matrix< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
Indexing for interfaced languages get a non-zero

>  void CasADi::Matrix< T >::indexed_one_based_assignment(int rr, int cc, const DataType &m)
------------------------------------------------------------------------
[INTERNAL] 
set a matrix element

>  void CasADi::Matrix< T >::indexed_one_based_assignment(int rr, const DataType &m)
------------------------------------------------------------------------
[INTERNAL] 
set a vector element

";

%feature("docstring") CasADi::Matrix::size "

>  int CasADi::GenericMatrix< Matrix< DataType >  >::size() const
------------------------------------------------------------------------

Get the number of (structural) non-zero elements.

>  int CasADi::GenericMatrix< Matrix< DataType >  >::size(SparsityType sp) const
------------------------------------------------------------------------

Get the number if non-zeros for a given sparsity pattern.

";

%feature("docstring") CasADi::Matrix::mul "[INTERNAL]  Matrix-matrix
product.

";

%feature("docstring") CasADi::Matrix::isScalar "

Check if the matrix expression is scalar.

";

%feature("docstring") CasADi::Matrix::mul_full "[INTERNAL]  Matrix-matrix
product.

";

%feature("docstring") CasADi::Matrix::sym "

>  static Matrix< DataType >  CasADi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static Matrix< DataType >  CasADi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  static Matrix< DataType >  CasADi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  static std::vector<Matrix< DataType >  > CasADi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<Matrix< DataType >  > CasADi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  static std::vector<std::vector<Matrix< DataType > > > CasADi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<Matrix< DataType > > > CasADi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") CasADi::Matrix::borBV "[INTERNAL]  Bitwise or,
reinterpreting the data as a bvec_t array

";

%feature("docstring") CasADi::Matrix::nz_indexed_one_based_assignment "

>  void CasADi::Matrix< T >::nz_indexed_one_based_assignment(int k, const DataType &m)
------------------------------------------------------------------------
[INTERNAL] 
set a non-zero

>  void CasADi::Matrix< T >::nz_indexed_one_based_assignment(const Matrix< int > &k, const Matrix< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
Indexing for interfaced languages get a non-zero

";

%feature("docstring") CasADi::Matrix::getBV "[INTERNAL]  Bitwise set,
reinterpreting the data as a bvec_t array

";

%feature("docstring") CasADi::Matrix::indexed_one_based "

>  const Matrix<DataType> CasADi::Matrix< T >::indexed_one_based(const Matrix< int > &k) const 
------------------------------------------------------------------------
[INTERNAL] 
Indexing for interfaced languages get a non-zero

>  const Matrix<DataType> CasADi::Matrix< T >::indexed_one_based(int rr, int cc) const 
------------------------------------------------------------------------
[INTERNAL] 
get a matrix element

>  const Matrix<DataType> CasADi::Matrix< T >::indexed_one_based(int rr) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a vector element.

";

%feature("docstring") CasADi::Matrix::sanityCheck "[INTERNAL]  Check if the
dimensions and colind,row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") CasADi::Matrix::__radd__ "";

%feature("docstring") CasADi::Matrix::erfinv "[INTERNAL]  Operations
defined in the standard namespace for unambigous access and Numpy
compatibility.

";

%feature("docstring") CasADi::Matrix::arcsinh "[INTERNAL]  Operations
defined in the standard namespace for unambigous access and Numpy
compatibility.

";

%feature("docstring") CasADi::Matrix::cosh "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::printDense "[INTERNAL]  Printing.

";

%feature("docstring") CasADi::Matrix::begin "

>  iterator CasADi::Matrix< T >::begin()
------------------------------------------------------------------------
[INTERNAL] 
Get iterators to beginning and end.

>  const_iterator CasADi::Matrix< T >::begin() const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Matrix::print "[INTERNAL]  Printing.

";

%feature("docstring") CasADi::Matrix::sparsity "

Const access the sparsity - reference to data member.

";

%feature("docstring") CasADi::Matrix::arctan "[INTERNAL]  Operations
defined in the standard namespace for unambigous access and Numpy
compatibility.

";

%feature("docstring") CasADi::Matrix::nz_indexed "[INTERNAL]  Indexing for
interfaced languages get a non-zero

";

%feature("docstring") CasADi::Matrix::row "[INTERNAL] ";

%feature("docstring") CasADi::Matrix::sin "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::getStridedArray "[INTERNAL]  Get the
non-zero elements, strided array.

Set stride to zero for unstrided acces

";

%feature("docstring") CasADi::Matrix::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") CasADi::Matrix::toScalar "[INTERNAL]  Convert to
scalar type.

";

%feature("docstring") CasADi::Matrix::Matrix "

>  CasADi::Matrix< DataType >::Matrix(int nrow, int ncol)

>  CasADi::Matrix< DataType >::Matrix(int nrow, int ncol, const DataType &val)

>  CasADi::Matrix< DataType >::Matrix(int nrow, int ncol, const std::vector< int > &colind, const std::vector< int > &row, const std::vector< DataType > &d=std::vector< DataType >())
------------------------------------------------------------------------

[DEPRECATED]

>  CasADi::Matrix< DataType >::Matrix(const Sparsity &sparsity, const DataType &val=DataType(0))
------------------------------------------------------------------------
[INTERNAL] 
Sparse matrix with a given sparsity.

>  CasADi::Matrix< DataType >::Matrix()
------------------------------------------------------------------------
[INTERNAL] 
constructors

empty 0-by-0 matrix constructor

>  CasADi::Matrix< DataType >::Matrix(const Matrix< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
Copy constructor.

>  CasADi::Matrix< DataType >::Matrix(const std::vector< std::vector< DataType > > &m)
------------------------------------------------------------------------
[INTERNAL] 
Dense matrix constructor with data given as vector of vectors.

>  CasADi::Matrix< DataType >::Matrix(const Sparsity &sparsity, const std::vector< DataType > &d)
------------------------------------------------------------------------
[INTERNAL] 
Sparse matrix with a given sparsity and non-zero elements.

>  CasADi::Matrix< DataType >::Matrix(double val)
------------------------------------------------------------------------
[INTERNAL] 
This constructor enables implicit type conversion from a numeric type.

>  CasADi::Matrix< DataType >::Matrix(const std::vector< DataType > &x)
------------------------------------------------------------------------
[INTERNAL] 
Construct from a vector.

Thanks to implicit conversion, you can pretend that Matrix(const SXElement&
x); exists. Note: above remark applies only to C++, not python or octave
interfaces

>  CasADi::Matrix< DataType >::Matrix(const std::vector< DataType > &x, int nrow, int ncol)
------------------------------------------------------------------------
[INTERNAL] 
Construct dense matrix from a vector with the elements in column major
ordering.

>  CasADi::Matrix< T >::Matrix(const Matrix< A > &x)
------------------------------------------------------------------------

Create a matrix from a matrix with a different type of matrix entries
(assuming that the scalar conversion is valid)

>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x)
------------------------------------------------------------------------

Create an expression from an stl vector.

>  CasADi::Matrix< T >::Matrix(const std::vector< A > &x, int nrow, int ncol)
------------------------------------------------------------------------

Create a non-vector expression from an stl vector.

";

%feature("docstring") CasADi::Matrix::__div__ "[INTERNAL]  Elementwise
operations Octave/Python naming.

";

%feature("docstring") CasADi::Matrix::__le__ "[INTERNAL]  Elementwise
operations Octave/Python naming.

";

%feature("docstring") CasADi::Matrix::isMinusOne "[INTERNAL]  check if the
matrix is -1 (note that false negative answers are possible)

";

%feature("docstring") CasADi::Matrix::isInteger "[INTERNAL]  Check if the
matrix is integer-valued (note that false negative answers are possible)

";

%feature("docstring") CasADi::Matrix::__constpow__ "[INTERNAL]  Elementwise
operations Octave/Python naming.

";

%feature("docstring") CasADi::Matrix::__eq__ "[INTERNAL]  Elementwise
operations Octave/Python naming.

";

%feature("docstring") CasADi::Matrix::__ne__ "[INTERNAL]  Elementwise
operations Octave/Python naming.

";

%feature("docstring") CasADi::Matrix::triplet "[INTERNAL] ";

%feature("docstring") CasADi::Matrix::sizeD "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") CasADi::Matrix::isRegular "[INTERNAL]  Checks if
expression does not contain NaN or Inf.

";

%feature("docstring") CasADi::Matrix::numel "

Get the number of elements.

";

%feature("docstring") CasADi::Matrix::elem "

>  const DataType & CasADi::Matrix< DataType >::elem(int rr, int cc=0) const 
------------------------------------------------------------------------
[INTERNAL] 
get an element

>  DataType & CasADi::Matrix< DataType >::elem(int rr, int cc=0)
------------------------------------------------------------------------
[INTERNAL] 
get a reference to an element

";

%feature("docstring") CasADi::Matrix::indexed_zero_based "[INTERNAL]
Indexing for interfaced languages get a non-zero

";

%feature("docstring") CasADi::Matrix::setNZ "

>  void CasADi::Matrix< DataType >::setNZ(int k, const Matrix< DataType > &m)

>  void CasADi::Matrix< DataType >::setNZ(const std::vector< int > &k, const Matrix< DataType > &m)

>  void CasADi::Matrix< DataType >::setNZ(const Matrix< int > &k, const Matrix< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
Set a set of nonzeros.

>  void CasADi::Matrix< T >::setNZ(const Slice &k, const Matrix< DataType > &m)
------------------------------------------------------------------------

Set a set of nonzeros.

";

%feature("docstring") CasADi::Matrix::fmin "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::getValue "[INTERNAL]  Get double
value (only if constant)

";

%feature("docstring") CasADi::Matrix::isTril "

Check if the matrix is lower triangular.

";

%feature("docstring") CasADi::Matrix::__rgt__ "";

%feature("docstring") CasADi::Matrix::log10 "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::fmax "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::isTriu "

Check if the matrix is upper triangular.

";

%feature("docstring") CasADi::Matrix::arccos "[INTERNAL]  Operations
defined in the standard namespace for unambigous access and Numpy
compatibility.

";

%feature("docstring") CasADi::Matrix::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") CasADi::Matrix::fabs "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::__gt__ "

No need to have both < and >

";

%feature("docstring") CasADi::Matrix::isSquare "

Check if the matrix expression is square.

";

%feature("docstring") CasADi::Matrix::__rlt__ "";

%feature("docstring") CasADi::Matrix::printVector "[INTERNAL]  Printing.

";

%feature("docstring") CasADi::Matrix::at "

>  const DataType& CasADi::Matrix< T >::at(int k) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a non-zero element.

>  DataType& CasADi::Matrix< T >::at(int k)
------------------------------------------------------------------------
[INTERNAL] 
Access a non-zero element.

";

%feature("docstring") CasADi::Matrix::__mldivide__ "

Matrix division from left.

";

%feature("docstring") CasADi::Matrix::setAll "[INTERNAL]  Set all elements
to a value.

";

%feature("docstring") CasADi::Matrix::isEqual "[INTERNAL]  Check if two
expressions are equal May give false negatives.

Note: does not work when CasadiOptions.setSimplificationOnTheFly(False) was
called

";

%feature("docstring") CasADi::Matrix::tanh "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::trans "[INTERNAL]   Transpose the
matrix.

";

%feature("docstring") CasADi::Matrix::append "[INTERNAL]  Append a matrix
vertically (NOTE: only efficient if vector)

";

%feature("docstring") CasADi::Matrix "[INTERNAL]  Sparse matrix class. SX
and DMatrix are specializations.

General sparse matrix class that is designed with the idea that \"everything
is a matrix\", that is, also scalars and vectors. This philosophy makes it
easy to use and to interface in particularily with Python and Matlab/Octave.
Index starts with 0. Index vec happens as follows: (rr,cc) -> k =
rr+cc*size1() Vectors are column vectors.  The storage format is Compressed
Column Storage (CCS), similar to that used for sparse matrices in Matlab,
but unlike this format, we do allow for elements to be structurally non-zero
but numerically zero. Matrix<DataType> is polymorphic with a
std::vector<DataType> that contain all non- identical-zero elements. The
sparsity can be accessed with Sparsity& sparsity() Joel Andersson

C++ includes: casadi_types.hpp ";

%feature("docstring") CasADi::Matrix::T "[INTERNAL]   Transpose the matrix
(shorthand)

";

%feature("docstring") CasADi::Matrix::getName "[INTERNAL]  Get name (only
if symbolic scalar)

";

%feature("docstring") CasADi::Matrix::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring") CasADi::Matrix::densify "[INTERNAL]  Make the matrix
dense.

";

%feature("docstring") CasADi::Matrix::nz_indexed_zero_based_assignment "[INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring") CasADi::Matrix::sign "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::repr "[INTERNAL]  Printing.

";

%feature("docstring") CasADi::Matrix::__rsub__ "";

%feature("docstring") CasADi::Matrix::erf "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::hasNZ "

Returns true if the matrix has a non-zero at location rr,cc.

";

%feature("docstring") CasADi::Matrix::hasNonStructuralZeros "[INTERNAL]
Check if the matrix has any zero entries which are not structural zeros.

";

%feature("docstring") CasADi::Matrix::arctan2 "[INTERNAL]  Operations
defined in the standard namespace for unambigous access and Numpy
compatibility.

";

%feature("docstring") CasADi::Matrix::printScalar "[INTERNAL]  Printing.

";

%feature("docstring") CasADi::Matrix::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") CasADi::Matrix::nz_indexed_one_based "[INTERNAL]
Indexing for interfaced languages get a non-zero

";

%feature("docstring") CasADi::Matrix::data "

>  std::vector< DataType > & CasADi::Matrix< DataType >::data()
------------------------------------------------------------------------
[INTERNAL] 
Access the non-zero elements.

>  const std::vector< DataType > & CasADi::Matrix< DataType >::data() const 
------------------------------------------------------------------------
[INTERNAL] 
Const access the non-zero elements.

";

%feature("docstring") CasADi::Matrix::logic_and "[INTERNAL]  Operations
defined in the standard namespace for unambigous access and Numpy
compatibility.

";

%feature("docstring") CasADi::Matrix::if_else_zero "[INTERNAL]  Operations
defined in the standard namespace for unambigous access and Numpy
compatibility.

";

%feature("docstring") CasADi::Matrix::sizeL "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") CasADi::Matrix::__pow__ "[INTERNAL]  Elementwise
operations Octave/Python naming.

";

%feature("docstring") CasADi::Matrix::sparse "

create a sparse matrix with all zeros

";

%feature("docstring") CasADi::Matrix::sizeU "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") CasADi::Matrix::clear "[INTERNAL] ";

%feature("docstring") CasADi::Matrix::colind "[INTERNAL] ";

%feature("docstring") CasADi::Matrix::isSymbolicSparse "[INTERNAL]  Check
if symbolic Sparse matrices can return true if all non-zero elements are
symbolic.

";

%feature("docstring") CasADi::Matrix::isEmpty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") CasADi::Matrix::setArrayBV "[INTERNAL]  Bitwise set
the non-zero elements, array.

";

%feature("docstring") CasADi::Matrix::__mpower__ "[INTERNAL]  Elementwise
operations Octave/Python naming.

";

%feature("docstring") CasADi::Matrix::sparsityRef "[INTERNAL]  Access the
sparsity, make a copy if there are multiple references to it.

";

%feature("docstring") CasADi::Matrix::rbegin "[INTERNAL] ";

%feature("docstring") CasADi::Matrix::cos "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::ptr "

>  DataType* CasADi::Matrix< T >::ptr()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the data

>  const DataType* CasADi::Matrix< T >::ptr() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the data.

";

%feature("docstring") CasADi::Matrix::isConstant "[INTERNAL]  Check if the
matrix is constant (note that false negative answers are possible)

";

%feature("docstring") CasADi::Matrix::indexed_assignment "

>  void CasADi::Matrix< T >::indexed_assignment(const Slice &rr, const Slice &cc, const Matrix< DataType > &m)

>  void CasADi::Matrix< T >::indexed_assignment(const IndexList &rr, const IndexList &cc, const Matrix< DataType > &m)

>  void CasADi::Matrix< T >::indexed_assignment(const Slice &rr, const Matrix< int > &cc, const Matrix< DataType > &m)

>  void CasADi::Matrix< T >::indexed_assignment(const Matrix< int > &rr, const Slice &cc, const Matrix< DataType > &m)

>  void CasADi::Matrix< T >::indexed_assignment(const Matrix< int > &rr, const IndexList &cc, const Matrix< DataType > &m)

>  void CasADi::Matrix< T >::indexed_assignment(const IndexList &rr, const Matrix< int > &cc, const Matrix< DataType > &m)

>  void CasADi::Matrix< T >::indexed_assignment(const Matrix< int > &rr, const Matrix< int > &cc, const Matrix< DataType > &m)

>  void CasADi::Matrix< T >::indexed_assignment(const Sparsity &sp, const Matrix< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
Indexing for interfaced languages get a non-zero

>  void CasADi::Matrix< T >::indexed_assignment(const Slice &rr, const Matrix< DataType > &m)

>  void CasADi::Matrix< T >::indexed_assignment(const IndexList &rr, const Matrix< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Matrix::log "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::sub "[INTERNAL]  Get a submatrix.

";

%feature("docstring") CasADi::Matrix::back "[INTERNAL] ";

%feature("docstring") CasADi::Matrix::nz_indexed_assignment "[INTERNAL]
Indexing for interfaced languages get a non-zero

";

%feature("docstring") CasADi::Matrix::printSparse "[INTERNAL]  Printing.

";

%feature("docstring") CasADi::Matrix::erase "[INTERNAL]  Erase a submatrix
Erase rows and/or columns of a matrix.

";

%feature("docstring") CasADi::Matrix::inf "[INTERNAL]  create a matrix with
all inf

";

%feature("docstring") CasADi::Matrix::logic_or "[INTERNAL]  Operations
defined in the standard namespace for unambigous access and Numpy
compatibility.

";

%feature("docstring") CasADi::Matrix::__rge__ "";

%feature("docstring") CasADi::Matrix::getElement "

get an element, do not allocate

";

%feature("docstring") CasADi::Matrix::setArray "

>  void CasADi::Matrix< DataType >::setArray(const DataType *val, int len, SparsityType sp=SPARSE)
------------------------------------------------------------------------
[INTERNAL] 
Set the non-zero elements, array.

>  void CasADi::Matrix< DataType >::setArray(const DataType *val)
------------------------------------------------------------------------
[INTERNAL] 
Set the non-zero elements, array, sparse and correct length.

";

%feature("docstring") CasADi::Matrix::reserve "[INTERNAL] ";

%feature("docstring") CasADi::Matrix::arctanh "[INTERNAL]  Operations
defined in the standard namespace for unambigous access and Numpy
compatibility.

";

%feature("docstring") CasADi::Matrix::__truediv__ "[INTERNAL]  Elementwise
operations Octave/Python naming.

";

%feature("docstring") CasADi::Matrix::matrix_scalar "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") CasADi::Matrix::mul_smart "

Matrix-matrix multiplication. Attempts to identify quick returns on matrix-
level and delegates to MatType::mul_full if no such quick returns are found.

";

%feature("docstring") CasADi::Matrix::setScientific "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") CasADi::Matrix::__mrdivide__ "[INTERNAL]  Elementwise
operations Octave/Python naming.

";

%feature("docstring") CasADi::Matrix::getNZ "

>  const Matrix<DataType> CasADi::Matrix< T >::getNZ(int k) const

>  const Matrix<DataType> CasADi::Matrix< T >::getNZ(const Slice &k) const 
------------------------------------------------------------------------

Get a set of nonzeros.

>  const Matrix< DataType > CasADi::Matrix< DataType >::getNZ(const std::vector< int > &k) const

>  const Matrix< DataType > CasADi::Matrix< DataType >::getNZ(const Matrix< int > &k) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a set of nonzeros.

";

%feature("docstring") CasADi::Matrix::rend "[INTERNAL] ";

%feature("docstring") CasADi::Matrix::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") CasADi::Matrix::resize "[INTERNAL] ";

%feature("docstring") CasADi::Matrix::isOne "[INTERNAL]  check if the
matrix is 1 (note that false negative answers are possible)

";

%feature("docstring") CasADi::Matrix::setBV "[INTERNAL]  Bitwise set,
reinterpreting the data as a bvec_t array

";

%feature("docstring") CasADi::Matrix::set "

>  void CasADi::Matrix< DataType >::set(DataType val, SparsityType sp=SPARSE)
------------------------------------------------------------------------
[INTERNAL] 
Set the non-zero elements, scalar.

>  void CasADi::Matrix< DataType >::set(const std::vector< DataType > &val, SparsityType sp=SPARSE)
------------------------------------------------------------------------
[INTERNAL] 
Set the non-zero elements, vector.

>  void CasADi::Matrix< DataType >::set(const Matrix< DataType > &val, SparsityType sp=SPARSE)
------------------------------------------------------------------------
[INTERNAL] 
Set the non-zero elements, Matrix.

>  void CasADi::Matrix< DataType >::set(const DataType *val, SparsityType sp=SPARSE)
------------------------------------------------------------------------
[INTERNAL] 
Legacy - use setArray instead.

";

%feature("docstring") CasADi::Matrix::setPrecision "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") CasADi::Matrix::isZero "[INTERNAL]  check if the
matrix is 0 (note that false negative answers are possible)

";

%feature("docstring") CasADi::Matrix::exp "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::nz_indexed_zero_based "[INTERNAL]
Indexing for interfaced languages get a non-zero

";

%feature("docstring") CasADi::Matrix::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::Matrix::setZero "[INTERNAL]  Set all elements
to zero.

";

%feature("docstring") CasADi::Matrix::borArrayBV "[INTERNAL]  Bitwise or
the non-zero elements, array.

";

%feature("docstring") CasADi::Matrix::get "

>  void CasADi::Matrix< DataType >::get(DataType &val, SparsityType sp=SPARSE) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the non-zero elements, scalar.

>  void CasADi::Matrix< DataType >::get(std::vector< DataType > &val, SparsityType sp=SPARSE) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the non-zero elements, vector.

>  void CasADi::Matrix< DataType >::get(Matrix< DataType > &val, SparsityType sp=SPARSE) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the non-zero elements, Matrix.

>  void CasADi::Matrix< DataType >::get(DataType *val, SparsityType sp=SPARSE) const 
------------------------------------------------------------------------
[INTERNAL] 
Legacy - use getArray instead.

";

%feature("docstring") CasADi::Matrix::sparsify "[INTERNAL]  Make a matrix
sparse by removing numerical zeros smaller in absolute value than a
specified tolerance.

";

%feature("docstring") CasADi::Matrix::dimString "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring") CasADi::Matrix::__copysign__ "[INTERNAL]  Operations
defined in the standard namespace for unambigous access and Numpy
compatibility.

";

%feature("docstring") CasADi::Matrix::scalar_matrix "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") CasADi::Matrix::__req__ "";

%feature("docstring") CasADi::Matrix::__add__ "[INTERNAL]  Elementwise
operations Octave/Python naming.

";

%feature("docstring") CasADi::Matrix::setSub "[INTERNAL]  Set a submatrix.

";

%feature("docstring") CasADi::Matrix::unary "[INTERNAL]  Create nodes by
their ID.

";

%feature("docstring") CasADi::Matrix::shape "[INTERNAL]  Get the shape.

";

%feature("docstring") CasADi::Matrix::appendColumns "[INTERNAL]  Append a
matrix horizontally.

";

%feature("docstring") CasADi::Matrix::isSymbolic "[INTERNAL]  Check if
symbolic (Dense) Sparse matrices invariable return false.

";

%feature("docstring") CasADi::Matrix::__rne__ "";

%feature("docstring") CasADi::Matrix::__rle__ "";

%feature("docstring") CasADi::Matrix::__mul__ "[INTERNAL]  Elementwise
operations Octave/Python naming.

";

%feature("docstring") CasADi::Matrix::isDense "

Check if the matrix expression is dense.

";

%feature("docstring") CasADi::Matrix::indexed "[INTERNAL]  Indexing for
interfaced languages get a non-zero

";

%feature("docstring") CasADi::Matrix::__lt__ "[INTERNAL]  Elementwise
operations Octave/Python naming.

";

%feature("docstring") CasADi::Matrix::binary "[INTERNAL]  Create nodes by
their ID.

";

%feature("docstring") CasADi::Matrix::arccosh "[INTERNAL]  Operations
defined in the standard namespace for unambigous access and Numpy
compatibility.

";

%feature("docstring") CasADi::Matrix::repmat "[INTERNAL]  create a matrix
by repeating an existing matrix

";

%feature("docstring") CasADi::Matrix::end "[INTERNAL] ";

%feature("docstring") CasADi::Matrix::__rtruediv__ "";

%feature("docstring") CasADi::Matrix::logic_not "[INTERNAL]  Operations
defined in the standard namespace for unambigous access and Numpy
compatibility.

";

%feature("docstring") CasADi::Matrix::floor "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::__nonzero__ "[INTERNAL]  Returns the
truth value of a Matrix.

";

%feature("docstring") CasADi::Matrix::nan "[INTERNAL]  create a matrix with
all nan

";

%feature("docstring") CasADi::Matrix::getSub "[INTERNAL]  Retrieve a
submatrix (TODO: remove memory allocation)

";

%feature("docstring") CasADi::Matrix::setSparse "[INTERNAL]  Set sparse.

";

%feature("docstring") CasADi::Matrix::tan "[INTERNAL]  Operations defined
in the standard namespace for unambigous access and Numpy compatibility.

";

%feature("docstring") CasADi::Matrix::setWidth "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") CasADi::Matrix::front "

>  reference CasADi::Matrix< T >::front()
------------------------------------------------------------------------
[INTERNAL] 
Get references to beginning and end.

>  const_reference CasADi::Matrix< T >::front() const 
------------------------------------------------------------------------
[INTERNAL] 
";


// File: classCasADi_1_1MayerInputIOSchemeVector.xml
%feature("docstring") CasADi::MayerInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
CasADi::MayerInputIOSchemeVector::MayerInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::MayerInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::MayerInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::MayerInputIOSchemeVector "[INTERNAL]  Helper
function for 'MayerInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::MayerInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::MayerInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::MayerInputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::MayerInputIOSchemeVector::__len__ "[INTERNAL]
";


// File: classCasADi_1_1MinusInfSX.xml
%feature("docstring") CasADi::MinusInfSX::mark "[INTERNAL] ";

%feature("docstring") CasADi::MinusInfSX "[INTERNAL]  Represents a minus
infinity SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") CasADi::MinusInfSX::isConstant "[INTERNAL]
Properties.

";

%feature("docstring") CasADi::MinusInfSX::getName "[INTERNAL] ";

%feature("docstring") CasADi::MinusInfSX::MinusInfSX "[INTERNAL] ";

%feature("docstring") CasADi::MinusInfSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::MinusInfSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::MinusInfSX::isOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusInfSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusInfSX::isZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusInfSX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::MinusInfSX::getIntValue "[INTERNAL]  Get
value of a constant node.

";

%feature("docstring") CasADi::MinusInfSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusInfSX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusInfSX::marked "[INTERNAL] ";

%feature("docstring") CasADi::MinusInfSX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") CasADi::MinusInfSX::isMinusInf "[INTERNAL]
Properties.

";

%feature("docstring") CasADi::MinusInfSX::print "[INTERNAL]  print

";

%feature("docstring") CasADi::MinusInfSX::getValue "[INTERNAL]  Get the
value.

";

%feature("docstring") CasADi::MinusInfSX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") CasADi::MinusInfSX::hasDep "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusInfSX::~MinusInfSX "[INTERNAL] ";

%feature("docstring") CasADi::MinusInfSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusInfSX::isInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusInfSX::dep "[INTERNAL]  get the
reference of a child

";

%feature("docstring") CasADi::MinusInfSX::isNan "[INTERNAL]  check
properties of a node

";


// File: classCasADi_1_1MinusOneSX.xml
%feature("docstring") CasADi::MinusOneSX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::MinusOneSX::~MinusOneSX "[INTERNAL] ";

%feature("docstring") CasADi::MinusOneSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusOneSX::isZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusOneSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::MinusOneSX::isInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusOneSX::getIntValue "[INTERNAL]  Get the
value.

";

%feature("docstring") CasADi::MinusOneSX::getName "[INTERNAL] ";

%feature("docstring") CasADi::MinusOneSX::dep "[INTERNAL]  get the
reference of a child

";

%feature("docstring") CasADi::MinusOneSX::isOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusOneSX::hasDep "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusOneSX::MinusOneSX "[INTERNAL] ";

%feature("docstring") CasADi::MinusOneSX::marked "[INTERNAL] ";

%feature("docstring") CasADi::MinusOneSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusOneSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::MinusOneSX::print "[INTERNAL]  print

";

%feature("docstring") CasADi::MinusOneSX::isInteger "[INTERNAL]
Properties.

";

%feature("docstring") CasADi::MinusOneSX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") CasADi::MinusOneSX::mark "[INTERNAL] ";

%feature("docstring") CasADi::MinusOneSX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") CasADi::MinusOneSX::getValue "[INTERNAL]  Get the
value.

";

%feature("docstring") CasADi::MinusOneSX "[INTERNAL]  Represents a minus
one SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") CasADi::MinusOneSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::MinusOneSX::isMinusOne "[INTERNAL]
Properties.

";

%feature("docstring") CasADi::MinusOneSX::isConstant "[INTERNAL]
Properties.

";

%feature("docstring") CasADi::MinusOneSX::isNan "[INTERNAL]  check
properties of a node

";


// File: classCasADi_1_1MultipleOutput.xml
%feature("docstring") CasADi::MultipleOutput::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::MultipleOutput::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") CasADi::MultipleOutput::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") CasADi::MultipleOutput::evaluateMX "

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::MultipleOutput::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::MultipleOutput::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::MultipleOutput::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") CasADi::MultipleOutput::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::MultipleOutput::getSolve "[INTERNAL]   Solve
a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::MultipleOutput::printPart "[INTERNAL]  Print
a part of the expression.

";

%feature("docstring") CasADi::MultipleOutput::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::MultipleOutput::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") CasADi::MultipleOutput::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") CasADi::MultipleOutput::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") CasADi::MultipleOutput::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::MultipleOutput::isUnaryOp "[INTERNAL]  Check
if unary operation.

";

%feature("docstring") CasADi::MultipleOutput::size2 "[INTERNAL] ";

%feature("docstring") CasADi::MultipleOutput::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::MultipleOutput::isInit "[INTERNAL]  Check if
the object has been initialized.

";

%feature("docstring") CasADi::MultipleOutput::size1 "[INTERNAL] ";

%feature("docstring") CasADi::MultipleOutput::shape "[INTERNAL] ";

%feature("docstring") CasADi::MultipleOutput::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") CasADi::MultipleOutput::getBinarySwitch "[INTERNAL]
Get a binary operation operation.

";

%feature("docstring") CasADi::MultipleOutput::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::MultipleOutput::evaluateSX "[INTERNAL]
Evaluate symbolically (SX)

";

%feature("docstring") CasADi::MultipleOutput::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::MultipleOutput::isIdentity "[INTERNAL]  Check
if identity matrix.

";

%feature("docstring") CasADi::MultipleOutput::isNonLinear "[INTERNAL]  Is
the node nonlinear.

";

%feature("docstring") CasADi::MultipleOutput::init "[INTERNAL]  Initialize
the object.

";

%feature("docstring") CasADi::MultipleOutput::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") CasADi::MultipleOutput::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::MultipleOutput::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") CasADi::MultipleOutput::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::MultipleOutput::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::MultipleOutput::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::MultipleOutput::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::MultipleOutput "[INTERNAL]

Joel Andersson

C++ includes: multiple_output.hpp ";

%feature("docstring") CasADi::MultipleOutput::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") CasADi::MultipleOutput::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::MultipleOutput::isEqual "[INTERNAL]  Check if
two nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::MultipleOutput::sparsity "

>  virtual const Sparsity& CasADi::MultipleOutput::sparsity(int oind) const =0
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

";

%feature("docstring") CasADi::MultipleOutput::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::MultipleOutput::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::MultipleOutput::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") CasADi::MultipleOutput::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::MultipleOutput::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::MultipleOutput::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") CasADi::MultipleOutput::~MultipleOutput "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::MultipleOutput::isBinaryOp "[INTERNAL]  Check
if binary operation.

";

%feature("docstring") CasADi::MultipleOutput::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::MultipleOutput::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::MultipleOutput::numInplace "[INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::MultipleOutput::size "[INTERNAL] ";

%feature("docstring") CasADi::MultipleOutput::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") CasADi::MultipleOutput::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") CasADi::MultipleOutput::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") CasADi::MultipleOutput::propagateSparsity "

>  virtual void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::MultipleOutput::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::MultipleOutput::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") CasADi::MultipleOutput::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::MultipleOutput::getNorm2 "[INTERNAL]
Spectran norm.

";

%feature("docstring") CasADi::MultipleOutput::nTmp "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") CasADi::MultipleOutput::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::MultipleOutput::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::MultipleOutput::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") CasADi::MultipleOutput::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") CasADi::MultipleOutput::MultipleOutput "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::MultipleOutput::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::MultipleOutput::isValue "[INTERNAL]  Check if
a certain value.

";

%feature("docstring") CasADi::MultipleOutput::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::MultipleOutput::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::MultipleOutput::setSparsity "[INTERNAL]  Set
the sparsity.

";

%feature("docstring") CasADi::MultipleOutput::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::MultipleOutput::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::MultipleOutput::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") CasADi::MultipleOutput::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::MultipleOutput::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") CasADi::MultipleOutput::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::MultipleOutput::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") CasADi::MultipleOutput::evaluateD "[INTERNAL]
Evaluate numerically.

";

%feature("docstring") CasADi::MultipleOutput::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";


// File: classCasADi_1_1Multiplication.xml
%feature("docstring") CasADi::Multiplication::isUnaryOp "[INTERNAL]  Check
if unary operation.

";

%feature("docstring") CasADi::Multiplication::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::Multiplication::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Multiplication::isIdentity "[INTERNAL]  Check
if identity matrix.

";

%feature("docstring") CasADi::Multiplication::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") CasADi::Multiplication::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::Multiplication::size "[INTERNAL] ";

%feature("docstring") CasADi::Multiplication::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::Multiplication::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") CasADi::Multiplication::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") CasADi::Multiplication::isNonLinear "[INTERNAL]  Is
the node nonlinear.

";

%feature("docstring") CasADi::Multiplication::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") CasADi::Multiplication::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") CasADi::Multiplication::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Multiplication::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Multiplication::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Multiplication::getSolve "[INTERNAL]   Solve
a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Multiplication::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Multiplication::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Multiplication::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") CasADi::Multiplication::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Multiplication::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Multiplication::getNorm2 "[INTERNAL]
Spectran norm.

";

%feature("docstring") CasADi::Multiplication::isValue "[INTERNAL]  Check if
a certain value.

";

%feature("docstring") CasADi::Multiplication::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::Multiplication::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") CasADi::Multiplication::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") CasADi::Multiplication::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") CasADi::Multiplication::setSparsity "[INTERNAL]  Set
the sparsity.

";

%feature("docstring") CasADi::Multiplication::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") CasADi::Multiplication::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") CasADi::Multiplication::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::Multiplication::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") CasADi::Multiplication::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Multiplication::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") CasADi::Multiplication::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") CasADi::Multiplication::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Multiplication::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::Multiplication::shape "[INTERNAL] ";

%feature("docstring") CasADi::Multiplication::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::Multiplication::nTmp "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") CasADi::Multiplication::isBinaryOp "[INTERNAL]  Check
if binary operation.

";

%feature("docstring") CasADi::Multiplication::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") CasADi::Multiplication::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") CasADi::Multiplication::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Multiplication::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") CasADi::Multiplication::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") CasADi::Multiplication::isEqual "[INTERNAL]  Check if
two nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Multiplication::numInplace "[INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Multiplication::init "[INTERNAL]  Initialize
the object.

";

%feature("docstring") CasADi::Multiplication::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::Multiplication::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Multiplication::evaluateMX "

>  void CasADi::Multiplication< TrX, TrY >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Multiplication::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") CasADi::Multiplication::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Multiplication::printPart "[INTERNAL]  Print
a part of the expression.

";

%feature("docstring") CasADi::Multiplication::Multiplication "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::Multiplication::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Multiplication::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Multiplication::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::Multiplication::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Multiplication::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::Multiplication::isInit "[INTERNAL]  Check if
the object has been initialized.

";

%feature("docstring") CasADi::Multiplication::~Multiplication "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::Multiplication::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Multiplication::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::Multiplication::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") CasADi::Multiplication::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Multiplication::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Multiplication::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Multiplication::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Multiplication::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::Multiplication::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") CasADi::Multiplication::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") CasADi::Multiplication::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Multiplication::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::Multiplication::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") CasADi::Multiplication::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Multiplication::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") CasADi::Multiplication "[INTERNAL]  An MX atomic for
matrix-matrix product, note that the first factor must be provided
transposed.

Joel Andersson

C++ includes: multiplication.hpp ";

%feature("docstring") CasADi::Multiplication::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Multiplication::getBinarySwitch "[INTERNAL]
Get a binary operation operation.

";


// File: classCasADi_1_1MX.xml


/*  Operations from the left  */

/* For Python

*/

/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") CasADi::MX::floor " ";

%feature("docstring") CasADi::MX::isBinary "

Is binary operation.

";

%feature("docstring") CasADi::MX::if_else_zero "";

%feature("docstring") CasADi::MX::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::MX::indexed_one_based_assignment "

>  void CasADi::MX::indexed_one_based_assignment(int rr, int cc, const MX &m)
------------------------------------------------------------------------

set a matrix element

";

%feature("docstring") CasADi::MX::addToSum "

Add an expression to the expression if the expression is non-empty,
otherwise assign.

";

%feature("docstring") CasADi::MX::isNorm "

Check if norm.

";

%feature("docstring") CasADi::MX::print "[INTERNAL]  Print a destription of
the object.

";

%feature("docstring") CasADi::MX::sinh "";

%feature("docstring") CasADi::MX::erase "

Erase a submatrix.

";

%feature("docstring") CasADi::MX::__add__ "";

%feature("docstring") CasADi::MX::arctan "";

%feature("docstring") CasADi::MX::isConstant "

Check if constant.

";

%feature("docstring") CasADi::MX::ceil "";

%feature("docstring") CasADi::MX::__hash__ "

Returns a number that is unique for a given MXNode. If the MX does not point
to any node, 0 is returned.

";

%feature("docstring") CasADi::MX::assignNode "[INTERNAL]  Assign the node
to a node class pointer (or null)

";

%feature("docstring") CasADi::MX::getNdeps "

Get the number of dependencies of a binary SXElement.

";

%feature("docstring") CasADi::MX::getTemp "[INTERNAL]  Get the temporary
variable

";

%feature("docstring") CasADi::MX::logic_or "";

%feature("docstring") CasADi::MX::__req__ "";

%feature("docstring") CasADi::MX::cosh "";

%feature("docstring") CasADi::MX::printPtr "[INTERNAL]  Print the pointer
to the internal class

";

%feature("docstring") CasADi::MX::size "

>  int CasADi::GenericMatrix< MX  >::size() const
------------------------------------------------------------------------

Get the number of (structural) non-zero elements.

>  int CasADi::GenericMatrix< MX  >::size(SparsityType sp) const
------------------------------------------------------------------------

Get the number if non-zeros for a given sparsity pattern.

";

%feature("docstring") CasADi::MX::__gt__ "

No need to have both < and >

";

%feature("docstring") CasADi::MX::indexed_assignment "

>  void CasADi::MX::indexed_assignment(const IndexList &rr, const IndexList &cc, const MX &m)

>  void CasADi::MX::indexed_assignment(const Slice &rr, const Slice &cc, const MX &m)

>  void CasADi::MX::indexed_assignment(const Sparsity &sp, const MX &m)

>  void CasADi::MX::indexed_assignment(const Matrix< int > &rr, const Slice &cc, const MX &m)

>  void CasADi::MX::indexed_assignment(const Slice &rr, const Matrix< int > &cc, const MX &m)

>  void CasADi::MX::indexed_assignment(const Matrix< int > &rr, const IndexList &cc, const MX &m)

>  void CasADi::MX::indexed_assignment(const IndexList &rr, const Matrix< int > &cc, const MX &m)

>  void CasADi::MX::indexed_assignment(const Matrix< int > &rr, const Matrix< int > &cc, const MX &m)
------------------------------------------------------------------------

Indexing for interfaced languages.

get a non-zero

";

%feature("docstring") CasADi::MX::checkNode "[INTERNAL]  Assert that the
node is pointing to the right type of object

";

%feature("docstring") CasADi::MX::isSymbolic "

Check if symbolic.

";

%feature("docstring") CasADi::MX::isTril "

Check if the matrix is lower triangular.

";

%feature("docstring") CasADi::MX::shape "[INTERNAL]  Get the shape.

";

%feature("docstring") CasADi::MX::getFunction "

Get function.

";

%feature("docstring") CasADi::MX::mul_full "";

%feature("docstring") CasADi::MX::isEqual "

>  bool CasADi::MX::isEqual(const MX &y, int depth=0) const 
------------------------------------------------------------------------

Check if two nodes are equivalent up to a given depth. Depth=0 checks if the
expressions are identical, i.e. points to the same node.

a = x*x b = x*x

a.isEqual(b,0) will return false, but a.isEqual(b,1) will return true

>  bool CasADi::MX::isEqual(const MXNode *y, int depth=0) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::MX::isZero "

check if zero (note that false negative answers are possible)

";

%feature("docstring") CasADi::MX::log "";

%feature("docstring") CasADi::MX::assertInit "[INTERNAL]  Assert that it is
initialized

";

%feature("docstring") CasADi::MX::at "

>  const MX CasADi::MX::at(int k) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a non-zero element, with bounds checking.

>  NonZeros< MX, int > CasADi::MX::at(int k)
------------------------------------------------------------------------
[INTERNAL] 
Access a non-zero element, with bounds checking.

Access a non-zero element.

";

%feature("docstring") CasADi::MX::inf "

create a matrix with all inf

";

%feature("docstring") CasADi::MX::isSymbolicSparse "

check if all nonzeros are symbolic (this function is currently identical to
isSymbolic)

";

%feature("docstring") CasADi::MX::isTriu "

Check if the matrix is upper triangular.

";

%feature("docstring") CasADi::MX::getMatrixValue "

Get the value (only for constant nodes)

";

%feature("docstring") CasADi::MX::__rlt__ "";

%feature("docstring") CasADi::MX::sqrt "";

%feature("docstring") CasADi::MX::trans "

Transpose the matrix.

";

%feature("docstring") CasADi::MX::tan "";

%feature("docstring") CasADi::MX::indexed_one_based "

>  const MX CasADi::MX::indexed_one_based(int rr, int cc) const 
------------------------------------------------------------------------

get a matrix element

>  const MX CasADi::MX::indexed_one_based(int rr) const 
------------------------------------------------------------------------

Indexing for interfaced languages.

get a non-zero

";

%feature("docstring") CasADi::MX::isMultiplication "

Check if multiplication.

";

%feature("docstring") CasADi::MX::__le__ "";

%feature("docstring") CasADi::MX::sparsityRef "

Access the sparsity, make a copy if there are multiple references to it.

";

%feature("docstring") CasADi::MX::getCount "[INTERNAL]  Get the reference
count.

";

%feature("docstring") CasADi::MX::dimString "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring") CasADi::MX::setTemp "[INTERNAL]  Set the temporary
variable.

";

%feature("docstring") CasADi::MX::__ne__ "";

%feature("docstring") CasADi::MX::assignNodeNoCount "[INTERNAL]  Assign the
node to a node class pointer without reference counting: inproper use will
cause memory leaks!

";

%feature("docstring") CasADi::MX::isUnary "

Is unary operation.

";

%feature("docstring") CasADi::MX::__copysign__ "";

%feature("docstring") CasADi::MX::getOp "

Get operation type.

";

%feature("docstring") CasADi::MX::__pow__ "";

%feature("docstring") CasADi::MX::getEvaluationOutput "

Get the index of evaluation output - only valid when isEvaluationoutput() is
true.

";

%feature("docstring") CasADi::MX::nz_indexed_one_based_assignment "

set a non-zero

";

%feature("docstring") CasADi::MX::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring") CasADi::MX::__mrdivide__ "";

%feature("docstring") CasADi::MX::indexed "

Indexing for interfaced languages.

get a non-zero

";

%feature("docstring") CasADi::MX::nz_indexed_zero_based_assignment "

Indexing for interfaced languages.

get a non-zero

";

%feature("docstring") CasADi::MX::__ge__ "

No need to have both <= and >=.

";

%feature("docstring") CasADi::MX::isOperation "

Is it a certain operation.

";

%feature("docstring") CasADi::MX::isEvaluationOutput "

Check if evaluation output.

";

%feature("docstring") CasADi::MX::__rmul__ "";

%feature("docstring") CasADi::MX "[INTERNAL]   MX - Matrix expression.

The MX class is used to build up trees made up from MXNodes. It is a more
general graph representation than the scalar expression, SX, and much less
efficient for small objects. On the other hand, the class allows much more
general operations than does SX, in particular matrix valued operations and
calls to arbitrary differentiable functions.

The MX class is designed to have identical syntax with the Matrix<> template
class, and uses Matrix<double> as its internal representation of the values
at a node. By keeping the syntaxes identical, it is possible to switch from
one class to the other, as well as inlining MX functions to SXElement
functions.

Note that an operation is always \"lazy\", making a matrix multiplication
will create a matrix multiplication node, not perform the actual
multiplication.

Joel Andersson

C++ includes: mx.hpp ";

%feature("docstring") CasADi::MX::__rdiv__ "";

%feature("docstring") CasADi::MX::printme "";

%feature("docstring") CasADi::MX::sparse "

create a sparse matrix with all zeros

";

%feature("docstring") CasADi::MX::nan "

create a matrix with all nan

";

%feature("docstring") CasADi::MX::setSparse "

Set sparse.

";

%feature("docstring") CasADi::MX::densify "

Make the matrix dense.

";

%feature("docstring") CasADi::MX::__mul__ "";

%feature("docstring") CasADi::MX::erf "";

%feature("docstring") CasADi::MX::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::MX::fmax "";

%feature("docstring") CasADi::MX::arcsinh "";

%feature("docstring") CasADi::MX::fmin "";

%feature("docstring") CasADi::MX::sparsity "

Get the sparsity pattern.

";

%feature("docstring") CasADi::MX::__lt__ "";

%feature("docstring") CasADi::MX::appendColumns "

Append a matrix horizontally.

";

%feature("docstring") CasADi::MX::constpow "";

%feature("docstring") CasADi::MX::numel "

Get the number of elements.

";

%feature("docstring") CasADi::MX::__rgt__ "";

%feature("docstring") CasADi::MX::getNZ "[INTERNAL] ";

%feature("docstring") CasADi::MX::sym "

>  static MX  CasADi::GenericMatrix< MX  >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static MX  CasADi::GenericMatrix< MX  >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  static MX  CasADi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  static std::vector<MX  > CasADi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<MX  > CasADi::GenericMatrix< MX  >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  static std::vector<std::vector<MX > > CasADi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<MX > > CasADi::GenericMatrix< MX  >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") CasADi::MX::__truediv__ "";

%feature("docstring") CasADi::MX::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::MX::T "[INTERNAL]   Transpose the matrix
(shorthand)

";

%feature("docstring") CasADi::MX::isInit "

Is initialized?

";

%feature("docstring") CasADi::MX::indexed_zero_based_assignment "

>  void CasADi::MX::indexed_zero_based_assignment(int rr, int cc, const MX &m)

>  void CasADi::MX::indexed_zero_based_assignment(const Matrix< int > &k, const MX &m)
------------------------------------------------------------------------

Indexing for interfaced languages.

get a non-zero

";

%feature("docstring") CasADi::MX::arcsin "";

%feature("docstring") CasADi::MX::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::MX::isTranspose "

Is the expression a transpose?

";

%feature("docstring") CasADi::MX::nz_indexed "

Indexing for interfaced languages.

get a non-zero

";

%feature("docstring") CasADi::MX::sub "[INTERNAL] ";

%feature("docstring") CasADi::MX::isIdentity "

check if identity

";

%feature("docstring") CasADi::MX::logic_not "";

%feature("docstring") CasADi::MX::__mldivide__ "

Matrix division from left.

";

%feature("docstring") CasADi::MX::mul "";

%feature("docstring") CasADi::MX::isCommutative "

Check if commutative operation.

";

%feature("docstring") CasADi::MX::sin "";

%feature("docstring") CasADi::MX::cos "";

%feature("docstring") CasADi::MX::isEvaluation "

Check if evaluation.

";

%feature("docstring") CasADi::MX::nz_indexed_one_based "

Indexing for interfaced languages.

get a non-zero

";

%feature("docstring") CasADi::MX::append "

Append a matrix vertically (NOTE: only efficient if vector)

";

%feature("docstring") CasADi::MX::erfinv "";

%feature("docstring") CasADi::MX::getDep "

Get the nth dependency as MX.

";

%feature("docstring") CasADi::MX::exp "";

%feature("docstring") CasADi::MX::__rle__ "";

%feature("docstring") CasADi::MX::MX "

>  CasADi::MX::MX(const std::string &name, int nrow=1, int ncol=1)

>  CasADi::MX::MX(const std::string &name, const std::pair< int, int > &rc)

>  CasADi::MX::MX(const std::string &name, const Sparsity &sp)

>  CasADi::MX::MX(int nrow, int ncol)

>  CasADi::MX::MX(int nrow, int ncol, const MX &val)
------------------------------------------------------------------------

[DEPRECATED]

>  CasADi::MX::MX(const Sparsity &sp, int val=0)

>  CasADi::MX::MX(const Sparsity &sp, double val)

>  CasADi::MX::MX(const Sparsity &sp, const MX &val)
------------------------------------------------------------------------

Construct constant matrix with a given sparsity.

>  CasADi::MX::MX()
------------------------------------------------------------------------

Default constructor.

>  CasADi::MX::MX(double x)
------------------------------------------------------------------------

Create scalar constant (also implicit type conversion)

>  CasADi::MX::MX(const MX &x)
------------------------------------------------------------------------

Copy constructor.

>  CasADi::MX::MX(const std::vector< double > &x)
------------------------------------------------------------------------

Create vector constant (also implicit type conversion)

>  CasADi::MX::MX(const Matrix< double > &x)
------------------------------------------------------------------------

Create sparse matrix constant (also implicit type conversion)

";

%feature("docstring") CasADi::MX::isScalar "

Check if the matrix expression is scalar.

";

%feature("docstring") CasADi::MX::__rsub__ "";

%feature("docstring") CasADi::MX::getNumOutputs "

Number of outputs.

";

%feature("docstring") CasADi::MX::indexed_zero_based "

Indexing for interfaced languages.

get a non-zero

";

%feature("docstring") CasADi::MX::setSub "[INTERNAL] ";

%feature("docstring") CasADi::MX::isMinusOne "

check if zero (note that false negative answers are possible)

";

%feature("docstring") CasADi::MX::getValue "

Get the value (only for scalar constant nodes)

";

%feature("docstring") CasADi::MX::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") CasADi::MX::repmat "

create a matrix by repeating an existing matrix

";

%feature("docstring") CasADi::MX::mapping "

Get an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::MX::__div__ "";

%feature("docstring") CasADi::MX::arccosh "";

%feature("docstring") CasADi::MX::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::MX::nz_indexed_assignment "

Indexing for interfaced languages.

get a non-zero

";

%feature("docstring") CasADi::MX::attachAssert "

returns itself, but with an assertion attached

If y does not evaluate to 1, a runtime error is raised

";

%feature("docstring") CasADi::MX::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::MX::isDense "

Check if the matrix expression is dense.

";

%feature("docstring") CasADi::MX::inner_prod "";

%feature("docstring") CasADi::MX::setNZ "[INTERNAL] ";

%feature("docstring") CasADi::MX::__rne__ "";

%feature("docstring") CasADi::MX::isOne "

check if zero (note that false negative answers are possible)

";

%feature("docstring") CasADi::MX::binary "

Create nodes by their ID.

";

%feature("docstring") CasADi::MX::sizeU "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") CasADi::MX::repr "[INTERNAL]  Print a representation
of the object.

";

%feature("docstring") CasADi::MX::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") CasADi::MX::arccos "";

%feature("docstring") CasADi::MX::log10 "";

%feature("docstring") CasADi::MX::__rge__ "";

%feature("docstring") CasADi::MX::tanh "";

%feature("docstring") CasADi::MX::arctanh "";

%feature("docstring") CasADi::MX::isVector "

Check if the matrix is a vector (i.e. size2()==1)

";

%feature("docstring") CasADi::MX::unary "

Create nodes by their ID.

";

%feature("docstring") CasADi::MX::__nonzero__ "

Returns the truth value of an MX expression.

";

%feature("docstring") CasADi::MX::~MX "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::MX::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") CasADi::MX::lift "

Lift an expression.

";

%feature("docstring") CasADi::MX::isRegular "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring") CasADi::MX::getName "

Get the name.

";

%feature("docstring") CasADi::MX::sign "";

%feature("docstring") CasADi::MX::__constpow__ "";

%feature("docstring") CasADi::MX::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") CasADi::MX::isSquare "

Check if the matrix expression is square.

";

%feature("docstring") CasADi::MX::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::MX::__radd__ "";

%feature("docstring") CasADi::MX::fabs "";

%feature("docstring") CasADi::MX::__rtruediv__ "";

%feature("docstring") CasADi::MX::arctan2 "";

%feature("docstring") CasADi::MX::logic_and "";

%feature("docstring") CasADi::MX::isEmpty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") CasADi::MX::__eq__ "";

%feature("docstring") CasADi::MX::__sub__ "";

%feature("docstring") CasADi::MX::weak "[INTERNAL]  Get a weak reference to
the object.

";

%feature("docstring") CasADi::MX::mul_smart "

Matrix-matrix multiplication. Attempts to identify quick returns on matrix-
level and delegates to MatType::mul_full if no such quick returns are found.

";

%feature("docstring") CasADi::MX::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring") CasADi::MX::outer_prod "";

%feature("docstring") CasADi::MX::getOutput "

Get an output.

";

%feature("docstring") CasADi::MX::__mpower__ "";

%feature("docstring") CasADi::MX::sizeL "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") CasADi::MX::sizeD "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") CasADi::MX::nz_indexed_zero_based "

Indexing for interfaced languages.

get a non-zero

";


// File: structCasADi_1_1MXAlgEl.xml
%feature("docstring") CasADi::MXAlgEl "[INTERNAL]  An elemenent of the
algorithm, namely an MX node.

C++ includes: mx_function.hpp ";


// File: classCasADi_1_1MXFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::MXFunction::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::MXFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::MXFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::MXFunction::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::MXFunction::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::MXFunction::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::MXFunction::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::MXFunction::getAlgorithmSize "

Get the number of atomic operations.

";

%feature("docstring") CasADi::MXFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::MXFunction::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::MXFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::MXFunction::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::MXFunction::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::MXFunction::MXFunction "

>  CasADi::MXFunction::MXFunction()
------------------------------------------------------------------------

Default constructor.

>  CasADi::MXFunction::MXFunction(const Function &function)
------------------------------------------------------------------------

Attempt to form an MXFunction out of an Function.

>  CasADi::MXFunction::MXFunction(const MX &input, const MX &output)
------------------------------------------------------------------------
[INTERNAL] 
Single input, single output.

>  CasADi::MXFunction::MXFunction(const MX &input, const std::vector< MX > &output)
------------------------------------------------------------------------
[INTERNAL] 
Single input, multiple output.

>  CasADi::MXFunction::MXFunction(const std::vector< MX > &input, const MX &output)
------------------------------------------------------------------------
[INTERNAL] 
Multiple input, single output.

>  CasADi::MXFunction::MXFunction(const std::vector< MX > &input, const std::vector< MX > &output)

>  CasADi::MXFunction::MXFunction(const std::vector< MX > &input, const IOSchemeVector< MX > &output)

>  CasADi::MXFunction::MXFunction(const IOSchemeVector< MX > &input, const std::vector< MX > &output)

>  CasADi::MXFunction::MXFunction(const IOSchemeVector< MX > &input, const IOSchemeVector< MX > &output)
------------------------------------------------------------------------

Multiple input, multiple output.

";

%feature("docstring") CasADi::MXFunction::jac "

Jacobian via source code transformation.

";

%feature("docstring") CasADi::MXFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::MXFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::MXFunction::tang "

Tangent via source code transformation.

";

%feature("docstring") CasADi::MXFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::MXFunction::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::MXFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::MXFunction::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::MXFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::MXFunction::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::MXFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::MXFunction::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::MXFunction::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::MXFunction::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::MXFunction::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::MXFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::MXFunction "[INTERNAL]  General function
mapping from/to MX.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: mx_function.hpp ";

%feature("docstring") CasADi::MXFunction::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::MXFunction::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::MXFunction::getWorkSize "

Get the length of the work vector.

";

%feature("docstring") CasADi::MXFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::MXFunction::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::MXFunction::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::MXFunction::expand "

Expand the matrix valued graph into a scalar valued graph.

";

%feature("docstring") CasADi::MXFunction::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::MXFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::MXFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::MXFunction::getFree "

Get all the free variables of the function.

";

%feature("docstring") CasADi::MXFunction::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::MXFunction::solve "

the same as evaluate()

";

%feature("docstring") CasADi::MXFunction::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::MXFunction::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::MXFunction::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::MXFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::MXFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::MXFunction::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::MXFunction::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::MXFunction::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::MXFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::MXFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::MXFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::MXFunction::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::MXFunction::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::MXFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::MXFunction::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::MXFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::MXFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::MXFunction::generateLiftingFunctions "[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") CasADi::MXFunction::countNodes "

Number of nodes in the algorithm.

";

%feature("docstring") CasADi::MXFunction::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::MXFunction::getOption "

get an option value

";

%feature("docstring") CasADi::MXFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::MXFunction::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::MXFunction::outputExpr "

>  const MX & CasADi::MXFunction::outputExpr(int ind) const 
------------------------------------------------------------------------

Get function output.

>  const std::vector< MX > & CasADi::MXFunction::outputExpr() const 
------------------------------------------------------------------------

Get all function outputs.

";

%feature("docstring") CasADi::MXFunction::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::MXFunction::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::MXFunction::grad "

Gradient via source code transformation.

";

%feature("docstring") CasADi::MXFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::MXFunction::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::MXFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::MXFunction::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::MXFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::MXFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::MXFunction::evaluate "

Evaluate.

";

%feature("docstring") CasADi::MXFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::MXFunction::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::MXFunction::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::MXFunction::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::MXFunction::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::MXFunction::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::MXFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::MXFunction::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::MXFunction::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::MXFunction::inputExpr "

>  const MX & CasADi::MXFunction::inputExpr(int ind) const 
------------------------------------------------------------------------

Get function input.

>  const std::vector< MX > & CasADi::MXFunction::inputExpr() const 
------------------------------------------------------------------------

Get all function inputs.

";

%feature("docstring") CasADi::MXFunction::algorithm "[INTERNAL]  Access the
algorithm directly.

";

%feature("docstring") CasADi::MXFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::MXFunction::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::MXFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::MXFunction::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::MXFunction::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::MXFunction::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::MXFunction::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::MXFunction::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::MXFunction::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::MXFunction::isInit "

Is initialized?

";

%feature("docstring") CasADi::MXFunction::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::MXFunction::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::MXFunction::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::MXFunction::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::MXFunction::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::MXFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::MXFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::MXFunction::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::MXFunction::getRepresentation "

Return a string with a representation (for SWIG)

";


// File: classCasADi_1_1MXNode.xml
%feature("docstring") CasADi::MXNode::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::MXNode::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::MXNode::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::MXNode::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::MXNode::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::MXNode::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::MXNode::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") CasADi::MXNode::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::MXNode::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::MXNode::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::MXNode::evaluateMX "

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::MXNode::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::MXNode::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::MXNode::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::MXNode::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") CasADi::MXNode::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::MXNode::shape "[INTERNAL] ";

%feature("docstring") CasADi::MXNode::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::MXNode::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::MXNode "[INTERNAL]  Node class for MX
objects.

Joel Andersson

C++ includes: mx_node.hpp ";

%feature("docstring") CasADi::MXNode::printPart "[INTERNAL]  Print a part
of the expression.

";

%feature("docstring") CasADi::MXNode::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::MXNode::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::MXNode::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::MXNode::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") CasADi::MXNode::size2 "[INTERNAL] ";

%feature("docstring") CasADi::MXNode::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::MXNode::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") CasADi::MXNode::size1 "[INTERNAL] ";

%feature("docstring") CasADi::MXNode::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::MXNode::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::MXNode::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::MXNode::MXNode "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::MXNode::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") CasADi::MXNode::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::MXNode::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::MXNode::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::MXNode::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::MXNode::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::MXNode::propagateSparsity "

>  virtual void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::MXNode::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::MXNode::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") CasADi::MXNode::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::MXNode::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::MXNode::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::MXNode::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::MXNode::~MXNode "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::MXNode::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::MXNode::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") CasADi::MXNode::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::MXNode::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") CasADi::MXNode::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::MXNode::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::MXNode::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::MXNode::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::MXNode::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::MXNode::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") CasADi::MXNode::size "[INTERNAL] ";

%feature("docstring") CasADi::MXNode::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::MXNode::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::MXNode::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::MXNode::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::MXNode::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") CasADi::MXNode::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::MXNode::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::MXNode::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") CasADi::MXNode::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::MXNode::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::MXNode::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::MXNode::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::MXNode::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::MXNode::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") CasADi::MXNode::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::MXNode::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::MXNode::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::MXNode::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") CasADi::MXNode::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::MXNode::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::MXNode::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::MXNode::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::MXNode::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";


// File: structCasADi_1_1mysortclass.xml
%feature("docstring") CasADi::mysortclass "[INTERNAL]  A helper class to
use stl::sort in OptionsFunctionalityNode::getBestMatches

";


// File: classCasADi_1_1NanSX.xml
%feature("docstring") CasADi::NanSX::NanSX "[INTERNAL] ";

%feature("docstring") CasADi::NanSX::init "[INTERNAL]  Initialize the node
(currently used only to give a similar interface to MXNode)

";

%feature("docstring") CasADi::NanSX::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") CasADi::NanSX::isZero "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::NanSX "[INTERNAL]  Represents a not-a-number
SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") CasADi::NanSX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::NanSX::isSmooth "[INTERNAL]  Check if smooth.

";

%feature("docstring") CasADi::NanSX::mark "[INTERNAL] ";

%feature("docstring") CasADi::NanSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::NanSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::NanSX::dep "[INTERNAL]  get the reference of
a child

";

%feature("docstring") CasADi::NanSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::NanSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::NanSX::isInf "[INTERNAL]  check properties of
a node

";

%feature("docstring") CasADi::NanSX::getValue "[INTERNAL]  Get the value.

";

%feature("docstring") CasADi::NanSX::hasDep "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::NanSX::getIntValue "[INTERNAL]  Get value of
a constant node.

";

%feature("docstring") CasADi::NanSX::marked "[INTERNAL] ";

%feature("docstring") CasADi::NanSX::isNan "[INTERNAL]  Properties.

";

%feature("docstring") CasADi::NanSX::isConstant "[INTERNAL]  Properties.

";

%feature("docstring") CasADi::NanSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::NanSX::getName "[INTERNAL] ";

%feature("docstring") CasADi::NanSX::~NanSX "[INTERNAL] ";

%feature("docstring") CasADi::NanSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::NanSX::print "[INTERNAL]  print

";

%feature("docstring") CasADi::NanSX::isOne "[INTERNAL]  check properties of
a node

";


// File: classCasADi_1_1NewtonImplicitSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::NewtonImplicitSolver::schemeEntry " [INTERNAL]  Find the index for a
string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::NewtonImplicitSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::NewtonImplicitSolver::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") CasADi::NewtonImplicitSolver::input_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::NewtonImplicitSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::NewtonImplicitSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::NewtonImplicitSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::NewtonImplicitSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::NewtonImplicitSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::NewtonImplicitSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::NewtonImplicitSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::NewtonImplicitSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::NewtonImplicitSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::NewtonImplicitSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::NewtonImplicitSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::NewtonImplicitSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::NewtonImplicitSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::NewtonImplicitSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::NewtonImplicitSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::NewtonImplicitSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::NewtonImplicitSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::NewtonImplicitSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::NewtonImplicitSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::NewtonImplicitSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::NewtonImplicitSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getOption "

get an option value

";

%feature("docstring") CasADi::NewtonImplicitSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::NewtonImplicitSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::NewtonImplicitSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::NewtonImplicitSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::NewtonImplicitSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::NewtonImplicitSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::NewtonImplicitSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::NewtonImplicitSolver::getJac "

Access Jacobian.

";

%feature("docstring") CasADi::NewtonImplicitSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::NewtonImplicitSolver::getLinsol "

Access linear solver.

";

%feature("docstring") CasADi::NewtonImplicitSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::NewtonImplicitSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::NewtonImplicitSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::NewtonImplicitSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::NewtonImplicitSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::NewtonImplicitSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::NewtonImplicitSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::NewtonImplicitSolver::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") CasADi::NewtonImplicitSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::NewtonImplicitSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::NewtonImplicitSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::NewtonImplicitSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::NewtonImplicitSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getF "

Access F.

";

%feature("docstring") CasADi::NewtonImplicitSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::NewtonImplicitSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::NewtonImplicitSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::NewtonImplicitSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::NewtonImplicitSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::NewtonImplicitSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::NewtonImplicitSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::NewtonImplicitSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::NewtonImplicitSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::NewtonImplicitSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::NewtonImplicitSolver::spInit "[INTERNAL]
Reset the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::NewtonImplicitSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::NewtonImplicitSolver::spCanEvaluate "[INTERNAL]  Is the class able to propate seeds through the algorithm? (for
usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::NewtonImplicitSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::NewtonImplicitSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::NewtonImplicitSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::NewtonImplicitSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::NewtonImplicitSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::NewtonImplicitSolver::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::NewtonImplicitSolver::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") CasADi::NewtonImplicitSolver "[INTERNAL]  Implements
simple newton iterations to solve an implicit function.

The equation:

F(z, x1, x2, ..., xn) == 0

where d_F/dz is invertable, implicitly defines the equation:

z := G(x1, x2, ..., xn)

F should be an Function mapping from (n+1) inputs to m outputs. The first
output is the residual that should be zero.

ImplicitFunction (G) is an Function mapping from n inputs to m outputs. n
may be zero. The first output is the solved for z.

You can provide an initial guess for z by setting output(0) of
ImplicitFunction.

Joris Gillis

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| abstol       | OT_REAL      | 0.000        | Stopping     | CasADi::Newt |
|              |              |              | criterion    | onImplicitIn |
|              |              |              | tolerance on | ternal       |
|              |              |              | max(|F|)     |              |
+--------------+--------------+--------------+--------------+--------------+
| abstolStep   | OT_REAL      | 0.000        | Stopping     | CasADi::Newt |
|              |              |              | criterion    | onImplicitIn |
|              |              |              | tolerance on | ternal       |
|              |              |              | step size    |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| constraints  | OT_INTEGERVE | GenericType( | Constrain    | CasADi::Impl |
|              | CTOR         | )            | the          | icitFunction |
|              |              |              | unknowns. 0  | Internal     |
|              |              |              | (default):   |              |
|              |              |              | no           |              |
|              |              |              | constraint   |              |
|              |              |              | on ui, 1: ui |              |
|              |              |              | >= 0.0, -1:  |              |
|              |              |              | ui <= 0.0,   |              |
|              |              |              | 2: ui > 0.0, |              |
|              |              |              | -2: ui <     |              |
|              |              |              | 0.0.         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_inp | OT_INTEGER   | 0            | Index of the | CasADi::Impl |
| ut           |              |              | input that   | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_out | OT_INTEGER   | 0            | Index of the | CasADi::Impl |
| put          |              |              | output that  | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | User-defined | CasADi::Impl |
| r            | VER          | )            | linear       | icitFunction |
|              |              |              | solver       | Internal     |
|              |              |              | class.       |              |
|              |              |              | Needed for s |              |
|              |              |              | ensitivities |              |
|              |              |              | .            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | CasADi::Impl |
| r_options    | Y            | )            | be passed to | icitFunction |
|              |              |              | the linear   | Internal     |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter     | OT_INTEGER   | 1000         | Maximum      | CasADi::Newt |
|              |              |              | number of    | onImplicitIn |
|              |              |              | Newton       | ternal       |
|              |              |              | iterations   |              |
|              |              |              | to perform   |              |
|              |              |              | before       |              |
|              |              |              | returning.   |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | CasADi::Newt |
|              |              |              | uts)  (step| | onImplicitIn |
|              |              |              | stepsize|J|F | ternal       |
|              |              |              | |normF)      |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+----------+--------------------------------+
|    Id    |            Used in             |
+==========+================================+
| F        | CasADi::NewtonImplicitInternal |
+----------+--------------------------------+
| J        | CasADi::NewtonImplicitInternal |
+----------+--------------------------------+
| inputs   | CasADi::FunctionInternal       |
+----------+--------------------------------+
| normF    | CasADi::NewtonImplicitInternal |
+----------+--------------------------------+
| outputs  | CasADi::FunctionInternal       |
+----------+--------------------------------+
| step     | CasADi::NewtonImplicitInternal |
+----------+--------------------------------+
| stepsize | CasADi::NewtonImplicitInternal |
+----------+--------------------------------+

>List of available stats
+---------------+--------------------------------+
|      Id       |            Used in             |
+===============+================================+
| iter          | CasADi::NewtonImplicitInternal |
+---------------+--------------------------------+
| return_status | CasADi::NewtonImplicitInternal |
+---------------+--------------------------------+

Diagrams

C++ includes: newton_implicit_solver.hpp ";

%feature("docstring") CasADi::NewtonImplicitSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::NewtonImplicitSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::NewtonImplicitSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::NewtonImplicitSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::NewtonImplicitSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::NewtonImplicitSolver::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::NewtonImplicitSolver::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::NewtonImplicitSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") CasADi::NewtonImplicitSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::NewtonImplicitSolver::output_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::NewtonImplicitSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::NewtonImplicitSolver::NewtonImplicitSolver "

>  CasADi::NewtonImplicitSolver::NewtonImplicitSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::NewtonImplicitSolver::NewtonImplicitSolver(const Function &f, const Function &jac=Function(), const LinearSolver &linsol=LinearSolver())
------------------------------------------------------------------------

Create a solver instance.

";

%feature("docstring") CasADi::NewtonImplicitSolver::setOptionByAllowedIndex
"[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::NewtonImplicitSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";


// File: classCasADi_1_1NLPImplicitSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::NLPImplicitSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPImplicitSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::NLPImplicitSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::NLPImplicitSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::NLPImplicitSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::NLPImplicitSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::NLPImplicitSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPImplicitSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::NLPImplicitSolver::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::NLPImplicitSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::NLPImplicitSolver::getF "

Access F.

";

%feature("docstring") CasADi::NLPImplicitSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::NLPImplicitSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::NLPImplicitSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::NLPImplicitSolver::getLinsol "

Access linear solver.

";

%feature("docstring") CasADi::NLPImplicitSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPImplicitSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::NLPImplicitSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::NLPImplicitSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::NLPImplicitSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::NLPImplicitSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::NLPImplicitSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::NLPImplicitSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::NLPImplicitSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPImplicitSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::NLPImplicitSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::NLPImplicitSolver::spCanEvaluate "[INTERNAL]
Is the class able to propate seeds through the algorithm? (for usage, see
the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::NLPImplicitSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::NLPImplicitSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::NLPImplicitSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::NLPImplicitSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::NLPImplicitSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::NLPImplicitSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::NLPImplicitSolver::spInit "[INTERNAL]  Reset
the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::NLPImplicitSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::NLPImplicitSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::NLPImplicitSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPImplicitSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::NLPImplicitSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::NLPImplicitSolver::getOption "

get an option value

";

%feature("docstring") CasADi::NLPImplicitSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::NLPImplicitSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::NLPImplicitSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::NLPImplicitSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::NLPImplicitSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::NLPImplicitSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::NLPImplicitSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::NLPImplicitSolver::getNLPSolver "

Access NLP solver.

";

%feature("docstring") CasADi::NLPImplicitSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::NLPImplicitSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::NLPImplicitSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::NLPImplicitSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::NLPImplicitSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::NLPImplicitSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::NLPImplicitSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::NLPImplicitSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::NLPImplicitSolver "[INTERNAL]  Use an
NLPSolver as ImplicitFunction solver.

The equation:

F(z, x1, x2, ..., xn) == 0

where d_F/dz is invertable, implicitly defines the equation:

z := G(x1, x2, ..., xn)

F should be an Function mapping from (n+1) inputs to m outputs. The first
output is the residual that should be zero.

ImplicitFunction (G) is an Function mapping from n inputs to m outputs. n
may be zero. The first output is the solved for z.

You can provide an initial guess for z by setting output(0) of
ImplicitFunction.

Joris Gillis

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| constraints  | OT_INTEGERVE | GenericType( | Constrain    | CasADi::Impl |
|              | CTOR         | )            | the          | icitFunction |
|              |              |              | unknowns. 0  | Internal     |
|              |              |              | (default):   |              |
|              |              |              | no           |              |
|              |              |              | constraint   |              |
|              |              |              | on ui, 1: ui |              |
|              |              |              | >= 0.0, -1:  |              |
|              |              |              | ui <= 0.0,   |              |
|              |              |              | 2: ui > 0.0, |              |
|              |              |              | -2: ui <     |              |
|              |              |              | 0.0.         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_inp | OT_INTEGER   | 0            | Index of the | CasADi::Impl |
| ut           |              |              | input that   | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_out | OT_INTEGER   | 0            | Index of the | CasADi::Impl |
| put          |              |              | output that  | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | User-defined | CasADi::Impl |
| r            | VER          | )            | linear       | icitFunction |
|              |              |              | solver       | Internal     |
|              |              |              | class.       |              |
|              |              |              | Needed for s |              |
|              |              |              | ensitivities |              |
|              |              |              | .            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | CasADi::Impl |
| r_options    | Y            | )            | be passed to | icitFunction |
|              |              |              | the linear   | Internal     |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver   | OT_NLPSOLVER | GenericType( | The          | CasADi::NLPI |
|              |              | )            | NLPSolver    | mplicitInter |
|              |              |              | used to      | nal          |
|              |              |              | solve the    |              |
|              |              |              | implicit     |              |
|              |              |              | system.      |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver_o | OT_DICTIONAR | GenericType( | Options to   | CasADi::NLPI |
| ptions       | Y            | )            | be passed to | mplicitInter |
|              |              |              | the          | nal          |
|              |              |              | NLPSolver    |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+------------------+-----------------------------+
|        Id        |           Used in           |
+==================+=============================+
| nlp_solver_stats | CasADi::NLPImplicitInternal |
+------------------+-----------------------------+

Diagrams

C++ includes: nlp_implicit_solver.hpp ";

%feature("docstring") CasADi::NLPImplicitSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::NLPImplicitSolver::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") CasADi::NLPImplicitSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::NLPImplicitSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::NLPImplicitSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::NLPImplicitSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::NLPImplicitSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::NLPImplicitSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::NLPImplicitSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::NLPImplicitSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::NLPImplicitSolver::NLPImplicitSolver "

>  CasADi::NLPImplicitSolver::NLPImplicitSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::NLPImplicitSolver::NLPImplicitSolver(const Function &f, const Function &jac=Function(), const LinearSolver &linsol=LinearSolver())
------------------------------------------------------------------------

Create a new solver instance.

";

%feature("docstring") CasADi::NLPImplicitSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::NLPImplicitSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::NLPImplicitSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::NLPImplicitSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::NLPImplicitSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::NLPImplicitSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::NLPImplicitSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::NLPImplicitSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::NLPImplicitSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::NLPImplicitSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::NLPImplicitSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::NLPImplicitSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::NLPImplicitSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::NLPImplicitSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::NLPImplicitSolver::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::NLPImplicitSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::NLPImplicitSolver::getJac "

Access Jacobian.

";

%feature("docstring") CasADi::NLPImplicitSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::NLPImplicitSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::NLPImplicitSolver::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::NLPImplicitSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::NLPImplicitSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::NLPImplicitSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::NLPImplicitSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::NLPImplicitSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::NLPImplicitSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::NLPImplicitSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::NLPImplicitSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::NLPImplicitSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::NLPImplicitSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::NLPImplicitSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::NLPImplicitSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";


// File: classCasADi_1_1NLPInputIOSchemeVector.xml
%feature("docstring") CasADi::NLPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::NLPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::NLPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::NLPInputIOSchemeVector "[INTERNAL]  Helper
function for 'NLPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::NLPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::NLPInputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::NLPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::NLPInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::NLPInputIOSchemeVector::NLPInputIOSchemeVector
"[INTERNAL] ";


// File: classCasADi_1_1NLPOutputIOSchemeVector.xml
%feature("docstring") CasADi::NLPOutputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::NLPOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::NLPOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::NLPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'NLPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::NLPOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
CasADi::NLPOutputIOSchemeVector::NLPOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::NLPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::NLPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::NLPOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";


// File: classCasADi_1_1NLPQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::NLPQPSolver::getOptionAllowedIndex " [INTERNAL]  Get the index into
allowed options of a certain option.

";

%feature("docstring") CasADi::NLPQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::NLPQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::NLPQPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::NLPQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::NLPQPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::NLPQPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::NLPQPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::NLPQPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::NLPQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::NLPQPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::NLPQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::NLPQPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::NLPQPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::NLPQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::NLPQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::NLPQPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::NLPQPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::NLPQPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::NLPQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::NLPQPSolver "[INTERNAL]  IPOPT QP Solver for
quadratic programming.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x   x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX                  with :       H sparse (n x n) positive
definite       g dense  (n x 1) n: number of decision variables (x)     nc:
number of constraints (A)

If H is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: CasADi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver   | OT_NLPSOLVER | GenericType( | The          | CasADi::NLPQ |
|              |              | )            | NLPSOlver    | PInternal    |
|              |              |              | used to      |              |
|              |              |              | solve the    |              |
|              |              |              | QPs.         |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver_o | OT_DICTIONAR | GenericType( | Options to   | CasADi::NLPQ |
| ptions       | Y            | )            | be passed to | PInternal    |
|              |              |              | the          |              |
|              |              |              | NLPSOlver    |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+------------------+-----------------------+
|        Id        |        Used in        |
+==================+=======================+
| nlp_solver_stats | CasADi::NLPQPInternal |
+------------------+-----------------------+

Diagrams

C++ includes: nlp_qp_solver.hpp ";

%feature("docstring") CasADi::NLPQPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::NLPQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::NLPQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::NLPQPSolver::checkNode "

>  bool CasADi::NLPQPSolver::checkNode() const 
------------------------------------------------------------------------

Check if the node is pointing to the right type of object.

>  virtual bool CasADi::NLPQPSolver::checkNode() const 
------------------------------------------------------------------------
[INTERNAL] 
Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::NLPQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::NLPQPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::NLPQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::NLPQPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::NLPQPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPQPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::NLPQPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::NLPQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::NLPQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::NLPQPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::NLPQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::NLPQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::NLPQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::NLPQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::NLPQPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::NLPQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::NLPQPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::NLPQPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::NLPQPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::NLPQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::NLPQPSolver::NLPQPSolver "

>  CasADi::NLPQPSolver::NLPQPSolver()

>  CasADi::NLPQPSolver::NLPQPSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::NLPQPSolver::NLPQPSolver(const QPStructure &st)

>  CasADi::NLPQPSolver::NLPQPSolver(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") CasADi::NLPQPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::NLPQPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::NLPQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::NLPQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::NLPQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::NLPQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::NLPQPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::NLPQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::NLPQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::NLPQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::NLPQPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::NLPQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::NLPQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::NLPQPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::NLPQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::NLPQPSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::NLPQPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::NLPQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::NLPQPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::NLPQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::NLPQPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::NLPQPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::NLPQPSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::NLPQPSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") CasADi::NLPQPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::NLPQPSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::NLPQPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::NLPQPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::NLPQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::NLPQPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::NLPQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::NLPQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::NLPQPSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::NLPQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::NLPQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::NLPQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::NLPQPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPQPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::NLPQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::NLPQPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::NLPQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::NLPQPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::NLPQPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::NLPQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::NLPQPSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") CasADi::NLPQPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::NLPQPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::NLPQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::NLPQPSolver::isInit "

Is initialized?

";


// File: classCasADi_1_1NLPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::NLPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::NLPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::NLPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::NLPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::NLPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::NLPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::NLPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::NLPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::NLPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::NLPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::NLPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::NLPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::NLPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::NLPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::NLPSolver "[INTERNAL]   NLPSolver.

Solves the following parametric nonlinear program (NLP):min          F(x,p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x,p) <= UBG
p  == P nx: number of decision variables     ng: number of constraints
np: number of parameters

Joel Andersson

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | CasADi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | objective    | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | constraint   | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| gauss_newton | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option. Use  | olverInterna |
|              |              |              | Gauss Newton | l            |
|              |              |              | Hessian appr |              |
|              |              |              | oximation    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| dient        |              | )            | option.      | olverInterna |
|              |              |              | Generate a   | l            |
|              |              |              | function for |              |
|              |              |              | calculating  |              |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | objective.   |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_hes | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| sian         |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Hessian of   |              |
|              |              |              | the          |              |
|              |              |              | Lagrangian   |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_jac | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| obian        |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Jacobian of  |              |
|              |              |              | the          |              |
|              |              |              | constraints  |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | CasADi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | CasADi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option.      | olverInterna |
|              |              |              | Expect F, G, | l            |
|              |              |              | H, J to have |              |
|              |              |              | an           |              |
|              |              |              | additional   |              |
|              |              |              | input        |              |
|              |              |              | argument     |              |
|              |              |              | appended at  |              |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | CasADi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: nlp_solver.hpp ";

%feature("docstring") CasADi::NLPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::NLPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::NLPSolver::NLPSolver "

Default constructor.

";

%feature("docstring") CasADi::NLPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::NLPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::NLPSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::NLPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::NLPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::NLPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::NLPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::NLPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::NLPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::NLPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::NLPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::NLPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::NLPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::NLPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::NLPSolver::jacG "

Access the Jacobian of the constraint function.

>Input scheme: CasADi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective. .           |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") CasADi::NLPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::NLPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::NLPSolver::getReportConstraints "";

%feature("docstring") CasADi::NLPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::NLPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::NLPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::NLPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::NLPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::NLPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::NLPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::NLPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::NLPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::NLPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::NLPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::NLPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::NLPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::NLPSolver::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") CasADi::NLPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::NLPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::NLPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::NLPSolver::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") CasADi::NLPSolver::nlp "

Access the NLP.

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::NLPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::NLPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::NLPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::NLPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::NLPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::NLPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::NLPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::NLPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::NLPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::NLPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::NLPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::NLPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::NLPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::NLPSolver::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: CasADi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: CasADi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") CasADi::NLPSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::NLPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::NLPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::NLPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::NLPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::NLPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::NLPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::NLPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::NLPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::NLPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::NLPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::NLPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::NLPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::NLPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::NLPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::NLPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::NLPSolver::gradF "

Access the objective gradient function>Input scheme: CasADi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") CasADi::NLPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::NLPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::NLPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::NLPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::NLPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::NLPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::NLPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::NLPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::NLPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::NLPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::NLPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::NLPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::NLPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";


// File: classCasADi_1_1NLPSolverInputIOSchemeVector.xml
%feature("docstring") CasADi::NLPSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") CasADi::NLPSolverInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::NLPSolverInputIOSchemeVector::print "[INTERNAL]  Print a destription of the object.

";

%feature("docstring") CasADi::NLPSolverInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring")
CasADi::NLPSolverInputIOSchemeVector::NLPSolverInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::NLPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::NLPSolverInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") CasADi::NLPSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'NLPSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
CasADi::NLPSolverInputIOSchemeVector::getRepresentation "[INTERNAL]  Return
a string with a representation (for SWIG)

";


// File: classCasADi_1_1NLPSolverOutputIOSchemeVector.xml
%feature("docstring") CasADi::NLPSolverOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") CasADi::NLPSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'NLPSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::NLPSolverOutputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::NLPSolverOutputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring")
CasADi::NLPSolverOutputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::NLPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::NLPSolverOutputIOSchemeVector::print "[INTERNAL]  Print a destription of the object.

";

%feature("docstring")
CasADi::NLPSolverOutputIOSchemeVector::NLPSolverOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::NLPSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";


// File: structCasADi_1_1NonnegativeChecker.xml
%feature("docstring") CasADi::NonnegativeChecker "[INTERNAL]  Always non-
negative (false by default)

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1NonnegativeChecker_3_01OP__AND_01_4.xml
%feature("docstring") CasADi::NonnegativeChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1NonnegativeChecker_3_01OP__EQ_01_4.xml
%feature("docstring") CasADi::NonnegativeChecker< OP_EQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1NonnegativeChecker_3_01OP__EXP_01_4.xml
%feature("docstring") CasADi::NonnegativeChecker< OP_EXP > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1NonnegativeChecker_3_01OP__LE_01_4.xml
%feature("docstring") CasADi::NonnegativeChecker< OP_LE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1NonnegativeChecker_3_01OP__LT_01_4.xml
%feature("docstring") CasADi::NonnegativeChecker< OP_LT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1NonnegativeChecker_3_01OP__NE_01_4.xml
%feature("docstring") CasADi::NonnegativeChecker< OP_NE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1NonnegativeChecker_3_01OP__NOT_01_4.xml
%feature("docstring") CasADi::NonnegativeChecker< OP_NOT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1NonnegativeChecker_3_01OP__OR_01_4.xml
%feature("docstring") CasADi::NonnegativeChecker< OP_OR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1NonnegativeChecker_3_01OP__SQ_01_4.xml
%feature("docstring") CasADi::NonnegativeChecker< OP_SQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1NonnegativeChecker_3_01OP__SQRT_01_4.xml
%feature("docstring") CasADi::NonnegativeChecker< OP_SQRT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1NonZero.xml
%feature("docstring") CasADi::NonZero "[INTERNAL] C++ includes: matrix.hpp
";


// File: classCasADi_1_1NonZeroIterator.xml
%feature("docstring") CasADi::NonZeroIterator::begin "[INTERNAL] ";

%feature("docstring") CasADi::NonZeroIterator::NonZeroIterator "[INTERNAL]
";

%feature("docstring") CasADi::NonZeroIterator "[INTERNAL] C++ includes:
matrix.hpp ";

%feature("docstring") CasADi::NonZeroIterator::end "[INTERNAL] ";


// File: classCasADi_1_1NonZeros.xml
%feature("docstring") CasADi::NonZeros::NonZeros "

Constructor.

";

%feature("docstring") CasADi::NonZeros "[INTERNAL]  Access to a set of
nonzeros.

NonZeros class for Matrix NonZeros is the return type for operator[] of the
Matrix class, it allows access to the value as well as changing the parent
object Joel Andersson

C++ includes: nonzeros.hpp ";


// File: classCasADi_1_1Norm.xml
%feature("docstring") CasADi::Norm::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Norm::assertInit "[INTERNAL]  Assert that the
object has been initialized.

";

%feature("docstring") CasADi::Norm::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Norm::~Norm "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::Norm::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Norm::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Norm::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Norm::deepCopyMembers "[INTERNAL]  Deep copy
data members.

";

%feature("docstring") CasADi::Norm::size "[INTERNAL] ";

%feature("docstring") CasADi::Norm::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Norm::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Norm::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Norm::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Norm::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::Norm::shape "[INTERNAL] ";

%feature("docstring") CasADi::Norm::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Norm::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Norm::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") CasADi::Norm::evaluateMX "

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Norm::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Norm::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") CasADi::Norm::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Norm "[INTERNAL]   Matrix and vector norms.

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring") CasADi::Norm::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::Norm::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::Norm::getCount "[INTERNAL]  Get the reference
count.

";

%feature("docstring") CasADi::Norm::getNormInf "[INTERNAL]  Infinity norm.

";

%feature("docstring") CasADi::Norm::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Norm::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Norm::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") CasADi::Norm::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Norm::Norm "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::Norm::printPart "[INTERNAL]  Print a part of
the expression.

";

%feature("docstring") CasADi::Norm::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Norm::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") CasADi::Norm::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::Norm::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Norm::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Norm::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Norm::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Norm::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Norm::generateOperation "[INTERNAL]  Generate
code for the operation.

";

%feature("docstring") CasADi::Norm::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Norm::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::Norm::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::Norm::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Norm::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::Norm::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") CasADi::Norm::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") CasADi::Norm::getMultiplication "[INTERNAL]   Matrix
multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Norm::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Norm::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Norm::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::Norm::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Norm::isOne "[INTERNAL]  Check if identically
one.

";

%feature("docstring") CasADi::Norm::isInit "[INTERNAL]  Check if the object
has been initialized.

";

%feature("docstring") CasADi::Norm::propagateSparsity "

>  virtual void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::Norm::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::Norm::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") CasADi::Norm::isMultipleOutput "[INTERNAL]  Check if
a multiple output node.

";

%feature("docstring") CasADi::Norm::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Norm::isEqual "[INTERNAL]  Check if two nodes
are equivalent up to a given depth.

";

%feature("docstring") CasADi::Norm::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Norm::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Norm::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") CasADi::Norm::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::Norm::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Norm::getSetNonzeros "[INTERNAL]  Assign the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Norm::getSubAssign "[INTERNAL]  Get submatrix
assignment.

";

%feature("docstring") CasADi::Norm::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Norm::isBinaryOp "[INTERNAL]  Check if binary
operation.

";

%feature("docstring") CasADi::Norm::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Norm::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") CasADi::Norm::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Norm::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Norm::isValue "[INTERNAL]  Check if a certain
value.

";

%feature("docstring") CasADi::Norm::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::Norm::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::Norm::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") CasADi::Norm::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") CasADi::Norm::getSubRef "[INTERNAL]  Get submatrix
reference.

";


// File: classCasADi_1_1Norm1.xml
%feature("docstring") CasADi::Norm1::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") CasADi::Norm1::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") CasADi::Norm1::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Norm1::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::Norm1::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Norm1::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Norm1::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Norm1::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::Norm1::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Norm1::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Norm1::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Norm1::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") CasADi::Norm1::printPart "[INTERNAL]  Print a part of
the expression.

";

%feature("docstring") CasADi::Norm1::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Norm1::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::Norm1::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Norm1::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Norm1::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::Norm1::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") CasADi::Norm1::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Norm1::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Norm1::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Norm1::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::Norm1::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Norm1::propagateSparsity "

>  virtual void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::Norm1::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Norm1::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") CasADi::Norm1::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Norm1::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::Norm1::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::Norm1::~Norm1 "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::Norm1::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Norm1::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Norm1::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Norm1::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Norm1::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Norm1::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Norm1::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Norm1::size "[INTERNAL] ";

%feature("docstring") CasADi::Norm1::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Norm1::deepCopyMembers "[INTERNAL]  Deep copy
data members.

";

%feature("docstring") CasADi::Norm1::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") CasADi::Norm1::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Norm1::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Norm1::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::Norm1::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Norm1::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Norm1::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::Norm1::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::Norm1::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::Norm1::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Norm1::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") CasADi::Norm1::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::Norm1::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Norm1::shape "[INTERNAL] ";

%feature("docstring") CasADi::Norm1::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Norm1::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Norm1::getSetNonzeros "[INTERNAL]  Assign the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Norm1::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Norm1::evaluateMX "

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Norm1::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::Norm1::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") CasADi::Norm1::getNormInf "[INTERNAL]  Infinity norm.

";

%feature("docstring") CasADi::Norm1::Norm1 "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::Norm1::isMultipleOutput "[INTERNAL]  Check if
a multiple output node.

";

%feature("docstring") CasADi::Norm1::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") CasADi::Norm1::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") CasADi::Norm1::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Norm1::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Norm1::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Norm1::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Norm1::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Norm1::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") CasADi::Norm1 "[INTERNAL]  1-norm

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring") CasADi::Norm1::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Norm1::getMultiplication "[INTERNAL]   Matrix
multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Norm1::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Norm1::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Norm1::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Norm1::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Norm1::getNumOutputs "[INTERNAL]  Number of
outputs.

";


// File: classCasADi_1_1Norm2.xml
%feature("docstring") CasADi::Norm2::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::Norm2::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Norm2::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Norm2::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Norm2::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Norm2::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Norm2::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Norm2::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Norm2::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") CasADi::Norm2::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Norm2 "[INTERNAL]  Represents a 2-norm
(spectran norm)

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring") CasADi::Norm2::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Norm2::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") CasADi::Norm2::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Norm2::getNormInf "[INTERNAL]  Infinity norm.

";

%feature("docstring") CasADi::Norm2::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Norm2::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::Norm2::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") CasADi::Norm2::propagateSparsity "

>  virtual void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::Norm2::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Norm2::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Norm2::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Norm2::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Norm2::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Norm2::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::Norm2::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::Norm2::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") CasADi::Norm2::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Norm2::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Norm2::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::Norm2::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") CasADi::Norm2::shape "[INTERNAL] ";

%feature("docstring") CasADi::Norm2::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") CasADi::Norm2::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::Norm2::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Norm2::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Norm2::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Norm2::~Norm2 "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::Norm2::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") CasADi::Norm2::size "[INTERNAL] ";

%feature("docstring") CasADi::Norm2::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::Norm2::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Norm2::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Norm2::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Norm2::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") CasADi::Norm2::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Norm2::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::Norm2::getSetNonzeros "[INTERNAL]  Assign the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Norm2::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::Norm2::evaluateMX "

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Norm2::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Norm2::printPart "[INTERNAL]  Print a part of
the expression.

";

%feature("docstring") CasADi::Norm2::getMultiplication "[INTERNAL]   Matrix
multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Norm2::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") CasADi::Norm2::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Norm2::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::Norm2::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Norm2::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Norm2::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Norm2::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Norm2::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::Norm2::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Norm2::isMultipleOutput "[INTERNAL]  Check if
a multiple output node.

";

%feature("docstring") CasADi::Norm2::Norm2 "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::Norm2::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") CasADi::Norm2::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Norm2::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::Norm2::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Norm2::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Norm2::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Norm2::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Norm2::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Norm2::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Norm2::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Norm2::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Norm2::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") CasADi::Norm2::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Norm2::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Norm2::deepCopyMembers "[INTERNAL]  Deep copy
data members.

";

%feature("docstring") CasADi::Norm2::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") CasADi::Norm2::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";


// File: classCasADi_1_1NormF.xml
%feature("docstring") CasADi::NormF::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::NormF::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::NormF::~NormF "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::NormF::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::NormF::propagateSparsity "

>  virtual void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::NormF::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::NormF::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::NormF::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::NormF::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::NormF::evaluateMX "

>  void CasADi::NormF::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::NormF::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::NormF::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") CasADi::NormF::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::NormF::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::NormF::getMultiplication "[INTERNAL]   Matrix
multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::NormF::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::NormF::getSetNonzeros "[INTERNAL]  Assign the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::NormF::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::NormF::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") CasADi::NormF::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::NormF::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::NormF::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::NormF::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::NormF::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") CasADi::NormF::size "[INTERNAL] ";

%feature("docstring") CasADi::NormF::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::NormF "[INTERNAL]  Represents a Frobenius
norm.

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring") CasADi::NormF::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::NormF::isMultipleOutput "[INTERNAL]  Check if
a multiple output node.

";

%feature("docstring") CasADi::NormF::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::NormF::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::NormF::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") CasADi::NormF::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") CasADi::NormF::size1 "[INTERNAL] ";

%feature("docstring") CasADi::NormF::size2 "[INTERNAL] ";

%feature("docstring") CasADi::NormF::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::NormF::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::NormF::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::NormF::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::NormF::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::NormF::NormF "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::NormF::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::NormF::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::NormF::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::NormF::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::NormF::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") CasADi::NormF::printPart "[INTERNAL]  Print a part of
the expression.

";

%feature("docstring") CasADi::NormF::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::NormF::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") CasADi::NormF::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::NormF::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::NormF::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::NormF::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::NormF::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") CasADi::NormF::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::NormF::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") CasADi::NormF::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") CasADi::NormF::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::NormF::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::NormF::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::NormF::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::NormF::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") CasADi::NormF::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") CasADi::NormF::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::NormF::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::NormF::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::NormF::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::NormF::shape "[INTERNAL] ";

%feature("docstring") CasADi::NormF::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::NormF::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::NormF::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::NormF::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::NormF::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::NormF::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::NormF::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::NormF::evaluateGen "[INTERNAL]  Evaluate the
function (template)

";

%feature("docstring") CasADi::NormF::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") CasADi::NormF::deepCopyMembers "[INTERNAL]  Deep copy
data members.

";

%feature("docstring") CasADi::NormF::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::NormF::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::NormF::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::NormF::getNormInf "[INTERNAL]  Infinity norm.

";


// File: classCasADi_1_1NormInf.xml
%feature("docstring") CasADi::NormInf::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::NormInf::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::NormInf::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::NormInf::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::NormInf::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::NormInf::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") CasADi::NormInf::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::NormInf::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::NormInf::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") CasADi::NormInf::size "[INTERNAL] ";

%feature("docstring") CasADi::NormInf::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::NormInf::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::NormInf::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") CasADi::NormInf::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::NormInf::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::NormInf::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::NormInf::shape "[INTERNAL] ";

%feature("docstring") CasADi::NormInf::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::NormInf::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::NormInf::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::NormInf::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::NormInf::size2 "[INTERNAL] ";

%feature("docstring") CasADi::NormInf::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::NormInf::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::NormInf::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::NormInf::propagateSparsity "

>  virtual void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::NormInf::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::NormInf::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::NormInf::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") CasADi::NormInf::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::NormInf::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::NormInf::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::NormInf::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::NormInf::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::NormInf::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::NormInf::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::NormInf::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::NormInf::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::NormInf::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::NormInf::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::NormInf::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::NormInf::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::NormInf::evaluateMX "

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::NormInf::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::NormInf::~NormInf "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::NormInf::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::NormInf::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::NormInf::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::NormInf::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::NormInf::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::NormInf "[INTERNAL]  Represents an infinity-
norm operation on a MX.

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring") CasADi::NormInf::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::NormInf::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::NormInf::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::NormInf::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::NormInf::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::NormInf::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::NormInf::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::NormInf::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::NormInf::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::NormInf::NormInf "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::NormInf::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::NormInf::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") CasADi::NormInf::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::NormInf::printPart "[INTERNAL]  Print a part
of the expression.

";

%feature("docstring") CasADi::NormInf::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") CasADi::NormInf::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::NormInf::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::NormInf::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::NormInf::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::NormInf::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::NormInf::size1 "[INTERNAL] ";

%feature("docstring") CasADi::NormInf::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::NormInf::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::NormInf::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::NormInf::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::NormInf::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::NormInf::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::NormInf::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::NormInf::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::NormInf::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";


// File: classCasADi_1_1Nullspace.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::Nullspace::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::Nullspace::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::Nullspace::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Nullspace::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::Nullspace::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::Nullspace::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::Nullspace::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::Nullspace::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::Nullspace::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::Nullspace::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::Nullspace::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::Nullspace::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::Nullspace::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::Nullspace::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::Nullspace::solve "

the same as evaluate()

";

%feature("docstring") CasADi::Nullspace::getOption "

get an option value

";

%feature("docstring") CasADi::Nullspace::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::Nullspace::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Nullspace::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::Nullspace::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::Nullspace::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::Nullspace::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::Nullspace::isInit "

Is initialized?

";

%feature("docstring") CasADi::Nullspace::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::Nullspace::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::Nullspace::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::Nullspace::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::Nullspace::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::Nullspace::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::Nullspace::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::Nullspace::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::Nullspace::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::Nullspace::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::Nullspace::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::Nullspace::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::Nullspace::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::Nullspace::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::Nullspace::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Nullspace::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Nullspace::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::Nullspace::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::Nullspace::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::Nullspace::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::Nullspace::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::Nullspace::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::Nullspace::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::Nullspace::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::Nullspace::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::Nullspace::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::Nullspace::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::Nullspace::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::Nullspace::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::Nullspace::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::Nullspace::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::Nullspace::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::Nullspace::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::Nullspace::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::Nullspace::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::Nullspace::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::Nullspace::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::Nullspace::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::Nullspace::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::Nullspace::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::Nullspace::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::Nullspace::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Nullspace "[INTERNAL]  Base class for
nullspace construction.

Constructs a basis for the null-space of a fat matrix A. i.e. finds Z such
that AZ = 0 holds.

The nullspace is also known as the orthogonal complement of the rowspace of
a matrix.

It is assumed that the matrix A is of full rank.

Implementations are not required to construct an orthogonal or orthonormal
basis Joris Gillis

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| dense        | OT_BOOLEAN   | true         | Indicates    | CasADi::Null |
|              |              |              | that dense   | spaceInterna |
|              |              |              | matrices can | l            |
|              |              |              | be assumed   |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: nullspace.hpp ";

%feature("docstring") CasADi::Nullspace::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::Nullspace::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::Nullspace::Nullspace "

Default constructor.

";

%feature("docstring") CasADi::Nullspace::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Nullspace::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::Nullspace::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::Nullspace::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::Nullspace::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::Nullspace::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::Nullspace::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::Nullspace::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::Nullspace::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::Nullspace::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::Nullspace::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::Nullspace::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::Nullspace::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::Nullspace::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::Nullspace::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::Nullspace::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::Nullspace::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::Nullspace::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Nullspace::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::Nullspace::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::Nullspace::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::Nullspace::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Nullspace::evaluate "

Evaluate.

";

%feature("docstring") CasADi::Nullspace::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::Nullspace::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::Nullspace::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::Nullspace::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";


// File: classstd_1_1numeric__limits_3_01CasADi_1_1SXElement_01_4.xml
%feature("docstring") std::numeric_limits< CasADi::SXElement > " [INTERNAL]
C++ includes: sx_element.hpp ";


// File: classCasADi_1_1OCPInputIOSchemeVector.xml
%feature("docstring") CasADi::OCPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::OCPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::OCPInputIOSchemeVector "[INTERNAL]  Helper
function for 'OCPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::OCPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::OCPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::OCPInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::OCPInputIOSchemeVector::OCPInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") CasADi::OCPInputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::OCPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classCasADi_1_1OCPOutputIOSchemeVector.xml
%feature("docstring") CasADi::OCPOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::OCPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'OCPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::OCPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::OCPOutputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::OCPOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::OCPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::OCPOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::OCPOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
CasADi::OCPOutputIOSchemeVector::OCPOutputIOSchemeVector "[INTERNAL] ";


// File: classCasADi_1_1OCPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::OCPSolver::getMfcn " ";

%feature("docstring") CasADi::OCPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::OCPSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::OCPSolver::getRfcn "";

%feature("docstring") CasADi::OCPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::OCPSolver::getCfcn "";

%feature("docstring") CasADi::OCPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::OCPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::OCPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::OCPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::OCPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::OCPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::OCPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::OCPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::OCPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::OCPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::OCPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::OCPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::OCPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::OCPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::OCPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::OCPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::OCPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::OCPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::OCPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::OCPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::OCPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::OCPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::OCPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::OCPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::OCPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::OCPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::OCPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::OCPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::OCPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::OCPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::OCPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::OCPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::OCPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::OCPSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::OCPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::OCPSolver::checkNode "[INTERNAL]  Check if
the node is pointing to the right type of object.

";

%feature("docstring") CasADi::OCPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::OCPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::OCPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::OCPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::OCPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::OCPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::OCPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::OCPSolver::OCPSolver "

Default constructor.

";

%feature("docstring") CasADi::OCPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::OCPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::OCPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::OCPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::OCPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::OCPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::OCPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::OCPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::OCPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::OCPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::OCPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::OCPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::OCPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::OCPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::OCPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::OCPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::OCPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::OCPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::OCPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::OCPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::OCPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::OCPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::OCPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::OCPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::OCPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::OCPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::OCPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::OCPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::OCPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::OCPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::OCPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::OCPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::OCPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::OCPSolver "[INTERNAL]  Base class for OCP
solvers.

Joel Andersson

>Input scheme: CasADi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

>Output scheme: CasADi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| final_time   | OT_REAL      | 1            |              | CasADi::OCPS |
|              |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_gr | OT_INTEGER   | 20           |              | CasADi::OCPS |
| id_points    |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| number_of_pa | OT_INTEGER   | 0            |              | CasADi::OCPS |
| rameters     |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: ocp_solver.hpp ";

%feature("docstring") CasADi::OCPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::OCPSolver::getFfcn "";

%feature("docstring") CasADi::OCPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::OCPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::OCPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::OCPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::OCPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::OCPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::OCPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::OCPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::OCPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::OCPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::OCPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::OCPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::OCPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::OCPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";


// File: classCasADi_1_1OldCollocationIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::OldCollocationIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::OldCollocationIntegrator::getNumInputElements
"

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::OldCollocationIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::OldCollocationIntegrator::input_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::OldCollocationIntegrator::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::OldCollocationIntegrator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::OldCollocationIntegrator::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::OldCollocationIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring")
CasADi::OldCollocationIntegrator::getOptionAllowedIndex "[INTERNAL]  Get
the index into allowed options of a certain option.

";

%feature("docstring") CasADi::OldCollocationIntegrator::spCanEvaluate "[INTERNAL]  Is the class able to propate seeds through the algorithm? (for
usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::OldCollocationIntegrator::resetB "

Reset the backward problem Time will be set to tf and backward state to
input(INTEGRATOR_RX0)

";

%feature("docstring") CasADi::OldCollocationIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::OldCollocationIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::OldCollocationIntegrator::swap "[INTERNAL]
Swap content with another instance.

";

%feature("docstring") CasADi::OldCollocationIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getNumOutputElements
"

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::OldCollocationIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") CasADi::OldCollocationIntegrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::OldCollocationIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::OldCollocationIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::OldCollocationIntegrator::printPtr "[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") CasADi::OldCollocationIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::OldCollocationIntegrator::evaluate "

Evaluate.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getOptionDescription
"

Get the description of a certain option.

";

%feature("docstring") CasADi::OldCollocationIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::OldCollocationIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getNumOutputNonzeros
"

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::OldCollocationIntegrator::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::OldCollocationIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::OldCollocationIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::OldCollocationIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::OldCollocationIntegrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::OldCollocationIntegrator::assertInit "[INTERNAL]  Assert that it is initialized

";

%feature("docstring") CasADi::OldCollocationIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::OldCollocationIntegrator::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::OldCollocationIntegrator::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::OldCollocationIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::OldCollocationIntegrator::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::OldCollocationIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::OldCollocationIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::OldCollocationIntegrator::clone "

Clone.

";

%feature("docstring")
CasADi::OldCollocationIntegrator::OldCollocationIntegrator "

>  CasADi::OldCollocationIntegrator::OldCollocationIntegrator()
------------------------------------------------------------------------

Default constructor.

>  CasADi::OldCollocationIntegrator::OldCollocationIntegrator(const Function &f, const Function &g=Function())
------------------------------------------------------------------------

Create an integrator for explicit ODEs.

Parameters:
-----------

f:  dynamical system

>Input scheme: CasADi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: CasADi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: CasADi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: CasADi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring") CasADi::OldCollocationIntegrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::OldCollocationIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::OldCollocationIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::OldCollocationIntegrator::evalMX "

[DEPRECATED]

";

%feature("docstring")
CasADi::OldCollocationIntegrator::setOptionByAllowedIndex "[INTERNAL]  Set
a certain option by giving its index into the allowed values.

";

%feature("docstring") CasADi::OldCollocationIntegrator::assignNode "[INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::OldCollocationIntegrator::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::OldCollocationIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::OldCollocationIntegrator::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::OldCollocationIntegrator::isInit "

Is initialized?

";

%feature("docstring") CasADi::OldCollocationIntegrator::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::OldCollocationIntegrator::spEvaluate "[INTERNAL]  Propagate the sparsity pattern through a set of directional
derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::OldCollocationIntegrator::output_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::OldCollocationIntegrator::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::OldCollocationIntegrator::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::OldCollocationIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::OldCollocationIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") CasADi::OldCollocationIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::OldCollocationIntegrator "[INTERNAL]
Collocation integrator ODE/DAE integrator based on collocation.

The method is still under development

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x,z,p,t) Forward ODE  0 = fz(x,z,p,t)
Forward algebraic equations  der(q) = fq(x,z,p,t)                  Forward
quadratures Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  = 0
Backward integration from t=tf to t=t0  der(rx) = gx(rx,rz,rp,x,z,p,t)
Backward ODE  0 = gz(rx,rz,rp,x,z,p,t)        Backward algebraic equations
der(rq) = gq(rx,rz,rp,x,z,p,t)        Backward quadratures where we assume
that both the forward and backwards integrations are index-1  (i.e. dfz/dz,
dgz/drz are invertible) and furthermore that gx, gz and gq have a linear
dependency on rx, rz and rp.

Joel Andersson

>Input scheme: CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | CasADi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| collocation_ | OT_STRING    | \"radau\"      | Collocation  | CasADi::OldC |
| scheme       |              |              | scheme (rada | ollocationIn |
|              |              |              | u|legendre)  | tegratorInte |
|              |              |              |              | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | CasADi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | false        | Expand the   | CasADi::OldC |
|              |              |              | ODE/DAE      | ollocationIn |
|              |              |              | residual     | tegratorInte |
|              |              |              | function in  | rnal         |
|              |              |              | an SX graph  |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_q     | OT_BOOLEAN   | false        | Expand the   | CasADi::OldC |
|              |              |              | quadrature   | ollocationIn |
|              |              |              | function in  | tegratorInte |
|              |              |              | an SX graph  | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| hotstart     | OT_BOOLEAN   | true         | Initialize   | CasADi::OldC |
|              |              |              | the          | ollocationIn |
|              |              |              | trajectory   | tegratorInte |
|              |              |              | at the       | rnal         |
|              |              |              | previous     |              |
|              |              |              | solution     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_sol | OT_IMPLICITF | GenericType( | An implicit  | CasADi::OldC |
| ver          | UNCTION      | )            | function     | ollocationIn |
|              |              |              | solver       | tegratorInte |
|              |              |              |              | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| implicit_sol | OT_DICTIONAR | GenericType( | Options to   | CasADi::OldC |
| ver_options  | Y            | )            | be passed to | ollocationIn |
|              |              |              | the implicit | tegratorInte |
|              |              |              | solver       | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| interpolatio | OT_INTEGER   | 3            | Order of the | CasADi::OldC |
| n_order      |              |              | interpolatin | ollocationIn |
|              |              |              | g            | tegratorInte |
|              |              |              | polynomials  | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_fi | OT_INTEGER   | 20           | Number of    | CasADi::OldC |
| nite_element |              |              | finite       | ollocationIn |
| s            |              |              | elements     | tegratorInte |
|              |              |              |              | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | CasADi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| quadrature_s | OT_LINEARSOL | GenericType( | An linear    | CasADi::OldC |
| olver        | VER          | )            | solver to    | ollocationIn |
|              |              |              | solver the   | tegratorInte |
|              |              |              | quadrature   | rnal         |
|              |              |              | equations    |              |
+--------------+--------------+--------------+--------------+--------------+
| quadrature_s | OT_DICTIONAR | GenericType( | Options to   | CasADi::OldC |
| olver_option | Y            | )            | be passed to | ollocationIn |
| s            |              |              | the          | tegratorInte |
|              |              |              | quadrature   | rnal         |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| startup_inte | OT_INTEGRATO | GenericType( | An ODE/DAE   | CasADi::OldC |
| grator       | R            | )            | integrator   | ollocationIn |
|              |              |              | that can be  | tegratorInte |
|              |              |              | used to      | rnal         |
|              |              |              | generate a   |              |
|              |              |              | startup      |              |
|              |              |              | trajectory   |              |
+--------------+--------------+--------------+--------------+--------------+
| startup_inte | OT_DICTIONAR | GenericType( | Options to   | CasADi::OldC |
| grator_optio | Y            | )            | be passed to | ollocationIn |
| ns           |              |              | the startup  | tegratorInte |
|              |              |              | integrator   | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | CasADi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | CasADi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: old_collocation_integrator.hpp ";

%feature("docstring") CasADi::OldCollocationIntegrator::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::OldCollocationIntegrator::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::OldCollocationIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::OldCollocationIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::OldCollocationIntegrator::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::OldCollocationIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::OldCollocationIntegrator::weak "[INTERNAL]
Get a weak reference to the object.

";

%feature("docstring") CasADi::OldCollocationIntegrator::spInit "[INTERNAL]
Reset the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::OldCollocationIntegrator::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") CasADi::OldCollocationIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::OldCollocationIntegrator::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::OldCollocationIntegrator::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::OldCollocationIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::OldCollocationIntegrator::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::OldCollocationIntegrator::checkInputs "[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getCount "[INTERNAL]  Get the reference count.

";

%feature("docstring") CasADi::OldCollocationIntegrator::solve "

the same as evaluate()

";

%feature("docstring") CasADi::OldCollocationIntegrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::OldCollocationIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getOption "

get an option value

";

%feature("docstring") CasADi::OldCollocationIntegrator::schemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::OldCollocationIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::OldCollocationIntegrator::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::OldCollocationIntegrator::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::OldCollocationIntegrator::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::OldCollocationIntegrator::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::OldCollocationIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::OldCollocationIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") CasADi::OldCollocationIntegrator::inputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::OldCollocationIntegrator::setOptionByEnumValue
"[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::OldCollocationIntegrator::getNumInputNonzeros
"

Get total number of nonzeros in all of the matrix-valued inputs.

";


// File: classCasADi_1_1OneSX.xml
%feature("docstring") CasADi::OneSX::isInf "[INTERNAL]  check properties of
a node

";

%feature("docstring") CasADi::OneSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::OneSX::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") CasADi::OneSX::isZero "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::OneSX::mark "[INTERNAL] ";

%feature("docstring") CasADi::OneSX::marked "[INTERNAL] ";

%feature("docstring") CasADi::OneSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::OneSX::isSmooth "[INTERNAL]  Check if smooth.

";

%feature("docstring") CasADi::OneSX::isNan "[INTERNAL]  check properties of
a node

";

%feature("docstring") CasADi::OneSX::dep "[INTERNAL]  get the reference of
a child

";

%feature("docstring") CasADi::OneSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::OneSX::isInteger "[INTERNAL]  Properties.

";

%feature("docstring") CasADi::OneSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::OneSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::OneSX "[INTERNAL]  Represents a one SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") CasADi::OneSX::hasDep "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::OneSX::isOne "[INTERNAL]  check properties of
a node

";

%feature("docstring") CasADi::OneSX::isConstant "[INTERNAL]  Properties.

";

%feature("docstring") CasADi::OneSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::OneSX::OneSX "[INTERNAL] ";

%feature("docstring") CasADi::OneSX::init "[INTERNAL]  Initialize the node
(currently used only to give a similar interface to MXNode)

";

%feature("docstring") CasADi::OneSX::~OneSX "[INTERNAL] ";

%feature("docstring") CasADi::OneSX::getValue "[INTERNAL]  Get the value.

";

%feature("docstring") CasADi::OneSX::getName "[INTERNAL] ";

%feature("docstring") CasADi::OneSX::print "[INTERNAL]  print

";

%feature("docstring") CasADi::OneSX::getIntValue "[INTERNAL]  Get value of
a constant node.

";


// File: classCasADi_1_1OOQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::OOQPSolver::spInit " [INTERNAL]  Reset the sparsity propagation (for
usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::OOQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::OOQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::OOQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::OOQPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::OOQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::OOQPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::OOQPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::OOQPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::OOQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::OOQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::OOQPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::OOQPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::OOQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::OOQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::OOQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::OOQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::OOQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::OOQPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::OOQPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::OOQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::OOQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::OOQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::OOQPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::OOQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::OOQPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::OOQPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::OOQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::OOQPSolver "[INTERNAL]  Interface to the OOQP
Solver for quadratic programming:

Solves the following strictly convex problem:

min          1/2 x' H x + g' x   x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX                  with :       H sparse (n x n) positive
definite       g dense  (n x 1) n: number of decision variables (x)     nc:
number of constraints (A)

If H is not positive-definite, the solver should throw an error.

The current implementation assumes that OOQP is configured with the MA27
sparse linear solver.

NOTE: when doing multiple calls to evaluate(), check if you need to
reInit();

>Input scheme: CasADi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| artol        | OT_REAL      | 0.000        | tolerance as | CasADi::OOQP |
|              |              |              | provided     | Internal     |
|              |              |              | with         |              |
|              |              |              | setArTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| mutol        | OT_REAL      | 0.000        | tolerance as | CasADi::OOQP |
|              |              |              | provided     | Internal     |
|              |              |              | with         |              |
|              |              |              | setMuTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_level  | OT_INTEGER   | 0            | Print level. | CasADi::OOQP |
|              |              |              | OOQP listens | Internal     |
|              |              |              | to           |              |
|              |              |              | print_level  |              |
|              |              |              | 0, 10 and    |              |
|              |              |              | 100          |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: ooqp_solver.hpp ";

%feature("docstring") CasADi::OOQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::OOQPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::OOQPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::OOQPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::OOQPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::OOQPSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") CasADi::OOQPSolver::OOQPSolver "

>  CasADi::OOQPSolver::OOQPSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::OOQPSolver::OOQPSolver(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") CasADi::OOQPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::OOQPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::OOQPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::OOQPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::OOQPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::OOQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::OOQPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::OOQPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::OOQPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::OOQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::OOQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::OOQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::OOQPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::OOQPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::OOQPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::OOQPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::OOQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::OOQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::OOQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::OOQPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::OOQPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::OOQPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::OOQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::OOQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::OOQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::OOQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::OOQPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::OOQPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::OOQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::OOQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::OOQPSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") CasADi::OOQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::OOQPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::OOQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::OOQPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::OOQPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::OOQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::OOQPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::OOQPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::OOQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::OOQPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::OOQPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::OOQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::OOQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::OOQPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::OOQPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::OOQPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::OOQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::OOQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::OOQPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::OOQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::OOQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::OOQPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::OOQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::OOQPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::OOQPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::OOQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::OOQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::OOQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::OOQPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::OOQPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::OOQPSolver::getNumOutputs "

Get the number of function outputs.

";


// File: classCasADi_1_1OptionsFunctionality.xml


/*  Option Functionality  */ %feature("docstring")
CasADi::OptionsFunctionality::getCount " [INTERNAL]  Get the reference
count.

";

%feature("docstring") CasADi::OptionsFunctionality::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::OptionsFunctionality::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::OptionsFunctionality::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::OptionsFunctionality::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::OptionsFunctionality::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::OptionsFunctionality::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::OptionsFunctionality::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::OptionsFunctionality::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::OptionsFunctionality::OptionsFunctionality "

Default constructor.

";

%feature("docstring") CasADi::OptionsFunctionality::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") CasADi::OptionsFunctionality::isInit "

Is initialized?

";

%feature("docstring") CasADi::OptionsFunctionality::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::OptionsFunctionality::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::OptionsFunctionality::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::OptionsFunctionality::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::OptionsFunctionality::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::OptionsFunctionality::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::OptionsFunctionality::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::OptionsFunctionality::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::OptionsFunctionality::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::OptionsFunctionality::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::OptionsFunctionality::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::OptionsFunctionality::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") CasADi::OptionsFunctionality::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::OptionsFunctionality::getOption "

get an option value

";

%feature("docstring") CasADi::OptionsFunctionality::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::OptionsFunctionality::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::OptionsFunctionality::~OptionsFunctionality "

Destructor.

";

%feature("docstring") CasADi::OptionsFunctionality::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::OptionsFunctionality::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::OptionsFunctionality::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::OptionsFunctionality::setOptionByAllowedIndex
"[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::OptionsFunctionality::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::OptionsFunctionality "[INTERNAL]  Provides
options setting/getting functionality.

Gives a derived class the ability to set and retrieve options in a
convenient way. It also contains error checking, making sure that the option
exists and that the value type is correct.

A derived class should add option names, types and default values to the
corresponding vectors.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: options_functionality.hpp ";

%feature("docstring") CasADi::OptionsFunctionality::checkNode "[INTERNAL]
Assert that the node is pointing to the right type of object

";

%feature("docstring") CasADi::OptionsFunctionality::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::OptionsFunctionality::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";


// File: classCasADi_1_1OptionsFunctionalityNode.xml
%feature("docstring") CasADi::OptionsFunctionalityNode::clone "[INTERNAL]
Make a deep copy of the instance.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::isInit "[INTERNAL]
Check if the object has been initialized.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::print "[INTERNAL]
Print description.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::init "[INTERNAL]
Initialize the object.

";

%feature("docstring")
CasADi::OptionsFunctionalityNode::~OptionsFunctionalityNode "[INTERNAL] ";

%feature("docstring") CasADi::OptionsFunctionalityNode::setOption "

>  void CasADi::OptionsFunctionalityNode::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------
[INTERNAL] 
set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54)

>  void CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------
[INTERNAL] 
set a set of options. The setOptions are in general only considered
before the init function, if any. If properties changes, the init
function should be called again. (Ticket #54)

";

%feature("docstring")
CasADi::OptionsFunctionalityNode::OptionsFunctionalityNode "[INTERNAL]
Constructor, destructor.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::printOptions "[INTERNAL]  Print options to a stream.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::getOptionDescription
"[INTERNAL]  Get the description of a certain option.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::getOptionNames "[INTERNAL]  Get a list of all option names.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::getOptionType "[INTERNAL]  Get the type of a certain option.

";

%feature("docstring")
CasADi::OptionsFunctionalityNode::setOptionByAllowedIndex "[INTERNAL]  Set
a certain option by giving its index into the allowed values.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::deepCopyMembers "[INTERNAL]  Deep copy data members.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::getOptionDefault "[INTERNAL]  Get the default of a certain option.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::copyOptions "[INTERNAL]  Copy all options from another object.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::getCount "[INTERNAL]  Get the reference count.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::setOptionByEnumValue
"[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::hasSetOption "[INTERNAL]  check if the user has there is an option str

";

%feature("docstring") CasADi::OptionsFunctionalityNode::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::dictionary "[INTERNAL]  Get the dictionary.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::getBestMatches "[INTERNAL]  Get th ebest suggestions of option names.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::hasOption "[INTERNAL]  check if there is an option str

";

%feature("docstring") CasADi::OptionsFunctionalityNode::assertInit "[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::getOption "[INTERNAL]  get an option value

";

%feature("docstring") CasADi::OptionsFunctionalityNode::getOptionTypeName "[INTERNAL]  Get the type name of a certain option.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::getOptionAllowed "[INTERNAL]  Get the allowed values of a certain option.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::printOption "[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::weak "[INTERNAL]
Get a weak reference to the object.

";

%feature("docstring") CasADi::OptionsFunctionalityNode::repr "[INTERNAL]
Print representation.

";

%feature("docstring") CasADi::OptionsFunctionalityNode "[INTERNAL]
Internal class.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: options_functionality.hpp ";

%feature("docstring")
CasADi::OptionsFunctionalityNode::getOptionAllowedIndex "[INTERNAL]  Get
the index into allowed options of a certain option.

";


// File: classCasADi_1_1OutputNode.xml
%feature("docstring") CasADi::OutputNode::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::OutputNode::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::OutputNode::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::OutputNode::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::OutputNode::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::OutputNode::propagateSparsity "

>  virtual void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::OutputNode::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::OutputNode::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::OutputNode::getVertsplit "[INTERNAL]  Create
a vertical split node (vectors only)

";

%feature("docstring") CasADi::OutputNode::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::OutputNode::OutputNode "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::OutputNode::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::OutputNode::size "[INTERNAL] ";

%feature("docstring") CasADi::OutputNode::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::OutputNode::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::OutputNode::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") CasADi::OutputNode::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::OutputNode::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::OutputNode::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::OutputNode::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::OutputNode::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") CasADi::OutputNode::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::OutputNode::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::OutputNode::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") CasADi::OutputNode::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::OutputNode::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::OutputNode::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::OutputNode::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::OutputNode::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") CasADi::OutputNode::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::OutputNode::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::OutputNode::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::OutputNode::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::OutputNode::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::OutputNode::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::OutputNode::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::OutputNode::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::OutputNode::getHorzsplit "[INTERNAL]  Create
a horizontal split node.

";

%feature("docstring") CasADi::OutputNode::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::OutputNode::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::OutputNode::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::OutputNode::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") CasADi::OutputNode::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring") CasADi::OutputNode::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::OutputNode::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::OutputNode::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::OutputNode::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::OutputNode::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::OutputNode::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::OutputNode::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::OutputNode::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::OutputNode::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::OutputNode::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::OutputNode::~OutputNode "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::OutputNode::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") CasADi::OutputNode::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::OutputNode::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::OutputNode::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::OutputNode::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::OutputNode::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::OutputNode::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::OutputNode::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::OutputNode::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::OutputNode::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") CasADi::OutputNode::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::OutputNode "[INTERNAL] C++ includes:
multiple_output.hpp ";

%feature("docstring") CasADi::OutputNode::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::OutputNode::shape "[INTERNAL] ";

%feature("docstring") CasADi::OutputNode::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::OutputNode::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::OutputNode::size2 "[INTERNAL] ";

%feature("docstring") CasADi::OutputNode::evaluateMX "

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::OutputNode::size1 "[INTERNAL] ";

%feature("docstring") CasADi::OutputNode::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::OutputNode::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") CasADi::OutputNode::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") CasADi::OutputNode::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::OutputNode::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::OutputNode::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::OutputNode::getBinarySwitch "[INTERNAL]  Get
a binary operation operation.

";

%feature("docstring") CasADi::OutputNode::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";


// File: classCasADi_1_1Parallelizer.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::Parallelizer::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::Parallelizer::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::Parallelizer::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::Parallelizer::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::Parallelizer::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::Parallelizer::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::Parallelizer::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::Parallelizer::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::Parallelizer::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::Parallelizer::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::Parallelizer::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::Parallelizer::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::Parallelizer::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::Parallelizer::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::Parallelizer::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::Parallelizer::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::Parallelizer::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::Parallelizer::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::Parallelizer::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::Parallelizer::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::Parallelizer::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::Parallelizer::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::Parallelizer::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::Parallelizer::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::Parallelizer::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::Parallelizer::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::Parallelizer::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Parallelizer::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::Parallelizer::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::Parallelizer::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::Parallelizer::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::Parallelizer::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::Parallelizer::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::Parallelizer "[INTERNAL]   Parallelizer
execution of functions.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | \"serial\"     | (serial|open | CasADi::Para |
| ion          |              |              | mp|mpi)      | llelizerInte |
|              |              |              |              | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-----------------+------------------------------+
|       Id        |           Used in            |
+=================+==============================+
| max_threads     | CasADi::ParallelizerInternal |
+-----------------+------------------------------+
| num_threads     | CasADi::ParallelizerInternal |
+-----------------+------------------------------+
| task_allocation | CasADi::ParallelizerInternal |
+-----------------+------------------------------+
| task_cputime    | CasADi::ParallelizerInternal |
+-----------------+------------------------------+
| task_endtime    | CasADi::ParallelizerInternal |
+-----------------+------------------------------+
| task_order      | CasADi::ParallelizerInternal |
+-----------------+------------------------------+
| task_starttime  | CasADi::ParallelizerInternal |
+-----------------+------------------------------+

Diagrams

C++ includes: parallelizer.hpp ";

%feature("docstring") CasADi::Parallelizer::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Parallelizer::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::Parallelizer::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::Parallelizer::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::Parallelizer::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::Parallelizer::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::Parallelizer::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::Parallelizer::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Parallelizer::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::Parallelizer::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::Parallelizer::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::Parallelizer::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Parallelizer::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::Parallelizer::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::Parallelizer::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::Parallelizer::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::Parallelizer::isInit "

Is initialized?

";

%feature("docstring") CasADi::Parallelizer::getOption "

get an option value

";

%feature("docstring") CasADi::Parallelizer::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Parallelizer::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::Parallelizer::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::Parallelizer::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::Parallelizer::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::Parallelizer::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::Parallelizer::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::Parallelizer::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::Parallelizer::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::Parallelizer::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::Parallelizer::solve "

the same as evaluate()

";

%feature("docstring") CasADi::Parallelizer::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::Parallelizer::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::Parallelizer::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::Parallelizer::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::Parallelizer::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::Parallelizer::checkNode "[INTERNAL]  Check if
the node is pointing to the right type of object.

";

%feature("docstring") CasADi::Parallelizer::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::Parallelizer::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::Parallelizer::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::Parallelizer::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::Parallelizer::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::Parallelizer::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::Parallelizer::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::Parallelizer::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::Parallelizer::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::Parallelizer::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::Parallelizer::Parallelizer "

>  CasADi::Parallelizer::Parallelizer()
------------------------------------------------------------------------

Default constructor.

>  CasADi::Parallelizer::Parallelizer(const std::vector< Function > &funcs)
------------------------------------------------------------------------

Create a Parallelizer.

";

%feature("docstring") CasADi::Parallelizer::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Parallelizer::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::Parallelizer::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::Parallelizer::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::Parallelizer::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::Parallelizer::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::Parallelizer::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::Parallelizer::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Parallelizer::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::Parallelizer::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::Parallelizer::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Parallelizer::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::Parallelizer::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::Parallelizer::evaluate "

Evaluate.

";

%feature("docstring") CasADi::Parallelizer::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::Parallelizer::copyOptions "

Copy all options from another object.

";


// File: classCasADi_1_1Polynomial.xml
%feature("docstring") CasADi::Polynomial "[INTERNAL]  Helper class for
differentiating and integrating polynomials.

Joel Andersson

C++ includes: polynomial.hpp ";

%feature("docstring") CasADi::Polynomial::derivative "

Create a new polynomial for the derivative.

";

%feature("docstring") CasADi::Polynomial::Polynomial "

>  CasADi::Polynomial::Polynomial(real_t scalar=1)
------------------------------------------------------------------------

Construct a constant polynomial.

>  CasADi::Polynomial::Polynomial(real_t p0, real_t p1)
------------------------------------------------------------------------

Construct a linear polynomial.

>  CasADi::Polynomial::Polynomial(real_t p0, real_t p1, real_t p2)
------------------------------------------------------------------------

Construct a quadratic polynomial.

>  CasADi::Polynomial::Polynomial(real_t p0, real_t p1, real_t p2, real_t p3)
------------------------------------------------------------------------

Construct a cubic polynomial.

>  CasADi::Polynomial::Polynomial(const std::vector< T > &coeff)
------------------------------------------------------------------------

Construct from a vector of polynomial coefficients.

";

%feature("docstring") CasADi::Polynomial::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::Polynomial::anti_derivative "

Create a new polynomial for the anti-derivative (primitive function)

";

%feature("docstring") CasADi::Polynomial::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::Polynomial::degree "

Degree of the polynomial.

";

%feature("docstring") CasADi::Polynomial::toScalar "

Get scalar value (error if degree()!=0)

";

%feature("docstring") CasADi::Polynomial::trim "

Remove excess zeros.

";

%feature("docstring") CasADi::Polynomial::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::Polynomial::getRepresentation "

Return a string with a representation (for SWIG)

";


// File: classCasADi_1_1PrintableObject.xml
%feature("docstring") CasADi::PrintableObject::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::PrintableObject::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") CasADi::PrintableObject::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::PrintableObject "[INTERNAL]  Base class for
objects that have a natural string representation.

Joel Andersson

C++ includes: printable_object.hpp ";

%feature("docstring") CasADi::PrintableObject::getDescription "

Return a string with a destription (for SWIG)

";


// File: structProfilingData__ENTRY.xml
%feature("docstring") ProfilingData_ENTRY "[INTERNAL] C++ includes:
profiling.hpp ";


// File: structProfilingData__EXIT.xml
%feature("docstring") ProfilingData_EXIT "[INTERNAL] C++ includes:
profiling.hpp ";


// File: structProfilingData__IO.xml
%feature("docstring") ProfilingData_IO "[INTERNAL] C++ includes:
profiling.hpp ";


// File: structProfilingData__NAME.xml
%feature("docstring") ProfilingData_NAME "[INTERNAL] C++ includes:
profiling.hpp ";


// File: structProfilingData__SOURCE.xml
%feature("docstring") ProfilingData_SOURCE "[INTERNAL] C++ includes:
profiling.hpp ";


// File: structProfilingData__TIMELINE.xml
%feature("docstring") ProfilingData_TIMELINE "[INTERNAL] C++ includes:
profiling.hpp ";


// File: structProfilingHeader.xml
%feature("docstring") ProfilingHeader "[INTERNAL] C++ includes:
profiling.hpp ";


// File: classCasADi_1_1PsdIndefDpleSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::PsdIndefDpleSolver::inputSchemeEntry " [INTERNAL]  Find the index
for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::PsdIndefDpleSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::PsdIndefDpleSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::PsdIndefDpleSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::PsdIndefDpleSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::PsdIndefDpleSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::PsdIndefDpleSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::PsdIndefDpleSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::PsdIndefDpleSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::printStats "

Print solver statistics.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::PsdIndefDpleSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::print "[INTERNAL]  Print
a destription of the object.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::PsdIndefDpleSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::PsdIndefDpleSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::PsdIndefDpleSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::PsdIndefDpleSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::PsdIndefDpleSolver "[INTERNAL]  An efficient
solver for Discrete Periodic Lyapunov Eaauqtions using SLICOT.

Given matrices A_k and symmetric V_k, k = 0..K-1

A_k in R^(n x n) V_k in R^n

provides all of P_k that satisfy:

P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k P_k+1 = A_k*P_k*A_k' + V_k for k =
1..K-1

Uses Periodic Schur Decomposition (psd) and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Joris gillis

>Input scheme: CasADi::DPLEInput (DPLE_NUM_IN = 3) [dpleIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_A                 | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+
| DPLE_V                 | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::DPLEOutput (DPLE_NUM_OUT = 2) [dpleOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_P                 | p                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, blkdiag     |
|                        |                        | otherwise) (cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| const_dim    | OT_BOOLEAN   | true         | Assume       | CasADi::Dple |
|              |              |              | constant     | Internal     |
|              |              |              | dimension of |              |
|              |              |              | P            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | CasADi::Dple |
|              |              |              | unstability  | Internal     |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| error_unstab | OT_BOOLEAN   | false        | Throw an     | CasADi::Dple |
| le           |              |              | exception    | Internal     |
|              |              |              | when it is   |              |
|              |              |              | detected     |              |
|              |              |              | that Product |              |
|              |              |              | (A_i,i=N..1) |              |
|              |              |              | has          |              |
|              |              |              | eigenvalues  |              |
|              |              |              | greater than |              |
|              |              |              | 1-eps_unstab |              |
|              |              |              | le           |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | User-defined | CasADi::PsdI |
| r            | VER          | )            | linear       | ndefDpleInte |
|              |              |              | solver       | rnal         |
|              |              |              | class.       |              |
|              |              |              | Needed for s |              |
|              |              |              | ensitivities |              |
|              |              |              | .            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | CasADi::PsdI |
| r_options    | Y            | )            | be passed to | ndefDpleInte |
|              |              |              | the linear   | rnal         |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pos_def      | OT_BOOLEAN   | false        | Assume P     | CasADi::Dple |
|              |              |              | positive     | Internal     |
|              |              |              | definite     |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: psd_indef_dple_solver.hpp ";

%feature("docstring") CasADi::PsdIndefDpleSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getOption "

get an option value

";

%feature("docstring") CasADi::PsdIndefDpleSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::PsdIndefDpleSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::PsdIndefDpleSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::PsdIndefDpleSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::PsdIndefDpleSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::PsdIndefDpleSolver "

>  CasADi::PsdIndefDpleSolver::PsdIndefDpleSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::PsdIndefDpleSolver::PsdIndefDpleSolver(const std::vector< Sparsity > &A, const std::vector< Sparsity > &V)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

A:  List of sparsities of A_i

V:  List of sparsities of V_i

";

%feature("docstring") CasADi::PsdIndefDpleSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::PsdIndefDpleSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::spCanEvaluate "[INTERNAL]
Is the class able to propate seeds through the algorithm? (for usage, see
the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::PsdIndefDpleSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::PsdIndefDpleSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::PsdIndefDpleSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::clone "

Clone.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::PsdIndefDpleSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::PsdIndefDpleSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::PsdIndefDpleSolver::spInit "[INTERNAL]  Reset
the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";


// File: classCasADi_1_1QCQPQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::QCQPQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::QCQPQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::QCQPQPSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QCQPQPSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::QCQPQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::QCQPQPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::QCQPQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::QCQPQPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::QCQPQPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::QCQPQPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::QCQPQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::QCQPQPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QCQPQPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::QCQPQPSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") CasADi::QCQPQPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::QCQPQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::QCQPQPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::QCQPQPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::QCQPQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::QCQPQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::QCQPQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::QCQPQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::QCQPQPSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QCQPQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::QCQPQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::QCQPQPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::QCQPQPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::QCQPQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::QCQPQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::QCQPQPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::QCQPQPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::QCQPQPSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") CasADi::QCQPQPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::QCQPQPSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::QCQPQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::QCQPQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::QCQPQPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::QCQPQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::QCQPQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::QCQPQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::QCQPQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::QCQPQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::QCQPQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::QCQPQPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::QCQPQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::QCQPQPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::QCQPQPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::QCQPQPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::QCQPQPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::QCQPQPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::QCQPQPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::QCQPQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::QCQPQPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::QCQPQPSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::QCQPQPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::QCQPQPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::QCQPQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::QCQPQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::QCQPQPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::QCQPQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::QCQPQPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QCQPQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::QCQPQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::QCQPQPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::QCQPQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::QCQPQPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::QCQPQPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::QCQPQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::QCQPQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::QCQPQPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::QCQPQPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::QCQPQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::QCQPQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::QCQPQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::QCQPQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::QCQPQPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::QCQPQPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::QCQPQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::QCQPQPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::QCQPQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::QCQPQPSolver "[INTERNAL]  Use a QCQP solver
to solve q QP.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x   x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX                  with :       H sparse (n x n) positive
definite       g dense  (n x 1) n: number of decision variables (x)     nc:
number of constraints (A)

If H is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: CasADi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qcqp_solver  | OT_QCQPSOLVE | GenericType( | The          | CasADi::QCQP |
|              | R            | )            | QCQPSolver   | QPInternal   |
|              |              |              | used to      |              |
|              |              |              | solve the    |              |
|              |              |              | QPs.         |              |
+--------------+--------------+--------------+--------------+--------------+
| qcqp_solver_ | OT_DICTIONAR | GenericType( | Options to   | CasADi::QCQP |
| options      | Y            | )            | be passed to | QPInternal   |
|              |              |              | the          |              |
|              |              |              | QCQPSOlver   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-------------------+------------------------+
|        Id         |        Used in         |
+===================+========================+
| qcqp_solver_stats | CasADi::QCQPQPInternal |
+-------------------+------------------------+

Diagrams

C++ includes: qcqp_qp_solver.hpp ";

%feature("docstring") CasADi::QCQPQPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::QCQPQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::QCQPQPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::QCQPQPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::QCQPQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::QCQPQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::QCQPQPSolver::getSolver "

Access underlying QCQP solver.

";

%feature("docstring") CasADi::QCQPQPSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::QCQPQPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::QCQPQPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::QCQPQPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::QCQPQPSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QCQPQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::QCQPQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::QCQPQPSolver::QCQPQPSolver "

>  CasADi::QCQPQPSolver::QCQPQPSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::QCQPQPSolver::QCQPQPSolver(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") CasADi::QCQPQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::QCQPQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::QCQPQPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";


// File: classCasADi_1_1QCQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring") CasADi::QCQPSolver::input
"

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::QCQPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::QCQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::QCQPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::QCQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::QCQPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::QCQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::QCQPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::QCQPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::QCQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::QCQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::QCQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::QCQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::QCQPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QCQPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::QCQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::QCQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::QCQPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::QCQPSolver "[INTERNAL]   QCQPSolver.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x   x  subject to             1/2 x' Pi x +
qi' x + ri  <= 0   for i=0..nq-1                          LBA <= A x <= UBA
LBX <= x   <= UBX                  with : H, Pi sparse (n x n) positive
definite       g, qi dense  (n x 1) ri scalar                  n: number of
decision variables (x)     nc: number of linear constraints (A)     nq:
number of quadratic constraints

If H, Pi is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: CasADi::QCQPSolverInput (QCQP_SOLVER_NUM_IN = 13) [qcqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_H          | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_G          | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_P          | p                      | The horizontal stack   |
|                        |                        | of all Pi. Each Pi is  |
|                        |                        | sparse (n x n). Only   |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_Q          | q                      | The vertical stack of  |
|                        |                        | all qi: dense, (nq n x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_R          | r                      | The vertical stack of  |
|                        |                        | all scalars ri (nq x   |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_A          | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBA        | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBA        | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBX        | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBX        | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_X0         | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X0     | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::QCQPSolverOutput (QCQP_SOLVER_NUM_OUT = 5) [qcqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_X          | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_COST       | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: qcqp_solver.hpp ";

%feature("docstring") CasADi::QCQPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::QCQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::QCQPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QCQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::QCQPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::QCQPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::QCQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::QCQPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::QCQPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::QCQPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::QCQPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QCQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::QCQPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::QCQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::QCQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::QCQPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::QCQPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::QCQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::QCQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::QCQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::QCQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::QCQPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::QCQPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::QCQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::QCQPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::QCQPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::QCQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::QCQPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::QCQPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::QCQPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QCQPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::QCQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::QCQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::QCQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::QCQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::QCQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::QCQPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::QCQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::QCQPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::QCQPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::QCQPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::QCQPSolver::setQPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") CasADi::QCQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::QCQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::QCQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::QCQPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::QCQPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::QCQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::QCQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::QCQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::QCQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::QCQPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::QCQPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::QCQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::QCQPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QCQPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::QCQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::QCQPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::QCQPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::QCQPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QCQPSolver::QCQPSolver "

Default constructor.

";

%feature("docstring") CasADi::QCQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::QCQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::QCQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::QCQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::QCQPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::QCQPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::QCQPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::QCQPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::QCQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::QCQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::QCQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::QCQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::QCQPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::QCQPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::QCQPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::QCQPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::QCQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";


// File: classCasADi_1_1QCQPSolverInputIOSchemeVector.xml
%feature("docstring") CasADi::QCQPSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")
CasADi::QCQPSolverInputIOSchemeVector::QCQPSolverInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::QCQPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::QCQPSolverInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::QCQPSolverInputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::QCQPSolverInputIOSchemeVector::print "[INTERNAL]  Print a destription of the object.

";

%feature("docstring") CasADi::QCQPSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'QCQPSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
CasADi::QCQPSolverInputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::QCQPSolverInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";


// File: classCasADi_1_1QCQPSolverOutputIOSchemeVector.xml
%feature("docstring") CasADi::QCQPSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'QCQPSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::QCQPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::QCQPSolverOutputIOSchemeVector::print "[INTERNAL]  Print a destription of the object.

";

%feature("docstring")
CasADi::QCQPSolverOutputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring")
CasADi::QCQPSolverOutputIOSchemeVector::QCQPSolverOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::QCQPSolverOutputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::QCQPSolverOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") CasADi::QCQPSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") CasADi::QCQPSolverOutputIOSchemeVector::vector "[INTERNAL] ";


// File: classCasADi_1_1QCQPStructIOSchemeVector.xml
%feature("docstring") CasADi::QCQPStructIOSchemeVector "[INTERNAL]  Helper
function for 'QCQPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") CasADi::QCQPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::QCQPStructIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::QCQPStructIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::QCQPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")
CasADi::QCQPStructIOSchemeVector::QCQPStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::QCQPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::QCQPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::QCQPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";


// File: classCasADi_1_1QPLPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::QPLPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::QPLPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::QPLPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::QPLPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::QPLPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::QPLPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::QPLPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::QPLPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::QPLPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::QPLPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::QPLPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::QPLPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::QPLPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::QPLPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::QPLPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::QPLPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::QPLPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::QPLPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::QPLPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::QPLPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::QPLPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::QPLPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::QPLPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::QPLPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::QPLPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::QPLPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::QPLPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::QPLPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::QPLPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QPLPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::QPLPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::QPLPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::QPLPSolver "[INTERNAL]  IPOPT QP Solver for
quadratic programming.

Solves the following linear problem:

min          c' x   x  subject to             LBA <= A x <= UBA LBX <= x
<= UBX                  with x ( n x 1)          c ( n x 1 )          A
sparse matrix ( nc x n)          LBA, UBA dense vector (nc x 1)
LBX, UBX dense vector (n x 1)                  n: number of decision
variables (x)     nc: number of constraints (A)

Joris Gillis

>Input scheme: CasADi::LPSolverInput (LP_SOLVER_NUM_IN = 7) [lpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_C            | c                      | The vector c: dense (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| LP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::LPSolverOutput (LP_SOLVER_NUM_OUT = 5) [lpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| LP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver    | OT_QPSOLVER  | GenericType( | The QPSOlver | CasADi::QPLP |
|              |              | )            | used to      | Internal     |
|              |              |              | solve the    |              |
|              |              |              | LPs.         |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver_op | OT_DICTIONAR | GenericType( | Options to   | CasADi::QPLP |
| tions        | Y            | )            | be passed to | Internal     |
|              |              |              | the QPSOlver |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-----------------+----------------------+
|       Id        |       Used in        |
+=================+======================+
| qp_solver_stats | CasADi::QPLPInternal |
+-----------------+----------------------+

Diagrams

C++ includes: qp_lp_solver.hpp ";

%feature("docstring") CasADi::QPLPSolver::QPLPSolver "

>  CasADi::QPLPSolver::QPLPSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::QPLPSolver::QPLPSolver(const LPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") CasADi::QPLPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::QPLPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::QPLPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::QPLPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::QPLPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::QPLPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::QPLPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::QPLPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::QPLPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QPLPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::QPLPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::QPLPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::QPLPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::QPLPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::QPLPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::QPLPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::QPLPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QPLPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::QPLPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::QPLPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::QPLPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QPLPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::QPLPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::QPLPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QPLPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::QPLPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QPLPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::QPLPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::QPLPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::QPLPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::QPLPSolver::getSolver "

Access underlying QP solver.

";

%feature("docstring") CasADi::QPLPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::QPLPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::QPLPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::QPLPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::QPLPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::QPLPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::QPLPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::QPLPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::QPLPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::QPLPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::QPLPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::QPLPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::QPLPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::QPLPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::QPLPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::QPLPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::QPLPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::QPLPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::QPLPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::QPLPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::QPLPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::QPLPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::QPLPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::QPLPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::QPLPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::QPLPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::QPLPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::QPLPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::QPLPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::QPLPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::QPLPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::QPLPSolver::getNumOutputs "

Get the number of function outputs.

";


// File: classCasADi_1_1QPOasesSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::QPOasesSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::QPOasesSolver::getOption "

get an option value

";

%feature("docstring") CasADi::QPOasesSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::QPOasesSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::QPOasesSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::QPOasesSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::QPOasesSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::QPOasesSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::QPOasesSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::QPOasesSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::QPOasesSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::QPOasesSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::QPOasesSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::QPOasesSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::QPOasesSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::QPOasesSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::QPOasesSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::QPOasesSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::QPOasesSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::QPOasesSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::QPOasesSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::QPOasesSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::QPOasesSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::QPOasesSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::QPOasesSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::QPOasesSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::QPOasesSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::QPOasesSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::QPOasesSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::QPOasesSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QPOasesSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::QPOasesSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::QPOasesSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::QPOasesSolver "[INTERNAL]  Interface to
QPOases Solver for quadratic programming.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x   x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX                  with :       H sparse (n x n) positive
definite       g dense  (n x 1) n: number of decision variables (x)     nc:
number of constraints (A)

If H is not positive-definite, the solver should throw an error.

Joris Gillis, Joel Andersson

>Input scheme: CasADi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| CPUtime      | OT_REAL      | None         | The maximum  | CasADi::QPOa |
|              |              |              | allowed CPU  | sesInternal  |
|              |              |              | time in      |              |
|              |              |              | seconds for  |              |
|              |              |              | the whole in |              |
|              |              |              | itialisation |              |
|              |              |              | (and the     |              |
|              |              |              | actually     |              |
|              |              |              | required one |              |
|              |              |              | on output).  |              |
|              |              |              | Disabled if  |              |
|              |              |              | unset.       |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| boundRelaxat | OT_REAL      | 10000        | Initial      | CasADi::QPOa |
| ion          |              |              | relaxation   | sesInternal  |
|              |              |              | of bounds to |              |
|              |              |              | start        |              |
|              |              |              | homotopy and |              |
|              |              |              | initial      |              |
|              |              |              | value for    |              |
|              |              |              | far bounds.  |              |
+--------------+--------------+--------------+--------------+--------------+
| boundToleran | OT_REAL      | 0.000        | If upper and | CasADi::QPOa |
| ce           |              |              | lower bounds | sesInternal  |
|              |              |              | differ less  |              |
|              |              |              | than this    |              |
|              |              |              | tolerance,   |              |
|              |              |              | they are     |              |
|              |              |              | regarded     |              |
|              |              |              | equal, i.e.  |              |
|              |              |              | as equality  |              |
|              |              |              | constraint.  |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| enableCholes | OT_INTEGER   | 0            | Specifies    | CasADi::QPOa |
| kyRefactoris |              |              | the          | sesInternal  |
| ation        |              |              | frequency of |              |
|              |              |              | a full re-fa |              |
|              |              |              | ctorisation  |              |
|              |              |              | of projected |              |
|              |              |              | Hessian      |              |
|              |              |              | matrix: 0:   |              |
|              |              |              | turns them   |              |
|              |              |              | off, 1: uses |              |
|              |              |              | them at each |              |
|              |              |              | iteration    |              |
|              |              |              | etc.         |              |
+--------------+--------------+--------------+--------------+--------------+
| enableDriftC | OT_INTEGER   | 1            | Specifies    | CasADi::QPOa |
| orrection    |              |              | the          | sesInternal  |
|              |              |              | frequency of |              |
|              |              |              | drift        |              |
|              |              |              | corrections: |              |
|              |              |              | 0: turns     |              |
|              |              |              | them off.    |              |
+--------------+--------------+--------------+--------------+--------------+
| enableEquali | OT_BOOLEAN   | False        | Specifies    | CasADi::QPOa |
| ties         |              |              | whether      | sesInternal  |
|              |              |              | equalities   |              |
|              |              |              | should be    |              |
|              |              |              | treated as   |              |
|              |              |              | always       |              |
|              |              |              | active       |              |
|              |              |              | (True) or    |              |
|              |              |              | not (False)  |              |
+--------------+--------------+--------------+--------------+--------------+
| enableFarBou | OT_BOOLEAN   | True         | Enables the  | CasADi::QPOa |
| nds          |              |              | use of far   | sesInternal  |
|              |              |              | bounds.      |              |
+--------------+--------------+--------------+--------------+--------------+
| enableFlippi | OT_BOOLEAN   | True         | Enables the  | CasADi::QPOa |
| ngBounds     |              |              | use of       | sesInternal  |
|              |              |              | flipping     |              |
|              |              |              | bounds.      |              |
+--------------+--------------+--------------+--------------+--------------+
| enableFullLI | OT_BOOLEAN   | False        | Enables      | CasADi::QPOa |
| Tests        |              |              | condition-   | sesInternal  |
|              |              |              | hardened     |              |
|              |              |              | (but more    |              |
|              |              |              | expensive)   |              |
|              |              |              | LI test.     |              |
+--------------+--------------+--------------+--------------+--------------+
| enableNZCTes | OT_BOOLEAN   | True         | Enables      | CasADi::QPOa |
| ts           |              |              | nonzero      | sesInternal  |
|              |              |              | curvature    |              |
|              |              |              | tests.       |              |
+--------------+--------------+--------------+--------------+--------------+
| enableRampin | OT_BOOLEAN   | True         | Enables      | CasADi::QPOa |
| g            |              |              | ramping.     | sesInternal  |
+--------------+--------------+--------------+--------------+--------------+
| enableRegula | OT_BOOLEAN   | False        | Enables      | CasADi::QPOa |
| risation     |              |              | automatic    | sesInternal  |
|              |              |              | Hessian regu |              |
|              |              |              | larisation.  |              |
+--------------+--------------+--------------+--------------+--------------+
| epsDen       | OT_REAL      | 0.000        | Denominator  | CasADi::QPOa |
|              |              |              | tolerance    | sesInternal  |
|              |              |              | for ratio    |              |
|              |              |              | tests.       |              |
+--------------+--------------+--------------+--------------+--------------+
| epsFlipping  | OT_REAL      | 0.000        | Tolerance of | CasADi::QPOa |
|              |              |              | squared      | sesInternal  |
|              |              |              | Cholesky     |              |
|              |              |              | diagonal     |              |
|              |              |              | factor which |              |
|              |              |              | triggers     |              |
|              |              |              | flipping     |              |
|              |              |              | bound.       |              |
+--------------+--------------+--------------+--------------+--------------+
| epsIterRef   | OT_REAL      | 0.000        | Early        | CasADi::QPOa |
|              |              |              | termination  | sesInternal  |
|              |              |              | tolerance    |              |
|              |              |              | for          |              |
|              |              |              | iterative    |              |
|              |              |              | refinement.  |              |
+--------------+--------------+--------------+--------------+--------------+
| epsLITests   | OT_REAL      | 0.000        | Tolerance    | CasADi::QPOa |
|              |              |              | for linear   | sesInternal  |
|              |              |              | independence |              |
|              |              |              | tests.       |              |
+--------------+--------------+--------------+--------------+--------------+
| epsNZCTests  | OT_REAL      | 0.000        | Tolerance    | CasADi::QPOa |
|              |              |              | for nonzero  | sesInternal  |
|              |              |              | curvature    |              |
|              |              |              | tests.       |              |
+--------------+--------------+--------------+--------------+--------------+
| epsNum       | OT_REAL      | -0.000       | Numerator    | CasADi::QPOa |
|              |              |              | tolerance    | sesInternal  |
|              |              |              | for ratio    |              |
|              |              |              | tests.       |              |
+--------------+--------------+--------------+--------------+--------------+
| epsRegularis | OT_REAL      | 0.000        | Scaling      | CasADi::QPOa |
| ation        |              |              | factor of    | sesInternal  |
|              |              |              | identity     |              |
|              |              |              | matrix used  |              |
|              |              |              | for Hessian  |              |
|              |              |              | regularisati |              |
|              |              |              | on.          |              |
+--------------+--------------+--------------+--------------+--------------+
| finalRamping | OT_REAL      | 1            | Final value  | CasADi::QPOa |
|              |              |              | for ramping  | sesInternal  |
|              |              |              | strategy.    |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| growFarBound | OT_REAL      | 1000         | Factor to    | CasADi::QPOa |
| s            |              |              | grow far     | sesInternal  |
|              |              |              | bounds.      |              |
+--------------+--------------+--------------+--------------+--------------+
| initialFarBo | OT_REAL      | 1000000      | Initial size | CasADi::QPOa |
| unds         |              |              | for far      | sesInternal  |
|              |              |              | bounds.      |              |
+--------------+--------------+--------------+--------------+--------------+
| initialRampi | OT_REAL      | 0.500        | Start value  | CasADi::QPOa |
| ng           |              |              | for ramping  | sesInternal  |
|              |              |              | strategy.    |              |
+--------------+--------------+--------------+--------------+--------------+
| initialStatu | OT_STRING    | lower        | Initial      | CasADi::QPOa |
| sBounds      |              |              | status of    | sesInternal  |
|              |              |              | bounds at    |              |
|              |              |              | first        |              |
|              |              |              | iteration.   |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| maxDualJump  | OT_REAL      | 100000000    | Maximum      | CasADi::QPOa |
|              |              |              | allowed jump | sesInternal  |
|              |              |              | in dual      |              |
|              |              |              | variables in |              |
|              |              |              | linear       |              |
|              |              |              | independence |              |
|              |              |              | tests.       |              |
+--------------+--------------+--------------+--------------+--------------+
| maxPrimalJum | OT_REAL      | 100000000    | Maximum      | CasADi::QPOa |
| p            |              |              | allowed jump | sesInternal  |
|              |              |              | in primal    |              |
|              |              |              | variables in |              |
|              |              |              | nonzero      |              |
|              |              |              | curvature    |              |
|              |              |              | tests.       |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| nWSR         | OT_INTEGER   | None         | The maximum  | CasADi::QPOa |
|              |              |              | number of    | sesInternal  |
|              |              |              | working set  |              |
|              |              |              | recalculatio |              |
|              |              |              | ns to be     |              |
|              |              |              | performed    |              |
|              |              |              | during the   |              |
|              |              |              | initial      |              |
|              |              |              | homotopy.    |              |
|              |              |              | Default is   |              |
|              |              |              | 5(nx + nc)   |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| numRefinemen | OT_INTEGER   | 1            | Maximum      | CasADi::QPOa |
| tSteps       |              |              | number of    | sesInternal  |
|              |              |              | iterative    |              |
|              |              |              | refinement   |              |
|              |              |              | steps.       |              |
+--------------+--------------+--------------+--------------+--------------+
| numRegularis | OT_INTEGER   | 0            | Maximum      | CasADi::QPOa |
| ationSteps   |              |              | number of    | sesInternal  |
|              |              |              | successive r |              |
|              |              |              | egularisatio |              |
|              |              |              | n steps.     |              |
+--------------+--------------+--------------+--------------+--------------+
| printLevel   | OT_STRING    | medium       | Defines the  | CasADi::QPOa |
|              |              |              | amount of    | sesInternal  |
|              |              |              | text output  |              |
|              |              |              | during QP    |              |
|              |              |              | solution,    |              |
|              |              |              | see Section  |              |
|              |              |              | 5.7          |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| terminationT | OT_REAL      | 0.000        | Relative     | CasADi::QPOa |
| olerance     |              |              | termination  | sesInternal  |
|              |              |              | tolerance to |              |
|              |              |              | stop         |              |
|              |              |              | homotopy.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: qpoases_solver.hpp ";

%feature("docstring") CasADi::QPOasesSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::QPOasesSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::QPOasesSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QPOasesSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::QPOasesSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::QPOasesSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::QPOasesSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::QPOasesSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::QPOasesSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::QPOasesSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::QPOasesSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::QPOasesSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::QPOasesSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::QPOasesSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::QPOasesSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::QPOasesSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::QPOasesSolver::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::QPOasesSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::QPOasesSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::QPOasesSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::QPOasesSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") CasADi::QPOasesSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::QPOasesSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::QPOasesSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::QPOasesSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::QPOasesSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::QPOasesSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::QPOasesSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::QPOasesSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QPOasesSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") CasADi::QPOasesSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::QPOasesSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::QPOasesSolver::QPOasesSolver "

>  CasADi::QPOasesSolver::QPOasesSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::QPOasesSolver::QPOasesSolver(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") CasADi::QPOasesSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::QPOasesSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::QPOasesSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::QPOasesSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::QPOasesSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::QPOasesSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::QPOasesSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::QPOasesSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::QPOasesSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QPOasesSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QPOasesSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::QPOasesSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::QPOasesSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::QPOasesSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::QPOasesSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::QPOasesSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::QPOasesSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::QPOasesSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::QPOasesSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::QPOasesSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::QPOasesSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::QPOasesSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::QPOasesSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::QPOasesSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::QPOasesSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::QPOasesSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::QPOasesSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::QPOasesSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::QPOasesSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::QPOasesSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QPOasesSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";


// File: classCasADi_1_1QPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::QPSolver::setOptionByAllowedIndex " [INTERNAL]  Set a certain option
by giving its index into the allowed values.

";

%feature("docstring") CasADi::QPSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::QPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::QPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::QPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::QPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::QPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::QPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::QPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::QPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::QPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::QPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::QPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::QPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::QPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::QPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::QPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::QPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::QPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::QPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::QPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::QPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::QPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::QPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::QPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::QPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::QPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::QPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::QPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::QPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::QPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::QPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::QPSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") CasADi::QPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::QPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::QPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::QPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::QPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::QPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::QPSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") CasADi::QPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::QPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::QPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::QPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::QPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::QPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::QPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::QPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::QPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::QPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::QPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::QPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::QPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::QPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::QPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::QPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::QPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::QPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::QPSolver::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::QPSolver "[INTERNAL]   QPSolver.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x   x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX                  with :       H sparse (n x n) positive
definite       g dense  (n x 1) n: number of decision variables (x)     nc:
number of constraints (A)

If H is not positive-definite, the solver should throw an error.

Joel Andersson

>Input scheme: CasADi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: qp_solver.hpp ";

%feature("docstring") CasADi::QPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::QPSolver::outputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::QPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::QPSolver::QPSolver "

Default constructor.

";

%feature("docstring") CasADi::QPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::QPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::QPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::QPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::QPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::QPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::QPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::QPSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::QPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::QPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::QPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::QPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::QPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::QPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::QPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::QPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::QPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::QPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::QPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::QPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::QPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::QPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::QPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::QPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::QPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::QPSolver::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") CasADi::QPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::QPSolver::swap "[INTERNAL]  Swap content with
another instance.

";


// File: classCasADi_1_1QPSolverInputIOSchemeVector.xml
%feature("docstring") CasADi::QPSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'QPSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::QPSolverInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::QPSolverInputIOSchemeVector::print "[INTERNAL]  Print a destription of the object.

";

%feature("docstring")
CasADi::QPSolverInputIOSchemeVector::QPSolverInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::QPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::QPSolverInputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::QPSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") CasADi::QPSolverInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::QPSolverInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classCasADi_1_1QPSolverOutputIOSchemeVector.xml
%feature("docstring") CasADi::QPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::QPSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") CasADi::QPSolverOutputIOSchemeVector::print "[INTERNAL]  Print a destription of the object.

";

%feature("docstring") CasADi::QPSolverOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring")
CasADi::QPSolverOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return
a string with a representation (for SWIG)

";

%feature("docstring") CasADi::QPSolverOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
CasADi::QPSolverOutputIOSchemeVector::QPSolverOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::QPSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'QPSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::QPSolverOutputIOSchemeVector::vector "[INTERNAL] ";


// File: classCasADi_1_1QPStabilizer.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::QPStabilizer::setOptionByEnumValue " [INTERNAL]  Set a certain
option by giving an enum value.

";

%feature("docstring") CasADi::QPStabilizer::getOption "

get an option value

";

%feature("docstring") CasADi::QPStabilizer::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::QPStabilizer::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::QPStabilizer::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::QPStabilizer::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::QPStabilizer::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::QPStabilizer::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::QPStabilizer::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::QPStabilizer::isInit "

Is initialized?

";

%feature("docstring") CasADi::QPStabilizer::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::QPStabilizer::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::QPStabilizer::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::QPStabilizer::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::QPStabilizer::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::QPStabilizer::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::QPStabilizer::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::QPStabilizer::solve "

the same as evaluate()

";

%feature("docstring") CasADi::QPStabilizer::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::QPStabilizer::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::QPStabilizer::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::QPStabilizer::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::QPStabilizer::getSolver "

Access underlying QP solver.

";

%feature("docstring") CasADi::QPStabilizer::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::QPStabilizer::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::QPStabilizer::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::QPStabilizer "[INTERNAL]  IPOPT QP Solver for
quadratic programming.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x   x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX                  with :       H sparse (n x n) positive
definite       g dense  (n x 1) n: number of decision variables (x)     nc:
number of constraints (A)

If H is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: CasADi::StabilizedQPSolverInput (STABILIZED_QP_SOLVER_NUM_IN = 13) [stabilizedQpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| STABILIZED_QP_SOLVER_H | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_G | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_A | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | uba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lbx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | ubx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_X | x0                     | dense, (n x 1)         |
| 0                      |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lam_x0                 | dense                  |
| AM_X0                  |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muR                    | dense (1 x 1)          |
| UR                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muE                    | dense (nc x 1)         |
| UE                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | mu                     | dense (nc x 1)         |
| U                      |                        |                        |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver    | OT_QPSOLVER  | GenericType( | The QP       | CasADi::QPSt |
|              |              | )            | solver used  | abilizerInte |
|              |              |              | to solve the | rnal         |
|              |              |              | stabilized   |              |
|              |              |              | QPs.         |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver_op | OT_DICTIONAR | GenericType( | Options to   | CasADi::QPSt |
| tions        | Y            | )            | be passed to | abilizerInte |
|              |              |              | the QP       | rnal         |
|              |              |              | solver       |              |
|              |              |              | instance     |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-----------------+------------------------------+
|       Id        |           Used in            |
+=================+==============================+
| qp_solver_stats | CasADi::QPStabilizerInternal |
+-----------------+------------------------------+

Diagrams

C++ includes: qp_stabilizer.hpp ";

%feature("docstring") CasADi::QPStabilizer::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QPStabilizer::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::QPStabilizer::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::QPStabilizer::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::QPStabilizer::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::QPStabilizer::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::QPStabilizer::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::QPStabilizer::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::QPStabilizer::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::QPStabilizer::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::QPStabilizer::evaluate "

Evaluate.

";

%feature("docstring") CasADi::QPStabilizer::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") CasADi::QPStabilizer::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::QPStabilizer::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::QPStabilizer::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::QPStabilizer::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::QPStabilizer::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::QPStabilizer::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::QPStabilizer::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") CasADi::QPStabilizer::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::QPStabilizer::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::QPStabilizer::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::QPStabilizer::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::QPStabilizer::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QPStabilizer::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::QPStabilizer::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::QPStabilizer::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::QPStabilizer::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::QPStabilizer::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::QPStabilizer::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::QPStabilizer::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QPStabilizer::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::QPStabilizer::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::QPStabilizer::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::QPStabilizer::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::QPStabilizer::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::QPStabilizer::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::QPStabilizer::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::QPStabilizer::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::QPStabilizer::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::QPStabilizer::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::QPStabilizer::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::QPStabilizer::QPStabilizer "

>  CasADi::QPStabilizer::QPStabilizer()
------------------------------------------------------------------------

Default constructor.

>  CasADi::QPStabilizer::QPStabilizer(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") CasADi::QPStabilizer::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::QPStabilizer::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::QPStabilizer::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::QPStabilizer::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QPStabilizer::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::QPStabilizer::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::QPStabilizer::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::QPStabilizer::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::QPStabilizer::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::QPStabilizer::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::QPStabilizer::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::QPStabilizer::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::QPStabilizer::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::QPStabilizer::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::QPStabilizer::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::QPStabilizer::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::QPStabilizer::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::QPStabilizer::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::QPStabilizer::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::QPStabilizer::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::QPStabilizer::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::QPStabilizer::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::QPStabilizer::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::QPStabilizer::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::QPStabilizer::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::QPStabilizer::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::QPStabilizer::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::QPStabilizer::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::QPStabilizer::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";


// File: classCasADi_1_1QPStructIOSchemeVector.xml
%feature("docstring") CasADi::QPStructIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::QPStructIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::QPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::QPStructIOSchemeVector "[INTERNAL]  Helper
function for 'QPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") CasADi::QPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::QPStructIOSchemeVector::QPStructIOSchemeVector
"[INTERNAL] ";

%feature("docstring") CasADi::QPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::QPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::QPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classCasADi_1_1RDAEInputIOSchemeVector.xml
%feature("docstring") CasADi::RDAEInputIOSchemeVector "[INTERNAL]  Helper
function for 'RDAEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
CasADi::RDAEInputIOSchemeVector::RDAEInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::RDAEInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::RDAEInputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::RDAEInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::RDAEInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::RDAEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::RDAEInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::RDAEInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classCasADi_1_1RDAEOutputIOSchemeVector.xml
%feature("docstring") CasADi::RDAEOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring")
CasADi::RDAEOutputIOSchemeVector::RDAEOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::RDAEOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::RDAEOutputIOSchemeVector "[INTERNAL]  Helper
function for 'RDAEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::RDAEOutputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::RDAEOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::RDAEOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::RDAEOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::RDAEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classCasADi_1_1RealtypeSX.xml
%feature("docstring") CasADi::RealtypeSX::getIntValue "[INTERNAL]  Get the
value.

";

%feature("docstring") CasADi::RealtypeSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::RealtypeSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::RealtypeSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::RealtypeSX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") CasADi::RealtypeSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::RealtypeSX::isConstant "[INTERNAL]
Properties.

";

%feature("docstring") CasADi::RealtypeSX::mark "[INTERNAL] ";

%feature("docstring") CasADi::RealtypeSX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::RealtypeSX::isOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::RealtypeSX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") CasADi::RealtypeSX::getValue "[INTERNAL]  Get the
value.

";

%feature("docstring") CasADi::RealtypeSX "[INTERNAL]  DERIVED CLASSES.

Represents a constant real SX Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") CasADi::RealtypeSX::isInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::RealtypeSX::isZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::RealtypeSX::hasDep "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::RealtypeSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::RealtypeSX::dep "[INTERNAL]  get the
reference of a child

";

%feature("docstring") CasADi::RealtypeSX::getName "[INTERNAL] ";

%feature("docstring") CasADi::RealtypeSX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::RealtypeSX::~RealtypeSX "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::RealtypeSX::isNan "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::RealtypeSX::marked "[INTERNAL] ";

%feature("docstring") CasADi::RealtypeSX::print "[INTERNAL]  print

";

%feature("docstring") CasADi::RealtypeSX::ndep "[INTERNAL]  Number of
dependencies.

";


// File: classCasADi_1_1Reshape.xml
%feature("docstring") CasADi::Reshape::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::Reshape::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Reshape::shape "[INTERNAL] ";

%feature("docstring") CasADi::Reshape::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Reshape::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Reshape::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Reshape::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::Reshape::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Reshape::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::Reshape::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") CasADi::Reshape::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Reshape "[INTERNAL]   Reshape an expression.

Joel Andersson

C++ includes: reshape.hpp ";

%feature("docstring") CasADi::Reshape::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::Reshape::~Reshape "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::Reshape::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Reshape::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Reshape::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Reshape::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Reshape::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Reshape::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") CasADi::Reshape::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Reshape::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::Reshape::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") CasADi::Reshape::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Reshape::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Reshape::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Reshape::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Reshape::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") CasADi::Reshape::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Reshape::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::Reshape::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Reshape::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::Reshape::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::Reshape::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Reshape::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Reshape::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Reshape::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::Reshape::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Reshape::size "[INTERNAL] ";

%feature("docstring") CasADi::Reshape::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Reshape::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Reshape::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Reshape::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Reshape::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Reshape::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Reshape::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Reshape::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::Reshape::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::Reshape::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Reshape::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::Reshape::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Reshape::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Reshape::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Reshape::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::Reshape::evaluateMX "

>  void CasADi::Reshape::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Reshape::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Reshape::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Reshape::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Reshape::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::Reshape::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Reshape::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::Reshape::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::Reshape::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Reshape::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Reshape::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Reshape::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Reshape::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") CasADi::Reshape::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Reshape::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::Reshape::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Reshape::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::Reshape::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") CasADi::Reshape::Reshape "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::Reshape::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::Reshape::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::Reshape::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Reshape::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Reshape::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::Reshape::printPart "[INTERNAL]  Print a part
of the expression */.

";

%feature("docstring") CasADi::Reshape::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::Reshape::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Reshape::getTranspose "[INTERNAL]
Transpose.

";


// File: classCasADi_1_1RKIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::RKIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::RKIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::RKIntegrator "[INTERNAL]  Fixed-step explicit
Runge-Kutta integrator for ODEs Currently implements RK4.

The method is still under development

Joel Andersson

>Input scheme: CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | CasADi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | CasADi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_fi | OT_INTEGER   | 20           | Number of    | CasADi::Fixe |
| nite_element |              |              | finite       | dStepIntegra |
| s            |              |              | elements     | torInternal  |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | CasADi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | CasADi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | CasADi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: rk_integrator.hpp ";

%feature("docstring") CasADi::RKIntegrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::RKIntegrator::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::RKIntegrator::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::RKIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::RKIntegrator::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::RKIntegrator::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::RKIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::RKIntegrator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::RKIntegrator::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::RKIntegrator::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::RKIntegrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::RKIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") CasADi::RKIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::RKIntegrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::RKIntegrator::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::RKIntegrator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::RKIntegrator::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::RKIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::RKIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::RKIntegrator::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::RKIntegrator::getOption "

get an option value

";

%feature("docstring") CasADi::RKIntegrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::RKIntegrator::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::RKIntegrator::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::RKIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::RKIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::RKIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::RKIntegrator::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::RKIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::RKIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::RKIntegrator::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::RKIntegrator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::RKIntegrator::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::RKIntegrator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::RKIntegrator::resetB "

Reset the backward problem Time will be set to tf and backward state to
input(INTEGRATOR_RX0)

";

%feature("docstring") CasADi::RKIntegrator::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::RKIntegrator::solve "

the same as evaluate()

";

%feature("docstring") CasADi::RKIntegrator::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::RKIntegrator::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::RKIntegrator::RKIntegrator "

>  CasADi::RKIntegrator::RKIntegrator()
------------------------------------------------------------------------

Default constructor.

>  CasADi::RKIntegrator::RKIntegrator(const Function &f, const Function &g=Function())
------------------------------------------------------------------------

Create an integrator for explicit ODEs.

Parameters:
-----------

f:  dynamical system

>Input scheme: CasADi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: CasADi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: CasADi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: CasADi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring") CasADi::RKIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::RKIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::RKIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") CasADi::RKIntegrator::evaluate "

Evaluate.

";

%feature("docstring") CasADi::RKIntegrator::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::RKIntegrator::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::RKIntegrator::isInit "

Is initialized?

";

%feature("docstring") CasADi::RKIntegrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::RKIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::RKIntegrator::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::RKIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::RKIntegrator::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::RKIntegrator::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::RKIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") CasADi::RKIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::RKIntegrator::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::RKIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::RKIntegrator::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::RKIntegrator::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::RKIntegrator::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::RKIntegrator::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::RKIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::RKIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::RKIntegrator::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::RKIntegrator::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::RKIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::RKIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::RKIntegrator::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::RKIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::RKIntegrator::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::RKIntegrator::clone "

Clone.

";

%feature("docstring") CasADi::RKIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") CasADi::RKIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::RKIntegrator::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::RKIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::RKIntegrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::RKIntegrator::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::RKIntegrator::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::RKIntegrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::RKIntegrator::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::RKIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") CasADi::RKIntegrator::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::RKIntegrator::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::RKIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::RKIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") CasADi::RKIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::RKIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::RKIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::RKIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::RKIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::RKIntegrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::RKIntegrator::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::RKIntegrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::RKIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::RKIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::RKIntegrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::RKIntegrator::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::RKIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::RKIntegrator::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::RKIntegrator::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";


// File: structCasADi_1_1RuntimeConst.xml
%feature("docstring") CasADi::RuntimeConst::RuntimeConst "[INTERNAL] ";

%feature("docstring") CasADi::RuntimeConst "[INTERNAL]   Constant known at
runtime.

C++ includes: constant_mx.hpp ";


// File: structCasADi_1_1ScalarAtomic.xml
%feature("docstring") CasADi::ScalarAtomic "[INTERNAL]  An atomic operation
for the SXElement virtual machine.

C++ includes: sx_function.hpp ";


// File: classCasADi_1_1ScalarSparseSparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
CasADi::ScalarSparseSparsity::numel " [INTERNAL]  The total number of
elements, including structural zeros, i.e. size2()*size1()

See:   size()

";

%feature("docstring") CasADi::ScalarSparseSparsity::T "[INTERNAL]
Transpose the matrix (shorthand)

";

%feature("docstring") CasADi::ScalarSparseSparsity::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::ScalarSparseSparsity::getCCS "[INTERNAL]  Get
the sparsity in compressed column storage (CCS) format.

";

%feature("docstring") CasADi::ScalarSparseSparsity::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::ScalarSparseSparsity::reCache "[INTERNAL]
Check if there is an identical copy of the sparsity pattern in the cache,
and if so, make a shallow copy of that one.

";

%feature("docstring") CasADi::ScalarSparseSparsity::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::ScalarSparseSparsity::append "[INTERNAL]
Append another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring") CasADi::ScalarSparseSparsity::isVector "[INTERNAL]
Is vector (i.e. size2()==1)

";

%feature("docstring") CasADi::ScalarSparseSparsity::removeDuplicates "[INTERNAL]  Remove duplicate entries: The same indices will be removed from
the mapping vector, which must have the same length as the number of
nonzeros.

";

%feature("docstring") CasADi::ScalarSparseSparsity::rowsSequential "[INTERNAL]  Do the rows appear sequentially on each column (if
strictly==true, then do not allow multiple entries)

";

%feature("docstring") CasADi::ScalarSparseSparsity::shape "[INTERNAL]  Get
the shape.

";

%feature("docstring") CasADi::ScalarSparseSparsity::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::ScalarSparseSparsity::bor "

>  void CasADi::Sparsity::bor(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Bitwise or of the nonzero entries of one sparsity pattern and the
nonzero entries of another sparsity pattern.

>  void CasADi::Sparsity::bor(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::ScalarSparseSparsity::patternUnion "[INTERNAL]  Union of two sparsity patterns.

";

%feature("docstring") CasADi::ScalarSparseSparsity::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::ScalarSparseSparsity::isReshape "[INTERNAL]
Check if the sparsity is a reshape of another.

";

%feature("docstring") CasADi::ScalarSparseSparsity::isEqual "[INTERNAL] ";

%feature("docstring") CasADi::ScalarSparseSparsity::pmult "[INTERNAL]
Permute rows and/or columns Multiply the sparsity with a permutation matrix
from the left and/or from the right P * A * trans(P), A * trans(P) or A *
trans(P) with P defined by an index vector containing the row for each col.
As an alternative, P can be transposed (inverted).

";

%feature("docstring") CasADi::ScalarSparseSparsity::enlargeColumns "[INTERNAL]  Enlarge the matrix along the second dimension (i.e. insert
columns)

";

%feature("docstring") CasADi::ScalarSparseSparsity::getElements "

>  std::vector< int > CasADi::Sparsity::getElements(bool col_major=true) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the location of all non-zero elements as they would appear in a
Dense matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5
structural non-zeros.

k = A.getElements() A[k] will contain the elements of A that are non- zero
in B

>  void CasADi::Sparsity::getElements(std::vector< int > &loc, bool col_major=true) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the location of all nonzero elements (inplace version)

";

%feature("docstring") CasADi::ScalarSparseSparsity::sub "[INTERNAL]  Get a
submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring") CasADi::ScalarSparseSparsity::reserve "[INTERNAL]
Reserve space.

";

%feature("docstring") CasADi::ScalarSparseSparsity::isSymmetric "[INTERNAL]
Is symmetric?

";

%feature("docstring") CasADi::ScalarSparseSparsity::init "[INTERNAL]
Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::ScalarSparseSparsity::row "

>  const std::vector< int > & CasADi::Sparsity::row() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to row-vector, containing rows for all non-zero
elements (see class description)

>  int CasADi::Sparsity::row(int el) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the row of a non-zero element.

";

%feature("docstring") CasADi::ScalarSparseSparsity::ScalarSparseSparsity "[INTERNAL] ";

%feature("docstring") CasADi::ScalarSparseSparsity::isTriu "[INTERNAL]  Is
upper triangular?

";

%feature("docstring") CasADi::ScalarSparseSparsity::rowRef "[INTERNAL]  Get
a reference to the rows of all non-zero element (copy if not unique!)

";

%feature("docstring") CasADi::ScalarSparseSparsity::dulmageMendelsohn "[INTERNAL]  Compute the Dulmage-Mendelsohn decomposition See Direct Methods
for Sparse Linear Systems by Davis (2006).

Dulmage-Mendelsohn will try to bring your matrix into lower block-
triangular (LBT) form. It will not care about the distance of off- diagonal
elements to the diagonal: there is no guarantee you will get a block-
diagonal matrix if you supply a randomly permuted block- diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   stronglyConnectedComponents

";

%feature("docstring") CasADi::ScalarSparseSparsity::patternInverse "[INTERNAL]  Take the inverse of a sparsity pattern; flip zeros and non-
zeros.

";

%feature("docstring") CasADi::ScalarSparseSparsity::compress "[INTERNAL]
Compress a sparsity pattern.

";

%feature("docstring") CasADi::ScalarSparseSparsity::transpose "

>  Sparsity CasADi::Sparsity::transpose() const 
------------------------------------------------------------------------
[INTERNAL] 
 Transpose the matrix.

>  Sparsity CasADi::Sparsity::transpose(std::vector< int > &mapping, bool invert_mapping=false) const 
------------------------------------------------------------------------
[INTERNAL] 
 Transpose the matrix and get the reordering of the non-zero entries, i.e. the
non-zeros of the original matrix for each non-zero of the new matrix.

";

%feature("docstring") CasADi::ScalarSparseSparsity::getCRS "[INTERNAL]  Get
the sparsity in compressed row storage (CRS) format.

";

%feature("docstring") CasADi::ScalarSparseSparsity::hasNZ "[INTERNAL]
Returns true if the pattern has a non-zero at location rr,cc.

";

%feature("docstring") CasADi::ScalarSparseSparsity::scalar "[INTERNAL]
Create a scalar sparsity pattern.

";

%feature("docstring") CasADi::ScalarSparseSparsity::upperNZ "

[DEPRECATED]

";

%feature("docstring") CasADi::ScalarSparseSparsity::dimString "[INTERNAL]
Get the dimension as a string.

";

%feature("docstring") CasADi::ScalarSparseSparsity::resize "[INTERNAL]
Resize.

";

%feature("docstring") CasADi::ScalarSparseSparsity::isScalar "[INTERNAL]
Is scalar?

";

%feature("docstring") CasADi::ScalarSparseSparsity::isTril "[INTERNAL]  Is
lower triangular?

";

%feature("docstring") CasADi::ScalarSparseSparsity::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::ScalarSparseSparsity::getTriu "[INTERNAL]
Get upper triangular part.

";

%feature("docstring") CasADi::ScalarSparseSparsity::isSingular "[INTERNAL]
Check whether the sparsity-pattern inidcates structural singularity.

";

%feature("docstring") CasADi::ScalarSparseSparsity::erase "[INTERNAL]
Erase rows and/or columns of a matrix.

";

%feature("docstring") CasADi::ScalarSparseSparsity::compressed "[INTERNAL]
Create from a single vector containing the pattern in compressed column
storage format: The format: The first two entries are the number of rows
(nrow) and columns (ncol) The next ncol+1 entries are the column offsets
(colind). Note that the last element, colind[ncol], gives the number of
nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring") CasADi::ScalarSparseSparsity::colindRef "[INTERNAL]
Get a reference to the colindex of all column element (copy if not unique!)

";

%feature("docstring") CasADi::ScalarSparseSparsity::getTril "[INTERNAL]
Get lower triangular part.

";

%feature("docstring") CasADi::ScalarSparseSparsity::getSparsityCRS "

[DEPRECATED]

";

%feature("docstring") CasADi::ScalarSparseSparsity::getLowerNZ "[INTERNAL]
Get nonzeros in lower triangular part.

";

%feature("docstring") CasADi::ScalarSparseSparsity::depthFirstSearch "[INTERNAL]  Depth-first search on the adjacency graph of the sparsity See
Direct Methods for Sparse Linear Systems by Davis (2006).

";

%feature("docstring") CasADi::ScalarSparseSparsity::colind "

>  const std::vector< int > & CasADi::Sparsity::colind() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to the colindex of all column element (see class
description)

>  int CasADi::Sparsity::colind(int i) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to the colindex of col i (see class description)

";

%feature("docstring") CasADi::ScalarSparseSparsity::spyMatlab "[INTERNAL]
Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring") CasADi::ScalarSparseSparsity::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::ScalarSparseSparsity::sanityCheck "[INTERNAL]
Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") CasADi::ScalarSparseSparsity::isTranspose "[INTERNAL]
Check if the sparsity is the transpose of another.

";

%feature("docstring") CasADi::ScalarSparseSparsity::sizeD "[INTERNAL]
Number of non-zeros on the diagonal, i.e. the number of elements (i,j) with
j==i.

";

%feature("docstring") CasADi::ScalarSparseSparsity::sizeL "[INTERNAL]
Number of non-zeros in the lower triangular half, i.e. the number of
elements (i,j) with j<=i.

";

%feature("docstring") CasADi::ScalarSparseSparsity::getDiag "[INTERNAL]
Get the diagonal of the matrix/create a diagonal matrix (mapping will
contain the nonzero mapping) When the input is square, the diagonal elements
are returned. If the input is vector-like, a diagonal matrix is constructed
with it.

";

%feature("docstring") CasADi::ScalarSparseSparsity::sizeU "[INTERNAL]
Number of non-zeros in the upper triangular half, i.e. the number of
elements (i,j) with j>=i.

";

%feature("docstring") CasADi::ScalarSparseSparsity::size "[INTERNAL]  Get
the number of (structural) non-zeros.

See:   numel()

";

%feature("docstring") CasADi::ScalarSparseSparsity::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") CasADi::ScalarSparseSparsity::getNZInplace "[INTERNAL]  Get the nonzero index for a set of elements The index vector is
used both for input and outputs and must be sorted by increasing nonzero
index, i.e. column-wise. Elements not found in the sparsity pattern are set
to -1.

";

%feature("docstring") CasADi::ScalarSparseSparsity::isNull "[INTERNAL]  Is
a null pointer?

";

%feature("docstring") CasADi::ScalarSparseSparsity::unit "[INTERNAL]
Create the sparsity pattern for a unit vector of length n and a nonzero on
position el.

";

%feature("docstring") CasADi::ScalarSparseSparsity::isDiagonal "[INTERNAL]
Is diagonal?

";

%feature("docstring") CasADi::ScalarSparseSparsity::spy "[INTERNAL]  Print
a textual representation of sparsity.

";

%feature("docstring") CasADi::ScalarSparseSparsity::isDense "[INTERNAL]  Is
dense?

";

%feature("docstring") CasADi::ScalarSparseSparsity::getTriplet "[INTERNAL]
Get the sparsity in sparse triplet format.

";

%feature("docstring") CasADi::ScalarSparseSparsity::enlargeRows "[INTERNAL]
Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") CasADi::ScalarSparseSparsity::dense "[INTERNAL]
Create a dense rectangular sparsity pattern.

";

%feature("docstring") CasADi::ScalarSparseSparsity::printCompact "[INTERNAL]  Print a compact description of the sparsity pattern.

";

%feature("docstring") CasADi::ScalarSparseSparsity::getCol "[INTERNAL]  Get
the column for each non-zero entry Together with the row-vector, this vector
gives the sparsity of the matrix in sparse triplet format, i.e. the column
and row for each non-zero elements.

";

%feature("docstring") CasADi::ScalarSparseSparsity::getSparsityCCS "

[DEPRECATED]

";

%feature("docstring") CasADi::ScalarSparseSparsity::eliminationTree "[INTERNAL]  Calculate the elimination tree See Direct Methods for Sparse
Linear Systems by Davis (2006). If the parameter ata is false, the algorithm
is equivalent to Matlab's etree(A), except that the indices are zero- based.
If ata is true, the algorithm is equivalent to Matlab's etree(A,'row').

";

%feature("docstring") CasADi::ScalarSparseSparsity::size2 "[INTERNAL]  Get
the number of columns.

";

%feature("docstring") CasADi::ScalarSparseSparsity::hash "[INTERNAL] ";

%feature("docstring") CasADi::ScalarSparseSparsity::size1 "[INTERNAL]  Get
the number of rows.

";

%feature("docstring") CasADi::ScalarSparseSparsity::sparse "[INTERNAL]
Create a sparse (empty) rectangular sparsity pattern.

";

%feature("docstring") CasADi::ScalarSparseSparsity::lowerNZ "

[DEPRECATED]

";

%feature("docstring") CasADi::ScalarSparseSparsity::patternIntersection "[INTERNAL]  Intersection of two sparsity patterns Returns the new sparsity
pattern as well as a mapping with the same length as the number of non-zero
elements The value is 1 if the non-zero comes from the first (i.e. this)
object, 2 if it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring") CasADi::ScalarSparseSparsity::isEmpty "[INTERNAL]
Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") CasADi::ScalarSparseSparsity::appendColumns "[INTERNAL]  Append another sparsity patten horizontally.

";

%feature("docstring") CasADi::ScalarSparseSparsity::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") CasADi::ScalarSparseSparsity::makeDense "[INTERNAL]
Make a patten dense.

";

%feature("docstring") CasADi::ScalarSparseSparsity::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
If there are other references to the object, then make a deep copy of
it and point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::ScalarSparseSparsity::patternCombine "[INTERNAL]  Combine two sparsity patterns Returns the new sparsity pattern
as well as a mapping with the same length as the number of non-zero elements
The mapping matrix contains the arguments for each nonzero, the first bit
indicates if the first argument is nonzero, the second bit indicates if the
second argument is nonzero (note that none of, one of or both of the
arguments can be nonzero)

";

%feature("docstring") CasADi::ScalarSparseSparsity::getSparsity "

[DEPRECATED]

";

%feature("docstring") CasADi::ScalarSparseSparsity::starColoring2 "[INTERNAL]  Perform a star coloring of a symmetric matrix: A new greedy
distance-2 coloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A.
TARAFDAR, F. MANNE, A. POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring") CasADi::ScalarSparseSparsity::enlarge "[INTERNAL]
Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

For the matrices A to B A(m,n) length(jj)=m , length(ii)=n B(nrow,ncol)

A=enlarge(m,n,ii,jj) makes sure that

B[jj,ii] == A

";

%feature("docstring") CasADi::ScalarSparseSparsity "[INTERNAL] ";

%feature("docstring") CasADi::ScalarSparseSparsity::reshape "[INTERNAL]
Reshape a sparsity, order of nonzeros remains the same.

";

%feature("docstring") CasADi::ScalarSparseSparsity::diag "[INTERNAL]
Create diagonal sparsity pattern.

";

%feature("docstring")
CasADi::ScalarSparseSparsity::stronglyConnectedComponents "[INTERNAL]  Find
the strongly connected components of the bigraph defined by the sparsity
pattern of a square matrix See Direct Methods for Sparse Linear Systems by
Davis (2006). Returns:

Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n =
A.stronglyConnectedComponents(p,r)

=> A[p,p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring") CasADi::ScalarSparseSparsity::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::ScalarSparseSparsity::createDiagonal "

[DEPRECATED]

";

%feature("docstring") CasADi::ScalarSparseSparsity::getUpperNZ "[INTERNAL]
Get nonzeros in upper triangular part.

";

%feature("docstring") CasADi::ScalarSparseSparsity::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::ScalarSparseSparsity::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::ScalarSparseSparsity::isInit "[INTERNAL]  Is
initialized?

";

%feature("docstring") CasADi::ScalarSparseSparsity::checkNode "[INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::ScalarSparseSparsity::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") CasADi::ScalarSparseSparsity::set "

>  void CasADi::Sparsity::set(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Assign the nonzero entries of one sparsity pattern to the nonzero
entries of another sparsity pattern.

>  void CasADi::Sparsity::set(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::ScalarSparseSparsity::unidirectionalColoring "[INTERNAL]  Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring") CasADi::ScalarSparseSparsity::isSquare "[INTERNAL]
Is square?

";

%feature("docstring") CasADi::ScalarSparseSparsity::largestFirstOrdering "[INTERNAL]  Order the cols by decreasing degree.

";

%feature("docstring") CasADi::ScalarSparseSparsity::getNZ "

>  int CasADi::Sparsity::getNZ(int rr, int cc)
------------------------------------------------------------------------
[INTERNAL] 
Get the index of a non-zero element Add the element if it does not
exist and copy object if it's not unique.

>  int CasADi::Sparsity::getNZ(int rr, int cc) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the index of an existing non-zero element return -1 if the element
does not exists.

>  std::vector< int > CasADi::Sparsity::getNZ(const std::vector< int > &rr, const std::vector< int > &cc) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a set of non-zero element return -1 if the element does not
exists.

";

%feature("docstring") CasADi::ScalarSparseSparsity::add "

>  void CasADi::Sparsity::add(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Add the nonzero entries of one sparsity pattern to the nonzero entries
of another sparsity pattern.

>  void CasADi::Sparsity::add(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::ScalarSparseSparsity::starColoring "[INTERNAL]  Perform a star coloring of a symmetric matrix: A greedy
distance-2 coloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE,
A. POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring") CasADi::ScalarSparseSparsity::patternProduct "[INTERNAL]   Sparsity pattern for a matrix-matrix product Returns the
sparsity pattern resulting from premultiplying the pattern with the
transpose of x. Returns the new sparsity pattern as well as a mapping with
the same length as the number of non-zero elements The mapping contains a
vector of the index pairs that makes up the scalar products for each non-
zero.

";


// File: classCasADi_1_1ScalarSparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
CasADi::ScalarSparsity::spy " [INTERNAL]  Print a textual representation of
sparsity.

";

%feature("docstring") CasADi::ScalarSparsity::add "

>  void CasADi::Sparsity::add(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Add the nonzero entries of one sparsity pattern to the nonzero entries
of another sparsity pattern.

>  void CasADi::Sparsity::add(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::ScalarSparsity::set "

>  void CasADi::Sparsity::set(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Assign the nonzero entries of one sparsity pattern to the nonzero
entries of another sparsity pattern.

>  void CasADi::Sparsity::set(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::ScalarSparsity::isNull "[INTERNAL]  Is a null
pointer?

";

%feature("docstring") CasADi::ScalarSparsity::patternInverse "[INTERNAL]
Take the inverse of a sparsity pattern; flip zeros and non-zeros.

";

%feature("docstring") CasADi::ScalarSparsity::reshape "[INTERNAL]   Reshape
a sparsity, order of nonzeros remains the same.

";

%feature("docstring") CasADi::ScalarSparsity::sanityCheck "[INTERNAL]
Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") CasADi::ScalarSparsity::T "[INTERNAL]   Transpose the
matrix (shorthand)

";

%feature("docstring") CasADi::ScalarSparsity::getDescription "[INTERNAL]
Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::ScalarSparsity::getUpperNZ "[INTERNAL]  Get
nonzeros in upper triangular part.

";

%feature("docstring") CasADi::ScalarSparsity::colindRef "[INTERNAL]  Get a
reference to the colindex of all column element (copy if not unique!)

";

%feature("docstring") CasADi::ScalarSparsity::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
If there are other references to the object, then make a deep copy of
it and point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::ScalarSparsity::getDiag "[INTERNAL]  Get the
diagonal of the matrix/create a diagonal matrix (mapping will contain the
nonzero mapping) When the input is square, the diagonal elements are
returned. If the input is vector-like, a diagonal matrix is constructed with
it.

";

%feature("docstring") CasADi::ScalarSparsity::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::ScalarSparsity::sparse "[INTERNAL]  Create a
sparse (empty) rectangular sparsity pattern.

";

%feature("docstring") CasADi::ScalarSparsity::isSymmetric "[INTERNAL]  Is
symmetric?

";

%feature("docstring") CasADi::ScalarSparsity::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::ScalarSparsity::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::ScalarSparsity::row "

>  const std::vector< int > & CasADi::Sparsity::row() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to row-vector, containing rows for all non-zero
elements (see class description)

>  int CasADi::Sparsity::row(int el) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the row of a non-zero element.

";

%feature("docstring") CasADi::ScalarSparsity::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::ScalarSparsity::makeDense "[INTERNAL]  Make a
patten dense.

";

%feature("docstring") CasADi::ScalarSparsity::colind "

>  const std::vector< int > & CasADi::Sparsity::colind() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to the colindex of all column element (see class
description)

>  int CasADi::Sparsity::colind(int i) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to the colindex of col i (see class description)

";

%feature("docstring") CasADi::ScalarSparsity::resize "[INTERNAL]  Resize.

";

%feature("docstring") CasADi::ScalarSparsity::largestFirstOrdering "[INTERNAL]  Order the cols by decreasing degree.

";

%feature("docstring") CasADi::ScalarSparsity::isVector "[INTERNAL]  Is
vector (i.e. size2()==1)

";

%feature("docstring") CasADi::ScalarSparsity::isEqual "[INTERNAL] ";

%feature("docstring") CasADi::ScalarSparsity::removeDuplicates "[INTERNAL]
Remove duplicate entries: The same indices will be removed from the mapping
vector, which must have the same length as the number of nonzeros.

";

%feature("docstring") CasADi::ScalarSparsity::starColoring2 "[INTERNAL]
Perform a star coloring of a symmetric matrix: A new greedy distance-2
coloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A. TARAFDAR, F.
MANNE, A. POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring") CasADi::ScalarSparsity::depthFirstSearch "[INTERNAL]
Depth-first search on the adjacency graph of the sparsity See Direct Methods
for Sparse Linear Systems by Davis (2006).

";

%feature("docstring") CasADi::ScalarSparsity::enlargeColumns "[INTERNAL]
Enlarge the matrix along the second dimension (i.e. insert columns)

";

%feature("docstring") CasADi::ScalarSparsity::isDense "[INTERNAL]  Is
dense?

";

%feature("docstring") CasADi::ScalarSparsity::numel "[INTERNAL]  The total
number of elements, including structural zeros, i.e. size2()*size1()

See:   size()

";

%feature("docstring") CasADi::ScalarSparsity::patternUnion "[INTERNAL]
Union of two sparsity patterns.

";

%feature("docstring") CasADi::ScalarSparsity::scalar "[INTERNAL]  Create a
scalar sparsity pattern.

";

%feature("docstring") CasADi::ScalarSparsity::isScalar "[INTERNAL]  Is
scalar?

";

%feature("docstring") CasADi::ScalarSparsity::isTril "[INTERNAL]  Is lower
triangular?

";

%feature("docstring") CasADi::ScalarSparsity::size "[INTERNAL]  Get the
number of (structural) non-zeros.

See:   numel()

";

%feature("docstring") CasADi::ScalarSparsity::isTriu "[INTERNAL]  Is upper
triangular?

";

%feature("docstring") CasADi::ScalarSparsity::isEmpty "[INTERNAL]  Check if
the sparsity is empty, i.e. if one of the dimensions is zero (or optionally
both dimensions)

";

%feature("docstring") CasADi::ScalarSparsity::compressed "[INTERNAL]
Create from a single vector containing the pattern in compressed column
storage format: The format: The first two entries are the number of rows
(nrow) and columns (ncol) The next ncol+1 entries are the column offsets
(colind). Note that the last element, colind[ncol], gives the number of
nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring") CasADi::ScalarSparsity::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::ScalarSparsity::reserve "[INTERNAL]  Reserve
space.

";

%feature("docstring") CasADi::ScalarSparsity::init "[INTERNAL]  Initialize
or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::ScalarSparsity::lowerNZ "

[DEPRECATED]

";

%feature("docstring") CasADi::ScalarSparsity::rowsSequential "[INTERNAL]
Do the rows appear sequentially on each column (if strictly==true, then do
not allow multiple entries)

";

%feature("docstring") CasADi::ScalarSparsity::rowRef "[INTERNAL]  Get a
reference to the rows of all non-zero element (copy if not unique!)

";

%feature("docstring") CasADi::ScalarSparsity::isTranspose "[INTERNAL]
Check if the sparsity is the transpose of another.

";

%feature("docstring") CasADi::ScalarSparsity::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::ScalarSparsity::getSparsityCCS "

[DEPRECATED]

";

%feature("docstring") CasADi::ScalarSparsity::getTriplet "[INTERNAL]  Get
the sparsity in sparse triplet format.

";

%feature("docstring") CasADi::ScalarSparsity::size1 "[INTERNAL]  Get the
number of rows.

";

%feature("docstring") CasADi::ScalarSparsity::size2 "[INTERNAL]  Get the
number of columns.

";

%feature("docstring") CasADi::ScalarSparsity::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::ScalarSparsity::append "[INTERNAL]  Append
another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring") CasADi::ScalarSparsity::checkNode "[INTERNAL]  Check
if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::ScalarSparsity::createDiagonal "

[DEPRECATED]

";

%feature("docstring") CasADi::ScalarSparsity::spyMatlab "[INTERNAL]
Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring") CasADi::ScalarSparsity::diag "[INTERNAL]  Create
diagonal sparsity pattern.

";

%feature("docstring") CasADi::ScalarSparsity::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::ScalarSparsity::unit "[INTERNAL]  Create the
sparsity pattern for a unit vector of length n and a nonzero on position el.

";

%feature("docstring") CasADi::ScalarSparsity::unidirectionalColoring "[INTERNAL]  Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring") CasADi::ScalarSparsity::isDiagonal "[INTERNAL]  Is
diagonal?

";

%feature("docstring") CasADi::ScalarSparsity::isInit "[INTERNAL]  Is
initialized?

";

%feature("docstring") CasADi::ScalarSparsity::enlargeRows "[INTERNAL]
Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") CasADi::ScalarSparsity::getSparsity "

[DEPRECATED]

";

%feature("docstring") CasADi::ScalarSparsity::erase "[INTERNAL]  Erase rows
and/or columns of a matrix.

";

%feature("docstring") CasADi::ScalarSparsity::hash "[INTERNAL] ";

%feature("docstring") CasADi::ScalarSparsity::ScalarSparsity "[INTERNAL] ";

%feature("docstring") CasADi::ScalarSparsity::sub "[INTERNAL]  Get a
submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring") CasADi::ScalarSparsity::getNZ "

>  int CasADi::Sparsity::getNZ(int rr, int cc)
------------------------------------------------------------------------
[INTERNAL] 
Get the index of a non-zero element Add the element if it does not
exist and copy object if it's not unique.

>  int CasADi::Sparsity::getNZ(int rr, int cc) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the index of an existing non-zero element return -1 if the element
does not exists.

>  std::vector< int > CasADi::Sparsity::getNZ(const std::vector< int > &rr, const std::vector< int > &cc) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a set of non-zero element return -1 if the element does not
exists.

";

%feature("docstring") CasADi::ScalarSparsity::getCol "[INTERNAL]  Get the
column for each non-zero entry Together with the row-vector, this vector
gives the sparsity of the matrix in sparse triplet format, i.e. the column
and row for each non-zero elements.

";

%feature("docstring") CasADi::ScalarSparsity::isSingular "[INTERNAL]  Check
whether the sparsity-pattern inidcates structural singularity.

";

%feature("docstring") CasADi::ScalarSparsity::patternIntersection "[INTERNAL]  Intersection of two sparsity patterns Returns the new sparsity
pattern as well as a mapping with the same length as the number of non-zero
elements The value is 1 if the non-zero comes from the first (i.e. this)
object, 2 if it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring") CasADi::ScalarSparsity::isReshape "[INTERNAL]  Check
if the sparsity is a reshape of another.

";

%feature("docstring") CasADi::ScalarSparsity::sizeD "[INTERNAL]  Number of
non-zeros on the diagonal, i.e. the number of elements (i,j) with j==i.

";

%feature("docstring") CasADi::ScalarSparsity::sizeL "[INTERNAL]  Number of
non-zeros in the lower triangular half, i.e. the number of elements (i,j)
with j<=i.

";

%feature("docstring") CasADi::ScalarSparsity::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::ScalarSparsity::patternCombine "[INTERNAL]
Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";

%feature("docstring") CasADi::ScalarSparsity::getElements "

>  std::vector< int > CasADi::Sparsity::getElements(bool col_major=true) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the location of all non-zero elements as they would appear in a
Dense matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5
structural non-zeros.

k = A.getElements() A[k] will contain the elements of A that are non- zero
in B

>  void CasADi::Sparsity::getElements(std::vector< int > &loc, bool col_major=true) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the location of all nonzero elements (inplace version)

";

%feature("docstring") CasADi::ScalarSparsity::enlarge "[INTERNAL]  Enlarge
matrix Make the matrix larger by inserting empty rows and columns, keeping
the existing non-zeros.

For the matrices A to B A(m,n) length(jj)=m , length(ii)=n B(nrow,ncol)

A=enlarge(m,n,ii,jj) makes sure that

B[jj,ii] == A

";

%feature("docstring") CasADi::ScalarSparsity::sizeU "[INTERNAL]  Number of
non-zeros in the upper triangular half, i.e. the number of elements (i,j)
with j>=i.

";

%feature("docstring") CasADi::ScalarSparsity::isSquare "[INTERNAL]  Is
square?

";

%feature("docstring") CasADi::ScalarSparsity::bor "

>  void CasADi::Sparsity::bor(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Bitwise or of the nonzero entries of one sparsity pattern and the
nonzero entries of another sparsity pattern.

>  void CasADi::Sparsity::bor(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::ScalarSparsity::upperNZ "

[DEPRECATED]

";

%feature("docstring") CasADi::ScalarSparsity::compress "[INTERNAL]
Compress a sparsity pattern.

";

%feature("docstring") CasADi::ScalarSparsity::patternProduct "[INTERNAL]
Sparsity pattern for a matrix-matrix product Returns the sparsity pattern
resulting from premultiplying the pattern with the transpose of x. Returns
the new sparsity pattern as well as a mapping with the same length as the
number of non-zero elements The mapping contains a vector of the index pairs
that makes up the scalar products for each non-zero.

";

%feature("docstring") CasADi::ScalarSparsity::getSparsityCRS "

[DEPRECATED]

";

%feature("docstring") CasADi::ScalarSparsity::reCache "[INTERNAL]  Check if
there is an identical copy of the sparsity pattern in the cache, and if so,
make a shallow copy of that one.

";

%feature("docstring") CasADi::ScalarSparsity::printCompact "[INTERNAL]
Print a compact description of the sparsity pattern.

";

%feature("docstring") CasADi::ScalarSparsity::getCCS "[INTERNAL]  Get the
sparsity in compressed column storage (CCS) format.

";

%feature("docstring") CasADi::ScalarSparsity::getCRS "[INTERNAL]  Get the
sparsity in compressed row storage (CRS) format.

";

%feature("docstring") CasADi::ScalarSparsity::dense "[INTERNAL]  Create a
dense rectangular sparsity pattern.

";

%feature("docstring") CasADi::ScalarSparsity::getTriu "[INTERNAL]  Get
upper triangular part.

";

%feature("docstring") CasADi::ScalarSparsity::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::ScalarSparsity::shape "[INTERNAL]  Get the
shape.

";

%feature("docstring") CasADi::ScalarSparsity::eliminationTree "[INTERNAL]
Calculate the elimination tree See Direct Methods for Sparse Linear Systems
by Davis (2006). If the parameter ata is false, the algorithm is equivalent
to Matlab's etree(A), except that the indices are zero- based. If ata is
true, the algorithm is equivalent to Matlab's etree(A,'row').

";

%feature("docstring") CasADi::ScalarSparsity::getLowerNZ "[INTERNAL]  Get
nonzeros in lower triangular part.

";

%feature("docstring") CasADi::ScalarSparsity::appendColumns "[INTERNAL]
Append another sparsity patten horizontally.

";

%feature("docstring") CasADi::ScalarSparsity::hasNZ "[INTERNAL]  Returns
true if the pattern has a non-zero at location rr,cc.

";

%feature("docstring") CasADi::ScalarSparsity::getTril "[INTERNAL]  Get
lower triangular part.

";

%feature("docstring") CasADi::ScalarSparsity::dulmageMendelsohn "[INTERNAL]
Compute the Dulmage-Mendelsohn decomposition See Direct Methods for Sparse
Linear Systems by Davis (2006).

Dulmage-Mendelsohn will try to bring your matrix into lower block-
triangular (LBT) form. It will not care about the distance of off- diagonal
elements to the diagonal: there is no guarantee you will get a block-
diagonal matrix if you supply a randomly permuted block- diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   stronglyConnectedComponents

";

%feature("docstring") CasADi::ScalarSparsity::stronglyConnectedComponents "[INTERNAL]  Find the strongly connected components of the bigraph defined by
the sparsity pattern of a square matrix See Direct Methods for Sparse Linear
Systems by Davis (2006). Returns:

Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n =
A.stronglyConnectedComponents(p,r)

=> A[p,p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring") CasADi::ScalarSparsity::pmult "[INTERNAL]  Permute
rows and/or columns Multiply the sparsity with a permutation matrix from the
left and/or from the right P * A * trans(P), A * trans(P) or A * trans(P)
with P defined by an index vector containing the row for each col. As an
alternative, P can be transposed (inverted).

";

%feature("docstring") CasADi::ScalarSparsity::starColoring "[INTERNAL]
Perform a star coloring of a symmetric matrix: A greedy distance-2 coloring
algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) Ordering
options: None (0), largest first (1)

";

%feature("docstring") CasADi::ScalarSparsity::dimString "[INTERNAL]  Get
the dimension as a string.

";

%feature("docstring") CasADi::ScalarSparsity::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::ScalarSparsity::getNZInplace "[INTERNAL]  Get
the nonzero index for a set of elements The index vector is used both for
input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

";

%feature("docstring") CasADi::ScalarSparsity::transpose "

>  Sparsity CasADi::Sparsity::transpose() const 
------------------------------------------------------------------------
[INTERNAL] 
 Transpose the matrix.

>  Sparsity CasADi::Sparsity::transpose(std::vector< int > &mapping, bool invert_mapping=false) const 
------------------------------------------------------------------------
[INTERNAL] 
 Transpose the matrix and get the reordering of the non-zero entries, i.e. the
non-zeros of the original matrix for each non-zero of the new matrix.

";

%feature("docstring") CasADi::ScalarSparsity "[INTERNAL] ";

%feature("docstring") CasADi::ScalarSparsity::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";


// File: classCasADi_1_1SCPgen.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SCPgen::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SCPgen::isInit "

Is initialized?

";

%feature("docstring") CasADi::SCPgen::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SCPgen::checkInputs "[INTERNAL]  Check if the
numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SCPgen::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SCPgen::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::SCPgen::assignNodeNoCount "[INTERNAL]  Assign
the node to a node class pointer without reference counting: inproper use
will cause memory leaks!

";

%feature("docstring") CasADi::SCPgen::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SCPgen::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SCPgen::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SCPgen::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SCPgen::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SCPgen::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") CasADi::SCPgen::getQPSolver "

Access the QPSolver used internally.

";

%feature("docstring") CasADi::SCPgen::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SCPgen::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::SCPgen::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SCPgen::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SCPgen::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SCPgen::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SCPgen::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SCPgen::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: CasADi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: CasADi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") CasADi::SCPgen::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SCPgen::jacG "

Access the Jacobian of the constraint function.

>Input scheme: CasADi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective. .           |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") CasADi::SCPgen::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SCPgen::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SCPgen::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SCPgen::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SCPgen::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SCPgen::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SCPgen::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SCPgen::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::SCPgen::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SCPgen::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SCPgen::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SCPgen::spEvaluate "[INTERNAL]  Propagate the
sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SCPgen::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SCPgen::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SCPgen::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SCPgen::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SCPgen::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SCPgen::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") CasADi::SCPgen::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SCPgen::getReportConstraints "";

%feature("docstring") CasADi::SCPgen::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") CasADi::SCPgen::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SCPgen::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SCPgen::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SCPgen::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SCPgen::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SCPgen::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::SCPgen::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SCPgen::setOptionByEnumValue "[INTERNAL]  Set
a certain option by giving an enum value.

";

%feature("docstring") CasADi::SCPgen "[INTERNAL]  A structure-exploiting
sequential quadratic programming (to be come sequential convex programming)
method for nonlinear programming.

Joel Andersson, Attila Kozma and Joris Gillis

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| beta         | OT_REAL      | 0.800        | Line-search  | CasADi::SCPg |
|              |              |              | parameter,   | enInternal   |
|              |              |              | restoration  |              |
|              |              |              | factor of    |              |
|              |              |              | stepsize     |              |
+--------------+--------------+--------------+--------------+--------------+
| c1           | OT_REAL      | 0.000        | Armijo       | CasADi::SCPg |
|              |              |              | condition,   | enInternal   |
|              |              |              | coefficient  |              |
|              |              |              | of decrease  |              |
|              |              |              | in merit     |              |
+--------------+--------------+--------------+--------------+--------------+
| codegen      | OT_BOOLEAN   | false        | C-code       | CasADi::SCPg |
|              |              |              | generation   | enInternal   |
+--------------+--------------+--------------+--------------+--------------+
| compiler     | OT_STRING    | \"gcc -fPIC   | Compiler     | CasADi::SCPg |
|              |              | -O2\"         | command to   | enInternal   |
|              |              |              | be used for  |              |
|              |              |              | compiling    |              |
|              |              |              | generated    |              |
|              |              |              | code         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | CasADi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | objective    | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | constraint   | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| gauss_newton | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option. Use  | olverInterna |
|              |              |              | Gauss Newton | l            |
|              |              |              | Hessian appr |              |
|              |              |              | oximation    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| dient        |              | )            | option.      | olverInterna |
|              |              |              | Generate a   | l            |
|              |              |              | function for |              |
|              |              |              | calculating  |              |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | objective.   |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_hes | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| sian         |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Hessian of   |              |
|              |              |              | the          |              |
|              |              |              | Lagrangian   |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_jac | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| obian        |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Jacobian of  |              |
|              |              |              | the          |              |
|              |              |              | constraints  |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_appr | OT_STRING    | \"exact\"      | gauss-       | CasADi::SCPg |
| oximation    |              |              | newton|exact | enInternal   |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | CasADi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | CasADi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| lbfgs_memory | OT_INTEGER   | 10           | Size of      | CasADi::SCPg |
|              |              |              | L-BFGS       | enInternal   |
|              |              |              | memory.      |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter     | OT_INTEGER   | 50           | Maximum      | CasADi::SCPg |
|              |              |              | number of    | enInternal   |
|              |              |              | SQP          |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter_ls  | OT_INTEGER   | 1            | Maximum      | CasADi::SCPg |
|              |              |              | number of    | enInternal   |
|              |              |              | linesearch   |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| merit_memsiz | OT_INTEGER   | 4            | Size of      | CasADi::SCPg |
| e            |              |              | memory to    | enInternal   |
|              |              |              | store        |              |
|              |              |              | history of   |              |
|              |              |              | merit        |              |
|              |              |              | function     |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| merit_start  | OT_REAL      | 0.000        | Lower bound  | CasADi::SCPg |
|              |              |              | for the      | enInternal   |
|              |              |              | merit        |              |
|              |              |              | function     |              |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | CasADi::SCPg |
|              |              |              | uts)  (eval_ | enInternal   |
|              |              |              | f|eval_g|eva |              |
|              |              |              | l_jac_g|eval |              |
|              |              |              | _grad_f|eval |              |
|              |              |              | _h|qp|dx)    |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| name_x       | OT_STRINGVEC | GenericType( | Names of the | CasADi::SCPg |
|              | TOR          | )            | variables.   | enInternal   |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option.      | olverInterna |
|              |              |              | Expect F, G, | l            |
|              |              |              | H, J to have |              |
|              |              |              | an           |              |
|              |              |              | additional   |              |
|              |              |              | input        |              |
|              |              |              | argument     |              |
|              |              |              | appended at  |              |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| print_header | OT_BOOLEAN   | true         | Print the    | CasADi::SCPg |
|              |              |              | header with  | enInternal   |
|              |              |              | problem      |              |
|              |              |              | statistics   |              |
+--------------+--------------+--------------+--------------+--------------+
| print_time   | OT_BOOLEAN   | true         | Print        | CasADi::SCPg |
|              |              |              | information  | enInternal   |
|              |              |              | about        |              |
|              |              |              | execution    |              |
|              |              |              | time         |              |
+--------------+--------------+--------------+--------------+--------------+
| print_x      | OT_INTEGERVE | GenericType( | Which        | CasADi::SCPg |
|              | CTOR         | )            | variables to | enInternal   |
|              |              |              | print.       |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver    | OT_QPSOLVER  | GenericType( | The QP       | CasADi::SCPg |
|              |              | )            | solver to be | enInternal   |
|              |              |              | used by the  |              |
|              |              |              | SQP method   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver_op | OT_DICTIONAR | GenericType( | Options to   | CasADi::SCPg |
| tions        | Y            | )            | be passed to | enInternal   |
|              |              |              | the QP       |              |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| reg_threshol | OT_REAL      | 0.000        | Threshold    | CasADi::SCPg |
| d            |              |              | for the regu | enInternal   |
|              |              |              | larization.  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularize   | OT_BOOLEAN   | false        | Automatic re | CasADi::SCPg |
|              |              |              | gularization | enInternal   |
|              |              |              | of Lagrange  |              |
|              |              |              | Hessian.     |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_du       | OT_REAL      | 0.000        | Stopping     | CasADi::SCPg |
|              |              |              | criterion    | enInternal   |
|              |              |              | for dual inf |              |
|              |              |              | easability   |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_pr       | OT_REAL      | 0.000        | Stopping     | CasADi::SCPg |
|              |              |              | criterion    | enInternal   |
|              |              |              | for primal i |              |
|              |              |              | nfeasibility |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_pr_step  | OT_REAL      | 0.000        | Stopping     | CasADi::SCPg |
|              |              |              | criterion    | enInternal   |
|              |              |              | for the step |              |
|              |              |              | size         |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_reg      | OT_REAL      | 0.000        | Stopping     | CasADi::SCPg |
|              |              |              | criterion    | enInternal   |
|              |              |              | for regulari |              |
|              |              |              | zation       |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | CasADi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-------------+--------------------------+
|     Id      |         Used in          |
+=============+==========================+
| dx          | CasADi::SCPgenInternal   |
+-------------+--------------------------+
| eval_f      | CasADi::SCPgenInternal   |
+-------------+--------------------------+
| eval_g      | CasADi::SCPgenInternal   |
+-------------+--------------------------+
| eval_grad_f | CasADi::SCPgenInternal   |
+-------------+--------------------------+
| eval_h      | CasADi::SCPgenInternal   |
+-------------+--------------------------+
| eval_jac_g  | CasADi::SCPgenInternal   |
+-------------+--------------------------+
| inputs      | CasADi::FunctionInternal |
+-------------+--------------------------+
| outputs     | CasADi::FunctionInternal |
+-------------+--------------------------+
| qp          | CasADi::SCPgenInternal   |
+-------------+--------------------------+

>List of available stats
+------------+------------------------+
|     Id     |        Used in         |
+============+========================+
| iter_count | CasADi::SCPgenInternal |
+------------+------------------------+

Diagrams

C++ includes: scpgen.hpp ";

%feature("docstring") CasADi::SCPgen::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SCPgen::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SCPgen::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SCPgen::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SCPgen::gradF "

Access the objective gradient function>Input scheme: CasADi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") CasADi::SCPgen::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SCPgen::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SCPgen::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") CasADi::SCPgen::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SCPgen::getOption "

get an option value

";

%feature("docstring") CasADi::SCPgen::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SCPgen::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::SCPgen::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SCPgen::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SCPgen::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SCPgen::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SCPgen::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SCPgen::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::SCPgen::SCPgen "

>  CasADi::SCPgen::SCPgen()
------------------------------------------------------------------------

Default constructor.

>  CasADi::SCPgen::SCPgen(const Function &F, const Function &G)
------------------------------------------------------------------------

[DEPRECATED] Create an NLP solver instance (legacy syntax)

>  CasADi::SCPgen::SCPgen(const Function &nlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") CasADi::SCPgen::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SCPgen::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SCPgen::nlp "

Access the NLP.

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::SCPgen::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SCPgen::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SCPgen::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SCPgen::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SCPgen::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SCPgen::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::SCPgen::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") CasADi::SCPgen::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SCPgen::solve "

the same as evaluate()

";

%feature("docstring") CasADi::SCPgen::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SCPgen::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SCPgen::callDerivative "[INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring") CasADi::SCPgen::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SCPgen::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SCPgen::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SCPgen::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SCPgen::outputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SCPgen::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SCPgen::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::SCPgen::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SCPgen::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::SCPgen::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SCPgen::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SCPgen::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SCPgen::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SCPgen::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SCPgen::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SCPgen::getNumInputs "

Get the number of function inputs.

";


// File: classCasADi_1_1SDPInputIOSchemeVector.xml
%feature("docstring") CasADi::SDPInputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::SDPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SDPInputIOSchemeVector::SDPInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") CasADi::SDPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::SDPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::SDPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SDPInputIOSchemeVector "[INTERNAL]  Helper
function for 'SDPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::SDPInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") CasADi::SDPInputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classCasADi_1_1SDPOutputIOSchemeVector.xml
%feature("docstring") CasADi::SDPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::SDPOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SDPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'SDPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::SDPOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SDPOutputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::SDPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::SDPOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::SDPOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
CasADi::SDPOutputIOSchemeVector::SDPOutputIOSchemeVector "[INTERNAL] ";


// File: classCasADi_1_1SDPSDQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SDPSDQPSolver::spInit " [INTERNAL]  Reset the sparsity propagation
(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SDPSDQPSolver::setSOCQPOptions "

Set options that make the SDQP solver more suitable for solving SOCPs.

";

%feature("docstring") CasADi::SDPSDQPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSDQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SDPSDQPSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::SDPSDQPSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SDPSDQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SDPSDQPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSDQPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::SDPSDQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::SDPSDQPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SDPSDQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SDPSDQPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SDPSDQPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SDPSDQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SDPSDQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SDPSDQPSolver::getSolver "

Access underlying SDP solver.

";

%feature("docstring") CasADi::SDPSDQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SDPSDQPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SDPSDQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SDPSDQPSolver::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::SDPSDQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::SDPSDQPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::SDPSDQPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::SDPSDQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SDPSDQPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SDPSDQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SDPSDQPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SDPSDQPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSDQPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::SDPSDQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SDPSDQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::SDPSDQPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::SDPSDQPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SDPSDQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SDPSDQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SDPSDQPSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SDPSDQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SDPSDQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SDPSDQPSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SDPSDQPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSDQPSolver "[INTERNAL]  SDP SDQP Solver
for quadratic programming.

Note: this implementation relies on Cholesky decomposition: Chol(H) = L -> H
= LL' with L lower triangular This requires Pi, H to be positive definite.
Positive semi-definite is not sufficient. Notably, H==0 will not work.

A better implementation would rely on matrix square root, but we need
singular value decomposition to implement that.

Same as an SDPSolver, but with a quadratic objective 1/2 x' H x

Joris Gillis

>Input scheme: CasADi::SDQPInput (SDQP_SOLVER_NUM_IN = 10) [sdqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_H          | h                      | The matrix H: sparse ( |
|                        |                        | n x n) .               |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_F          | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_G          | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::SDQPOutput (SDQP_SOLVER_NUM_OUT = 8) [sdqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_P          | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL       | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL_COST  | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| sdp_solver   | OT_SDPSOLVER | GenericType( | The          | CasADi::SDPS |
|              |              | )            | SDPSolver    | DQPInternal  |
|              |              |              | used to      |              |
|              |              |              | solve the    |              |
|              |              |              | SDQPs.       |              |
+--------------+--------------+--------------+--------------+--------------+
| sdp_solver_o | OT_DICTIONAR | GenericType( | Options to   | CasADi::SDPS |
| ptions       | Y            | )            | be passed to | DQPInternal  |
|              |              |              | the          |              |
|              |              |              | SDPSOlver    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+------------------+-------------------------+
|        Id        |         Used in         |
+==================+=========================+
| sdp_solver_stats | CasADi::SDPSDQPInternal |
+------------------+-------------------------+

Diagrams

C++ includes: sdp_sdqp_solver.hpp ";

%feature("docstring") CasADi::SDPSDQPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SDPSDQPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SDPSDQPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SDPSDQPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::SDPSDQPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::SDPSDQPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSDQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SDPSDQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SDPSDQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SDPSDQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::SDPSDQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SDPSDQPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SDPSDQPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSDQPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::SDPSDQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SDPSDQPSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SDPSDQPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SDPSDQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SDPSDQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SDPSDQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SDPSDQPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SDPSDQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SDPSDQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SDPSDQPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SDPSDQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SDPSDQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SDPSDQPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SDPSDQPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SDPSDQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SDPSDQPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SDPSDQPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::SDPSDQPSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::SDPSDQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SDPSDQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::SDPSDQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SDPSDQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SDPSDQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SDPSDQPSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::SDPSDQPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SDPSDQPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SDPSDQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SDPSDQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SDPSDQPSolver::SDPSDQPSolver "

>  CasADi::SDPSDQPSolver::SDPSDQPSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::SDPSDQPSolver::SDPSDQPSolver(const SDQPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") CasADi::SDPSDQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SDPSDQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SDPSDQPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SDPSDQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SDPSDQPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SDPSDQPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SDPSDQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SDPSDQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SDPSDQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SDPSDQPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SDPSDQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SDPSDQPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::SDPSDQPSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";


// File: classCasADi_1_1SDPSOCPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SDPSOCPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SDPSOCPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SDPSOCPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SDPSOCPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SDPSOCPSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SDPSOCPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SDPSOCPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SDPSOCPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SDPSOCPSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SDPSOCPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::SDPSOCPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::SDPSOCPSolver::getSolver "

Access underlying SDP solver.

";

%feature("docstring") CasADi::SDPSOCPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SDPSOCPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SDPSOCPSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::SDPSOCPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SDPSOCPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSOCPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SDPSOCPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SDPSOCPSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::SDPSOCPSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SDPSOCPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SDPSOCPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SDPSOCPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SDPSOCPSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::SDPSOCPSolver::SDPSOCPSolver "

>  CasADi::SDPSOCPSolver::SDPSOCPSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::SDPSOCPSolver::SDPSOCPSolver(const SOCPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") CasADi::SDPSOCPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SDPSOCPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::SDPSOCPSolver "[INTERNAL]  SOCP Solver for
quadratic programming.

Solves an Second Order Cone Programming (SOCP) problem in standard form.

Primal:

min          c' x   x  subject to               || Gi' x + hi ||_2 <= ei' x
+ fi  i = 1..m              LBA <= A x <= UBA             LBX <= x   <= UBX
with x ( n x 1)          c ( n x 1 ) Gi  sparse (n x ni)          hi  dense
(ni x 1)          ei  dense (n x 1)          fi  dense (1 x 1)          N =
Sum_i^m ni          A sparse (nc x n)          LBA, UBA dense vector (nc x
1)          LBX, UBX dense vector (n x 1)

Joris Gillis

>Input scheme: CasADi::SOCPInput (SOCP_SOLVER_NUM_IN = 11) [socpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_G          | g                      | The horizontal stack   |
|                        |                        | of all matrices Gi: (  |
|                        |                        | n x N) .               |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_H          | h                      | The vertical stack of  |
|                        |                        | all vectors hi: ( N x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_E          | e                      | The vertical stack of  |
|                        |                        | all vectors ei: ( nm x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_F          | f                      | The vertical stack of  |
|                        |                        | all scalars fi: ( m x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::SOCPOutput (SOCP_SOLVER_NUM_OUT = 5) [socpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| ni           | OT_INTEGERVE | GenericType( | Provide the  | CasADi::SOCP |
|              | CTOR         | )            | size of each | SolverIntern |
|              |              |              | SOC          | al           |
|              |              |              | constraint.  |              |
|              |              |              | Must sum up  |              |
|              |              |              | to N.        |              |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | CasADi::SOCP |
| m            |              |              | problem      | SolverIntern |
|              |              |              | statement    | al           |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| sdp_solver   | OT_SDPSOLVER | GenericType( | The          | CasADi::SDPS |
|              |              | )            | SDPSolver    | OCPInternal  |
|              |              |              | used to      |              |
|              |              |              | solve the    |              |
|              |              |              | SOCPs.       |              |
+--------------+--------------+--------------+--------------+--------------+
| sdp_solver_o | OT_DICTIONAR | GenericType( | Options to   | CasADi::SDPS |
| ptions       | Y            | )            | be passed to | OCPInternal  |
|              |              |              | the          |              |
|              |              |              | SDPSOlver    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+------------------+-------------------------+
|        Id        |         Used in         |
+==================+=========================+
| sdp_solver_stats | CasADi::SDPSOCPInternal |
+------------------+-------------------------+

Diagrams

C++ includes: sdp_socp_solver.hpp ";

%feature("docstring") CasADi::SDPSOCPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SDPSOCPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SDPSOCPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SDPSOCPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::SDPSOCPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::SDPSOCPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SDPSOCPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SDPSOCPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SDPSOCPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSOCPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SDPSOCPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SDPSOCPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SDPSOCPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SDPSOCPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SDPSOCPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SDPSOCPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::SDPSOCPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SDPSOCPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SDPSOCPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::SDPSOCPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SDPSOCPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SDPSOCPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSOCPSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SDPSOCPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SDPSOCPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SDPSOCPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SDPSOCPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SDPSOCPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SDPSOCPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SDPSOCPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SDPSOCPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SDPSOCPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSOCPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::SDPSOCPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SDPSOCPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SDPSOCPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SDPSOCPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::SDPSOCPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SDPSOCPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SDPSOCPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SDPSOCPSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::SDPSOCPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::SDPSOCPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SDPSOCPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::SDPSOCPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SDPSOCPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SDPSOCPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SDPSOCPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SDPSOCPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::SDPSOCPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SDPSOCPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SDPSOCPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SDPSOCPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSOCPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SDPSOCPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::SDPSOCPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SDPSOCPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SDPSOCPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::SDPSOCPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SDPSOCPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSOCPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SDPSOCPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SDPSOCPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SDPSOCPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SDPSOCPSolver::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::SDPSOCPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SDPSOCPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SDPSOCPSolver::print "[INTERNAL]  Print a
destription of the object.

";


// File: classCasADi_1_1SDPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SDPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SDPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SDPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SDPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SDPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SDPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SDPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SDPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SDPSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SDPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SDPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SDPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::SDPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::SDPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SDPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SDPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SDPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SDPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SDPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SDPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SDPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SDPSolver::SDPSolver "

Default constructor.

";

%feature("docstring") CasADi::SDPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SDPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SDPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SDPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SDPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SDPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SDPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SDPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SDPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SDPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SDPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SDPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SDPSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::SDPSolver "[INTERNAL]   SDPSolver.

Solves an SDP problem in standard form.
Seehttp://sdpa.indsys.chuo-u.ac.jp/sdpa/files/sdpa-c.6.2.0.manual.pdf

Primal:

min          c' x   x  subject to               P = Sum_i^m F_i x_i - G
P negative semidefinite LBA <= A x <= UBA             LBX <= x   <= UBX
with x ( n x 1)          c ( n x 1 )          G, F_i  sparse symmetric (m x
m)          X dense symmetric ( m x m )          A sparse matrix ( nc x n)
LBA, UBA dense vector (nc x 1)          LBX, UBX dense vector (n x 1)

This formulation is chosen as primal, because it does not call for a large
decision variable space.

Dual:

max          trace(G Y)  Y   subject to             trace(F_i Y) = c_i Y
positive semidefinite                  with Y dense symmetric ( m x m)

On generality: you might have formulation with block partitioning:

Primal:

min          c' x   x  subject to               Pj = Sum_i^m F_ij x_i - gj
for all j               Pj negative semidefinite   for all j with x ( n x 1)
c ( n x 1 )          G, F_i  sparse symmetric (m x m)          X dense
symmetric ( m x m )

Dual:max          Sum_j trace(Gj Yj)  Yj   subject to             Sum_j
trace(F_ij Yj) = c_i   for all j             Yj positive semidefinite for
all j                  with Y dense symmetric ( m x m)

You can cast this into the standard form with: G = blkdiag(Gj for all j) Fi
= blkdiag(F_ij for all j)

Implementations of SDPSolver are encouraged to exploit this block structure.

Joel Andersson

>Input scheme: CasADi::SDPInput (SDP_SOLVER_NUM_IN = 9) [sdpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_F           | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_C           | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_G           | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_A           | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBA         | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBA         | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBX         | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBX         | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::SDPOutput (SDP_SOLVER_NUM_OUT = 8) [sdpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_X           | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_P           | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL        | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_COST        | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL_COST   | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_A       | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_X       | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_dual    | OT_BOOLEAN   | true         | Indicate if  | CasADi::SDPS |
|              |              |              | dual should  | olverInterna |
|              |              |              | be allocated | l            |
|              |              |              | and          |              |
|              |              |              | calculated.  |              |
|              |              |              | You may want |              |
|              |              |              | to avoid     |              |
|              |              |              | calculating  |              |
|              |              |              | this         |              |
|              |              |              | variable for |              |
|              |              |              | problems     |              |
|              |              |              | with n       |              |
|              |              |              | large, as is |              |
|              |              |              | always dense |              |
|              |              |              | (m x m).     |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_p       | OT_BOOLEAN   | true         | Indicate if  | CasADi::SDPS |
|              |              |              | the P-part   | olverInterna |
|              |              |              | of primal    | l            |
|              |              |              | solution     |              |
|              |              |              | should be    |              |
|              |              |              | allocated    |              |
|              |              |              | and          |              |
|              |              |              | calculated.  |              |
|              |              |              | You may want |              |
|              |              |              | to avoid     |              |
|              |              |              | calculating  |              |
|              |              |              | this         |              |
|              |              |              | variable for |              |
|              |              |              | problems     |              |
|              |              |              | with n       |              |
|              |              |              | large, as is |              |
|              |              |              | always dense |              |
|              |              |              | (m x m).     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | CasADi::SDPS |
| m            |              |              | problem      | olverInterna |
|              |              |              | statement    | l            |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: sdp_solver.hpp ";

%feature("docstring") CasADi::SDPSolver::setSOCPOptions "

Set options that make the SDP solver more suitable for solving SOCPs.

";

%feature("docstring") CasADi::SDPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SDPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SDPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::SDPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SDPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::SDPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SDPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::SDPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SDPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SDPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SDPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SDPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SDPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SDPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SDPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SDPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SDPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::SDPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::SDPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::SDPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SDPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SDPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SDPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SDPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SDPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::SDPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SDPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::SDPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::SDPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SDPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SDPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SDPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::SDPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SDPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SDPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SDPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SDPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SDPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SDPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SDPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SDPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SDPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SDPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::SDPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::SDPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SDPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SDPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SDPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::SDPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SDPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::SDPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SDPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SDPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SDPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::SDPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";


// File: classCasADi_1_1SDPStructIOSchemeVector.xml
%feature("docstring")
CasADi::SDPStructIOSchemeVector::SDPStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::SDPStructIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::SDPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SDPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SDPStructIOSchemeVector "[INTERNAL]  Helper
function for 'SDPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") CasADi::SDPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::SDPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::SDPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::SDPStructIOSchemeVector::vector "[INTERNAL]
";


// File: classCasADi_1_1SDQPInputIOSchemeVector.xml
%feature("docstring") CasADi::SDQPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::SDQPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
CasADi::SDQPInputIOSchemeVector::SDQPInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::SDQPInputIOSchemeVector "[INTERNAL]  Helper
function for 'SDQPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::SDQPInputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::SDQPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SDQPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::SDQPInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::SDQPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classCasADi_1_1SDQPOutputIOSchemeVector.xml
%feature("docstring") CasADi::SDQPOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SDQPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'SDQPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::SDQPOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::SDQPOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::SDQPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::SDQPOutputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring")
CasADi::SDQPOutputIOSchemeVector::SDQPOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::SDQPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::SDQPOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";


// File: classCasADi_1_1SDQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SDQPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SDQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SDQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SDQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SDQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::SDQPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SDQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SDQPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SDQPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::SDQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SDQPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SDQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SDQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SDQPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SDQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::SDQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SDQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SDQPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::SDQPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::SDQPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SDQPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::SDQPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SDQPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::SDQPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SDQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SDQPSolver::setSOCQPOptions "

Set options that make the SDQP solver more suitable for solving SOCPs.

";

%feature("docstring") CasADi::SDQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SDQPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SDQPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::SDQPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SDQPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::SDQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::SDQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SDQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SDQPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SDQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SDQPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SDQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SDQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SDQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SDQPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SDQPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SDQPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SDQPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SDQPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SDQPSolver "[INTERNAL]   SDQPSolver.

Same as an SDPSolver, but with a quadratic objective 1/2 x' H x

Joel Andersson

>Input scheme: CasADi::SDQPInput (SDQP_SOLVER_NUM_IN = 10) [sdqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_H          | h                      | The matrix H: sparse ( |
|                        |                        | n x n) .               |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_F          | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_G          | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::SDQPOutput (SDQP_SOLVER_NUM_OUT = 8) [sdqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_P          | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL       | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL_COST  | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| sdp_solver   | OT_SDPSOLVER | GenericType( | The          | CasADi::SDQP |
|              |              | )            | SDQPSolver   | SolverIntern |
|              |              |              | used to      | al           |
|              |              |              | solve the    |              |
|              |              |              | SDPs.        |              |
+--------------+--------------+--------------+--------------+--------------+
| sdp_solver_o | OT_DICTIONAR | GenericType( | Options to   | CasADi::SDQP |
| ptions       | Y            | )            | be passed to | SolverIntern |
|              |              |              | the          | al           |
|              |              |              | SDPSOlver    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: sdqp_solver.hpp ";

%feature("docstring") CasADi::SDQPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SDQPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::SDQPSolver::SDQPSolver "

Default constructor.

";

%feature("docstring") CasADi::SDQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SDQPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SDQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SDQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::SDQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SDQPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SDQPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SDQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SDQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SDQPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::SDQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SDQPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SDQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SDQPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::SDQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SDQPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SDQPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SDQPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SDQPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::SDQPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SDQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SDQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SDQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SDQPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SDQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SDQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SDQPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SDQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SDQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SDQPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SDQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SDQPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::SDQPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SDQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::SDQPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SDQPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SDQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SDQPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::SDQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SDQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SDQPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SDQPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SDQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SDQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SDQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SDQPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SDQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SDQPSolver::solve "

the same as evaluate()

";


// File: classCasADi_1_1SDQPStructIOSchemeVector.xml
%feature("docstring") CasADi::SDQPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::SDQPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SDQPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SDQPStructIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::SDQPStructIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::SDQPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
CasADi::SDQPStructIOSchemeVector::SDQPStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::SDQPStructIOSchemeVector "[INTERNAL]  Helper
function for 'SDQPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") CasADi::SDQPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classCasADi_1_1SetNonzeros.xml
%feature("docstring") CasADi::SetNonzeros::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") CasADi::SetNonzeros::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::SetNonzeros::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::SetNonzeros::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") CasADi::SetNonzeros::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") CasADi::SetNonzeros::evaluateMX "

>  void CasADi::SetNonzeros< Add >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::SetNonzeros::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::SetNonzeros::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") CasADi::SetNonzeros::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::SetNonzeros::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SetNonzeros::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::SetNonzeros::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::SetNonzeros::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") CasADi::SetNonzeros::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") CasADi::SetNonzeros::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::SetNonzeros::SetNonzeros "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::SetNonzeros::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::SetNonzeros::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::SetNonzeros::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::SetNonzeros::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") CasADi::SetNonzeros::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::SetNonzeros "[INTERNAL]  Assign or add
entries to a matrix.

Joel Andersson

C++ includes: setnonzeros.hpp ";

%feature("docstring") CasADi::SetNonzeros::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::SetNonzeros::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::SetNonzeros::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::SetNonzeros::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") CasADi::SetNonzeros::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::SetNonzeros::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::SetNonzeros::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::SetNonzeros::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::SetNonzeros::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::SetNonzeros::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SetNonzeros::isEqual "[INTERNAL]  Check if
two nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::SetNonzeros::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::SetNonzeros::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") CasADi::SetNonzeros::getVertsplit "[INTERNAL]  Create
a vertical split node (vectors only)

";

%feature("docstring") CasADi::SetNonzeros::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::SetNonzeros::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::SetNonzeros::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SetNonzeros::~SetNonzeros "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::SetNonzeros::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::SetNonzeros::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::SetNonzeros::getAll "[INTERNAL]  Get all the
nonzeros.

";

%feature("docstring") CasADi::SetNonzeros::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::SetNonzeros::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SetNonzeros::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::SetNonzeros::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::SetNonzeros::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") CasADi::SetNonzeros::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") CasADi::SetNonzeros::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::SetNonzeros::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::SetNonzeros::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::SetNonzeros::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::SetNonzeros::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") CasADi::SetNonzeros::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") CasADi::SetNonzeros::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::SetNonzeros::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::SetNonzeros::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::SetNonzeros::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::SetNonzeros::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::SetNonzeros::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::SetNonzeros::getBinarySwitch "[INTERNAL]  Get
a binary operation operation.

";

%feature("docstring") CasADi::SetNonzeros::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::SetNonzeros::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::SetNonzeros::getHorzsplit "[INTERNAL]  Create
a horizontal split node.

";

%feature("docstring") CasADi::SetNonzeros::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::SetNonzeros::shape "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzeros::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring") CasADi::SetNonzeros::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::SetNonzeros::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::SetNonzeros::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::SetNonzeros::propagateSparsity "

>  virtual void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::SetNonzeros::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::SetNonzeros::size "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzeros::size1 "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzeros::size2 "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzeros::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::SetNonzeros::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::SetNonzeros::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::SetNonzeros::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::SetNonzeros::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::SetNonzeros::generateOperation "[INTERNAL]
Generate code for the operation.

";


// File: classCasADi_1_1SetNonzerosSlice.xml
%feature("docstring") CasADi::SetNonzerosSlice::size1 "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzerosSlice::getNorm1 "[INTERNAL]
1-norm

";

%feature("docstring") CasADi::SetNonzerosSlice::getFunction "[INTERNAL]
Get function reference.

";

%feature("docstring") CasADi::SetNonzerosSlice::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::SetNonzerosSlice::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::SetNonzerosSlice::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") CasADi::SetNonzerosSlice::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") CasADi::SetNonzerosSlice::getSolve "[INTERNAL]
Solve a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::SetNonzerosSlice::isZero "[INTERNAL]  Check
if identically zero.

";

%feature("docstring") CasADi::SetNonzerosSlice::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") CasADi::SetNonzerosSlice::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") CasADi::SetNonzerosSlice::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::SetNonzerosSlice::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") CasADi::SetNonzerosSlice::getName "[INTERNAL]  Get
the name.

";

%feature("docstring") CasADi::SetNonzerosSlice::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") CasADi::SetNonzerosSlice::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") CasADi::SetNonzerosSlice::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::SetNonzerosSlice::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") CasADi::SetNonzerosSlice::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") CasADi::SetNonzerosSlice::getBinary "[INTERNAL]  Get
a binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::SetNonzerosSlice::evaluateMX "

>  void CasADi::SetNonzeros< Add >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::SetNonzerosSlice::size "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzerosSlice::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::SetNonzerosSlice::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::SetNonzerosSlice::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::SetNonzerosSlice::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::SetNonzerosSlice::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") CasADi::SetNonzerosSlice::numInplace "[INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::SetNonzerosSlice::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::SetNonzerosSlice::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") CasADi::SetNonzerosSlice::hasDep "[INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") CasADi::SetNonzerosSlice::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") CasADi::SetNonzerosSlice::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::SetNonzerosSlice::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::SetNonzerosSlice::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") CasADi::SetNonzerosSlice::isEqual "[INTERNAL]  Check
if two nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::SetNonzerosSlice::isBinaryOp "[INTERNAL]
Check if binary operation.

";

%feature("docstring") CasADi::SetNonzerosSlice::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") CasADi::SetNonzerosSlice::printPart "[INTERNAL]
Print a part of the expression */.

";

%feature("docstring") CasADi::SetNonzerosSlice::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::SetNonzerosSlice::~SetNonzerosSlice "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::SetNonzerosSlice::size2 "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzerosSlice::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") CasADi::SetNonzerosSlice::getAll "[INTERNAL]  Get all
the nonzeros.

";

%feature("docstring") CasADi::SetNonzerosSlice::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") CasADi::SetNonzerosSlice::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") CasADi::SetNonzerosSlice::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::SetNonzerosSlice::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") CasADi::SetNonzerosSlice::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::SetNonzerosSlice::simplifyMe "[INTERNAL]
Simplify.

";

%feature("docstring") CasADi::SetNonzerosSlice::isIdentity "[INTERNAL]
Check if identity matrix.

";

%feature("docstring") CasADi::SetNonzerosSlice::isMultipleOutput "[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") CasADi::SetNonzerosSlice::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SetNonzerosSlice::getValue "[INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") CasADi::SetNonzerosSlice::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::SetNonzerosSlice::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::SetNonzerosSlice::SetNonzerosSlice "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::SetNonzerosSlice::isNonLinear "[INTERNAL]  Is
the node nonlinear.

";

%feature("docstring") CasADi::SetNonzerosSlice::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::SetNonzerosSlice::nTmp "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") CasADi::SetNonzerosSlice::shape "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzerosSlice::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") CasADi::SetNonzerosSlice::setSparsity "[INTERNAL]
Set the sparsity.

";

%feature("docstring") CasADi::SetNonzerosSlice::isUnaryOp "[INTERNAL]
Check if unary operation.

";

%feature("docstring") CasADi::SetNonzerosSlice "[INTERNAL] C++ includes:
setnonzeros.hpp ";

%feature("docstring") CasADi::SetNonzerosSlice::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::SetNonzerosSlice::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") CasADi::SetNonzerosSlice::isValue "[INTERNAL]  Check
if a certain value.

";

%feature("docstring") CasADi::SetNonzerosSlice::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") CasADi::SetNonzerosSlice::getOutput "[INTERNAL]  Get
an output.

";

%feature("docstring") CasADi::SetNonzerosSlice::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") CasADi::SetNonzerosSlice::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SetNonzerosSlice::isAssignment "[INTERNAL]
Check if the instance is in fact a simple assignment.

";

%feature("docstring") CasADi::SetNonzerosSlice::isInit "[INTERNAL]  Check
if the object has been initialized.

";

%feature("docstring") CasADi::SetNonzerosSlice::getFunctionInput "[INTERNAL]  Get function input.

";

%feature("docstring") CasADi::SetNonzerosSlice::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") CasADi::SetNonzerosSlice::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::SetNonzerosSlice::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::SetNonzerosSlice::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") CasADi::SetNonzerosSlice::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") CasADi::SetNonzerosSlice::getNorm2 "[INTERNAL]
Spectran norm.

";

%feature("docstring") CasADi::SetNonzerosSlice::getBinarySwitch "[INTERNAL]
Get a binary operation operation.

";

%feature("docstring") CasADi::SetNonzerosSlice::getMultiplication "[INTERNAL]   Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::SetNonzerosSlice::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";


// File: classCasADi_1_1SetNonzerosSlice2.xml
%feature("docstring") CasADi::SetNonzerosSlice2::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::SetNonzerosSlice2::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") CasADi::SetNonzerosSlice2::isZero "[INTERNAL]  Check
if identically zero.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getUnary "[INTERNAL]  Get
a unary operation.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getNorm1 "[INTERNAL]
1-norm

";

%feature("docstring") CasADi::SetNonzerosSlice2::getFunctionInput "[INTERNAL]  Get function input.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getSolve "[INTERNAL]
Solve a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::SetNonzerosSlice2::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") CasADi::SetNonzerosSlice2::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") CasADi::SetNonzerosSlice2::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getAll "[INTERNAL]  Get
all the nonzeros.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SetNonzerosSlice2::nTmp "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getFunction "[INTERNAL]
Get function reference.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") CasADi::SetNonzerosSlice2::setSparsity "[INTERNAL]
Set the sparsity.

";

%feature("docstring") CasADi::SetNonzerosSlice2 "[INTERNAL] C++ includes:
setnonzeros.hpp ";

%feature("docstring") CasADi::SetNonzerosSlice2::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") CasADi::SetNonzerosSlice2::isValue "[INTERNAL]  Check
if a certain value.

";

%feature("docstring") CasADi::SetNonzerosSlice2::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") CasADi::SetNonzerosSlice2::numInplace "[INTERNAL]
Can the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::SetNonzerosSlice2::isNonLinear "[INTERNAL]
Is the node nonlinear.

";

%feature("docstring") CasADi::SetNonzerosSlice2::shape "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzerosSlice2::getBinary "[INTERNAL]  Get
a binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::SetNonzerosSlice2::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::SetNonzerosSlice2::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") CasADi::SetNonzerosSlice2::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") CasADi::SetNonzerosSlice2::isEqual "[INTERNAL]  Check
if two nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::SetNonzerosSlice2::deepCopyMembers "[INTERNAL]  Deep copy data members.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") CasADi::SetNonzerosSlice2::getBinarySwitch "[INTERNAL]  Get a binary operation operation.

";

%feature("docstring") CasADi::SetNonzerosSlice2::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getNorm2 "[INTERNAL]
Spectran norm.

";

%feature("docstring") CasADi::SetNonzerosSlice2::isOne "[INTERNAL]  Check
if identically one.

";

%feature("docstring") CasADi::SetNonzerosSlice2::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") CasADi::SetNonzerosSlice2::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::SetNonzerosSlice2::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") CasADi::SetNonzerosSlice2::isIdentity "[INTERNAL]
Check if identity matrix.

";

%feature("docstring") CasADi::SetNonzerosSlice2::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::SetNonzerosSlice2::ndep "[INTERNAL]  Number
of dependencies.

";

%feature("docstring") CasADi::SetNonzerosSlice2::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") CasADi::SetNonzerosSlice2::printPart "[INTERNAL]
Print a part of the expression */.

";

%feature("docstring") CasADi::SetNonzerosSlice2::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::SetNonzerosSlice2::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getName "[INTERNAL]  Get
the name.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") CasADi::SetNonzerosSlice2::isBinaryOp "[INTERNAL]
Check if binary operation.

";

%feature("docstring") CasADi::SetNonzerosSlice2::size1 "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzerosSlice2::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") CasADi::SetNonzerosSlice2::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") CasADi::SetNonzerosSlice2::~SetNonzerosSlice2 "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::SetNonzerosSlice2::size "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzerosSlice2::isInit "[INTERNAL]  Check
if the object has been initialized.

";

%feature("docstring") CasADi::SetNonzerosSlice2::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getMultiplication "[INTERNAL]   Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::SetNonzerosSlice2::getValue "[INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") CasADi::SetNonzerosSlice2::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::SetNonzerosSlice2::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::SetNonzerosSlice2::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") CasADi::SetNonzerosSlice2::SetNonzerosSlice2 "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::SetNonzerosSlice2::hasDep "[INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") CasADi::SetNonzerosSlice2::size2 "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzerosSlice2::isMultipleOutput "[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::SetNonzerosSlice2::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") CasADi::SetNonzerosSlice2::mapping "[INTERNAL]  Get
an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::SetNonzerosSlice2::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") CasADi::SetNonzerosSlice2::getOutput "[INTERNAL]  Get
an output.

";

%feature("docstring") CasADi::SetNonzerosSlice2::evaluateMX "

>  void CasADi::SetNonzeros< Add >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::SetNonzerosSlice2::isUnaryOp "[INTERNAL]
Check if unary operation.

";

%feature("docstring") CasADi::SetNonzerosSlice2::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";


// File: classCasADi_1_1SetNonzerosVector.xml
%feature("docstring") CasADi::SetNonzerosVector::size1 "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzerosVector::size2 "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzerosVector::isOne "[INTERNAL]  Check
if identically one.

";

%feature("docstring") CasADi::SetNonzerosVector::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") CasADi::SetNonzerosVector::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::SetNonzerosVector::nTmp "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") CasADi::SetNonzerosVector::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::SetNonzerosVector::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::SetNonzerosVector::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") CasADi::SetNonzerosVector::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") CasADi::SetNonzerosVector::SetNonzerosVector "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::SetNonzerosVector::getNorm2 "[INTERNAL]
Spectran norm.

";

%feature("docstring") CasADi::SetNonzerosVector::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::SetNonzerosVector::evaluateMX "

>  void CasADi::SetNonzeros< Add >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::SetNonzerosVector::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::SetNonzerosVector::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::SetNonzerosVector::isInit "[INTERNAL]  Check
if the object has been initialized.

";

%feature("docstring") CasADi::SetNonzerosVector::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") CasADi::SetNonzerosVector::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::SetNonzerosVector::isZero "[INTERNAL]  Check
if identically zero.

";

%feature("docstring") CasADi::SetNonzerosVector::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") CasADi::SetNonzerosVector::isBinaryOp "[INTERNAL]
Check if binary operation.

";

%feature("docstring") CasADi::SetNonzerosVector::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") CasADi::SetNonzerosVector::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") CasADi::SetNonzerosVector::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") CasADi::SetNonzerosVector::getUnary "[INTERNAL]  Get
a unary operation.

";

%feature("docstring") CasADi::SetNonzerosVector::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") CasADi::SetNonzerosVector::getAll "[INTERNAL]  Get
all the nonzeros.

";

%feature("docstring") CasADi::SetNonzerosVector::getOutput "[INTERNAL]  Get
an output.

";

%feature("docstring") CasADi::SetNonzerosVector::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") CasADi::SetNonzerosVector::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") CasADi::SetNonzerosVector::getNorm1 "[INTERNAL]
1-norm

";

%feature("docstring") CasADi::SetNonzerosVector::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") CasADi::SetNonzerosVector::getName "[INTERNAL]  Get
the name.

";

%feature("docstring") CasADi::SetNonzerosVector "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

Joel Andersson

C++ includes: setnonzeros.hpp ";

%feature("docstring") CasADi::SetNonzerosVector::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::SetNonzerosVector::shape "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzerosVector::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") CasADi::SetNonzerosVector::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") CasADi::SetNonzerosVector::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") CasADi::SetNonzerosVector::numInplace "[INTERNAL]
Can the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::SetNonzerosVector::getFunctionInput "[INTERNAL]  Get function input.

";

%feature("docstring") CasADi::SetNonzerosVector::getValue "[INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") CasADi::SetNonzerosVector::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::SetNonzerosVector::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") CasADi::SetNonzerosVector::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") CasADi::SetNonzerosVector::getFunction "[INTERNAL]
Get function reference.

";

%feature("docstring") CasADi::SetNonzerosVector::getBinary "[INTERNAL]  Get
a binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::SetNonzerosVector::isUnaryOp "[INTERNAL]
Check if unary operation.

";

%feature("docstring") CasADi::SetNonzerosVector::getBinarySwitch "[INTERNAL]  Get a binary operation operation.

";

%feature("docstring") CasADi::SetNonzerosVector::getSolve "[INTERNAL]
Solve a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::SetNonzerosVector::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::SetNonzerosVector::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::SetNonzerosVector::isEqual "[INTERNAL]  Check
if two nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::SetNonzerosVector::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SetNonzerosVector::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SetNonzerosVector::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::SetNonzerosVector::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::SetNonzerosVector::~SetNonzerosVector "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::SetNonzerosVector::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") CasADi::SetNonzerosVector::isIdentity "[INTERNAL]
Check if identity matrix.

";

%feature("docstring") CasADi::SetNonzerosVector::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") CasADi::SetNonzerosVector::isMultipleOutput "[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") CasADi::SetNonzerosVector::ndep "[INTERNAL]  Number
of dependencies.

";

%feature("docstring") CasADi::SetNonzerosVector::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") CasADi::SetNonzerosVector::isNonLinear "[INTERNAL]
Is the node nonlinear.

";

%feature("docstring") CasADi::SetNonzerosVector::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") CasADi::SetNonzerosVector::mapping "[INTERNAL]  Get
an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::SetNonzerosVector::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::SetNonzerosVector::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::SetNonzerosVector::isValue "[INTERNAL]  Check
if a certain value.

";

%feature("docstring") CasADi::SetNonzerosVector::hasDep "[INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") CasADi::SetNonzerosVector::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") CasADi::SetNonzerosVector::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") CasADi::SetNonzerosVector::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::SetNonzerosVector::getMultiplication "[INTERNAL]   Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::SetNonzerosVector::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") CasADi::SetNonzerosVector::deepCopyMembers "[INTERNAL]  Deep copy data members.

";

%feature("docstring") CasADi::SetNonzerosVector::printPart "[INTERNAL]
Print a part of the expression */.

";

%feature("docstring") CasADi::SetNonzerosVector::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") CasADi::SetNonzerosVector::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") CasADi::SetNonzerosVector::size "[INTERNAL] ";

%feature("docstring") CasADi::SetNonzerosVector::setSparsity "[INTERNAL]
Set the sparsity.

";


// File: classCasADi_1_1SetSparse.xml
%feature("docstring") CasADi::SetSparse::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::SetSparse::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::SetSparse::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") CasADi::SetSparse::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") CasADi::SetSparse::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::SetSparse::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::SetSparse::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::SetSparse::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::SetSparse::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::SetSparse::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::SetSparse::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::SetSparse::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::SetSparse::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::SetSparse::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::SetSparse::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") CasADi::SetSparse::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::SetSparse::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::SetSparse::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::SetSparse::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::SetSparse::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") CasADi::SetSparse::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::SetSparse::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SetSparse::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::SetSparse::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::SetSparse::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") CasADi::SetSparse::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::SetSparse::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::SetSparse::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::SetSparse::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::SetSparse::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::SetSparse::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::SetSparse::~SetSparse "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::SetSparse::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::SetSparse::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SetSparse::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::SetSparse::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::SetSparse::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::SetSparse::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::SetSparse::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::SetSparse::evaluateMX "

>  void CasADi::SetSparse::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::SetSparse::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::SetSparse::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::SetSparse::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::SetSparse::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::SetSparse::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SetSparse::SetSparse "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::SetSparse::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::SetSparse::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::SetSparse::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::SetSparse::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::SetSparse::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::SetSparse::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::SetSparse::size "[INTERNAL] ";

%feature("docstring") CasADi::SetSparse::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::SetSparse::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::SetSparse::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::SetSparse::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") CasADi::SetSparse::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::SetSparse::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::SetSparse::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::SetSparse::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::SetSparse::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::SetSparse::size1 "[INTERNAL] ";

%feature("docstring") CasADi::SetSparse::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") CasADi::SetSparse::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::SetSparse::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::SetSparse::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::SetSparse "[INTERNAL]  Change the sparsity of
an expression.

Joel Andersson

C++ includes: set_sparse.hpp ";

%feature("docstring") CasADi::SetSparse::size2 "[INTERNAL] ";

%feature("docstring") CasADi::SetSparse::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::SetSparse::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::SetSparse::shape "[INTERNAL] ";

%feature("docstring") CasADi::SetSparse::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::SetSparse::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::SetSparse::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::SetSparse::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::SetSparse::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::SetSparse::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::SetSparse::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SetSparse::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::SetSparse::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::SetSparse::isOutputNode "[INTERNAL]  Check if
evaluation output.

";


// File: classCasADi_1_1SharedObject.xml
%feature("docstring") CasADi::SharedObject::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SharedObject::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::SharedObject::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::SharedObject::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SharedObject::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::SharedObject::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SharedObject::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SharedObject::isInit "

Is initialized?

";

%feature("docstring") CasADi::SharedObject::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::SharedObject::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::SharedObject "[INTERNAL]   SharedObject
implements a reference counting framework simular for effient and easily-
maintained memory management.

To use the class, both the SharedObject class (the public class), and the
SharedObjectNode class (the internal class) must be inherited from. It can
be done in two different files and together with memory management, this
approach provides a clear destinction of which methods of the class are to
be considered \"public\", i.e. methods for public use that can be considered
to remain over time with small changes, and the internal memory.

When interfacing a software, which typically includes including some header
file, this is best done only in the file where the internal class is
defined, to avoid polluting the global namespace and other side effects.

The default constructor always means creating a null pointer to an internal
class only. To allocate an internal class (this works only when the internal
class isn't abstract), use the constructor with arguments.

The copy constructor and the assignment operator perform shallow copies
only, to make a deep copy you must use the clone method explictly. This will
give a shared pointer instance.

In an inheritance hierarchy, you can cast down automatically, e.g. (
SXFunction is a child class of Function): SXFunction derived(...); Function
base = derived;

To cast up, use the shared_cast template function, which works analogously
to dynamic_cast, static_cast, const_cast etc, e.g.: SXFunction derived(...);
Function base = derived; SXFunction derived_from_base =
shared_cast<SXFunction>(base);

A failed shared_cast will result in a null pointer (cf. dynamic_cast)

Joel Andersson

C++ includes: shared_object.hpp ";

%feature("docstring") CasADi::SharedObject::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SharedObject::checkNode "[INTERNAL]  Assert
that the node is pointing to the right type of object

";

%feature("docstring") CasADi::SharedObject::SharedObject "

>  CasADi::SharedObject::SharedObject()
------------------------------------------------------------------------
[INTERNAL] 
Default constructor.

>  CasADi::SharedObject::SharedObject(const SharedObject &ref)
------------------------------------------------------------------------
[INTERNAL] 
Copy constructor (shallow copy)

";

%feature("docstring") CasADi::SharedObject::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SharedObject::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::SharedObject::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::SharedObject::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SharedObject::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SharedObject::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SharedObject::~SharedObject "[INTERNAL]
Destructor.

";


// File: classCasADi_1_1SharedObjectNode.xml
%feature("docstring") CasADi::SharedObjectNode::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::SharedObjectNode::SharedObjectNode "

>  CasADi::SharedObjectNode::SharedObjectNode()
------------------------------------------------------------------------
[INTERNAL] 
Default constructor.

>  CasADi::SharedObjectNode::SharedObjectNode(const SharedObjectNode &node)
------------------------------------------------------------------------
[INTERNAL] 
Copy constructor.

";

%feature("docstring") CasADi::SharedObjectNode::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SharedObjectNode "[INTERNAL]  Internal class
for the reference counting framework, see comments on the public class.

C++ includes: shared_object.hpp ";

%feature("docstring") CasADi::SharedObjectNode::isInit "[INTERNAL]  Check
if the object has been initialized.

";

%feature("docstring") CasADi::SharedObjectNode::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") CasADi::SharedObjectNode::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") CasADi::SharedObjectNode::~SharedObjectNode "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::SharedObjectNode::clone "[INTERNAL]  Make a
deep copy of the instance.

";

%feature("docstring") CasADi::SharedObjectNode::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::SharedObjectNode::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") CasADi::SharedObjectNode::print "[INTERNAL]  Print a
destription of the object.

";


// File: classCasADi_1_1SimpleHomotopyNLPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SimpleHomotopyNLPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::swap "[INTERNAL]
Swap content with another instance.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::output_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getNumOutputNonzeros
"

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::spEvaluate "[INTERNAL]  Propagate the sparsity pattern through a set of directional
derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::weak "[INTERNAL]
Get a weak reference to the object.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::setOptionByEnumValue
"[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::input_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")
CasADi::SimpleHomotopyNLPSolver::SimpleHomotopyNLPSolver "

>  CasADi::SimpleHomotopyNLPSolver::SimpleHomotopyNLPSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::SimpleHomotopyNLPSolver::SimpleHomotopyNLPSolver(const Function &hnlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::spInit "[INTERNAL]
Reset the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::schemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::inputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")
CasADi::SimpleHomotopyNLPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a
certain option by giving its index into the allowed values.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::assignNode "[INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getOptionDescription
"

Get the description of a certain option.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getNumOutputElements
"

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::checkInputs "[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getOptionAllowedIndex
"[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver "[INTERNAL]  Solving
an NLP homotopy with regular NLP solvers.

Joris Gillis

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | CasADi::Homo |
|              |              |              | NLP function | topyNLPInter |
|              |              |              | in terms of  | nal          |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver   | OT_NLPSOLVER | GenericType( | The NLP      | CasADi::Simp |
|              |              | )            | solver to be | leHomotopyNL |
|              |              |              | used by the  | PInternal    |
|              |              |              | Homotopy     |              |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver_o | OT_DICTIONAR | GenericType( | Options to   | CasADi::Simp |
| ptions       | Y            | )            | be passed to | leHomotopyNL |
|              |              |              | the Homotopy | PInternal    |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| num_steps    | OT_INTEGER   | 10           | Take this    | CasADi::Simp |
|              |              |              | many steps   | leHomotopyNL |
|              |              |              | to go from   | PInternal    |
|              |              |              | tau=0 to     |              |
|              |              |              | tau=1.       |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

C++ includes: simple_homotopy_nlp_solver.hpp ";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::clone "[INTERNAL]
Deep copy.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::assertInit "[INTERNAL]  Assert that it is initialized

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::spCanEvaluate "[INTERNAL]  Is the class able to propate seeds through the algorithm? (for
usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SimpleHomotopyNLPSolver::isInit "

Is initialized?

";


// File: classCasADi_1_1SimpleIndefDpleSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SimpleIndefDpleSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::spInit "[INTERNAL]
Reset the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::schemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SimpleIndefDpleSolver "[INTERNAL]  Solving
the Discrete Periodic Lyapunov Equations with regular Linear Solvers.

Given matrices A_k and symmetric V_k, k = 0..K-1

A_k in R^(n x n) V_k in R^n

provides all of P_k that satisfy:

P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k P_k+1 = A_k*P_k*A_k' + V_k for k =
1..K-1

Uses Periodic Schur Decomposition (simple) and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Joris gillis

>Input scheme: CasADi::DPLEInput (DPLE_NUM_IN = 3) [dpleIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_A                 | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+
| DPLE_V                 | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::DPLEOutput (DPLE_NUM_OUT = 2) [dpleOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_P                 | p                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, blkdiag     |
|                        |                        | otherwise) (cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| const_dim    | OT_BOOLEAN   | true         | Assume       | CasADi::Dple |
|              |              |              | constant     | Internal     |
|              |              |              | dimension of |              |
|              |              |              | P            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | CasADi::Dple |
|              |              |              | unstability  | Internal     |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| error_unstab | OT_BOOLEAN   | false        | Throw an     | CasADi::Dple |
| le           |              |              | exception    | Internal     |
|              |              |              | when it is   |              |
|              |              |              | detected     |              |
|              |              |              | that Product |              |
|              |              |              | (A_i,i=N..1) |              |
|              |              |              | has          |              |
|              |              |              | eigenvalues  |              |
|              |              |              | greater than |              |
|              |              |              | 1-eps_unstab |              |
|              |              |              | le           |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | User-defined | CasADi::Simp |
| r            | VER          | )            | linear       | leIndefDpleI |
|              |              |              | solver       | nternal      |
|              |              |              | class.       |              |
|              |              |              | Needed for s |              |
|              |              |              | ensitivities |              |
|              |              |              | .            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | CasADi::Simp |
| r_options    | Y            | )            | be passed to | leIndefDpleI |
|              |              |              | the linear   | nternal      |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pos_def      | OT_BOOLEAN   | false        | Assume P     | CasADi::Dple |
|              |              |              | positive     | Internal     |
|              |              |              | definite     |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: simple_indef_dple_solver.hpp ";

%feature("docstring") CasADi::SimpleIndefDpleSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getOption "

get an option value

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::spCanEvaluate "[INTERNAL]  Is the class able to propate seeds through the algorithm? (for
usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::clone "

Clone.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::weak "[INTERNAL]  Get
a weak reference to the object.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::output_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::SimpleIndefDpleSolver "

>  CasADi::SimpleIndefDpleSolver::SimpleIndefDpleSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::SimpleIndefDpleSolver::SimpleIndefDpleSolver(const std::vector< Sparsity > &A, const std::vector< Sparsity > &V)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

A:  List of sparsities of A_i

V:  List of sparsities of V_i

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::printStats "

Print solver statistics.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::inputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::checkInputs "[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::setOptionByAllowedIndex
"[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::input_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SimpleIndefDpleSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";


// File: classCasADi_1_1Simulator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::Simulator::callDerivative " [INTERNAL]  Evaluate the function
symbolically or numerically with directional derivatives The first two
arguments are the nondifferentiated inputs and results of the evaluation,
the next two arguments are a set of forward directional seeds and the
resulting forward directional derivatives, the length of the vector being
the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring") CasADi::Simulator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::Simulator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::Simulator::solve "

the same as evaluate()

";

%feature("docstring") CasADi::Simulator::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::Simulator::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::Simulator::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::Simulator::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::Simulator::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::Simulator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::Simulator::getOption "

get an option value

";

%feature("docstring") CasADi::Simulator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::Simulator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::Simulator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::Simulator::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::Simulator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::Simulator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::Simulator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::Simulator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::Simulator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::Simulator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::Simulator::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::Simulator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::Simulator::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::Simulator::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::Simulator::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::Simulator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::Simulator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::Simulator::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Simulator::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::Simulator::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::Simulator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::Simulator::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::Simulator::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::Simulator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::Simulator::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::Simulator::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::Simulator::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Simulator::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::Simulator::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Simulator::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::Simulator::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Simulator::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::Simulator::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::Simulator::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::Simulator::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::Simulator::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::Simulator::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::Simulator::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::Simulator::Simulator "

>  CasADi::Simulator::Simulator()
------------------------------------------------------------------------

Default constructor.

>  CasADi::Simulator::Simulator(const Integrator &integrator, const Function &output_fcn, const std::vector< double > &grid)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

output_fcn:  output function which maps to n outputs.

>Input scheme: CasADi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>  CasADi::Simulator::Simulator(const Integrator &integrator, const std::vector< double > &grid)
------------------------------------------------------------------------

Output function equal to the state.

";

%feature("docstring") CasADi::Simulator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::Simulator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::Simulator::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::Simulator::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Simulator::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::Simulator::evaluate "

Evaluate.

";

%feature("docstring") CasADi::Simulator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::Simulator::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::Simulator::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::Simulator::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::Simulator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::Simulator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::Simulator::isInit "

Is initialized?

";

%feature("docstring") CasADi::Simulator::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Simulator::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::Simulator::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::Simulator::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::Simulator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::Simulator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::Simulator::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::Simulator::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::Simulator::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::Simulator::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::Simulator::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::Simulator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::Simulator::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::Simulator::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::Simulator "[INTERNAL]   Integrator class.

An \"simulator\" integrates an IVP, stopping at a (fixed) number of grid
points and evaluates a set of output functions at these points. The internal
stepsizes of the integrator need not coincide with the gridpoints.

Simulator is an CasADi::Function mapping from CasADi::IntegratorInput to n.
\\\\

The output function needs to be a mapping from CasADi::DAEInput to n. The
default output has n=1 and the output is the (vectorized) differential state
for each time step.

Joel Andersson

>Input scheme: CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | CasADi::Simu |
|              |              |              | uts)  (initi | latorInterna |
|              |              |              | al|step)     | l            |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+---------+---------------------------+
|   Id    |          Used in          |
+=========+===========================+
| initial | CasADi::SimulatorInternal |
+---------+---------------------------+
| inputs  | CasADi::FunctionInternal  |
+---------+---------------------------+
| outputs | CasADi::FunctionInternal  |
+---------+---------------------------+
| step    | CasADi::SimulatorInternal |
+---------+---------------------------+

Diagrams

C++ includes: simulator.hpp ";

%feature("docstring") CasADi::Simulator::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::Simulator::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::Simulator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::Simulator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::Simulator::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::Simulator::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::Simulator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::Simulator::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::Simulator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::Simulator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::Simulator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::Simulator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::Simulator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::Simulator::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::Simulator::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::Simulator::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::Simulator::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::Simulator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";


// File: classCasADi_1_1Slice.xml
%feature("docstring") CasADi::Slice::getAll "

>  std::vector< int > CasADi::Slice::getAll(int len) const 
------------------------------------------------------------------------

Get a vector of indices.

>  std::vector< int > CasADi::Slice::getAll(const Slice &outer, int len) const 
------------------------------------------------------------------------

Get a vector of indices (nested slice)

";

%feature("docstring") CasADi::Slice::print "[INTERNAL]  Print a
representation of the object to a stream.

";

%feature("docstring") CasADi::Slice "[INTERNAL]  Class representing a
Slice.

Note that Python or Octave do not need to use this class. They can just use
slicing utility from the host language ( M[0:6] in Python, M(1:7) )

C++ includes: slice.hpp ";

%feature("docstring") CasADi::Slice::Slice "

>  CasADi::Slice::Slice()
------------------------------------------------------------------------

Defailt constructor - all elements.

>  CasADi::Slice::Slice(int i)
------------------------------------------------------------------------

A single element.

>  CasADi::Slice::Slice(int start, int stop, int step=1)
------------------------------------------------------------------------

A slice.

>  CasADi::Slice::Slice(const std::vector< int > &v)
------------------------------------------------------------------------

Construct from an index vector (requires isSlice(v) to be true)

>  CasADi::Slice::Slice(const std::vector< int > &v, Slice &outer)
------------------------------------------------------------------------

Construct nested slices from an index vector (requires isSlice2(v) to be
true)

";

%feature("docstring") CasADi::Slice::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::Slice::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::Slice::getRepresentation "

Return a string with a representation (for SWIG)

";


// File: structCasADi_1_1SmoothChecker.xml
%feature("docstring") CasADi::SmoothChecker "[INTERNAL]  Smoothness (by
default true)

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1SmoothChecker_3_01OP__AND_01_4.xml
%feature("docstring") CasADi::SmoothChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1SmoothChecker_3_01OP__CEIL_01_4.xml
%feature("docstring") CasADi::SmoothChecker< OP_CEIL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1SmoothChecker_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") CasADi::SmoothChecker< OP_COPYSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1SmoothChecker_3_01OP__EQ_01_4.xml
%feature("docstring") CasADi::SmoothChecker< OP_EQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1SmoothChecker_3_01OP__FLOOR_01_4.xml
%feature("docstring") CasADi::SmoothChecker< OP_FLOOR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1SmoothChecker_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") CasADi::SmoothChecker< OP_IF_ELSE_ZERO > " [INTERNAL]
C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1SmoothChecker_3_01OP__LE_01_4.xml
%feature("docstring") CasADi::SmoothChecker< OP_LE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1SmoothChecker_3_01OP__LT_01_4.xml
%feature("docstring") CasADi::SmoothChecker< OP_LT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1SmoothChecker_3_01OP__NE_01_4.xml
%feature("docstring") CasADi::SmoothChecker< OP_NE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1SmoothChecker_3_01OP__NOT_01_4.xml
%feature("docstring") CasADi::SmoothChecker< OP_NOT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1SmoothChecker_3_01OP__OR_01_4.xml
%feature("docstring") CasADi::SmoothChecker< OP_OR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structCasADi_1_1SmoothChecker_3_01OP__SIGN_01_4.xml
%feature("docstring") CasADi::SmoothChecker< OP_SIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: classCasADi_1_1SnoptSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SnoptSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SnoptSolver::nlp "

Access the NLP.

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::SnoptSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SnoptSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SnoptSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::SnoptSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SnoptSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SnoptSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SnoptSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SnoptSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::SnoptSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SnoptSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SnoptSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SnoptSolver::setOptionsFromFile "

Read options from worhp parameter xml.

";

%feature("docstring") CasADi::SnoptSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SnoptSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SnoptSolver::getReportConstraints "";

%feature("docstring") CasADi::SnoptSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SnoptSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SnoptSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SnoptSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SnoptSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SnoptSolver::gradF "

Access the objective gradient function>Input scheme: CasADi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") CasADi::SnoptSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::SnoptSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SnoptSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SnoptSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SnoptSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SnoptSolver::SnoptSolver "

>  CasADi::SnoptSolver::SnoptSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::SnoptSolver::SnoptSolver(const Function &F, const Function &G)
------------------------------------------------------------------------

[DEPRECATED] Create an NLP solver instance (legacy syntax)

>  CasADi::SnoptSolver::SnoptSolver(const Function &nlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") CasADi::SnoptSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SnoptSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SnoptSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SnoptSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SnoptSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SnoptSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::SnoptSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::SnoptSolver::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: CasADi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: CasADi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") CasADi::SnoptSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SnoptSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SnoptSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SnoptSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SnoptSolver::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") CasADi::SnoptSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SnoptSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SnoptSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SnoptSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SnoptSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::SnoptSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::SnoptSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::SnoptSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::SnoptSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SnoptSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SnoptSolver::getOption "

get an option value

";

%feature("docstring") CasADi::SnoptSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::SnoptSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SnoptSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SnoptSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SnoptSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SnoptSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SnoptSolver "[INTERNAL]  interface to SNOPT
NLP solver

Solves the following parametric nonlinear program (NLP):min          F(x,p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x,p) <= UBG
p  == P nx: number of decision variables     ng: number of constraints
np: number of parameters

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| _iprint      | OT_INTEGER   | 0            |              | CasADi::Snop |
|              |              |              |              | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| _isumm       | OT_INTEGER   | 6            |              | CasADi::Snop |
|              |              |              |              | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| _start       | OT_STRING    | \"Cold\"       | (Cold|Warm)  | CasADi::Snop |
|              |              |              |              | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | CasADi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | objective    | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | constraint   | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| gauss_newton | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option. Use  | olverInterna |
|              |              |              | Gauss Newton | l            |
|              |              |              | Hessian appr |              |
|              |              |              | oximation    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| dient        |              | )            | option.      | olverInterna |
|              |              |              | Generate a   | l            |
|              |              |              | function for |              |
|              |              |              | calculating  |              |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | objective.   |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_hes | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| sian         |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Hessian of   |              |
|              |              |              | the          |              |
|              |              |              | Lagrangian   |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_jac | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| obian        |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Jacobian of  |              |
|              |              |              | the          |              |
|              |              |              | constraints  |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | CasADi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | CasADi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | CasADi::Snop |
|              |              |              | uts)  (eval_ | tInternal    |
|              |              |              | nlp|setup_nl |              |
|              |              |              | p)           |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option.      | olverInterna |
|              |              |              | Expect F, G, | l            |
|              |              |              | H, J to have |              |
|              |              |              | an           |              |
|              |              |              | additional   |              |
|              |              |              | input        |              |
|              |              |              | argument     |              |
|              |              |              | appended at  |              |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | CasADi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-------------+--------------------------+
|     Id      |         Used in          |
+=============+==========================+
| dx          | CasADi::SnoptInternal    |
+-------------+--------------------------+
| eval_f      | CasADi::SnoptInternal    |
+-------------+--------------------------+
| eval_g      | CasADi::SnoptInternal    |
+-------------+--------------------------+
| eval_grad_f | CasADi::SnoptInternal    |
+-------------+--------------------------+
| eval_h      | CasADi::SnoptInternal    |
+-------------+--------------------------+
| eval_jac_g  | CasADi::SnoptInternal    |
+-------------+--------------------------+
| eval_nlp    | CasADi::SnoptInternal    |
+-------------+--------------------------+
| inputs      | CasADi::FunctionInternal |
+-------------+--------------------------+
| outputs     | CasADi::FunctionInternal |
+-------------+--------------------------+
| qp          | CasADi::SnoptInternal    |
+-------------+--------------------------+
| setup_nlp   | CasADi::SnoptInternal    |
+-------------+--------------------------+

>List of available stats
+---------------+-----------------------+
|      Id       |        Used in        |
+===============+=======================+
| return_status | CasADi::SnoptInternal |
+---------------+-----------------------+

Diagrams

C++ includes: snopt_solver.hpp ";

%feature("docstring") CasADi::SnoptSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SnoptSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::SnoptSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SnoptSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SnoptSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SnoptSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SnoptSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SnoptSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SnoptSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SnoptSolver::jacG "

Access the Jacobian of the constraint function.

>Input scheme: CasADi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective. .           |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") CasADi::SnoptSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::SnoptSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::SnoptSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SnoptSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SnoptSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SnoptSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SnoptSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SnoptSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SnoptSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::SnoptSolver::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") CasADi::SnoptSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SnoptSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SnoptSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SnoptSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SnoptSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SnoptSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SnoptSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SnoptSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SnoptSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SnoptSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SnoptSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SnoptSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SnoptSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SnoptSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::SnoptSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SnoptSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SnoptSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SnoptSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SnoptSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SnoptSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SnoptSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SnoptSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::SnoptSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::SnoptSolver::evalMX "

[DEPRECATED]

";


// File: classCasADi_1_1SOCPInputIOSchemeVector.xml
%feature("docstring") CasADi::SOCPInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::SOCPInputIOSchemeVector "[INTERNAL]  Helper
function for 'SOCPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::SOCPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::SOCPInputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::SOCPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SOCPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")
CasADi::SOCPInputIOSchemeVector::SOCPInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::SOCPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::SOCPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";


// File: classCasADi_1_1SOCPOutputIOSchemeVector.xml
%feature("docstring") CasADi::SOCPOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SOCPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") CasADi::SOCPOutputIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::SOCPOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::SOCPOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")
CasADi::SOCPOutputIOSchemeVector::SOCPOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::SOCPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'SOCPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") CasADi::SOCPOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::SOCPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classCasADi_1_1SOCPQCQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SOCPQCQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SOCPQCQPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::SOCPQCQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SOCPQCQPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::SOCPQCQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SOCPQCQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::SOCPQCQPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SOCPQCQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::SOCPQCQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::SOCPQCQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SOCPQCQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SOCPQCQPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SOCPQCQPSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::SOCPQCQPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SOCPQCQPSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::SOCPQCQPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SOCPQCQPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SOCPQCQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SOCPQCQPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::SOCPQCQPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SOCPQCQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SOCPQCQPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SOCPQCQPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::SOCPQCQPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SOCPQCQPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SOCPQCQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SOCPQCQPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SOCPQCQPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SOCPQCQPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SOCPQCQPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SOCPQCQPSolver "[INTERNAL]  SOCP QCQP Solver
for quadratic programming.

Note: this implementation relies on Cholesky decomposition: Chol(H) = L -> H
= LL' with L lower triangular This requires Pi, H to be positive definite.
Positive semi-definite is not sufficient. Notably, H==0 will not work.

A better implementation would rely on matrix square root, but we need
singular value decomposition to implement that.

This implementation makes use of the epigraph reformulation: min f(x) x

min t x,t f(x) <= t

This implementation makes use of the following identity:

|| Gx+h||_2 <= e'x + f

x'(G'G - ee')x + (2 h'G - 2 f e') x + h'h - f <= 0

where we put e = [0 0 ... 1] for the qadratic constraint arising from the
epigraph reformulation and e==0 for all other qc.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x   x  subject to             1/2 x' Pi x +
qi' x + ri  <= 0   for i=0..nq-1                          LBA <= A x <= UBA
LBX <= x   <= UBX                  with : H, Pi sparse (n x n) positive
definite       g, qi dense  (n x 1) ri scalar                  n: number of
decision variables (x)     nc: number of linear constraints (A)     nq:
number of quadratic constraints

If H, Pi is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: CasADi::QCQPSolverInput (QCQP_SOLVER_NUM_IN = 13) [qcqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_H          | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_G          | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_P          | p                      | The horizontal stack   |
|                        |                        | of all Pi. Each Pi is  |
|                        |                        | sparse (n x n). Only   |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_Q          | q                      | The vertical stack of  |
|                        |                        | all qi: dense, (nq n x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_R          | r                      | The vertical stack of  |
|                        |                        | all scalars ri (nq x   |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_A          | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBA        | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBA        | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBX        | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBX        | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_X0         | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X0     | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::QCQPSolverOutput (QCQP_SOLVER_NUM_OUT = 5) [qcqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_X          | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_COST       | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| socp_solver  | OT_SOCPSOLVE | GenericType( | The          | CasADi::SOCP |
|              | R            | )            | SOCPSolver   | QCQPInternal |
|              |              |              | used to      |              |
|              |              |              | solve the    |              |
|              |              |              | QCQPs.       |              |
+--------------+--------------+--------------+--------------+--------------+
| socp_solver_ | OT_DICTIONAR | GenericType( | Options to   | CasADi::SOCP |
| options      | Y            | )            | be passed to | QCQPInternal |
|              |              |              | the          |              |
|              |              |              | SOCPSOlver   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-------------------+--------------------------+
|        Id         |         Used in          |
+===================+==========================+
| socp_solver_stats | CasADi::SOCPQCQPInternal |
+-------------------+--------------------------+

Diagrams

C++ includes: socp_qcqp_solver.hpp ";

%feature("docstring") CasADi::SOCPQCQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SOCPQCQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SOCPQCQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SOCPQCQPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SOCPQCQPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SOCPQCQPSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::SOCPQCQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SOCPQCQPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SOCPQCQPSolver::getSolver "

Access underlying SOCP solver.

";

%feature("docstring") CasADi::SOCPQCQPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::SOCPQCQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SOCPQCQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SOCPQCQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::SOCPQCQPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SOCPQCQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SOCPQCQPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SOCPQCQPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SOCPQCQPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SOCPQCQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SOCPQCQPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SOCPQCQPSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SOCPQCQPSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::SOCPQCQPSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::SOCPQCQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SOCPQCQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::SOCPQCQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SOCPQCQPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SOCPQCQPSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::SOCPQCQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SOCPQCQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SOCPQCQPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SOCPQCQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SOCPQCQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SOCPQCQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SOCPQCQPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SOCPQCQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SOCPQCQPSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SOCPQCQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SOCPQCQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SOCPQCQPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::SOCPQCQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SOCPQCQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SOCPQCQPSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::SOCPQCQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SOCPQCQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SOCPQCQPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SOCPQCQPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::SOCPQCQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SOCPQCQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SOCPQCQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SOCPQCQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SOCPQCQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SOCPQCQPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SOCPQCQPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::SOCPQCQPSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SOCPQCQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SOCPQCQPSolver::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") CasADi::SOCPQCQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SOCPQCQPSolver::setQPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") CasADi::SOCPQCQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SOCPQCQPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SOCPQCQPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SOCPQCQPSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SOCPQCQPSolver::SOCPQCQPSolver "

>  CasADi::SOCPQCQPSolver::SOCPQCQPSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::SOCPQCQPSolver::SOCPQCQPSolver(const QCQPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") CasADi::SOCPQCQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SOCPQCQPSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SOCPQCQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";


// File: classCasADi_1_1SOCPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SOCPSolver::outputSchemeEntry " [INTERNAL]  Find the index for a
string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SOCPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SOCPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::SOCPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::SOCPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SOCPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SOCPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SOCPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SOCPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SOCPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SOCPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SOCPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SOCPSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::SOCPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SOCPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::SOCPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SOCPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SOCPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SOCPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::SOCPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SOCPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SOCPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::SOCPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SOCPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SOCPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SOCPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SOCPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SOCPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::SOCPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SOCPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::SOCPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SOCPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SOCPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SOCPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SOCPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::SOCPSolver::SOCPSolver "

Default constructor.

";

%feature("docstring") CasADi::SOCPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SOCPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SOCPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SOCPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SOCPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::SOCPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SOCPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SOCPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SOCPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::SOCPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SOCPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SOCPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SOCPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::SOCPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SOCPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SOCPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SOCPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SOCPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SOCPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::SOCPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SOCPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SOCPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SOCPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SOCPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::SOCPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::SOCPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SOCPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SOCPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::SOCPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SOCPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SOCPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SOCPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SOCPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::SOCPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SOCPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SOCPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SOCPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SOCPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SOCPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SOCPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SOCPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SOCPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SOCPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SOCPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SOCPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SOCPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SOCPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SOCPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SOCPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SOCPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SOCPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SOCPSolver "[INTERNAL]   SOCPSolver.

Solves an Second Order Cone Programming (SOCP) problem in standard form.

Primal:

min          c' x   x  subject to               || Gi' x + hi ||_2 <= ei' x
+ fi  i = 1..m              LBA <= A x <= UBA             LBX <= x   <= UBX
with x ( n x 1)          c ( n x 1 ) Gi  sparse (n x ni)          hi  dense
(ni x 1)          ei  dense (n x 1)          fi  dense (1 x 1)          N =
Sum_i^m ni          A sparse (nc x n)          LBA, UBA dense vector (nc x
1)          LBX, UBX dense vector (n x 1)

Joris Gillis

>Input scheme: CasADi::SOCPInput (SOCP_SOLVER_NUM_IN = 11) [socpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_G          | g                      | The horizontal stack   |
|                        |                        | of all matrices Gi: (  |
|                        |                        | n x N) .               |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_H          | h                      | The vertical stack of  |
|                        |                        | all vectors hi: ( N x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_E          | e                      | The vertical stack of  |
|                        |                        | all vectors ei: ( nm x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_F          | f                      | The vertical stack of  |
|                        |                        | all scalars fi: ( m x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::SOCPOutput (SOCP_SOLVER_NUM_OUT = 5) [socpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| ni           | OT_INTEGERVE | GenericType( | Provide the  | CasADi::SOCP |
|              | CTOR         | )            | size of each | SolverIntern |
|              |              |              | SOC          | al           |
|              |              |              | constraint.  |              |
|              |              |              | Must sum up  |              |
|              |              |              | to N.        |              |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | CasADi::SOCP |
| m            |              |              | problem      | SolverIntern |
|              |              |              | statement    | al           |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: socp_solver.hpp ";

%feature("docstring") CasADi::SOCPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SOCPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::SOCPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SOCPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::SOCPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SOCPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SOCPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SOCPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";


// File: classCasADi_1_1SOCPStructIOSchemeVector.xml
%feature("docstring") CasADi::SOCPStructIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") CasADi::SOCPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")
CasADi::SOCPStructIOSchemeVector::SOCPStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") CasADi::SOCPStructIOSchemeVector::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::SOCPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") CasADi::SOCPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::SOCPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SOCPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SOCPStructIOSchemeVector "[INTERNAL]  Helper
function for 'SOCPStruct'

C++ includes: casadi_types.hpp ";


// File: classCasADi_1_1Solve.xml
%feature("docstring") CasADi::Solve::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Solve::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") CasADi::Solve::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") CasADi::Solve::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Solve::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") CasADi::Solve::getNormInf "[INTERNAL]  Infinity norm.

";

%feature("docstring") CasADi::Solve::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Solve::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Solve::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Solve::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Solve::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Solve::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::Solve::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Solve::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") CasADi::Solve::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Solve::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Solve::size "[INTERNAL] ";

%feature("docstring") CasADi::Solve::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Solve::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::Solve::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Solve::shape "[INTERNAL] ";

%feature("docstring") CasADi::Solve::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Solve::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") CasADi::Solve::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Solve::isMultipleOutput "[INTERNAL]  Check if
a multiple output node.

";

%feature("docstring") CasADi::Solve "[INTERNAL]  An MX atomic for linear
solver solution: x = r * A^-1 or x = r * A^-T.

Forward derivatives: x_dot = (r_dot - x * A_dot) * A^-1

Adjoint derivatives: r_bar = x_bar * A^-T A_bar = -x^T * r_bar

Joel Andersson

C++ includes: solve.hpp ";

%feature("docstring") CasADi::Solve::~Solve "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::Solve::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Solve::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::Solve::print "

>  void CasADi::Solve< Tr >::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

";

%feature("docstring") CasADi::Solve::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Solve::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::Solve::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") CasADi::Solve::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Solve::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Solve::Solve "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::Solve::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::Solve::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Solve::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") CasADi::Solve::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Solve::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Solve::deepCopyMembers "[INTERNAL]  Deep copy
data members.

";

%feature("docstring") CasADi::Solve::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Solve::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Solve::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") CasADi::Solve::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") CasADi::Solve::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::Solve::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Solve::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Solve::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::Solve::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Solve::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::Solve::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::Solve::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::Solve::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Solve::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::Solve::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Solve::propagateSparsity "

>  void CasADi::Solve< Tr >::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::Solve::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Solve::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::Solve::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Solve::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Solve::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::Solve::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Solve::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Solve::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") CasADi::Solve::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Solve::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Solve::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Solve::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Solve::printPart "[INTERNAL]  Print a part of
the expression.

";

%feature("docstring") CasADi::Solve::getMultiplication "[INTERNAL]   Matrix
multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Solve::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Solve::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") CasADi::Solve::evaluateMX "

>  void CasADi::Solve< Tr >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Solve::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Solve::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Solve::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") CasADi::Solve::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Solve::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Solve::getSetNonzeros "[INTERNAL]  Assign the
nonzeros of a matrix to another matrix.

";


// File: classCasADi_1_1Sparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
CasADi::Sparsity::numel "

The total number of elements, including structural zeros, i.e.
size2()*size1()

See:   size()

";

%feature("docstring") CasADi::Sparsity::sanityCheck "

Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") CasADi::Sparsity::enlargeRows "

Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") CasADi::Sparsity::enlargeColumns "

Enlarge the matrix along the second dimension (i.e. insert columns)

";

%feature("docstring") CasADi::Sparsity::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::Sparsity::resize "

Resize.

";

%feature("docstring") CasADi::Sparsity::getDiag "

Get the diagonal of the matrix/create a diagonal matrix (mapping will
contain the nonzero mapping) When the input is square, the diagonal elements
are returned. If the input is vector-like, a diagonal matrix is constructed
with it.

";

%feature("docstring") CasADi::Sparsity::isSymmetric "

Is symmetric?

";

%feature("docstring") CasADi::Sparsity::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::Sparsity::patternCombine "

Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";

%feature("docstring") CasADi::Sparsity::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") CasADi::Sparsity::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::Sparsity::erase "

Erase rows and/or columns of a matrix.

";

%feature("docstring") CasADi::Sparsity::eliminationTree "

Calculate the elimination tree See Direct Methods for Sparse Linear Systems
by Davis (2006). If the parameter ata is false, the algorithm is equivalent
to Matlab's etree(A), except that the indices are zero- based. If ata is
true, the algorithm is equivalent to Matlab's etree(A,'row').

";

%feature("docstring") CasADi::Sparsity::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::Sparsity::getNZInplace "

Get the nonzero index for a set of elements The index vector is used both
for input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

";

%feature("docstring") CasADi::Sparsity::sub "

Get a submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring") CasADi::Sparsity::getTriplet "

Get the sparsity in sparse triplet format.

";

%feature("docstring") CasADi::Sparsity::depthFirstSearch "

Depth-first search on the adjacency graph of the sparsity See Direct Methods
for Sparse Linear Systems by Davis (2006).

";

%feature("docstring") CasADi::Sparsity::colind "

>  const std::vector< int > & CasADi::Sparsity::colind() const 
------------------------------------------------------------------------

Get a reference to the colindex of all column element (see class
description)

>  int CasADi::Sparsity::colind(int i) const 
------------------------------------------------------------------------

Get a reference to the colindex of col i (see class description)

";

%feature("docstring") CasADi::Sparsity::compressed "

>  Sparsity CasADi::Sparsity::compressed(const std::vector< int > &v)
------------------------------------------------------------------------

Create from a single vector containing the pattern in compressed column
storage format: The format: The first two entries are the number of rows
(nrow) and columns (ncol) The next ncol+1 entries are the column offsets
(colind). Note that the last element, colind[ncol], gives the number of
nonzeros The last colind[ncol] entries are the row indices

>  Sparsity CasADi::Sparsity::compressed(const int *v)
------------------------------------------------------------------------
[INTERNAL] 
Create from a single vector containing the pattern in compressed
column storage format: The format: The first two entries are the
number of rows (nrow) and columns (ncol) The next ncol+1 entries are
the column offsets (colind). Note that the last element, colind[ncol],
gives the number of nonzeros The last colind[ncol] entries are the row
indices

";

%feature("docstring") CasADi::Sparsity::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::Sparsity::createDiagonal "

[DEPRECATED]

";

%feature("docstring") CasADi::Sparsity::getUpperNZ "

Get nonzeros in upper triangular part.

";

%feature("docstring") CasADi::Sparsity::getCol "

Get the column for each non-zero entry Together with the row-vector, this
vector gives the sparsity of the matrix in sparse triplet format, i.e. the
column and row for each non-zero elements.

";

%feature("docstring") CasADi::Sparsity::getNZ "

>  int CasADi::Sparsity::getNZ(int rr, int cc)
------------------------------------------------------------------------

Get the index of a non-zero element Add the element if it does not exist and
copy object if it's not unique.

>  int CasADi::Sparsity::getNZ(int rr, int cc) const 
------------------------------------------------------------------------

Get the index of an existing non-zero element return -1 if the element does
not exists.

>  std::vector< int > CasADi::Sparsity::getNZ(const std::vector< int > &rr, const std::vector< int > &cc) const 
------------------------------------------------------------------------

Get a set of non-zero element return -1 if the element does not exists.

";

%feature("docstring") CasADi::Sparsity::printCompact "

Print a compact description of the sparsity pattern.

";

%feature("docstring") CasADi::Sparsity::upperNZ "

[DEPRECATED]

";

%feature("docstring") CasADi::Sparsity::dimString "

Get the dimension as a string.

";

%feature("docstring") CasADi::Sparsity::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::Sparsity::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") CasADi::Sparsity::patternIntersection "

Intersection of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero elements
The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if
it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring") CasADi::Sparsity::patternProduct "

Sparsity pattern for a matrix-matrix product Returns the sparsity pattern
resulting from premultiplying the pattern with the transpose of x. Returns
the new sparsity pattern as well as a mapping with the same length as the
number of non-zero elements The mapping contains a vector of the index pairs
that makes up the scalar products for each non-zero.

";

%feature("docstring") CasADi::Sparsity::transpose "

>  Sparsity CasADi::Sparsity::transpose() const 
------------------------------------------------------------------------

Transpose the matrix.

>  Sparsity CasADi::Sparsity::transpose(std::vector< int > &mapping, bool invert_mapping=false) const 
------------------------------------------------------------------------

Transpose the matrix and get the reordering of the non-zero entries, i.e.
the non-zeros of the original matrix for each non-zero of the new matrix.

";

%feature("docstring") CasADi::Sparsity::isDense "

Is dense?

";

%feature("docstring") CasADi::Sparsity::isScalar "

Is scalar?

";

%feature("docstring") CasADi::Sparsity::patternUnion "

Union of two sparsity patterns.

";

%feature("docstring") CasADi::Sparsity::isSquare "

Is square?

";

%feature("docstring") CasADi::Sparsity::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::Sparsity::spyMatlab "

Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring") CasADi::Sparsity::scalar "

Create a scalar sparsity pattern.

";

%feature("docstring") CasADi::Sparsity::appendColumns "

Append another sparsity patten horizontally.

";

%feature("docstring") CasADi::Sparsity::getLowerNZ "

Get nonzeros in lower triangular part.

";

%feature("docstring") CasADi::Sparsity::starColoring2 "

Perform a star coloring of a symmetric matrix: A new greedy distance-2
coloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A. TARAFDAR, F.
MANNE, A. POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring") CasADi::Sparsity::isSingular "

Check whether the sparsity-pattern inidcates structural singularity.

";

%feature("docstring") CasADi::Sparsity::dulmageMendelsohn "

Compute the Dulmage-Mendelsohn decomposition See Direct Methods for Sparse
Linear Systems by Davis (2006).

Dulmage-Mendelsohn will try to bring your matrix into lower block-
triangular (LBT) form. It will not care about the distance of off- diagonal
elements to the diagonal: there is no guarantee you will get a block-
diagonal matrix if you supply a randomly permuted block- diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   stronglyConnectedComponents

";

%feature("docstring") CasADi::Sparsity::add "

>  void CasADi::Sparsity::add(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Add the nonzero entries of one sparsity pattern to the nonzero entries
of another sparsity pattern.

>  void CasADi::Sparsity::add(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Sparsity::rowsSequential "

Do the rows appear sequentially on each column (if strictly==true, then do
not allow multiple entries)

";

%feature("docstring") CasADi::Sparsity::size2 "

Get the number of columns.

";

%feature("docstring") CasADi::Sparsity::size1 "

Get the number of rows.

";

%feature("docstring") CasADi::Sparsity::lowerNZ "

[DEPRECATED]

";

%feature("docstring") CasADi::Sparsity::getSparsityCCS "

[DEPRECATED]

";

%feature("docstring") CasADi::Sparsity::spy "

Print a textual representation of sparsity.

";

%feature("docstring") CasADi::Sparsity::Sparsity "

>  CasADi::Sparsity::Sparsity(int nrow, int ncol, bool dense=false)
------------------------------------------------------------------------

[DEPRECATED]

>  CasADi::Sparsity::Sparsity(int dummy=0)
------------------------------------------------------------------------

Default constructor.

>  CasADi::Sparsity::Sparsity(int nrow, int ncol, const std::vector< int > &colind, const std::vector< int > &row)
------------------------------------------------------------------------

Construct from sparsity pattern vectors given in compressed column storage
format.

";

%feature("docstring") CasADi::Sparsity::getSparsityCRS "

[DEPRECATED]

";

%feature("docstring") CasADi::Sparsity::largestFirstOrdering "

Order the cols by decreasing degree.

";

%feature("docstring") CasADi::Sparsity::stronglyConnectedComponents "

Find the strongly connected components of the bigraph defined by the
sparsity pattern of a square matrix See Direct Methods for Sparse Linear
Systems by Davis (2006). Returns:

Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n =
A.stronglyConnectedComponents(p,r)

=> A[p,p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring") CasADi::Sparsity::size "

Get the number of (structural) non-zeros.

See:   numel()

";

%feature("docstring") CasADi::Sparsity::hash "";

%feature("docstring") CasADi::Sparsity::reCache "[INTERNAL]  Check if there
is an identical copy of the sparsity pattern in the cache, and if so, make a
shallow copy of that one.

";

%feature("docstring") CasADi::Sparsity::isInit "

Is initialized?

";

%feature("docstring") CasADi::Sparsity::getCCS "

Get the sparsity in compressed column storage (CCS) format.

";

%feature("docstring") CasADi::Sparsity::getElements "

>  std::vector< int > CasADi::Sparsity::getElements(bool col_major=true) const 
------------------------------------------------------------------------

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.getElements() A[k] will contain the elements of A that are non- zero
in B

>  void CasADi::Sparsity::getElements(std::vector< int > &loc, bool col_major=true) const 
------------------------------------------------------------------------

Get the location of all nonzero elements (inplace version)

";

%feature("docstring") CasADi::Sparsity::rowRef "[INTERNAL]  Get a reference
to the rows of all non-zero element (copy if not unique!)

";

%feature("docstring") CasADi::Sparsity::unit "

Create the sparsity pattern for a unit vector of length n and a nonzero on
position el.

";

%feature("docstring") CasADi::Sparsity::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::Sparsity::dense "

Create a dense rectangular sparsity pattern.

";

%feature("docstring") CasADi::Sparsity::reserve "

Reserve space.

";

%feature("docstring") CasADi::Sparsity::sizeD "

Number of non-zeros on the diagonal, i.e. the number of elements (i,j) with
j==i.

";

%feature("docstring") CasADi::Sparsity::getSparsity "

[DEPRECATED]

";

%feature("docstring") CasADi::Sparsity::sizeL "

Number of non-zeros in the lower triangular half, i.e. the number of
elements (i,j) with j<=i.

";

%feature("docstring") CasADi::Sparsity "[INTERNAL]  General sparsity class.

The storage format is a compressed column storage (CCS) format.  In this
format, the structural non-zero elements are stored in column-major order,
starting from the upper left corner of the matrix and ending in the lower
right corner.

In addition to the dimension ( size1(), size2()), (i.e. the number of rows
and the number of columns respectively), there are also two vectors of
integers:

\"colind\" [length size2()+1], which contains the index to the first non-
zero element on or after the corresponding column. All the non-zero elements
of a particular i are thus the elements with index el that fulfils:
colind[i] <= el < colind[i+1].

\"row\" [same length as the number of non-zero elements, size()] The rows
for each of the structural non-zeros.

Note that with this format, it is cheap to loop over all the non-zero
elements of a particular column, at constant time per element, but expensive
to jump to access a location (i,j).

If the matrix is dense, i.e. length(row) == size1()*size2(), the format
reduces to standard dense column major format, which allows access to an
arbitrary element in constant time.

Since the object is reference counted (it inherits from SharedObject),
several matrices are allowed to share the same sparsity pattern.

The implementations of some methods of this class has been taken from the
CSparse package and modified to use C++ standard library and CasADi data
structures.

See:   Matrix

Joel Andersson

C++ includes: sparsity.hpp ";

%feature("docstring") CasADi::Sparsity::isDiagonal "

Is diagonal?

";

%feature("docstring") CasADi::Sparsity::sizeU "

Number of non-zeros in the upper triangular half, i.e. the number of
elements (i,j) with j>=i.

";

%feature("docstring") CasADi::Sparsity::compress "

Compress a sparsity pattern.

";

%feature("docstring") CasADi::Sparsity::makeDense "

Make a patten dense.

";

%feature("docstring") CasADi::Sparsity::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::Sparsity::patternInverse "

Take the inverse of a sparsity pattern; flip zeros and non-zeros.

";

%feature("docstring") CasADi::Sparsity::row "

>  const std::vector< int > & CasADi::Sparsity::row() const 
------------------------------------------------------------------------

Get a reference to row-vector, containing rows for all non-zero elements
(see class description)

>  int CasADi::Sparsity::row(int el) const 
------------------------------------------------------------------------

Get the row of a non-zero element.

";

%feature("docstring") CasADi::Sparsity::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::Sparsity::sparse "

Create a sparse (empty) rectangular sparsity pattern.

";

%feature("docstring") CasADi::Sparsity::set "

>  void CasADi::Sparsity::set(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Assign the nonzero entries of one sparsity pattern to the nonzero
entries of another sparsity pattern.

>  void CasADi::Sparsity::set(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Sparsity::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Sparsity::T "[INTERNAL]   Transpose the
matrix (shorthand)

";

%feature("docstring") CasADi::Sparsity::reshape "

Reshape a sparsity, order of nonzeros remains the same.

";

%feature("docstring") CasADi::Sparsity::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Sparsity::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::Sparsity::unidirectionalColoring "

Perform a unidirectional coloring: A greedy distance-2 coloring algorithm
(Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring") CasADi::Sparsity::removeDuplicates "

Remove duplicate entries: The same indices will be removed from the mapping
vector, which must have the same length as the number of nonzeros.

";

%feature("docstring") CasADi::Sparsity::isEqual "";

%feature("docstring") CasADi::Sparsity::pmult "

Permute rows and/or columns Multiply the sparsity with a permutation matrix
from the left and/or from the right P * A * trans(P), A * trans(P) or A *
trans(P) with P defined by an index vector containing the row for each col.
As an alternative, P can be transposed (inverted).

";

%feature("docstring") CasADi::Sparsity::colindRef "[INTERNAL]  Get a
reference to the colindex of all column element (copy if not unique!)

";

%feature("docstring") CasADi::Sparsity::shape "[INTERNAL]  Get the shape.

";

%feature("docstring") CasADi::Sparsity::getCRS "

Get the sparsity in compressed row storage (CRS) format.

";

%feature("docstring") CasADi::Sparsity::hasNZ "

Returns true if the pattern has a non-zero at location rr,cc.

";

%feature("docstring") CasADi::Sparsity::starColoring "

Perform a star coloring of a symmetric matrix: A greedy distance-2 coloring
algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) Ordering
options: None (0), largest first (1)

";

%feature("docstring") CasADi::Sparsity::diag "

Create diagonal sparsity pattern.

";

%feature("docstring") CasADi::Sparsity::bor "

>  void CasADi::Sparsity::bor(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Bitwise or of the nonzero entries of one sparsity pattern and the
nonzero entries of another sparsity pattern.

>  void CasADi::Sparsity::bor(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Sparsity::isTranspose "

Check if the sparsity is the transpose of another.

";

%feature("docstring") CasADi::Sparsity::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::Sparsity::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::Sparsity::isTriu "

Is upper triangular?

";

%feature("docstring") CasADi::Sparsity::isReshape "

Check if the sparsity is a reshape of another.

";

%feature("docstring") CasADi::Sparsity::isVector "

Is vector (i.e. size2()==1)

";

%feature("docstring") CasADi::Sparsity::append "

Append another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring") CasADi::Sparsity::getTriu "

Get upper triangular part.

";

%feature("docstring") CasADi::Sparsity::isEmpty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") CasADi::Sparsity::getTril "

Get lower triangular part.

";

%feature("docstring") CasADi::Sparsity::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

For the matrices A to B A(m,n) length(jj)=m , length(ii)=n B(nrow,ncol)

A=enlarge(m,n,ii,jj) makes sure that

B[jj,ii] == A

";

%feature("docstring") CasADi::Sparsity::isTril "

Is lower triangular?

";


// File: classCasADi_1_1Split.xml
%feature("docstring") CasADi::Split::~Split "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::Split::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::Split::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Split::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Split::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Split::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Split::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Split::Split "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::Split::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") CasADi::Split::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::Split::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Split::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Split::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Split::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::Split::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Split::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Split::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Split::evaluateMX "

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Split::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Split::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") CasADi::Split::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") CasADi::Split::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Split "[INTERNAL]   Split: Split into
multiple expressions splitting the nonzeros.

Joel Andersson

C++ includes: split.hpp ";

%feature("docstring") CasADi::Split::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Split::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::Split::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::Split::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Split::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Split::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Split::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") CasADi::Split::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") CasADi::Split::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::Split::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Split::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Split::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Split::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Split::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::Split::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::Split::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") CasADi::Split::printPart "[INTERNAL]  Print a part of
the expression.

";

%feature("docstring") CasADi::Split::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Split::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") CasADi::Split::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") CasADi::Split::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Split::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Split::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::Split::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Split::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Split::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::Split::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") CasADi::Split::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") CasADi::Split::deepCopyMembers "[INTERNAL]  Deep copy
data members.

";

%feature("docstring") CasADi::Split::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Split::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") CasADi::Split::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Split::size "[INTERNAL] ";

%feature("docstring") CasADi::Split::isMultipleOutput "[INTERNAL]  Check if
a multiple output node.

";

%feature("docstring") CasADi::Split::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::Split::shape "[INTERNAL] ";

%feature("docstring") CasADi::Split::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Split::getSetNonzeros "[INTERNAL]  Assign the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Split::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Split::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Split::getMultiplication "[INTERNAL]   Matrix
multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Split::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Split::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Split::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Split::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Split::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Split::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Split::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::Split::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Split::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Split::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Split::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Split::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Split::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Split::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") CasADi::Split::getNormInf "[INTERNAL]  Infinity norm.

";

%feature("docstring") CasADi::Split::sparsity "

>  virtual const Sparsity& CasADi::Split::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

";

%feature("docstring") CasADi::Split::evaluateGen "[INTERNAL]  Evaluate the
function (template)

";

%feature("docstring") CasADi::Split::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";


// File: classCasADi_1_1SQICSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SQICSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SQICSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SQICSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::SQICSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SQICSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::SQICSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SQICSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SQICSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SQICSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SQICSolver "[INTERNAL]  Interface to the SQIC
solver for quadratic programming.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x   x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX                  with :       H sparse (n x n) positive
definite       g dense  (n x 1) n: number of decision variables (x)     nc:
number of constraints (A)

If H is not positive-definite, the solver should throw an error. Joris
gillis

>Input scheme: CasADi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: sqic_solver.hpp ";

%feature("docstring") CasADi::SQICSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SQICSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SQICSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SQICSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::SQICSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SQICSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SQICSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SQICSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SQICSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::SQICSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SQICSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SQICSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SQICSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SQICSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SQICSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SQICSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::SQICSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SQICSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SQICSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SQICSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SQICSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::SQICSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SQICSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SQICSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SQICSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SQICSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SQICSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SQICSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SQICSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SQICSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SQICSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SQICSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") CasADi::SQICSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::SQICSolver::SQICSolver "

>  CasADi::SQICSolver::SQICSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::SQICSolver::SQICSolver(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") CasADi::SQICSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SQICSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SQICSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SQICSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SQICSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SQICSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SQICSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::SQICSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SQICSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SQICSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SQICSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SQICSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SQICSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::SQICSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SQICSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SQICSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SQICSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SQICSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SQICSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SQICSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") CasADi::SQICSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SQICSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SQICSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SQICSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SQICSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::SQICSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SQICSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SQICSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SQICSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SQICSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SQICSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SQICSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::SQICSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::SQICSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SQICSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SQICSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SQICSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SQICSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SQICSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::SQICSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SQICSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SQICSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SQICSolver::getOption "

get an option value

";

%feature("docstring") CasADi::SQICSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SQICSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::SQICSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::SQICSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SQICSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::SQICSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SQICSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SQICSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SQICSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SQICSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::SQICSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";


// File: classCasADi_1_1SQPMethod.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SQPMethod::inputSchemeEntry " [INTERNAL]  Find the index for a
string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SQPMethod::SQPMethod "

>  CasADi::SQPMethod::SQPMethod()
------------------------------------------------------------------------

Default constructor.

>  CasADi::SQPMethod::SQPMethod(const Function &F, const Function &G)
------------------------------------------------------------------------

[DEPRECATED] Create an NLP solver instance (legacy syntax)

>  CasADi::SQPMethod::SQPMethod(const Function &nlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") CasADi::SQPMethod::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SQPMethod::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SQPMethod::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SQPMethod::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SQPMethod::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SQPMethod::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SQPMethod::getOption "

get an option value

";

%feature("docstring") CasADi::SQPMethod::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SQPMethod::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SQPMethod::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SQPMethod::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::SQPMethod::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SQPMethod::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SQPMethod::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::SQPMethod::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SQPMethod::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SQPMethod::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SQPMethod::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SQPMethod::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SQPMethod::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SQPMethod::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SQPMethod::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::SQPMethod::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::SQPMethod::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SQPMethod::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::SQPMethod::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") CasADi::SQPMethod::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SQPMethod::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SQPMethod::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SQPMethod::nlp "

Access the NLP.

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::SQPMethod::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SQPMethod::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::SQPMethod::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SQPMethod::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SQPMethod::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SQPMethod::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SQPMethod::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SQPMethod::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SQPMethod::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SQPMethod::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SQPMethod::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SQPMethod::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SQPMethod::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SQPMethod "[INTERNAL]  Sequential Quadratic
Programming method.

The algorithm is a classical SQP method with either exact (may be also
provided) or damped BFGS Lagrange Hessian approximation. Two different line-
search algorithms are available. First, Armijo (Wolfe) condition with
backtracking (suffers from Maratos effect). Seco::ifndef
WITHOUT_PRE_1_9_Xnd, a line-search method that checks if the merit function
is lower than the last k values (no Maratos effect). Both methods employ the
L1 merit function.

The method solves the problems of form:min          F(x) x  subject to LBG
<= G(x) <= UBG LBX <=   x  <= UBX

Nonlinear equalities can be introduced by setting LBG and UBG equal at the
correct positions.

The method is still under development and should be used with care

Attila Kozma, Joel Andersson and Joris Gillis

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| beta         | OT_REAL      | 0.800        | Line-search  | CasADi::SQPI |
|              |              |              | parameter,   | nternal      |
|              |              |              | restoration  |              |
|              |              |              | factor of    |              |
|              |              |              | stepsize     |              |
+--------------+--------------+--------------+--------------+--------------+
| c1           | OT_REAL      | 0.000        | Armijo       | CasADi::SQPI |
|              |              |              | condition,   | nternal      |
|              |              |              | coefficient  |              |
|              |              |              | of decrease  |              |
|              |              |              | in merit     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | CasADi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | objective    | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | constraint   | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| gauss_newton | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option. Use  | olverInterna |
|              |              |              | Gauss Newton | l            |
|              |              |              | Hessian appr |              |
|              |              |              | oximation    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| dient        |              | )            | option.      | olverInterna |
|              |              |              | Generate a   | l            |
|              |              |              | function for |              |
|              |              |              | calculating  |              |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | objective.   |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_hes | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| sian         |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Hessian of   |              |
|              |              |              | the          |              |
|              |              |              | Lagrangian   |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_jac | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| obian        |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Jacobian of  |              |
|              |              |              | the          |              |
|              |              |              | constraints  |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_appr | OT_STRING    | \"exact\"      | limited-     | CasADi::SQPI |
| oximation    |              |              | memory|exact | nternal      |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | CasADi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | CasADi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| lbfgs_memory | OT_INTEGER   | 10           | Size of      | CasADi::SQPI |
|              |              |              | L-BFGS       | nternal      |
|              |              |              | memory.      |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter     | OT_INTEGER   | 50           | Maximum      | CasADi::SQPI |
|              |              |              | number of    | nternal      |
|              |              |              | SQP          |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter_ls  | OT_INTEGER   | 3            | Maximum      | CasADi::SQPI |
|              |              |              | number of    | nternal      |
|              |              |              | linesearch   |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| merit_memory | OT_INTEGER   | 4            | Size of      | CasADi::SQPI |
|              |              |              | memory to    | nternal      |
|              |              |              | store        |              |
|              |              |              | history of   |              |
|              |              |              | merit        |              |
|              |              |              | function     |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| min_step_siz | OT_REAL      | 0.000        | The size     | CasADi::SQPI |
| e            |              |              | (inf-norm)   | nternal      |
|              |              |              | of the step  |              |
|              |              |              | size should  |              |
|              |              |              | not become   |              |
|              |              |              | smaller than |              |
|              |              |              | this.        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | CasADi::SQPI |
|              |              |              | uts)  (eval_ | nternal      |
|              |              |              | f|eval_g|eva |              |
|              |              |              | l_jac_g|eval |              |
|              |              |              | _grad_f|eval |              |
|              |              |              | _h|qp|dx)    |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option.      | olverInterna |
|              |              |              | Expect F, G, | l            |
|              |              |              | H, J to have |              |
|              |              |              | an           |              |
|              |              |              | additional   |              |
|              |              |              | input        |              |
|              |              |              | argument     |              |
|              |              |              | appended at  |              |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| print_header | OT_BOOLEAN   | true         | Print the    | CasADi::SQPI |
|              |              |              | header with  | nternal      |
|              |              |              | problem      |              |
|              |              |              | statistics   |              |
+--------------+--------------+--------------+--------------+--------------+
| print_time   | OT_BOOLEAN   | true         | Print        | CasADi::SQPI |
|              |              |              | information  | nternal      |
|              |              |              | about        |              |
|              |              |              | execution    |              |
|              |              |              | time         |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver    | OT_QPSOLVER  | GenericType( | The QP       | CasADi::SQPI |
|              |              | )            | solver to be | nternal      |
|              |              |              | used by the  |              |
|              |              |              | SQP method   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver_op | OT_DICTIONAR | GenericType( | Options to   | CasADi::SQPI |
| tions        | Y            | )            | be passed to | nternal      |
|              |              |              | the QP       |              |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularize   | OT_BOOLEAN   | false        | Automatic re | CasADi::SQPI |
|              |              |              | gularization | nternal      |
|              |              |              | of Lagrange  |              |
|              |              |              | Hessian.     |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_du       | OT_REAL      | 0.000        | Stopping     | CasADi::SQPI |
|              |              |              | criterion    | nternal      |
|              |              |              | for dual inf |              |
|              |              |              | easability   |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_pr       | OT_REAL      | 0.000        | Stopping     | CasADi::SQPI |
|              |              |              | criterion    | nternal      |
|              |              |              | for primal i |              |
|              |              |              | nfeasibility |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | CasADi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-------------+--------------------------+
|     Id      |         Used in          |
+=============+==========================+
| dx          | CasADi::SQPInternal      |
+-------------+--------------------------+
| eval_f      | CasADi::SQPInternal      |
+-------------+--------------------------+
| eval_g      | CasADi::SQPInternal      |
+-------------+--------------------------+
| eval_grad_f | CasADi::SQPInternal      |
+-------------+--------------------------+
| eval_h      | CasADi::SQPInternal      |
+-------------+--------------------------+
| eval_jac_g  | CasADi::SQPInternal      |
+-------------+--------------------------+
| inputs      | CasADi::FunctionInternal |
+-------------+--------------------------+
| outputs     | CasADi::FunctionInternal |
+-------------+--------------------------+
| qp          | CasADi::SQPInternal      |
+-------------+--------------------------+

>List of available stats
+--------------------+---------------------+
|         Id         |       Used in       |
+====================+=====================+
| iter_count         | CasADi::SQPInternal |
+--------------------+---------------------+
| iteration          | CasADi::SQPInternal |
+--------------------+---------------------+
| iterations         | CasADi::SQPInternal |
+--------------------+---------------------+
| n_eval_f           | CasADi::SQPInternal |
+--------------------+---------------------+
| n_eval_g           | CasADi::SQPInternal |
+--------------------+---------------------+
| n_eval_grad_f      | CasADi::SQPInternal |
+--------------------+---------------------+
| n_eval_h           | CasADi::SQPInternal |
+--------------------+---------------------+
| n_eval_jac_g       | CasADi::SQPInternal |
+--------------------+---------------------+
| return_status      | CasADi::SQPInternal |
+--------------------+---------------------+
| t_callback_fun     | CasADi::SQPInternal |
+--------------------+---------------------+
| t_callback_prepare | CasADi::SQPInternal |
+--------------------+---------------------+
| t_eval_f           | CasADi::SQPInternal |
+--------------------+---------------------+
| t_eval_g           | CasADi::SQPInternal |
+--------------------+---------------------+
| t_eval_grad_f      | CasADi::SQPInternal |
+--------------------+---------------------+
| t_eval_h           | CasADi::SQPInternal |
+--------------------+---------------------+
| t_eval_jac_g       | CasADi::SQPInternal |
+--------------------+---------------------+
| t_mainloop         | CasADi::SQPInternal |
+--------------------+---------------------+

Diagrams

C++ includes: sqp_method.hpp ";

%feature("docstring") CasADi::SQPMethod::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SQPMethod::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SQPMethod::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::SQPMethod::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SQPMethod::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SQPMethod::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SQPMethod::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SQPMethod::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::SQPMethod::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SQPMethod::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: CasADi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: CasADi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") CasADi::SQPMethod::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SQPMethod::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SQPMethod::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SQPMethod::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SQPMethod::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SQPMethod::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SQPMethod::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SQPMethod::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SQPMethod::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SQPMethod::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SQPMethod::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SQPMethod::isInit "

Is initialized?

";

%feature("docstring") CasADi::SQPMethod::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SQPMethod::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SQPMethod::jacG "

Access the Jacobian of the constraint function.

>Input scheme: CasADi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective. .           |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") CasADi::SQPMethod::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::SQPMethod::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SQPMethod::getReportConstraints "";

%feature("docstring") CasADi::SQPMethod::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SQPMethod::gradF "

Access the objective gradient function>Input scheme: CasADi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") CasADi::SQPMethod::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SQPMethod::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SQPMethod::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SQPMethod::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SQPMethod::solve "

the same as evaluate()

";

%feature("docstring") CasADi::SQPMethod::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::SQPMethod::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SQPMethod::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SQPMethod::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SQPMethod::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SQPMethod::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::SQPMethod::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SQPMethod::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") CasADi::SQPMethod::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::SQPMethod::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SQPMethod::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SQPMethod::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SQPMethod::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::SQPMethod::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SQPMethod::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::SQPMethod::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SQPMethod::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SQPMethod::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SQPMethod::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SQPMethod::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::SQPMethod::getQPSolver "

Access the QPSolver used internally.

";

%feature("docstring") CasADi::SQPMethod::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SQPMethod::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";


// File: classCasADi_1_1StabilizedQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::StabilizedQPSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedQPSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::StabilizedQPSolver::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") CasADi::StabilizedQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::StabilizedQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::StabilizedQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::StabilizedQPSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::StabilizedQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::StabilizedQPSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::StabilizedQPSolver "[INTERNAL]
StabilizedQPSolver.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x   x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX                  with :       H sparse (n x n) positive
definite       g dense  (n x 1) n: number of decision variables (x)     nc:
number of constraints (A)

If H is not positive-definite, the solver should throw an error.

Joel Andersson

>Input scheme: CasADi::StabilizedQPSolverInput (STABILIZED_QP_SOLVER_NUM_IN = 13) [stabilizedQpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| STABILIZED_QP_SOLVER_H | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_G | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_A | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | uba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lbx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | ubx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_X | x0                     | dense, (n x 1)         |
| 0                      |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lam_x0                 | dense                  |
| AM_X0                  |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muR                    | dense (1 x 1)          |
| UR                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muE                    | dense (nc x 1)         |
| UE                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | mu                     | dense (nc x 1)         |
| U                      |                        |                        |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: stabilized_qp_solver.hpp ";

%feature("docstring") CasADi::StabilizedQPSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::StabilizedQPSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedQPSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::StabilizedQPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::StabilizedQPSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::StabilizedQPSolver::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::StabilizedQPSolver::spCanEvaluate "[INTERNAL]
Is the class able to propate seeds through the algorithm? (for usage, see
the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::StabilizedQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::StabilizedQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::StabilizedQPSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedQPSolver::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") CasADi::StabilizedQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::StabilizedQPSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::StabilizedQPSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::StabilizedQPSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::StabilizedQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::StabilizedQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::StabilizedQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::StabilizedQPSolver::getOption "

get an option value

";

%feature("docstring") CasADi::StabilizedQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::StabilizedQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::StabilizedQPSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::StabilizedQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::StabilizedQPSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::StabilizedQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::StabilizedQPSolver::print "[INTERNAL]  Print
a destription of the object.

";

%feature("docstring") CasADi::StabilizedQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::StabilizedQPSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::StabilizedQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::StabilizedQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::StabilizedQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::StabilizedQPSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::StabilizedQPSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::StabilizedQPSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") CasADi::StabilizedQPSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::StabilizedQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::StabilizedQPSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedQPSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::StabilizedQPSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::StabilizedQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::StabilizedQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::StabilizedQPSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::StabilizedQPSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::StabilizedQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::StabilizedQPSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::StabilizedQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::StabilizedQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::StabilizedQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::StabilizedQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::StabilizedQPSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::StabilizedQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::StabilizedQPSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::StabilizedQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::StabilizedQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::StabilizedQPSolver::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::StabilizedQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::StabilizedQPSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::StabilizedQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::StabilizedQPSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") CasADi::StabilizedQPSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::StabilizedQPSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::StabilizedQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::StabilizedQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::StabilizedQPSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::StabilizedQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::StabilizedQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::StabilizedQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::StabilizedQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::StabilizedQPSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::StabilizedQPSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::StabilizedQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::StabilizedQPSolver::StabilizedQPSolver "

Default constructor.

";

%feature("docstring") CasADi::StabilizedQPSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::StabilizedQPSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::StabilizedQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::StabilizedQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::StabilizedQPSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::StabilizedQPSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::StabilizedQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::StabilizedQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::StabilizedQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::StabilizedQPSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::StabilizedQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::StabilizedQPSolver::spInit "[INTERNAL]  Reset
the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::StabilizedQPSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::StabilizedQPSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedQPSolver::weak "[INTERNAL]  Get a
weak reference to the object.

";


// File: classCasADi_1_1StabilizedQPSolverInputIOSchemeVector.xml
%feature("docstring")
CasADi::StabilizedQPSolverInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::StabilizedQPSolverInputIOSchemeVector::print "[INTERNAL]  Print a destription of the object.

";

%feature("docstring") CasADi::StabilizedQPSolverInputIOSchemeVector::vector
"[INTERNAL] ";

%feature("docstring") CasADi::StabilizedQPSolverInputIOSchemeVector "[INTERNAL]  Helper function for 'StabilizedQPSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
CasADi::StabilizedQPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") CasADi::StabilizedQPSolverInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
CasADi::StabilizedQPSolverInputIOSchemeVector::StabilizedQPSolverInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") CasADi::StabilizedQPSolverInputIOSchemeVector::__len__
"[INTERNAL] ";

%feature("docstring")
CasADi::StabilizedQPSolverInputIOSchemeVector::getDescription "[INTERNAL]
Return a string with a destription (for SWIG)

";


// File: classCasADi_1_1StabilizedSQICSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::StabilizedSQICSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::StabilizedSQICSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::StabilizedSQICSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::StabilizedSQICSolver::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::StabilizedSQICSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::StabilizedSQICSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::StabilizedSQICSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::StabilizedSQICSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::StabilizedSQICSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::StabilizedSQICSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::StabilizedSQICSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::StabilizedSQICSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::StabilizedSQICSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::StabilizedSQICSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedSQICSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::StabilizedSQICSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::StabilizedSQICSolver::print "[INTERNAL]
Print a destription of the object.

";

%feature("docstring") CasADi::StabilizedSQICSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::StabilizedSQICSolver::getOption "

get an option value

";

%feature("docstring") CasADi::StabilizedSQICSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") CasADi::StabilizedSQICSolver::input_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::StabilizedSQICSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::StabilizedSQICSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::StabilizedSQICSolver::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::StabilizedSQICSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::StabilizedSQICSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::StabilizedSQICSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::StabilizedSQICSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::StabilizedSQICSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::StabilizedSQICSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::StabilizedSQICSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::StabilizedSQICSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::StabilizedSQICSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedSQICSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::StabilizedSQICSolver::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") CasADi::StabilizedSQICSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::StabilizedSQICSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::StabilizedSQICSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::StabilizedSQICSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::StabilizedSQICSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::StabilizedSQICSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::StabilizedSQICSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedSQICSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::StabilizedSQICSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::StabilizedSQICSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::StabilizedSQICSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::StabilizedSQICSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::StabilizedSQICSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::StabilizedSQICSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedSQICSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::StabilizedSQICSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::StabilizedSQICSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::StabilizedSQICSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::StabilizedSQICSolver::setOptionByAllowedIndex
"[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::StabilizedSQICSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::StabilizedSQICSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::StabilizedSQICSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::StabilizedSQICSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::StabilizedSQICSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::StabilizedSQICSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::StabilizedSQICSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::StabilizedSQICSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::StabilizedSQICSolver::output_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::StabilizedSQICSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::StabilizedSQICSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::StabilizedSQICSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::StabilizedSQICSolver::spInit "[INTERNAL]
Reset the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::StabilizedSQICSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::StabilizedSQICSolver "[INTERNAL]

>Input scheme: CasADi::StabilizedQPSolverInput (STABILIZED_QP_SOLVER_NUM_IN = 13) [stabilizedQpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| STABILIZED_QP_SOLVER_H | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_G | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_A | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | uba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lbx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | ubx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_X | x0                     | dense, (n x 1)         |
| 0                      |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lam_x0                 | dense                  |
| AM_X0                  |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muR                    | dense (1 x 1)          |
| UR                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muE                    | dense (nc x 1)         |
| UE                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | mu                     | dense (nc x 1)         |
| U                      |                        |                        |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: stabilized_sqic_solver.hpp ";

%feature("docstring") CasADi::StabilizedSQICSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::StabilizedSQICSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::StabilizedSQICSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") CasADi::StabilizedSQICSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::StabilizedSQICSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::StabilizedSQICSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::StabilizedSQICSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::StabilizedSQICSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::StabilizedSQICSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::StabilizedSQICSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::StabilizedSQICSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::StabilizedSQICSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::StabilizedSQICSolver::StabilizedSQICSolver "

>  CasADi::StabilizedSQICSolver::StabilizedSQICSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::StabilizedSQICSolver::StabilizedSQICSolver(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") CasADi::StabilizedSQICSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::StabilizedSQICSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedSQICSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::StabilizedSQICSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::StabilizedSQICSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::StabilizedSQICSolver::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") CasADi::StabilizedSQICSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::StabilizedSQICSolver::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") CasADi::StabilizedSQICSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::StabilizedSQICSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::StabilizedSQICSolver::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") CasADi::StabilizedSQICSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::StabilizedSQICSolver::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") CasADi::StabilizedSQICSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedSQICSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::StabilizedSQICSolver::spCanEvaluate "[INTERNAL]  Is the class able to propate seeds through the algorithm? (for
usage, see the example propagating_sparsity.cpp)

";


// File: classCasADi_1_1StabilizedSQPMethod.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::StabilizedSQPMethod::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::StabilizedSQPMethod::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::StabilizedSQPMethod::isInit "

Is initialized?

";

%feature("docstring") CasADi::StabilizedSQPMethod::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::StabilizedSQPMethod::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::StabilizedSQPMethod::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") CasADi::StabilizedSQPMethod::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::StabilizedSQPMethod::evaluate "

Evaluate.

";

%feature("docstring") CasADi::StabilizedSQPMethod::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::StabilizedSQPMethod::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::StabilizedSQPMethod::StabilizedSQPMethod "

>  CasADi::StabilizedSQPMethod::StabilizedSQPMethod()
------------------------------------------------------------------------

Default constructor.

>  CasADi::StabilizedSQPMethod::StabilizedSQPMethod(const Function &F, const Function &G)
------------------------------------------------------------------------

[DEPRECATED] Create an NLP solver instance (legacy syntax)

>  CasADi::StabilizedSQPMethod::StabilizedSQPMethod(const Function &nlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::StabilizedSQPMethod::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::StabilizedSQPMethod::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::StabilizedSQPMethod::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::StabilizedSQPMethod::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::StabilizedSQPMethod::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::StabilizedSQPMethod::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::StabilizedSQPMethod::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::StabilizedSQPMethod::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::StabilizedSQPMethod::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::StabilizedSQPMethod::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::StabilizedSQPMethod::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::StabilizedSQPMethod::solve "

the same as evaluate()

";

%feature("docstring") CasADi::StabilizedSQPMethod::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") CasADi::StabilizedSQPMethod::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::StabilizedSQPMethod::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::StabilizedSQPMethod::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::StabilizedSQPMethod::jacG "

Access the Jacobian of the constraint function.

>Input scheme: CasADi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective. .           |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") CasADi::StabilizedSQPMethod::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::StabilizedSQPMethod::getStabilizedQPSolver "

Access the StabilizedQPSolver used internally.

";

%feature("docstring") CasADi::StabilizedSQPMethod::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::StabilizedSQPMethod::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::StabilizedSQPMethod::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::StabilizedSQPMethod::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") CasADi::StabilizedSQPMethod::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedSQPMethod::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::StabilizedSQPMethod::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedSQPMethod::output_struct "[INTERNAL]  Input/output structures of the function */.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::StabilizedSQPMethod::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::StabilizedSQPMethod::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedSQPMethod::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::StabilizedSQPMethod::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::StabilizedSQPMethod "[INTERNAL]  Stabilized
Sequential Quadratic Programming method.

Slava Kung

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| TReta1       | OT_REAL      | 0.800        | Required     | CasADi::Stab |
|              |              |              | predicted /  | ilizedSQPInt |
|              |              |              | actual       | ernal        |
|              |              |              | decrease for |              |
|              |              |              | TR increase  |              |
+--------------+--------------+--------------+--------------+--------------+
| TReta2       | OT_REAL      | 0.200        | Required     | CasADi::Stab |
|              |              |              | predicted /  | ilizedSQPInt |
|              |              |              | actual       | ernal        |
|              |              |              | decrease for |              |
|              |              |              | TR decrease  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| alphaMin     | OT_REAL      | 0.001        | Used to      | CasADi::Stab |
|              |              |              | check        | ilizedSQPInt |
|              |              |              | whether to   | ernal        |
|              |              |              | increase     |              |
|              |              |              | rho.         |              |
+--------------+--------------+--------------+--------------+--------------+
| beta         | OT_REAL      | 0.500        | Line-search  | CasADi::Stab |
|              |              |              | parameter,   | ilizedSQPInt |
|              |              |              | restoration  | ernal        |
|              |              |              | factor of    |              |
|              |              |              | stepsize     |              |
+--------------+--------------+--------------+--------------+--------------+
| c1           | OT_REAL      | 0.001        | Armijo       | CasADi::Stab |
|              |              |              | condition,   | ilizedSQPInt |
|              |              |              | coefficient  | ernal        |
|              |              |              | of decrease  |              |
|              |              |              | in merit     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| dvMax0       | OT_REAL      | 100          | Parameter    | CasADi::Stab |
|              |              |              | used to      | ilizedSQPInt |
|              |              |              | defined the  | ernal        |
|              |              |              | max step     |              |
|              |              |              | length.      |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_active   | OT_REAL      | 0.000        | Threshold    | CasADi::Stab |
|              |              |              | for the      | ilizedSQPInt |
|              |              |              | epsilon-     | ernal        |
|              |              |              | active set.  |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | CasADi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | objective    | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | constraint   | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| gamma1       | OT_REAL      | 2            | Trust region | CasADi::Stab |
|              |              |              | increase     | ilizedSQPInt |
|              |              |              | parameter    | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| gamma2       | OT_REAL      | 1            | Trust region | CasADi::Stab |
|              |              |              | update       | ilizedSQPInt |
|              |              |              | parameter    | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| gamma3       | OT_REAL      | 1            | Trust region | CasADi::Stab |
|              |              |              | decrease     | ilizedSQPInt |
|              |              |              | parameter    | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| gauss_newton | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option. Use  | olverInterna |
|              |              |              | Gauss Newton | l            |
|              |              |              | Hessian appr |              |
|              |              |              | oximation    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| dient        |              | )            | option.      | olverInterna |
|              |              |              | Generate a   | l            |
|              |              |              | function for |              |
|              |              |              | calculating  |              |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | objective.   |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_hes | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| sian         |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Hessian of   |              |
|              |              |              | the          |              |
|              |              |              | Lagrangian   |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_jac | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| obian        |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Jacobian of  |              |
|              |              |              | the          |              |
|              |              |              | constraints  |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_appr | OT_STRING    | \"exact\"      | limited-     | CasADi::Stab |
| oximation    |              |              | memory|exact | ilizedSQPInt |
|              |              |              |              | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | CasADi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | CasADi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| lbfgs_memory | OT_INTEGER   | 10           | Size of      | CasADi::Stab |
|              |              |              | L-BFGS       | ilizedSQPInt |
|              |              |              | memory.      | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| max_iter     | OT_INTEGER   | 100          | Maximum      | CasADi::Stab |
|              |              |              | number of    | ilizedSQPInt |
|              |              |              | SQP          | ernal        |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter_ls  | OT_INTEGER   | 20           | Maximum      | CasADi::Stab |
|              |              |              | number of    | ilizedSQPInt |
|              |              |              | linesearch   | ernal        |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| merit_memory | OT_INTEGER   | 4            | Size of      | CasADi::Stab |
|              |              |              | memory to    | ilizedSQPInt |
|              |              |              | store        | ernal        |
|              |              |              | history of   |              |
|              |              |              | merit        |              |
|              |              |              | function     |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| min_step_siz | OT_REAL      | 0.000        | The size     | CasADi::Stab |
| e            |              |              | (inf-norm)   | ilizedSQPInt |
|              |              |              | of the step  | ernal        |
|              |              |              | size should  |              |
|              |              |              | not become   |              |
|              |              |              | smaller than |              |
|              |              |              | this.        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | CasADi::Stab |
|              |              |              | uts)  (eval_ | ilizedSQPInt |
|              |              |              | f|eval_g|eva | ernal        |
|              |              |              | l_jac_g|eval |              |
|              |              |              | _grad_f|eval |              |
|              |              |              | _h|qp|dx)    |              |
+--------------+--------------+--------------+--------------+--------------+
| muR0         | OT_REAL      | 0.000        | Initial      | CasADi::Stab |
|              |              |              | choice of re | ilizedSQPInt |
|              |              |              | gularization | ernal        |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nu           | OT_REAL      | 1            | Parameter    | CasADi::Stab |
|              |              |              | for primal-  | ilizedSQPInt |
|              |              |              | dual         | ernal        |
|              |              |              | augmented    |              |
|              |              |              | Lagrangian.  |              |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option.      | olverInterna |
|              |              |              | Expect F, G, | l            |
|              |              |              | H, J to have |              |
|              |              |              | an           |              |
|              |              |              | additional   |              |
|              |              |              | input        |              |
|              |              |              | argument     |              |
|              |              |              | appended at  |              |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| phiWeight    | OT_REAL      | 0.000        | Weight used  | CasADi::Stab |
|              |              |              | in pseudo-   | ilizedSQPInt |
|              |              |              | filter.      | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| print_header | OT_BOOLEAN   | true         | Print the    | CasADi::Stab |
|              |              |              | header with  | ilizedSQPInt |
|              |              |              | problem      | ernal        |
|              |              |              | statistics   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularize   | OT_BOOLEAN   | false        | Automatic re | CasADi::Stab |
|              |              |              | gularization | ilizedSQPInt |
|              |              |              | of Lagrange  | ernal        |
|              |              |              | Hessian.     |              |
+--------------+--------------+--------------+--------------+--------------+
| stabilized_q | OT_STABILIZE | GenericType( | The          | CasADi::Stab |
| p_solver     | DQPSOLVER    | )            | Stabilized   | ilizedSQPInt |
|              |              |              | QP solver to | ernal        |
|              |              |              | be used by   |              |
|              |              |              | the SQP      |              |
|              |              |              | method       |              |
+--------------+--------------+--------------+--------------+--------------+
| stabilized_q | OT_DICTIONAR | GenericType( | Options to   | CasADi::Stab |
| p_solver_opt | Y            | )            | be passed to | ilizedSQPInt |
| ions         |              |              | the          | ernal        |
|              |              |              | Stabilized   |              |
|              |              |              | QP solver    |              |
+--------------+--------------+--------------+--------------+--------------+
| tau0         | OT_REAL      | 0.010        | Initial      | CasADi::Stab |
|              |              |              | parameter    | ilizedSQPInt |
|              |              |              | for the      | ernal        |
|              |              |              | merit        |              |
|              |              |              | function     |              |
|              |              |              | optimality   |              |
|              |              |              | threshold.   |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_du       | OT_REAL      | 0.000        | Stopping     | CasADi::Stab |
|              |              |              | criterion    | ilizedSQPInt |
|              |              |              | for dual inf | ernal        |
|              |              |              | easability   |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_pr       | OT_REAL      | 0.000        | Stopping     | CasADi::Stab |
|              |              |              | criterion    | ilizedSQPInt |
|              |              |              | for primal i | ernal        |
|              |              |              | nfeasibility |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | CasADi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+
| yEinitial    | OT_STRING    | \"simple\"     | Initial      | CasADi::Stab |
|              |              |              | multiplier.  | ilizedSQPInt |
|              |              |              | Simple (all  | ernal        |
|              |              |              | zero) or     |              |
|              |              |              | least (LSQ). |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-------------+-------------------------------+
|     Id      |            Used in            |
+=============+===============================+
| dx          | CasADi::StabilizedSQPInternal |
+-------------+-------------------------------+
| eval_f      | CasADi::StabilizedSQPInternal |
+-------------+-------------------------------+
| eval_g      | CasADi::StabilizedSQPInternal |
+-------------+-------------------------------+
| eval_grad_f | CasADi::StabilizedSQPInternal |
+-------------+-------------------------------+
| eval_h      | CasADi::StabilizedSQPInternal |
+-------------+-------------------------------+
| eval_jac_g  | CasADi::StabilizedSQPInternal |
+-------------+-------------------------------+
| inputs      | CasADi::FunctionInternal      |
+-------------+-------------------------------+
| outputs     | CasADi::FunctionInternal      |
+-------------+-------------------------------+
| qp          | CasADi::StabilizedSQPInternal |
+-------------+-------------------------------+

>List of available stats
+---------------+-------------------------------+
|      Id       |            Used in            |
+===============+===============================+
| iter_count    | CasADi::StabilizedSQPInternal |
+---------------+-------------------------------+
| return_status | CasADi::StabilizedSQPInternal |
+---------------+-------------------------------+

Diagrams

C++ includes: stabilized_sqp_method.hpp ";

%feature("docstring") CasADi::StabilizedSQPMethod::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::StabilizedSQPMethod::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::StabilizedSQPMethod::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::StabilizedSQPMethod::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::StabilizedSQPMethod::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::StabilizedSQPMethod::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::StabilizedSQPMethod::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::StabilizedSQPMethod::spCanEvaluate "[INTERNAL]  Is the class able to propate seeds through the algorithm? (for
usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::StabilizedSQPMethod::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::StabilizedSQPMethod::nlp "

Access the NLP.

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::StabilizedSQPMethod::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedSQPMethod::print "[INTERNAL]  Print
a destription of the object.

";

%feature("docstring") CasADi::StabilizedSQPMethod::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::StabilizedSQPMethod::getOption "

get an option value

";

%feature("docstring") CasADi::StabilizedSQPMethod::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") CasADi::StabilizedSQPMethod::getReportConstraints "";

%feature("docstring") CasADi::StabilizedSQPMethod::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::StabilizedSQPMethod::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::StabilizedSQPMethod::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::StabilizedSQPMethod::gradF "

Access the objective gradient function>Input scheme: CasADi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") CasADi::StabilizedSQPMethod::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::StabilizedSQPMethod::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::StabilizedSQPMethod::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::StabilizedSQPMethod::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::StabilizedSQPMethod::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::StabilizedSQPMethod::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::StabilizedSQPMethod::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedSQPMethod::spInit "[INTERNAL]
Reset the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::StabilizedSQPMethod::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::StabilizedSQPMethod::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::StabilizedSQPMethod::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::StabilizedSQPMethod::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::StabilizedSQPMethod::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::StabilizedSQPMethod::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::StabilizedSQPMethod::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::StabilizedSQPMethod::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: CasADi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: CasADi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") CasADi::StabilizedSQPMethod::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::StabilizedSQPMethod::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") CasADi::StabilizedSQPMethod::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::StabilizedSQPMethod::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::StabilizedSQPMethod::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::StabilizedSQPMethod::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::StabilizedSQPMethod::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::StabilizedSQPMethod::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::StabilizedSQPMethod::hasOption "

check if there is an option str

";


// File: classCasADi_1_1SubAssign.xml
%feature("docstring") CasADi::SubAssign::shape "[INTERNAL] ";

%feature("docstring") CasADi::SubAssign::size "[INTERNAL] ";

%feature("docstring") CasADi::SubAssign::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::SubAssign::size1 "[INTERNAL] ";

%feature("docstring") CasADi::SubAssign::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::SubAssign::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SubAssign::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::SubAssign::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::SubAssign::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::SubAssign::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::SubAssign::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::SubAssign::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::SubAssign::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::SubAssign::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SubAssign::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::SubAssign::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::SubAssign::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::SubAssign::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::SubAssign::printPart "[INTERNAL]  Print a
part of the expression */.

";

%feature("docstring") CasADi::SubAssign::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::SubAssign::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::SubAssign::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::SubAssign::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::SubAssign::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::SubAssign::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::SubAssign::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::SubAssign::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::SubAssign::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::SubAssign::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::SubAssign::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::SubAssign::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") CasADi::SubAssign::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::SubAssign::evaluateMX "

>  void CasADi::SubAssign::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::SubAssign::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::SubAssign::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::SubAssign::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::SubAssign::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::SubAssign::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::SubAssign::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::SubAssign "[INTERNAL]  Reference to a
submatrix.

Joel Andersson

C++ includes: subassign.hpp ";

%feature("docstring") CasADi::SubAssign::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") CasADi::SubAssign::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") CasADi::SubAssign::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::SubAssign::SubAssign "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::SubAssign::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::SubAssign::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") CasADi::SubAssign::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::SubAssign::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::SubAssign::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::SubAssign::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::SubAssign::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::SubAssign::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SubAssign::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::SubAssign::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::SubAssign::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::SubAssign::size2 "[INTERNAL] ";

%feature("docstring") CasADi::SubAssign::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::SubAssign::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::SubAssign::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::SubAssign::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::SubAssign::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::SubAssign::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::SubAssign::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::SubAssign::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::SubAssign::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::SubAssign::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::SubAssign::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::SubAssign::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::SubAssign::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::SubAssign::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::SubAssign::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") CasADi::SubAssign::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::SubAssign::~SubAssign "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::SubAssign::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::SubAssign::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SubAssign::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::SubAssign::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") CasADi::SubAssign::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::SubAssign::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::SubAssign::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::SubAssign::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::SubAssign::getOutput "[INTERNAL]  Get an
output.

";


// File: classCasADi_1_1SubMatrix.xml
%feature("docstring") CasADi::SubMatrix "[INTERNAL]  submatrix

SubMatrix class for Matrix SubMatrix is the return type for operator() of
the Matrix class, it allows access to the value as well as changing the
parent object Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") CasADi::SubMatrix::SubMatrix "

Constructor.

";


// File: classCasADi_1_1SubRef.xml
%feature("docstring") CasADi::SubRef::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::SubRef::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") CasADi::SubRef::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") CasADi::SubRef::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") CasADi::SubRef::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::SubRef::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::SubRef::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::SubRef::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::SubRef::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::SubRef::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::SubRef::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::SubRef::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::SubRef::SubRef "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::SubRef::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::SubRef::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SubRef::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") CasADi::SubRef::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::SubRef::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::SubRef::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::SubRef::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::SubRef::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::SubRef::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::SubRef::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::SubRef::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") CasADi::SubRef::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::SubRef::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::SubRef::size "[INTERNAL] ";

%feature("docstring") CasADi::SubRef::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::SubRef::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") CasADi::SubRef::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") CasADi::SubRef::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::SubRef::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::SubRef::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") CasADi::SubRef::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::SubRef::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::SubRef::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::SubRef::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::SubRef::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::SubRef::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::SubRef::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::SubRef::evaluateMX "

>  void CasADi::SubRef::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::SubRef::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::SubRef::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::SubRef::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::SubRef::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") CasADi::SubRef::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::SubRef::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::SubRef "[INTERNAL]  Reference to a submatrix.

Joel Andersson

C++ includes: subref.hpp ";

%feature("docstring") CasADi::SubRef::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::SubRef::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::SubRef::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::SubRef::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::SubRef::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") CasADi::SubRef::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::SubRef::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") CasADi::SubRef::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") CasADi::SubRef::shape "[INTERNAL] ";

%feature("docstring") CasADi::SubRef::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::SubRef::printPart "[INTERNAL]  Print a part
of the expression */.

";

%feature("docstring") CasADi::SubRef::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::SubRef::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::SubRef::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::SubRef::evaluateGen "[INTERNAL]  Evaluate the
function (template)

";

%feature("docstring") CasADi::SubRef::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::SubRef::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::SubRef::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::SubRef::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SubRef::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::SubRef::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::SubRef::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SubRef::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::SubRef::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SubRef::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::SubRef::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::SubRef::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::SubRef::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") CasADi::SubRef::~SubRef "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::SubRef::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::SubRef::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::SubRef::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::SubRef::size1 "[INTERNAL] ";

%feature("docstring") CasADi::SubRef::size2 "[INTERNAL] ";


// File: classCasADi_1_1SundialsIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SundialsIntegrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SundialsIntegrator::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SundialsIntegrator::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") CasADi::SundialsIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SundialsIntegrator::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SundialsIntegrator::clone "

Clone.

";

%feature("docstring") CasADi::SundialsIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") CasADi::SundialsIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SundialsIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SundialsIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SundialsIntegrator::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::SundialsIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SundialsIntegrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SundialsIntegrator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting: inproper use will cause memory leaks!

";

%feature("docstring") CasADi::SundialsIntegrator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::SundialsIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SundialsIntegrator::setStopTime "

Set a stop time for the forward integration.

";

%feature("docstring") CasADi::SundialsIntegrator::getOption "

get an option value

";

%feature("docstring") CasADi::SundialsIntegrator::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") CasADi::SundialsIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SundialsIntegrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SundialsIntegrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SundialsIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SundialsIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") CasADi::SundialsIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SundialsIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SundialsIntegrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SundialsIntegrator::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SundialsIntegrator::resetB "

Reset the backward problem Time will be set to tf and backward state to
input(INTEGRATOR_RX0)

";

%feature("docstring") CasADi::SundialsIntegrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SundialsIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SundialsIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SundialsIntegrator::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SundialsIntegrator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::SundialsIntegrator::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SundialsIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SundialsIntegrator::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SundialsIntegrator::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SundialsIntegrator::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::SundialsIntegrator::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SundialsIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") CasADi::SundialsIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SundialsIntegrator::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") CasADi::SundialsIntegrator::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SundialsIntegrator::spInit "[INTERNAL]  Reset
the sparsity propagation (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SundialsIntegrator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SundialsIntegrator::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") CasADi::SundialsIntegrator::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SundialsIntegrator::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SundialsIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SundialsIntegrator::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") CasADi::SundialsIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SundialsIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") CasADi::SundialsIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") CasADi::SundialsIntegrator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::SundialsIntegrator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") CasADi::SundialsIntegrator::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SundialsIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SundialsIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SundialsIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SundialsIntegrator::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SundialsIntegrator::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SundialsIntegrator::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SundialsIntegrator::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SundialsIntegrator "[INTERNAL]  Interface to
the Sundials integrators.

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x,z,p,t) Forward ODE  0 = fz(x,z,p,t)
Forward algebraic equations  der(q) = fq(x,z,p,t)                  Forward
quadratures Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  = 0
Backward integration from t=tf to t=t0  der(rx) = gx(rx,rz,rp,x,z,p,t)
Backward ODE  0 = gz(rx,rz,rp,x,z,p,t)        Backward algebraic equations
der(rq) = gq(rx,rz,rp,x,z,p,t)        Backward quadratures where we assume
that both the forward and backwards integrations are index-1  (i.e. dfz/dz,
dgz/drz are invertible) and furthermore that gx, gz and gq have a linear
dependency on rx, rz and rp.

>Input scheme: CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| abstol       | OT_REAL      | 0.000        | Absolute     | CasADi::Sund |
|              |              |              | tolerence    | ialsInternal |
|              |              |              | for the IVP  |              |
|              |              |              | solution     |              |
+--------------+--------------+--------------+--------------+--------------+
| abstolB      | OT_REAL      | GenericType( | Absolute     | CasADi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | abstol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | CasADi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | true         | Use exact    | CasADi::Sund |
| an           |              |              | Jacobian     | ialsInternal |
|              |              |              | information  |              |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | GenericType( | Use exact    | CasADi::Sund |
| anB          |              | )            | Jacobian     | ialsInternal |
|              |              |              | information  |              |
|              |              |              | for the      |              |
|              |              |              | backward     |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to exa |              |
|              |              |              | ct_jacobian] |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | CasADi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| finite_diffe | OT_BOOLEAN   | false        | Use finite   | CasADi::Sund |
| rence_fsens  |              |              | differences  | ialsInternal |
|              |              |              | to           |              |
|              |              |              | approximate  |              |
|              |              |              | the forward  |              |
|              |              |              | sensitivity  |              |
|              |              |              | equations    |              |
|              |              |              | (if AD is    |              |
|              |              |              | not          |              |
|              |              |              | available)   |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_abstol | OT_REAL      | GenericType( | Absolute     | CasADi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | abstol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_err_co | OT_BOOLEAN   | true         | include the  | CasADi::Sund |
| n            |              |              | forward sens | ialsInternal |
|              |              |              | itivities in |              |
|              |              |              | all error    |              |
|              |              |              | controls     |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_reltol | OT_REAL      | GenericType( | Relative     | CasADi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | reltol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_scalin | OT_REALVECTO | GenericType( | Scaling      | CasADi::Sund |
| g_factors    | R            | )            | factor for   | ialsInternal |
|              |              |              | the          |              |
|              |              |              | components   |              |
|              |              |              | if finite    |              |
|              |              |              | differences  |              |
|              |              |              | is used      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_sensit | OT_INTEGERVE | GenericType( | Specifies    | CasADi::Sund |
| iviy_paramet | CTOR         | )            | which        | ialsInternal |
| ers          |              |              | components   |              |
|              |              |              | will be used |              |
|              |              |              | when         |              |
|              |              |              | estimating   |              |
|              |              |              | the          |              |
|              |              |              | sensitivity  |              |
|              |              |              | equations    |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| interpolatio | OT_STRING    | \"hermite\"    | Type of inte | CasADi::Sund |
| n_type       |              |              | rpolation    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint sens |              |
|              |              |              | itivities (h |              |
|              |              |              | ermite|polyn |              |
|              |              |              | omial)       |              |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | \"gmres\"      | (gmres|bcgst | CasADi::Sund |
| lver         |              |              | ab|tfqmr)    | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | GenericType( | (gmres|bcgst | CasADi::Sund |
| lverB        |              | )            | ab|tfqmr)    | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | A custom     | CasADi::Sund |
| r            | VER          | )            | linear       | ialsInternal |
|              |              |              | solver       |              |
|              |              |              | creator      |              |
|              |              |              | function     |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | A custom     | CasADi::Sund |
| rB           | VER          | )            | linear       | ialsInternal |
|              |              |              | solver       |              |
|              |              |              | creator      |              |
|              |              |              | function for |              |
|              |              |              | backwards    |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to lin |              |
|              |              |              | ear_solver]  |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | CasADi::Sund |
| r_options    | Y            | )            | be passed to | ialsInternal |
|              |              |              | the linear   |              |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | CasADi::Sund |
| r_optionsB   | Y            | )            | be passed to | ialsInternal |
|              |              |              | the linear   |              |
|              |              |              | solver for   |              |
|              |              |              | backwards    |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to lin |              |
|              |              |              | ear_solver_o |              |
|              |              |              | ptions]      |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | \"dense\"      | (user_define | CasADi::Sund |
| r_type       |              |              | d|dense|band | ialsInternal |
|              |              |              | ed|iterative |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | GenericType( | (user_define | CasADi::Sund |
| r_typeB      |              | )            | d|dense|band | ialsInternal |
|              |              |              | ed|iterative |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | Lower band-  | CasADi::Sund |
| dth          |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | Jacobian (es |              |
|              |              |              | timations)   |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | lower band-  | CasADi::Sund |
| dthB         |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | jacobians    |              |
|              |              |              | for backward |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to low |              |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_krylov   | OT_INTEGER   | 10           | Maximum      | CasADi::Sund |
|              |              |              | Krylov       | ialsInternal |
|              |              |              | subspace     |              |
|              |              |              | size         |              |
+--------------+--------------+--------------+--------------+--------------+
| max_krylovB  | OT_INTEGER   | GenericType( | Maximum      | CasADi::Sund |
|              |              | )            | krylov       | ialsInternal |
|              |              |              | subspace     |              |
|              |              |              | size         |              |
+--------------+--------------+--------------+--------------+--------------+
| max_multiste | OT_INTEGER   | 5            |              | CasADi::Sund |
| p_order      |              |              |              | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| max_num_step | OT_INTEGER   | 10000        | Maximum      | CasADi::Sund |
| s            |              |              | number of    | ialsInternal |
|              |              |              | integrator   |              |
|              |              |              | steps        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pretype      | OT_STRING    | \"none\"       | (none|left|r | CasADi::Sund |
|              |              |              | ight|both)   | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| pretypeB     | OT_STRING    | GenericType( | (none|left|r | CasADi::Sund |
|              |              | )            | ight|both)   | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | CasADi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| quad_err_con | OT_BOOLEAN   | false        | Should the   | CasADi::Sund |
|              |              |              | quadratures  | ialsInternal |
|              |              |              | affect the   |              |
|              |              |              | step size    |              |
|              |              |              | control      |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| reltol       | OT_REAL      | 0.000        | Relative     | CasADi::Sund |
|              |              |              | tolerence    | ialsInternal |
|              |              |              | for the IVP  |              |
|              |              |              | solution     |              |
+--------------+--------------+--------------+--------------+--------------+
| reltolB      | OT_REAL      | GenericType( | Relative     | CasADi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | reltol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| sensitivity_ | OT_STRING    | \"simultaneou | (simultaneou | CasADi::Sund |
| method       |              | s\"           | s|staggered) | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| steps_per_ch | OT_INTEGER   | 20           | Number of    | CasADi::Sund |
| eckpoint     |              |              | steps        | ialsInternal |
|              |              |              | between two  |              |
|              |              |              | consecutive  |              |
|              |              |              | checkpoints  |              |
+--------------+--------------+--------------+--------------+--------------+
| stop_at_end  | OT_BOOLEAN   | true         | Stop the     | CasADi::Sund |
|              |              |              | integrator   | ialsInternal |
|              |              |              | at the end   |              |
|              |              |              | of the       |              |
|              |              |              | interval     |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | CasADi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | CasADi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | Upper band-  | CasADi::Sund |
| dth          |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | Jacobian (es |              |
|              |              |              | timations)   |              |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | Upper band-  | CasADi::Sund |
| dthB         |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | jacobians    |              |
|              |              |              | for backward |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to upp |              |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | false        | Precondition | CasADi::Sund |
| tioner       |              |              | an iterative | ialsInternal |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | GenericType( | Precondition | CasADi::Sund |
| tionerB      |              | )            | an iterative | ialsInternal |
|              |              |              | solver for   |              |
|              |              |              | the          |              |
|              |              |              | backwards    |              |
|              |              |              | problem      |              |
|              |              |              | [default:    |              |
|              |              |              | equal to use |              |
|              |              |              | _preconditio |              |
|              |              |              | ner]         |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: sundials_integrator.hpp ";

%feature("docstring") CasADi::SundialsIntegrator::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SundialsIntegrator::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SundialsIntegrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::SundialsIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SundialsIntegrator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SundialsIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SundialsIntegrator::spCanEvaluate "[INTERNAL]
Is the class able to propate seeds through the algorithm? (for usage, see
the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SundialsIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SundialsIntegrator::isInit "

Is initialized?

";

%feature("docstring") CasADi::SundialsIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") CasADi::SundialsIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SundialsIntegrator::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SundialsIntegrator::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") CasADi::SundialsIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SundialsIntegrator::SundialsIntegrator "

Default constructor.

";

%feature("docstring") CasADi::SundialsIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SundialsIntegrator::solve "

the same as evaluate()

";

%feature("docstring") CasADi::SundialsIntegrator::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SundialsIntegrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SundialsIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SundialsIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SundialsIntegrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SundialsIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::SundialsIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SundialsIntegrator::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SundialsIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SundialsIntegrator::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SundialsIntegrator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") CasADi::SundialsIntegrator::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SundialsIntegrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::SundialsIntegrator::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SundialsIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SundialsIntegrator::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SundialsIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SundialsIntegrator::print "[INTERNAL]  Print
a destription of the object.

";

%feature("docstring") CasADi::SundialsIntegrator::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SundialsIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::SundialsIntegrator::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SundialsIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";


// File: classCasADi_1_1SXElement.xml


/*  Operations from the left  */

/* For Python

*/ %feature("docstring") CasADi::SXElement::sq " ";

%feature("docstring") CasADi::SXElement::__div__ "";

%feature("docstring") CasADi::SXElement::~SXElement "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::SXElement::__mpower__ "";

%feature("docstring") CasADi::SXElement::arcsin "";

%feature("docstring") CasADi::SXElement::cos "";

%feature("docstring") CasADi::SXElement::logic_not "";

%feature("docstring") CasADi::SXElement::arccos "";

%feature("docstring") CasADi::SXElement::isInteger "";

%feature("docstring") CasADi::SXElement::ceil "";

%feature("docstring") CasADi::SXElement::isCommutative "

Check wether a binary SXElement is commutative.

";

%feature("docstring") CasADi::SXElement::logic_or "";

%feature("docstring") CasADi::SXElement::__le__ "";

%feature("docstring") CasADi::SXElement::constpow "";

%feature("docstring") CasADi::SXElement::__mrdivide__ "";

%feature("docstring") CasADi::SXElement::trans "";

%feature("docstring") CasADi::SXElement::if_else_zero "";

%feature("docstring") CasADi::SXElement::isOp "";

%feature("docstring") CasADi::SXElement::toString "[INTERNAL]  string
representation (SWIG workaround)

";

%feature("docstring") CasADi::SXElement::SXElement "

>  CasADi::SXElement::SXElement()
------------------------------------------------------------------------

Default constructor (not-a-number) Object is initialised as not-a-number.

>  CasADi::SXElement::SXElement(double val)
------------------------------------------------------------------------

Numerical constant constructor.

Parameters:
-----------

val:  Numerical value

>  CasADi::SXElement::SXElement(const std::string &name)
------------------------------------------------------------------------

[DEPRECATED] Replaced with SXElement::sym

>  CasADi::SXElement::SXElement(SXNode *node, bool dummy)
------------------------------------------------------------------------
[INTERNAL] 
Create an expression from a node: extra dummy argument to avoid
ambigousity for 0/NULL

>  CasADi::SXElement::SXElement(const SXElement &scalar)
------------------------------------------------------------------------
[INTERNAL] 
Copy constructor.

";

%feature("docstring") CasADi::SXElement::isAlmostZero "";

%feature("docstring") CasADi::SXElement::fmin "";

%feature("docstring") CasADi::SXElement::sin "";

%feature("docstring") CasADi::SXElement::isInf "";

%feature("docstring") CasADi::SXElement::fmax "";

%feature("docstring") CasADi::SXElement::mul "

The following functions serves two purposes: Numpy compatibility and to
allow unambigous access.

";

%feature("docstring") CasADi::SXElement::printme "";

%feature("docstring") CasADi::SXElement::exp "";

%feature("docstring") CasADi::SXElement::__rdiv__ "";

%feature("docstring") CasADi::SXElement::inv "";

%feature("docstring") CasADi::SXElement::__radd__ "";

%feature("docstring") CasADi::SXElement::assignNoDelete "[INTERNAL]  Assign
the node to something, without invoking the deletion of the node, if the
count reaches 0.

";

%feature("docstring") CasADi::SXElement::fabs "";

%feature("docstring") CasADi::SXElement::__truediv__ "";

%feature("docstring") CasADi::SXElement::print "[INTERNAL]  print to
stream, limited

";

%feature("docstring") CasADi::SXElement::arctanh "";

%feature("docstring") CasADi::SXElement::__copysign__ "";

%feature("docstring") CasADi::SXElement::getName "";

%feature("docstring") CasADi::SXElement::__constpow__ "";

%feature("docstring") CasADi::SXElement::isNonNegative "

Check if a value is always nonnegative (false negatives are allowed)

";

%feature("docstring") CasADi::SXElement::__mul__ "";

%feature("docstring") CasADi::SXElement::isEqual "

Check if two nodes are equivalent up to a given depth. Depth=0 checks if the
expressions are identical, i.e. points to the same node.

a = x*x b = x*x

a.isEqual(b,0) will return false, but a.isEqual(b,1) will return true

";

%feature("docstring") CasADi::SXElement::isSymbolic "";

%feature("docstring") CasADi::SXElement::cosh "";

%feature("docstring") CasADi::SXElement::__req__ "";

%feature("docstring") CasADi::SXElement::__rsub__ "";

%feature("docstring") CasADi::SXElement::arctan2 "";

%feature("docstring") CasADi::SXElement::getIntValue "";

%feature("docstring") CasADi::SXElement::mark "[INTERNAL] ";

%feature("docstring") CasADi::SXElement "[INTERNAL]  The basic scalar
symbolic class of CasADi.

Joel Andersson

C++ includes: sx_element.hpp ";

%feature("docstring") CasADi::SXElement::erfinv "";

%feature("docstring") CasADi::SXElement::hasDep "";

%feature("docstring") CasADi::SXElement::__rge__ "";

%feature("docstring") CasADi::SXElement::isNan "";

%feature("docstring") CasADi::SXElement::erf "";

%feature("docstring") CasADi::SXElement::sqrt "";

%feature("docstring") CasADi::SXElement::isRegular "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring") CasADi::SXElement::sign "";

%feature("docstring") CasADi::SXElement::log "";

%feature("docstring") CasADi::SXElement::arccosh "";

%feature("docstring") CasADi::SXElement::assignIfDuplicate "[INTERNAL]
Assign to another expression, if a duplicate. Check for equality up to a
given depth.

";

%feature("docstring") CasADi::SXElement::isNull "

SXElement nodes are not allowed to be null.

";

%feature("docstring") CasADi::SXElement::getTemp "[INTERNAL] ";

%feature("docstring") CasADi::SXElement::isZero "";

%feature("docstring") CasADi::SXElement::setTemp "[INTERNAL] ";

%feature("docstring") CasADi::SXElement::__ge__ "

No need to have both <= and >=.

";

%feature("docstring") CasADi::SXElement::__mldivide__ "

Matrix division from left.

";

%feature("docstring") CasADi::SXElement::__rle__ "";

%feature("docstring") CasADi::SXElement::__hash__ "

Returns a number that is unique for a given SXNode. If the SXElement does
not point to any node, 0 is returned.

";

%feature("docstring") CasADi::SXElement::getValue "";

%feature("docstring") CasADi::SXElement::get "[INTERNAL]  Get a pointer to
the node.

";

%feature("docstring") CasADi::SXElement::getNdeps "

Get the number of dependencies of a binary SXElement.

";

%feature("docstring") CasADi::SXElement::__lt__ "";

%feature("docstring") CasADi::SXElement::__rne__ "";

%feature("docstring") CasADi::SXElement::logic_and "";

%feature("docstring") CasADi::SXElement::arctan "";

%feature("docstring") CasADi::SXElement::isLeaf "

check if this SXElement is a leaf of the SX graph

An SXElement qualifies as leaf when it has no dependencies.

";

%feature("docstring") CasADi::SXElement::tanh "";

%feature("docstring") CasADi::SXElement::__gt__ "

No need to have both < and >

";

%feature("docstring") CasADi::SXElement::__ne__ "";

%feature("docstring") CasADi::SXElement::marked "[INTERNAL] ";

%feature("docstring") CasADi::SXElement::__sub__ "";

%feature("docstring") CasADi::SXElement::sinh "";

%feature("docstring") CasADi::SXElement::arcsinh "";

%feature("docstring") CasADi::SXElement::floor "";

%feature("docstring") CasADi::SXElement::__nonzero__ "

Check the truth value of this node Introduced to catch bool(x) situations in
python.

";

%feature("docstring") CasADi::SXElement::__eq__ "";

%feature("docstring") CasADi::SXElement::__rgt__ "";

%feature("docstring") CasADi::SXElement::__rmul__ "";

%feature("docstring") CasADi::SXElement::isMinusOne "";

%feature("docstring") CasADi::SXElement::__add__ "";

%feature("docstring") CasADi::SXElement::__rlt__ "";

%feature("docstring") CasADi::SXElement::isDoubled "

Check if the node is the sum of two equal expressions.

";

%feature("docstring") CasADi::SXElement::getDep "";

%feature("docstring") CasADi::SXElement::__pow__ "";

%feature("docstring") CasADi::SXElement::log10 "";

%feature("docstring") CasADi::SXElement::isConstant "";

%feature("docstring") CasADi::SXElement::isOne "";

%feature("docstring") CasADi::SXElement::tan "";

%feature("docstring") CasADi::SXElement::__rtruediv__ "";

%feature("docstring") CasADi::SXElement::getOp "";

%feature("docstring") CasADi::SXElement::isMinusInf "";


// File: classCasADi_1_1SXFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SXFunction::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SXFunction::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SXFunction "[INTERNAL]  Dynamically created
function that can be expanded into a series of scalar operations.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| just_in_time | OT_BOOLEAN   | false        | Just-in-time | CasADi::SXFu |
| _opencl      |              |              | compilation  | nctionIntern |
|              |              |              | for numeric  | al           |
|              |              |              | evaluation   |              |
|              |              |              | using OpenCL |              |
|              |              |              | (experimenta |              |
|              |              |              | l)           |              |
+--------------+--------------+--------------+--------------+--------------+
| just_in_time | OT_BOOLEAN   | false        | Propagate    | CasADi::SXFu |
| _sparsity    |              |              | sparsity     | nctionIntern |
|              |              |              | patterns     | al           |
|              |              |              | using just-  |              |
|              |              |              | in-time      |              |
|              |              |              | compilation  |              |
|              |              |              | to a CPU or  |              |
|              |              |              | GPU using    |              |
|              |              |              | OpenCL       |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: sx_function.hpp ";

%feature("docstring") CasADi::SXFunction::getWorkSize "

Get the length of the work vector.

";

%feature("docstring") CasADi::SXFunction::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SXFunction::getAtomicOperation "

Get an atomic operation operator index.

";

%feature("docstring") CasADi::SXFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::SXFunction::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SXFunction::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::SXFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::SXFunction::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SXFunction::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SXFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SXFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SXFunction::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SXFunction::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SXFunction::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SXFunction::hess "

Hessian (forward over adjoint) via source code transformation.

";

%feature("docstring") CasADi::SXFunction::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SXFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SXFunction::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SXFunction::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SXFunction::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SXFunction::inputExpr "

>  const SX & CasADi::SXFunction::inputExpr(int iind) const 
------------------------------------------------------------------------

Get function input.

>  const std::vector< SX > & CasADi::SXFunction::inputExpr() const 
------------------------------------------------------------------------

Get all function inputs.

";

%feature("docstring") CasADi::SXFunction::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SXFunction::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SXFunction::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SXFunction::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SXFunction::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::SXFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SXFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SXFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::SXFunction::tang "

Tangent via source code transformation.

";

%feature("docstring") CasADi::SXFunction::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SXFunction::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SXFunction::outputExpr "

>  const SX & CasADi::SXFunction::outputExpr(int oind) const 
------------------------------------------------------------------------

Get function output.

>  const std::vector< SX > & CasADi::SXFunction::outputExpr() const 
------------------------------------------------------------------------

Get all function outputs.

";

%feature("docstring") CasADi::SXFunction::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::SXFunction::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SXFunction::getOption "

get an option value

";

%feature("docstring") CasADi::SXFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::SXFunction::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SXFunction::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SXFunction::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SXFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SXFunction::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::SXFunction::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SXFunction::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SXFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SXFunction::algorithm "[INTERNAL]  Access the
algorithm directly.

";

%feature("docstring") CasADi::SXFunction::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::SXFunction::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SXFunction::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::SXFunction::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SXFunction::SXFunction "

>  CasADi::SXFunction::SXFunction()
------------------------------------------------------------------------

Default constructor.

>  CasADi::SXFunction::SXFunction(const MXFunction &f)
------------------------------------------------------------------------

Expand an MXFunction.

>  CasADi::SXFunction::SXFunction(const Function &f)
------------------------------------------------------------------------

Expand an Function.

>  CasADi::SXFunction::SXFunction(const std::vector< SX > &arg, const std::vector< SX > &res)

>  CasADi::SXFunction::SXFunction(const std::vector< SX > &arg, const IOSchemeVector< SX > &res)

>  CasADi::SXFunction::SXFunction(const IOSchemeVector< SX > &arg, const std::vector< SX > &res)

>  CasADi::SXFunction::SXFunction(const IOSchemeVector< SX > &arg, const IOSchemeVector< SX > &res)
------------------------------------------------------------------------

Multiple (matrix valued) input, multiple (matrix valued) output.

>  CasADi::SXFunction::SXFunction(const std::vector< std::vector< SXElement > > &arg, const std::vector< std::vector< SXElement > > &res)
------------------------------------------------------------------------
[INTERNAL] 
Multiple (vector valued) input, multiple (vector valued) output.

>  CasADi::SXFunction::SXFunction(const SX &arg, const SX &res)
------------------------------------------------------------------------
[INTERNAL] 
Single (scalar/matrix/vector valued) input, single
(scalar/matrix/vector valued) output.

>  CasADi::SXFunction::SXFunction(const std::vector< std::vector< SXElement > > &arg, const SX &res)
------------------------------------------------------------------------
[INTERNAL] 
Multiple (vector valued) input, single (scalar/vector/matrix valued)
output.

>  CasADi::SXFunction::SXFunction(const std::vector< SX > &arg, const SX &res)
------------------------------------------------------------------------
[INTERNAL] 
Multiple (matrix valued) input, single (scalar/vector/matrix valued)
output.

>  CasADi::SXFunction::SXFunction(const SX &arg, const std::vector< std::vector< SXElement > > &res)
------------------------------------------------------------------------
[INTERNAL] 
Single (scalar/vector/matrix valued) input, multiple (vector valued)
output.

>  CasADi::SXFunction::SXFunction(const SX &arg, const std::vector< SX > &res)
------------------------------------------------------------------------
[INTERNAL] 
Single (scalar/vector/matrix valued) input, multiple (matrix valued)
output.

";

%feature("docstring") CasADi::SXFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SXFunction::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SXFunction::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SXFunction::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SXFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SXFunction::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SXFunction::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SXFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SXFunction::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::SXFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SXFunction::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SXFunction::getAtomicInputReal "

Get the floating point output argument of an atomic operation.

";

%feature("docstring") CasADi::SXFunction::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SXFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SXFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SXFunction::countNodes "

Number of nodes in the algorithm.

";

%feature("docstring") CasADi::SXFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::SXFunction::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SXFunction::getFree "

Get all the free variables of the function.

";

%feature("docstring") CasADi::SXFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SXFunction::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SXFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SXFunction::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::SXFunction::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SXFunction::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SXFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SXFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SXFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SXFunction::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::SXFunction::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SXFunction::getAtomicOutput "

Get the (integer) output argument of an atomic operation.

";

%feature("docstring") CasADi::SXFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SXFunction::isInit "

Is initialized?

";

%feature("docstring") CasADi::SXFunction::solve "

the same as evaluate()

";

%feature("docstring") CasADi::SXFunction::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SXFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SXFunction::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SXFunction::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::SXFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SXFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SXFunction::getAtomicInput "

Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") CasADi::SXFunction::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::SXFunction::jac "

Jacobian via source code transformation.

See:  CasADi::Jacobian for an AD approach

";

%feature("docstring") CasADi::SXFunction::grad "

Gradient via source code transformation.

";

%feature("docstring") CasADi::SXFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SXFunction::clearSymbolic "

Clear the function from its symbolic representation, to free up memory, no
symbolic evaluations are possible after this.

";

%feature("docstring") CasADi::SXFunction::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SXFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SXFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SXFunction::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SXFunction::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SXFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SXFunction::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SXFunction::getAlgorithmSize "

Get the number of atomic operations.

";

%feature("docstring") CasADi::SXFunction::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SXFunction::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SXFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SXFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";


// File: classCasADi_1_1SXNode.xml
%feature("docstring") CasADi::SXNode::getOp "[INTERNAL]  get the operation

";

%feature("docstring") CasADi::SXNode::marked "[INTERNAL] ";

%feature("docstring") CasADi::SXNode::SXNode "[INTERNAL]  constructor

";

%feature("docstring") CasADi::SXNode::isInf "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::SXNode::getIntValue "[INTERNAL]  Get value of
a constant node.

";

%feature("docstring") CasADi::SXNode::isConstant "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SXNode::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::SXNode::dep "[INTERNAL]  get the reference of
a child

";

%feature("docstring") CasADi::SXNode::isNan "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::SXNode::getValue "[INTERNAL]  Get value of a
constant node.

";

%feature("docstring") CasADi::SXNode::init "[INTERNAL]  Initialize the node
(currently used only to give a similar interface to MXNode)

";

%feature("docstring") CasADi::SXNode::mark "[INTERNAL] ";

%feature("docstring") CasADi::SXNode::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::SXNode::~SXNode "[INTERNAL]  destructor

";

%feature("docstring") CasADi::SXNode::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SXNode "[INTERNAL]  Interal node class for
SX.

Joel Andersson

C++ includes: sx_node.hpp ";

%feature("docstring") CasADi::SXNode::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SXNode::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") CasADi::SXNode::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SXNode::getName "[INTERNAL] ";

%feature("docstring") CasADi::SXNode::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SXNode::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SXNode::print "[INTERNAL]  print

";

%feature("docstring") CasADi::SXNode::hasDep "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::SXNode::isZero "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::SXNode::isOne "[INTERNAL]  check properties
of a node

";


// File: classCasADi_1_1SymbolicMX.xml
%feature("docstring") CasADi::SymbolicMX::size2 "[INTERNAL] ";

%feature("docstring") CasADi::SymbolicMX::evaluateMX "

>  void CasADi::SymbolicMX::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::SymbolicMX::size1 "[INTERNAL] ";

%feature("docstring") CasADi::SymbolicMX::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") CasADi::SymbolicMX::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::SymbolicMX::SymbolicMX "[INTERNAL]
Constructors.

";

%feature("docstring") CasADi::SymbolicMX::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") CasADi::SymbolicMX::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::SymbolicMX::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::SymbolicMX::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::SymbolicMX::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") CasADi::SymbolicMX::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::SymbolicMX::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SymbolicMX::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::SymbolicMX::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::SymbolicMX::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::SymbolicMX::getHorzsplit "[INTERNAL]  Create
a horizontal split node.

";

%feature("docstring") CasADi::SymbolicMX::shape "[INTERNAL] ";

%feature("docstring") CasADi::SymbolicMX::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::SymbolicMX::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::SymbolicMX::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::SymbolicMX::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::SymbolicMX::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::SymbolicMX::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") CasADi::SymbolicMX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::SymbolicMX::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::SymbolicMX::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::SymbolicMX::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::SymbolicMX::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") CasADi::SymbolicMX::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::SymbolicMX::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::SymbolicMX::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::SymbolicMX::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::SymbolicMX::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") CasADi::SymbolicMX::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::SymbolicMX::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::SymbolicMX "[INTERNAL]  Represents a symbolic
MX.

Joel Andersson

C++ includes: symbolic_mx.hpp ";

%feature("docstring") CasADi::SymbolicMX::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::SymbolicMX::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::SymbolicMX::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::SymbolicMX::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::SymbolicMX::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::SymbolicMX::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::SymbolicMX::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::SymbolicMX::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::SymbolicMX::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::SymbolicMX::~SymbolicMX "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::SymbolicMX::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SymbolicMX::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::SymbolicMX::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::SymbolicMX::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::SymbolicMX::getBinarySwitch "[INTERNAL]  Get
a binary operation operation.

";

%feature("docstring") CasADi::SymbolicMX::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::SymbolicMX::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::SymbolicMX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::SymbolicMX::getVertsplit "[INTERNAL]  Create
a vertical split node (vectors only)

";

%feature("docstring") CasADi::SymbolicMX::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::SymbolicMX::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::SymbolicMX::size "[INTERNAL] ";

%feature("docstring") CasADi::SymbolicMX::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::SymbolicMX::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::SymbolicMX::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::SymbolicMX::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::SymbolicMX::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::SymbolicMX::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") CasADi::SymbolicMX::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::SymbolicMX::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::SymbolicMX::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::SymbolicMX::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::SymbolicMX::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") CasADi::SymbolicMX::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::SymbolicMX::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::SymbolicMX::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SymbolicMX::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring") CasADi::SymbolicMX::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") CasADi::SymbolicMX::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::SymbolicMX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::SymbolicMX::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::SymbolicMX::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::SymbolicMX::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::SymbolicMX::getInnerProd "[INTERNAL]  Inner
product.

";


// File: classCasADi_1_1SymbolicNLP.xml


/*  Symbolic representation of the NLP  */

/* Data members

*/ %feature("docstring") CasADi::SymbolicNLP::parseNL "

Parse an AMPL och PyOmo NL-file.

";

%feature("docstring") CasADi::SymbolicNLP::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SymbolicNLP::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SymbolicNLP "[INTERNAL]  A symbolic NLP
representation.

Joel Andersson

C++ includes: symbolic_nlp.hpp ";

%feature("docstring") CasADi::SymbolicNLP::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::SymbolicNLP::repr "[INTERNAL]  Print a
representation of the object.

";


// File: classCasADi_1_1SymbolicOCP.xml


/*  Variables and equations  */

/* Public data members

*/

/*  Objective function terms  */

/* Terms in the objective function.

*/

/*  Manipulation  */

/* Reformulate the dynamic optimization problem.

*/ %feature("docstring") CasADi::SymbolicOCP::repr " [INTERNAL]  Print
representation.

";

%feature("docstring") CasADi::SymbolicOCP::eliminateOutputs "

Eliminate outputs.

";

%feature("docstring") CasADi::SymbolicOCP::min "

>  SX CasADi::SymbolicOCP::min(const std::string &name) const 
------------------------------------------------------------------------

Get the lower bound by name.

>  SX CasADi::SymbolicOCP::min(const SX &var) const 
------------------------------------------------------------------------

Get the lower bound(s) by expression.

";

%feature("docstring") CasADi::SymbolicOCP::setInitialGuess "

>  void CasADi::SymbolicOCP::setInitialGuess(const std::string &name, const SX &val)
------------------------------------------------------------------------

Set the initial guess by name.

>  void CasADi::SymbolicOCP::setInitialGuess(const SX &var, const SX &val)
------------------------------------------------------------------------

Set the initial guess(es) by expression.

";

%feature("docstring") CasADi::SymbolicOCP::eliminateDependentParameters "

Eliminate dependent parameters.

";

%feature("docstring") CasADi::SymbolicOCP "[INTERNAL]  A flat OCP
representation coupled to an XML file.

Variables:

x:      differential states z:      algebraic states p : independent
parameters t :     time u :     control signals q : quadrature states y :
dependent variables

Equations:

explicit or implicit ODE: \\\\dot{x} = ode(t,x,z,u,p_free,pi,pd) or 0 =
ode(t,x,z,\\\\dot{x},u,p_free,pi,pd) algebraic equations: 0 =
alg(t,x,z,u,p_free,pi,pd) quadratures:              \\\\dot{q} =
quad(t,x,z,u,p_free,pi,pd) dependent equations:            y =
dep(t,x,z,u,p_free,pi,pd) initial equations:              0 =
initial(t,x,z,u,p_free,pi,pd)

Objective function terms:

Mayer terms:          \\\\sum{mterm_k} Lagrange terms:
\\\\sum{\\\\integral{mterm}}

Note that when parsed, all dynamic equations end up in the implicit category
\"dae\". At a later state, the DAE can be reformulated, for example in semi-
explicit form, possibly in addition to a set of quadrature states.

Usage skeleton:

Call default constructor  SymbolicOCP ocp;

Parse an FMI conformant XML file ocp.parseFMI(xml_file_name)

Modify/add variables, equations, optimization ...

When the optimal control problem is in a suitable form, it is possible to
either generate functions for numeric/symbolic evaluation or exporting the
OCP formulation into a new FMI conformant XML file. The latter functionality
is not yet available.

Joel Andersson

C++ includes: symbolic_ocp.hpp ";

%feature("docstring") CasADi::SymbolicOCP::max "

>  SX CasADi::SymbolicOCP::max(const std::string &name) const 
------------------------------------------------------------------------

Get the upper bound by name.

>  SX CasADi::SymbolicOCP::max(const SX &var) const 
------------------------------------------------------------------------

Get the upper bound(s) by expression.

";

%feature("docstring") CasADi::SymbolicOCP::addVariable "

Add a variable.

";

%feature("docstring") CasADi::SymbolicOCP::nominal "

>  double CasADi::SymbolicOCP::nominal(const std::string &name) const 
------------------------------------------------------------------------

Get the nominal value by name.

>  std::vector< double > CasADi::SymbolicOCP::nominal(const SX &var) const 
------------------------------------------------------------------------

Get the nominal value(s) by expression.

";

%feature("docstring") CasADi::SymbolicOCP::start "

>  double CasADi::SymbolicOCP::start(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) value at time 0 by name.

>  std::vector< double > CasADi::SymbolicOCP::start(const SX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring") CasADi::SymbolicOCP::initialGuess "

>  SX CasADi::SymbolicOCP::initialGuess(const std::string &name) const 
------------------------------------------------------------------------

Get the initial guess by name.

>  SX CasADi::SymbolicOCP::initialGuess(const SX &var) const 
------------------------------------------------------------------------

Get the initial guess(es) by expression.

";

%feature("docstring") CasADi::SymbolicOCP::sortDAE "

Sort the DAE and implictly defined states.

";

%feature("docstring") CasADi::SymbolicOCP::atTime "

>  SX CasADi::SymbolicOCP::atTime(const std::string &name, double t, bool allocate=false) const 
------------------------------------------------------------------------

Timed variable (never allocate)

>  SX CasADi::SymbolicOCP::atTime(const std::string &name, double t, bool allocate=false)
------------------------------------------------------------------------

Timed variable (allocate if necessary)

";

%feature("docstring") CasADi::SymbolicOCP::unit "

>  std::string CasADi::SymbolicOCP::unit(const std::string &name) const 
------------------------------------------------------------------------

Get the unit for a component.

>  std::string CasADi::SymbolicOCP::unit(const SX &var) const 
------------------------------------------------------------------------

Get the unit given a vector of symbolic variables (all units must be
identical)

";

%feature("docstring") CasADi::SymbolicOCP::sortOutputs "

Sort the outputs.

";

%feature("docstring") CasADi::SymbolicOCP::scaleVariables "

Scale the variables.

";

%feature("docstring") CasADi::SymbolicOCP::makeSemiExplicit "

Transform the implicit DAE to a semi-explicit DAE.

";

%feature("docstring") CasADi::SymbolicOCP::eliminateAlgebraic "

Eliminate algebraic variables, transforming them into outputs.

";

%feature("docstring") CasADi::SymbolicOCP::eliminateIndependentParameters "

Eliminate independent parameters.

";

%feature("docstring") CasADi::SymbolicOCP::generateMuscodDatFile "

Generate a MUSCOD-II compatible DAT file.

";

%feature("docstring") CasADi::SymbolicOCP::setNominal "

>  void CasADi::SymbolicOCP::setNominal(const std::string &name, double val)
------------------------------------------------------------------------

Set the nominal value by name.

>  void CasADi::SymbolicOCP::setNominal(const SX &var, const std::vector< double > &val)
------------------------------------------------------------------------

Set the nominal value(s) by expression.

";

%feature("docstring") CasADi::SymbolicOCP::variable "

Access a variable by name.

";

%feature("docstring") CasADi::SymbolicOCP::setOde "

>  void CasADi::SymbolicOCP::setOde(const std::string &name, const SX &val)
------------------------------------------------------------------------

Set a derivative binding equation by name.

>  void CasADi::SymbolicOCP::setOde(const SX &var, const SX &val)
------------------------------------------------------------------------

Set an derivative binding expression by non-differentiated expression.

";

%feature("docstring") CasADi::SymbolicOCP::separateAlgebraic "

Identify and separate the algebraic variables and equations in the DAE.

";

%feature("docstring") CasADi::SymbolicOCP::eliminateLagrangeTerms "

Eliminate Lagrange terms from the objective function and make them
quadrature states.

";

%feature("docstring") CasADi::SymbolicOCP::setDerivativeStart "

>  void CasADi::SymbolicOCP::setDerivativeStart(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) derivative value at time 0 by name.

>  void CasADi::SymbolicOCP::setDerivativeStart(const SX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring") CasADi::SymbolicOCP::scaleEquations "

Scale the implicit equations.

";

%feature("docstring") CasADi::SymbolicOCP::derivativeStart "

>  double CasADi::SymbolicOCP::derivativeStart(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) derivative value at time 0 by name.

>  std::vector< double > CasADi::SymbolicOCP::derivativeStart(const SX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring") CasADi::SymbolicOCP::print "[INTERNAL]  Print
description.

";

%feature("docstring") CasADi::SymbolicOCP::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SymbolicOCP::eliminateQuadratureStates "

Eliminate quadrature states and turn them into ODE states.

";

%feature("docstring") CasADi::SymbolicOCP::sortALG "

Sort the algebraic equations and algebraic states.

";

%feature("docstring") CasADi::SymbolicOCP::eliminateOutputInterdependencies
"

Eliminate interdependencies amongst the outputs.

";

%feature("docstring") CasADi::SymbolicOCP::parseFMI "

Parse from XML to C++ format.

";

%feature("docstring") CasADi::SymbolicOCP::setStart "

>  void CasADi::SymbolicOCP::setStart(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) value at time 0 by name.

>  void CasADi::SymbolicOCP::setStart(const SX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring") CasADi::SymbolicOCP::makeExplicit "

Transform the implicit DAE or semi-explicit DAE into an explicit ODE.

";

%feature("docstring") CasADi::SymbolicOCP::ode "

>  SX CasADi::SymbolicOCP::ode(const std::string &name) const 
------------------------------------------------------------------------

Get a derivative binding equation (i.e. ordinary differential equation, ODE)
by name. Returns variable expression if unknwon.

>  SX CasADi::SymbolicOCP::ode(const SX &var) const 
------------------------------------------------------------------------

Get a derivative binding expression (i.e. ordinary differential equation,
ODE) by non-differentiated expression. Returns derivative expression if
unknown.

";

%feature("docstring") CasADi::SymbolicOCP::setUnit "

Set the unit for a component.

";

%feature("docstring") CasADi::SymbolicOCP::setMax "

>  void CasADi::SymbolicOCP::setMax(const std::string &name, const SX &val)
------------------------------------------------------------------------

Set the upper bound by name.

>  void CasADi::SymbolicOCP::setMax(const SX &var, const SX &val)
------------------------------------------------------------------------

Set the upper bound(s) by expression.

";

%feature("docstring") CasADi::SymbolicOCP::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SymbolicOCP::SymbolicOCP "

Default constructor.

";

%feature("docstring") CasADi::SymbolicOCP::sortDependentParameters "

Sort the dependent parameters.

";

%feature("docstring")
CasADi::SymbolicOCP::eliminateDependentParameterInterdependencies "

Eliminate interdependencies amongst the dependent parameters.

";

%feature("docstring") CasADi::SymbolicOCP::beq "

>  SX CasADi::SymbolicOCP::beq(const std::string &name) const 
------------------------------------------------------------------------

Get a binding equation by name.

>  SX CasADi::SymbolicOCP::beq(const SX &var) const 
------------------------------------------------------------------------

Get a binding equation by non-differentiated expression.

";

%feature("docstring") CasADi::SymbolicOCP::setBeq "

>  void CasADi::SymbolicOCP::setBeq(const std::string &name, const SX &val)
------------------------------------------------------------------------

Set a binding equation by name.

>  void CasADi::SymbolicOCP::setBeq(const SX &var, const SX &val)
------------------------------------------------------------------------

Set an binding expression by non-differentiated expression.

";

%feature("docstring") CasADi::SymbolicOCP::setMin "

>  void CasADi::SymbolicOCP::setMin(const std::string &name, const SX &val)
------------------------------------------------------------------------

Set the lower bound by name.

>  void CasADi::SymbolicOCP::setMin(const SX &var, const SX &val)
------------------------------------------------------------------------

Set the lower bound(s) by expression.

";

%feature("docstring") CasADi::SymbolicOCP::der "

>  SX CasADi::SymbolicOCP::der(const std::string &name) const 
------------------------------------------------------------------------

Get a derivative expression by name.

>  SX CasADi::SymbolicOCP::der(const SX &var) const 
------------------------------------------------------------------------

Get a derivative expression by non-differentiated expression.

";


// File: classCasADi_1_1SymbolicQR.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::SymbolicQR::outputSchemeEntry " [INTERNAL]  Find the index for a
string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SymbolicQR::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::SymbolicQR::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SymbolicQR::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::SymbolicQR::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::SymbolicQR::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SymbolicQR::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::SymbolicQR::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::SymbolicQR::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::SymbolicQR::spSolve "[INTERNAL]  Propagate
sparsity through a linear solve.

";

%feature("docstring") CasADi::SymbolicQR::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::SymbolicQR::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::SymbolicQR::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::SymbolicQR::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional derivatives forward or
backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SymbolicQR::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::SymbolicQR::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::SymbolicQR::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::SymbolicQR::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::SymbolicQR::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SymbolicQR::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::SymbolicQR::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::SymbolicQR::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SymbolicQR::SymbolicQR "

>  CasADi::SymbolicQR::SymbolicQR()
------------------------------------------------------------------------

Default (empty) constructor.

>  CasADi::SymbolicQR::SymbolicQR(const Sparsity &sp, int nrhs=1)
------------------------------------------------------------------------

Create a linear solver given a sparsity pattern.

";

%feature("docstring") CasADi::SymbolicQR::evaluate "

Evaluate.

";

%feature("docstring") CasADi::SymbolicQR::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SymbolicQR::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SymbolicQR::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::SymbolicQR::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::SymbolicQR::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::SymbolicQR::isInit "

Is initialized?

";

%feature("docstring") CasADi::SymbolicQR::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::SymbolicQR::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SymbolicQR::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::SymbolicQR::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::SymbolicQR::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::SymbolicQR::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SymbolicQR::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::SymbolicQR::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::SymbolicQR::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::SymbolicQR::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::SymbolicQR::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::SymbolicQR::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::SymbolicQR::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::SymbolicQR::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::SymbolicQR::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::SymbolicQR::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::SymbolicQR::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SymbolicQR::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::SymbolicQR::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::SymbolicQR::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::SymbolicQR::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::SymbolicQR::spCanEvaluate "[INTERNAL]  Is the
class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SymbolicQR::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::SymbolicQR::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::SymbolicQR::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SymbolicQR::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::SymbolicQR::solve "

>  void CasADi::LinearSolver::solve(bool transpose=false)
------------------------------------------------------------------------

Solve the system of equations, internal vector.

>  void CasADi::LinearSolver::solve(double *x, int nrhs=1, bool transpose=false)
------------------------------------------------------------------------
[INTERNAL] 
 Solve the factorized system of equations.

>  MX CasADi::LinearSolver::solve(const MX &A, const MX &B, bool transpose=false)
------------------------------------------------------------------------

Create a solve node.

>  void CasADi::Function::solve()
------------------------------------------------------------------------

the same as evaluate()

";

%feature("docstring") CasADi::SymbolicQR::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::SymbolicQR::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::SymbolicQR::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::SymbolicQR::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::SymbolicQR::prepare "

Factorize the matrix.

";

%feature("docstring") CasADi::SymbolicQR::prepared "

Check if prepared.

";

%feature("docstring") CasADi::SymbolicQR::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::SymbolicQR::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::SymbolicQR::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SymbolicQR::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::SymbolicQR::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SymbolicQR::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::SymbolicQR::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::SymbolicQR::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::SymbolicQR "[INTERNAL]   LinearSolver based
on QR factorization with sparsity pattern based reordering without partial
pivoting.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail. Joel Andersson

>Input scheme: CasADi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: CasADi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| codegen      | OT_BOOLEAN   | false        | C-code       | CasADi::Symb |
|              |              |              | generation   | olicQRIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| compiler     | OT_STRING    | \"gcc -fPIC   | Compiler     | CasADi::Symb |
|              |              | -O2\"         | command to   | olicQRIntern |
|              |              |              | be used for  | al           |
|              |              |              | compiling    |              |
|              |              |              | generated    |              |
|              |              |              | code         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: symbolic_qr.hpp ";

%feature("docstring") CasADi::SymbolicQR::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::SymbolicQR::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::SymbolicQR::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::SymbolicQR::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::SymbolicQR::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::SymbolicQR::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::SymbolicQR::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::SymbolicQR::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::SymbolicQR::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::SymbolicQR::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::SymbolicQR::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::SymbolicQR::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::SymbolicQR::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::SymbolicQR::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::SymbolicQR::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::SymbolicQR::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::SymbolicQR::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::SymbolicQR::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::SymbolicQR::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::SymbolicQR::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::SymbolicQR::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::SymbolicQR::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::SymbolicQR::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::SymbolicQR::getOption "

get an option value

";

%feature("docstring") CasADi::SymbolicQR::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::SymbolicQR::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::SymbolicQR::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";


// File: classCasADi_1_1SymbolicSX.xml
%feature("docstring") CasADi::SymbolicSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::SymbolicSX::SymbolicSX "[INTERNAL] ";

%feature("docstring") CasADi::SymbolicSX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") CasADi::SymbolicSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::SymbolicSX::print "[INTERNAL]  print

";

%feature("docstring") CasADi::SymbolicSX::~SymbolicSX "[INTERNAL] ";

%feature("docstring") CasADi::SymbolicSX::isZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SymbolicSX::mark "[INTERNAL] ";

%feature("docstring") CasADi::SymbolicSX::dep "[INTERNAL]  get the
reference of a child

";

%feature("docstring") CasADi::SymbolicSX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SymbolicSX::isNan "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SymbolicSX::getValue "[INTERNAL]  Get value
of a constant node.

";

%feature("docstring") CasADi::SymbolicSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SymbolicSX::isOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SymbolicSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SymbolicSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SymbolicSX "[INTERNAL]  Represents a scalar
symbolic expression.

Joel Andersson

C++ includes: symbolic_sx.hpp ";

%feature("docstring") CasADi::SymbolicSX::hasDep "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SymbolicSX::isInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SymbolicSX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") CasADi::SymbolicSX::getName "[INTERNAL] ";

%feature("docstring") CasADi::SymbolicSX::isConstant "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SymbolicSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::SymbolicSX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::SymbolicSX::getIntValue "[INTERNAL]  Get
value of a constant node.

";

%feature("docstring") CasADi::SymbolicSX::marked "[INTERNAL] ";


// File: classCasADi_1_1Transpose.xml
%feature("docstring") CasADi::Transpose::isEqual "[INTERNAL]   Solve for
square linear system.

Check if two nodes are equivalent up to a given depth

";

%feature("docstring") CasADi::Transpose::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Transpose::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::Transpose::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Transpose::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Transpose::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Transpose::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Transpose::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") CasADi::Transpose::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::Transpose::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Transpose::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::Transpose::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Transpose::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::Transpose::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Transpose::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Transpose::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Transpose::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Transpose::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Transpose::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Transpose::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") CasADi::Transpose::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") CasADi::Transpose::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Transpose::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Transpose::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Transpose::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Transpose::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::Transpose::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Transpose::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::Transpose::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Transpose::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Transpose::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Transpose::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::Transpose::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") CasADi::Transpose::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Transpose::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Transpose::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") CasADi::Transpose::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::Transpose::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::Transpose::shape "[INTERNAL] ";

%feature("docstring") CasADi::Transpose::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Transpose::size "[INTERNAL] ";

%feature("docstring") CasADi::Transpose::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Transpose::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Transpose::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Transpose::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Transpose::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::Transpose::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Transpose::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Transpose::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::Transpose::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::Transpose::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::Transpose::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Transpose::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Transpose::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Transpose::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Transpose::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") CasADi::Transpose::evaluateMX "

>  void CasADi::Transpose::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Transpose::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::Transpose::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Transpose::printPart "[INTERNAL]  Print a
part of the expression */.

";

%feature("docstring") CasADi::Transpose "[INTERNAL]   Matrix transpose.

Joel Andersson

C++ includes: transpose.hpp ";

%feature("docstring") CasADi::Transpose::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Transpose::Transpose "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::Transpose::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Transpose::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Transpose::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::Transpose::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::Transpose::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Transpose::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::Transpose::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::Transpose::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::Transpose::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Transpose::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Transpose::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Transpose::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Transpose::~Transpose "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::Transpose::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Transpose::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::Transpose::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Transpose::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::Transpose::propagateSparsity "

>  void CasADi::Transpose::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void CasADi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") CasADi::Transpose::getOutput "[INTERNAL]  Get an
output.

";


// File: classCasADi_1_1UnaryMX.xml
%feature("docstring") CasADi::UnaryMX::~UnaryMX "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::UnaryMX::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::UnaryMX::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::UnaryMX::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") CasADi::UnaryMX::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::UnaryMX::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::UnaryMX::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::UnaryMX::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::UnaryMX::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::UnaryMX::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::UnaryMX::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::UnaryMX::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::UnaryMX::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::UnaryMX::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::UnaryMX::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::UnaryMX::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::UnaryMX::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::UnaryMX::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::UnaryMX::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::UnaryMX::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::UnaryMX::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::UnaryMX::shape "[INTERNAL] ";

%feature("docstring") CasADi::UnaryMX::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::UnaryMX::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::UnaryMX::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::UnaryMX::getBinary "[INTERNAL]  Get a binary
operation operation.

";

%feature("docstring") CasADi::UnaryMX::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::UnaryMX "[INTERNAL]  Represents a general
unary operation on an MX.

Joel Andersson

C++ includes: unary_mx.hpp ";

%feature("docstring") CasADi::UnaryMX::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::UnaryMX::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::UnaryMX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::UnaryMX::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::UnaryMX::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") CasADi::UnaryMX::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::UnaryMX::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") CasADi::UnaryMX::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::UnaryMX::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::UnaryMX::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::UnaryMX::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::UnaryMX::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::UnaryMX::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::UnaryMX::UnaryMX "[INTERNAL]  Constructor is
private, use \"create\" below.

";

%feature("docstring") CasADi::UnaryMX::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::UnaryMX::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::UnaryMX::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") CasADi::UnaryMX::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::UnaryMX::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::UnaryMX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::UnaryMX::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::UnaryMX::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::UnaryMX::size "[INTERNAL] ";

%feature("docstring") CasADi::UnaryMX::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::UnaryMX::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::UnaryMX::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::UnaryMX::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::UnaryMX::printPart "[INTERNAL]  Print a part
of the expression.

";

%feature("docstring") CasADi::UnaryMX::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::UnaryMX::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::UnaryMX::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::UnaryMX::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::UnaryMX::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::UnaryMX::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::UnaryMX::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::UnaryMX::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::UnaryMX::evaluateMX "

>  void CasADi::UnaryMX::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::UnaryMX::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::UnaryMX::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") CasADi::UnaryMX::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::UnaryMX::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::UnaryMX::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::UnaryMX::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::UnaryMX::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::UnaryMX::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::UnaryMX::size1 "[INTERNAL] ";

%feature("docstring") CasADi::UnaryMX::size2 "[INTERNAL] ";

%feature("docstring") CasADi::UnaryMX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::UnaryMX::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::UnaryMX::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::UnaryMX::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::UnaryMX::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::UnaryMX::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";


// File: structCasADi_1_1UnaryOperation.xml
%feature("docstring") CasADi::UnaryOperation "[INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__ACOS_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_ACOS > " [INTERNAL]  Arcus
cosine.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__ACOSH_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_ACOSH > " [INTERNAL]
Inverse hyperbolic cosine.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__ASIN_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_ASIN > " [INTERNAL]  Arcus
sine.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__ASINH_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_ASINH > " [INTERNAL]
Inverse hyperbolic sine.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__ASSIGN_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_ASSIGN > " [INTERNAL]
Simple assignment.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__ATAN_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_ATAN > " [INTERNAL]  Arcus
tangent.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__ATANH_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_ATANH > " [INTERNAL]
Inverse hyperbolic tangent.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__CEIL_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_CEIL > " [INTERNAL]  Ceil
function.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__COS_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_COS > " [INTERNAL]  Cosine.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__COSH_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_COSH > " [INTERNAL]
Hyperbolic cosine.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__ERF_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_ERF > " [INTERNAL]  Error
function.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__ERFINV_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_ERFINV > " [INTERNAL]
Inverse of error function.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__EXP_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_EXP > " [INTERNAL]  Natural
exponent.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__FABS_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_FABS > " [INTERNAL]
Absolute value.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__FLOOR_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_FLOOR > " [INTERNAL]  Floor
function.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__INV_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_INV > " [INTERNAL]
Elementwise inverse.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__LOG_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_LOG > " [INTERNAL]  Natural
logarithm.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__NEG_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_NEG > " [INTERNAL]
Negation.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__NOT_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_NOT > " [INTERNAL]  Logical
not.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__SIGN_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_SIGN > " [INTERNAL]  Sign.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__SIN_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_SIN > " [INTERNAL]  Sine.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__SINH_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_SINH > " [INTERNAL]
Hyperbolic sine.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__SQ_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_SQ > " [INTERNAL]  Square.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__SQRT_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_SQRT > " [INTERNAL]  Square
root.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__TAN_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_TAN > " [INTERNAL]
Tangent.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__TANH_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_TANH > " [INTERNAL]
Hyperbolic tangent.

C++ includes: casadi_calculus.hpp ";


// File: structCasADi_1_1UnaryOperation_3_01OP__TWICE_01_4.xml
%feature("docstring") CasADi::UnaryOperation< OP_TWICE > " [INTERNAL]  Times
two.

C++ includes: casadi_calculus.hpp ";


// File: classCasADi_1_1UnarySX.xml
%feature("docstring") CasADi::UnarySX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::UnarySX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::UnarySX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::UnarySX::isZero "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::UnarySX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::UnarySX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::UnarySX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::UnarySX::mark "[INTERNAL] ";

%feature("docstring") CasADi::UnarySX "[INTERNAL]  Represents a basic unary
operation on an SXElement node.

Joel Andersson

C++ includes: unary_sx.hpp ";

%feature("docstring") CasADi::UnarySX::print "

>  virtual void CasADi::UnarySX::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print the expression (recursively with a maximum number of levels)

>  void CasADi::SXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
print

";

%feature("docstring") CasADi::UnarySX::getIntValue "[INTERNAL]  Get value
of a constant node.

";

%feature("docstring") CasADi::UnarySX::isOne "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::UnarySX::getName "[INTERNAL] ";

%feature("docstring") CasADi::UnarySX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::UnarySX::hasDep "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::UnarySX::isConstant "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::UnarySX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::UnarySX::isInf "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::UnarySX::~UnarySX "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::UnarySX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") CasADi::UnarySX::getValue "[INTERNAL]  Get value of a
constant node.

";

%feature("docstring") CasADi::UnarySX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") CasADi::UnarySX::isNan "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::UnarySX::marked "[INTERNAL] ";

%feature("docstring") CasADi::UnarySX::dep "

>  virtual const SXElement& CasADi::UnarySX::dep(int i) const 
------------------------------------------------------------------------
[INTERNAL] 
get the reference of a dependency

>  virtual SXElement& CasADi::UnarySX::dep(int i)
------------------------------------------------------------------------
[INTERNAL] 
get the reference of a child

";


// File: structCasADi_1_1Variable.xml
%feature("docstring") CasADi::Variable "[INTERNAL]  Holds expressions and
meta-data corresponding to a physical quantity evolving in time.

Joel Andersson

C++ includes: variable.hpp ";

%feature("docstring") CasADi::Variable::setName "

Set the variable name (and corresponding expressions)

";

%feature("docstring") CasADi::Variable::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::Variable::name "

Variable name.

";

%feature("docstring") CasADi::Variable::Variable "

Default constructor.

";

%feature("docstring") CasADi::Variable::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::Variable::atTime "

>  SXElement CasADi::Variable::atTime(double t, bool allocate=false) const 
------------------------------------------------------------------------

Timed variable (never allocate)

>  SXElement CasADi::Variable::atTime(double t, bool allocate=false)
------------------------------------------------------------------------

Timed variable (allocate if necessary)

";


// File: classCasADi_1_1Vertcat.xml
%feature("docstring") CasADi::Vertcat::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::Vertcat::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Vertcat::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Vertcat::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::Vertcat::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Vertcat::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Vertcat::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Vertcat::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::Vertcat::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Vertcat::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Vertcat::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::Vertcat::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Vertcat::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Vertcat::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") CasADi::Vertcat::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::Vertcat::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Vertcat::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") CasADi::Vertcat::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Vertcat::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::Vertcat::printPart "[INTERNAL]  Print a part
of the expression */.

";

%feature("docstring") CasADi::Vertcat::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Vertcat::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Vertcat::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::Vertcat::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Vertcat::size "[INTERNAL] ";

%feature("docstring") CasADi::Vertcat::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Vertcat::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Vertcat::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::Vertcat::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Vertcat::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Vertcat::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Vertcat::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Vertcat::Vertcat "[INTERNAL]  Constructor.

";

%feature("docstring") CasADi::Vertcat::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::Vertcat::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Vertcat::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::Vertcat::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Vertcat::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Vertcat::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Vertcat::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") CasADi::Vertcat::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Vertcat::shape "[INTERNAL] ";

%feature("docstring") CasADi::Vertcat::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Vertcat::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Vertcat::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Vertcat::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") CasADi::Vertcat::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Vertcat::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Vertcat::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") CasADi::Vertcat::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Vertcat::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Vertcat::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Vertcat::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Vertcat "[INTERNAL]  Vertical concatenation
of vectors.

Joel Andersson

C++ includes: concat.hpp ";

%feature("docstring") CasADi::Vertcat::~Vertcat "[INTERNAL]  Destructor.

";

%feature("docstring") CasADi::Vertcat::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Vertcat::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Vertcat::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Vertcat::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Vertcat::evaluateMX "

>  void CasADi::Vertcat::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Vertcat::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Vertcat::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Vertcat::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") CasADi::Vertcat::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") CasADi::Vertcat::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::Vertcat::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::Vertcat::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") CasADi::Vertcat::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::Vertcat::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") CasADi::Vertcat::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Vertcat::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") CasADi::Vertcat::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") CasADi::Vertcat::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Vertcat::getNorm2 "[INTERNAL]  Spectran norm.

";

%feature("docstring") CasADi::Vertcat::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Vertcat::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::Vertcat::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Vertcat::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Vertcat::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Vertcat::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") CasADi::Vertcat::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::Vertcat::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";


// File: classCasADi_1_1Vertsplit.xml
%feature("docstring") CasADi::Vertsplit::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::Vertsplit::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::Vertsplit::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::Vertsplit::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::Vertsplit::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") CasADi::Vertsplit::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::Vertsplit::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::Vertsplit::clone "[INTERNAL]  Clone function.

";

%feature("docstring") CasADi::Vertsplit::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::Vertsplit::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::Vertsplit::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") CasADi::Vertsplit::size "[INTERNAL] ";

%feature("docstring") CasADi::Vertsplit::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::Vertsplit::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::Vertsplit::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::Vertsplit::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::Vertsplit::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Vertsplit::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::Vertsplit::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::Vertsplit::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") CasADi::Vertsplit::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::Vertsplit::shape "[INTERNAL] ";

%feature("docstring") CasADi::Vertsplit::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::Vertsplit::printPart "[INTERNAL]  Print a
part of the expression */.

";

%feature("docstring") CasADi::Vertsplit::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::Vertsplit::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::Vertsplit::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::Vertsplit::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::Vertsplit::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::Vertsplit::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") CasADi::Vertsplit::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::Vertsplit::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::Vertsplit::Vertsplit "[INTERNAL]
Constructor.

";

%feature("docstring") CasADi::Vertsplit::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::Vertsplit::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::Vertsplit::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::Vertsplit::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::Vertsplit::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") CasADi::Vertsplit::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::Vertsplit "[INTERNAL]  Vertical split of
vectors, x -> x0, x1,...

Joel Andersson

C++ includes: split.hpp ";

%feature("docstring") CasADi::Vertsplit::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") CasADi::Vertsplit::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") CasADi::Vertsplit::evaluateMX "

>  void CasADi::Vertsplit::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") CasADi::Vertsplit::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::Vertsplit::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::Vertsplit::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::Vertsplit::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") CasADi::Vertsplit::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::Vertsplit::size2 "[INTERNAL] ";

%feature("docstring") CasADi::Vertsplit::~Vertsplit "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::Vertsplit::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::Vertsplit::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::Vertsplit::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::Vertsplit::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::Vertsplit::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::Vertsplit::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::Vertsplit::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::Vertsplit::sparsity "

>  virtual const Sparsity& CasADi::Split::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

";

%feature("docstring") CasADi::Vertsplit::getName "[INTERNAL]  Get the name.

";

%feature("docstring") CasADi::Vertsplit::size1 "[INTERNAL] ";

%feature("docstring") CasADi::Vertsplit::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::Vertsplit::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::Vertsplit::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::Vertsplit::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::Vertsplit::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::Vertsplit::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::Vertsplit::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::Vertsplit::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") CasADi::Vertsplit::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") CasADi::Vertsplit::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::Vertsplit::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::Vertsplit::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") CasADi::Vertsplit::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::Vertsplit::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::Vertsplit::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::Vertsplit::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::Vertsplit::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::Vertsplit::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") CasADi::Vertsplit::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") CasADi::Vertsplit::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::Vertsplit::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::Vertsplit::getReshape "[INTERNAL]   Reshape.

";


// File: classCasADi_1_1WeakRef.xml
%feature("docstring") CasADi::WeakRef::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") CasADi::WeakRef::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::WeakRef::WeakRef "

>  CasADi::WeakRef::WeakRef(int dummy=0)
------------------------------------------------------------------------
[INTERNAL] 
Default constructor.

>  CasADi::WeakRef::WeakRef(SharedObject shared)
------------------------------------------------------------------------
[INTERNAL] 
Construct from a shared object (also implicit type conversion)

";

%feature("docstring") CasADi::WeakRef::init "[INTERNAL]  Initialize or re-
initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::WeakRef::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
If there are other references to the object, then make a deep copy of
it and point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::WeakRef::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::WeakRef::checkNode "[INTERNAL]  Assert that
the node is pointing to the right type of object

";

%feature("docstring") CasADi::WeakRef::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") CasADi::WeakRef::shared "[INTERNAL]  Get a shared
(owning) reference.

";

%feature("docstring") CasADi::WeakRef::isInit "[INTERNAL]  Is initialized?

";

%feature("docstring") CasADi::WeakRef::alive "[INTERNAL]  Check if alive.

";

%feature("docstring") CasADi::WeakRef::isNull "[INTERNAL]  Is a null
pointer?

";

%feature("docstring") CasADi::WeakRef "[INTERNAL]  Weak reference type A
weak reference to a SharedObject.

Joel Andersson

C++ includes: weak_ref.hpp ";

%feature("docstring") CasADi::WeakRef::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") CasADi::WeakRef::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::WeakRef::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::WeakRef::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::WeakRef::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::WeakRef::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::WeakRef::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::WeakRef::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::WeakRef::getDescription "[INTERNAL]  Return a
string with a destription (for SWIG)

";


// File: classCasADi_1_1WorhpSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
CasADi::WorhpSolver::makeUnique "

>  void CasADi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") CasADi::WorhpSolver::eval "

[DEPRECATED]

";

%feature("docstring") CasADi::WorhpSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::WorhpSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") CasADi::WorhpSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::WorhpSolver::callParallel "

Evaluate symbolically in parallel (matrix graph) paropt: Set of options to
be passed to the Parallelizer.

";

%feature("docstring") CasADi::WorhpSolver::getDescription "

Return a string with a destription (for SWIG)

";

%feature("docstring") CasADi::WorhpSolver::inputS "

>  DMatrix& CasADi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& CasADi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") CasADi::WorhpSolver::isInit "

Is initialized?

";

%feature("docstring") CasADi::WorhpSolver::nlp "

Access the NLP.

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::WorhpSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::WorhpSolver::setDerivative "

Set a function that calculates nfwd forward dedrivatives and nadj adjoint
derivatives NOTE: Does not take ownership, only weak references to the
derivatives are kept internally

";

%feature("docstring") CasADi::WorhpSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") CasADi::WorhpSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::WorhpSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::WorhpSolver::getOption "

get an option value

";

%feature("docstring") CasADi::WorhpSolver::setOptionsFromFile "

Read options from worhp parameter xml.

";

%feature("docstring") CasADi::WorhpSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") CasADi::WorhpSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") CasADi::WorhpSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") CasADi::WorhpSolver::setInput "

>  void CasADi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::WorhpSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") CasADi::WorhpSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") CasADi::WorhpSolver::output_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::WorhpSolver::hasOption "

check if there is an option str

";

%feature("docstring") CasADi::WorhpSolver::outputS "

>  DMatrix& CasADi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& CasADi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") CasADi::WorhpSolver::print "[INTERNAL]  Print a
destription of the object.

";

%feature("docstring") CasADi::WorhpSolver::setOption "

>  void CasADi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void CasADi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") CasADi::WorhpSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") CasADi::WorhpSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") CasADi::WorhpSolver::generateCode "

>  void CasADi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string CasADi::Function::generateCode()

>  void CasADi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") CasADi::WorhpSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::WorhpSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") CasADi::WorhpSolver::getReportConstraints "";

%feature("docstring") CasADi::WorhpSolver::getOutput "

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void CasADi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::WorhpSolver::spInit "[INTERNAL]  Reset the
sparsity propagation (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::WorhpSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::WorhpSolver::gradF "

Access the objective gradient function>Input scheme: CasADi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") CasADi::WorhpSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") CasADi::WorhpSolver::evalSX "

[DEPRECATED]

";

%feature("docstring") CasADi::WorhpSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") CasADi::WorhpSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") CasADi::WorhpSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") CasADi::WorhpSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::WorhpSolver::get "

>  const SharedObjectNode * CasADi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * CasADi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") CasADi::WorhpSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::WorhpSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") CasADi::WorhpSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") CasADi::WorhpSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") CasADi::WorhpSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") CasADi::WorhpSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") CasADi::WorhpSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::WorhpSolver::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: CasADi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: CasADi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") CasADi::WorhpSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") CasADi::WorhpSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propate seeds through the algorithm? (for usage, see the
example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::WorhpSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") CasADi::WorhpSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") CasADi::WorhpSolver::setOutput "

>  void CasADi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void CasADi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") CasADi::WorhpSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional derivatives
forward or backward (for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") CasADi::WorhpSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") CasADi::WorhpSolver::printOptions "

Print options to a stream.

";

%feature("docstring") CasADi::WorhpSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") CasADi::WorhpSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") CasADi::WorhpSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting: inproper
use will cause memory leaks!

";

%feature("docstring") CasADi::WorhpSolver::input_struct "[INTERNAL]
Input/output structures of the function */.

";

%feature("docstring") CasADi::WorhpSolver "[INTERNAL]  interface to WORHP
NLP solver

Solves the following parametric nonlinear program (NLP):min          F(x,p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x,p) <= UBG
p  == P nx: number of decision variables     ng: number of constraints
np: number of parameters

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| AcceptTolFea | OT_REAL      | 0.001        | Tolerance    | CasADi::Worh |
| s            |              |              | for          | pInternal    |
|              |              |              | acceptable   |              |
|              |              |              | feasibility  |              |
+--------------+--------------+--------------+--------------+--------------+
| AcceptTolOpt | OT_REAL      | 0.001        | Tolerance    | CasADi::Worh |
| i            |              |              | for          | pInternal    |
|              |              |              | acceptable   |              |
|              |              |              | optimality   |              |
+--------------+--------------+--------------+--------------+--------------+
| AlphaMinCons | OT_BOOLEAN   | False        | Use a        | CasADi::Worh |
| t            |              |              | constant     | pInternal    |
|              |              |              | lower bound  |              |
|              |              |              | on Armijo    |              |
|              |              |              | stepsize in  |              |
|              |              |              | Filter       |              |
+--------------+--------------+--------------+--------------+--------------+
| Ares         | OT_INTEGERVE | [42, 41, 42, | Armijo       | CasADi::Worh |
|              | CTOR         | 43, 44, 41,  | recovery     | pInternal    |
|              |              | 50]          | strategies.  |              |
|              |              |              | Vector of    |              |
|              |              |              | size 7       |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoBeta   | OT_REAL      | 0.712        | Trial        | CasADi::Worh |
|              |              |              | stepsize     | pInternal    |
|              |              |              | decrease     |              |
|              |              |              | factor for   |              |
|              |              |              | Armijo rule  |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoMaxAlp | OT_REAL      | 1            | Initial      | CasADi::Worh |
| ha           |              |              | alpha for    | pInternal    |
|              |              |              | Armijo rule  |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoMinAlp | OT_REAL      | 0.000        | Lower bound  | CasADi::Worh |
| ha           |              |              | on alpha for | pInternal    |
|              |              |              | Armijo rule  |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoMinAlp | OT_REAL      | 0.000        | Lower bound  | CasADi::Worh |
| haRec        |              |              | on alpha for | pInternal    |
|              |              |              | Armijo rule  |              |
|              |              |              | during       |              |
|              |              |              | recovery     |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoSigma  | OT_REAL      | 0.005        | Scale factor | CasADi::Worh |
|              |              |              | for          | pInternal    |
|              |              |              | linearised   |              |
|              |              |              | descent      |              |
|              |              |              | check in     |              |
|              |              |              | Armijo rule  |              |
+--------------+--------------+--------------+--------------+--------------+
| AutoQPRecove | OT_BOOLEAN   | True         | Enable       | CasADi::Worh |
| ry           |              |              | automatic QP | pInternal    |
|              |              |              | recovery     |              |
+--------------+--------------+--------------+--------------+--------------+
| BFGSmaxblock | OT_INTEGER   | 300          | Block size   | CasADi::Worh |
| Size         |              |              | parameter    | pInternal    |
|              |              |              | used by      |              |
|              |              |              | certain BFGS |              |
|              |              |              | methods      |              |
+--------------+--------------+--------------+--------------+--------------+
| BFGSmethod   | OT_INTEGER   | 0            | Choose BFGS  | CasADi::Worh |
|              |              |              | method (0:   | pInternal    |
|              |              |              | dense, 1-3:  |              |
|              |              |              | block, 100+: |              |
|              |              |              | sparse)      |              |
+--------------+--------------+--------------+--------------+--------------+
| BFGSminblock | OT_INTEGER   | 300          | Block size   | CasADi::Worh |
| Size         |              |              | parameter    | pInternal    |
|              |              |              | used by      |              |
|              |              |              | certain BFGS |              |
|              |              |              | methods      |              |
+--------------+--------------+--------------+--------------+--------------+
| BFGSrestart  | OT_INTEGER   | 50           | Restart BFGS | CasADi::Worh |
|              |              |              | update after | pInternal    |
|              |              |              | this many    |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| BettsFactor  | OT_REAL      | 2.100        | Update       | CasADi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | Betts'       |              |
|              |              |              | Hessian regu |              |
|              |              |              | larisation   |              |
+--------------+--------------+--------------+--------------+--------------+
| BettsPoint   | OT_REAL      | 1            | Smallest     | CasADi::Worh |
|              |              |              | eigenvalue   | pInternal    |
|              |              |              | of the       |              |
|              |              |              | regularised  |              |
|              |              |              | Hessian      |              |
+--------------+--------------+--------------+--------------+--------------+
| BoundTolFac  | OT_REAL      | 1000         | Factor in    | CasADi::Worh |
|              |              |              | determining  | pInternal    |
|              |              |              | active       |              |
|              |              |              | constraints  |              |
|              |              |              | by KKT       |              |
+--------------+--------------+--------------+--------------+--------------+
| CheckFJ      | OT_REAL      | 1.000e+12    | Upper bound  | CasADi::Worh |
|              |              |              | used by      | pInternal    |
|              |              |              | Fritz-John   |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| CheckStructu | OT_BOOLEAN   | True         | Enable       | CasADi::Worh |
| reDF         |              |              | structural   | pInternal    |
|              |              |              | checking of  |              |
|              |              |              | DF           |              |
+--------------+--------------+--------------+--------------+--------------+
| CheckStructu | OT_BOOLEAN   | True         | Enable       | CasADi::Worh |
| reDG         |              |              | structural   | pInternal    |
|              |              |              | checking of  |              |
|              |              |              | DG           |              |
+--------------+--------------+--------------+--------------+--------------+
| CheckStructu | OT_BOOLEAN   | True         | Enable       | CasADi::Worh |
| reHM         |              |              | structural   | pInternal    |
|              |              |              | checking of  |              |
|              |              |              | HM           |              |
+--------------+--------------+--------------+--------------+--------------+
| CorStepBetts | OT_REAL      | 0.500        | (experimenta | CasADi::Worh |
| Sum          |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepConSt | OT_REAL      | 0.000        | (experimenta | CasADi::Worh |
| op           |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepConvi | OT_REAL      | 1            | (experimenta | CasADi::Worh |
| o            |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepMaxIt | OT_INTEGER   | 50           | (experimenta | CasADi::Worh |
| er           |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepMetho | OT_INTEGER   | 0            | (experimenta | CasADi::Worh |
| d            |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepMode  | OT_INTEGER   | 1            | (experimenta | CasADi::Worh |
|              |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepPFact | OT_REAL      | 1            | (experimenta | CasADi::Worh |
| or           |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepPMax  | OT_REAL      | 1000000      | (experimenta | CasADi::Worh |
|              |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepRecov | OT_BOOLEAN   | False        | (experimenta | CasADi::Worh |
| eryDX        |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CurvBCond    | OT_REAL      | 0.020        | Block BFGS   | CasADi::Worh |
|              |              |              | curvature    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | bound        |              |
+--------------+--------------+--------------+--------------+--------------+
| CurvBFac     | OT_REAL      | 0.300        | Block BFGS   | CasADi::Worh |
|              |              |              | curvature    | pInternal    |
|              |              |              | condition re |              |
|              |              |              | gularisation |              |
|              |              |              | factor       |              |
+--------------+--------------+--------------+--------------+--------------+
| CurvCond     | OT_REAL      | 0.020        | BFGS         | CasADi::Worh |
|              |              |              | Curvature    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | bound        |              |
+--------------+--------------+--------------+--------------+--------------+
| CurvFac      | OT_REAL      | 0.300        | BFGS         | CasADi::Worh |
|              |              |              | curvature    | pInternal    |
|              |              |              | condition re |              |
|              |              |              | gularisation |              |
|              |              |              | factor       |              |
+--------------+--------------+--------------+--------------+--------------+
| DebugMarker0 | OT_INTEGER   | 42           | Debug        | CasADi::Worh |
| 5            |              |              | marker. Used | pInternal    |
|              |              |              | to find      |              |
|              |              |              | memory align |              |
|              |              |              | ment/padding |              |
|              |              |              | issues       |              |
+--------------+--------------+--------------+--------------+--------------+
| DebugMarker0 | OT_INTEGER   | 42           | Debug        | CasADi::Worh |
| 6            |              |              | marker. Used | pInternal    |
|              |              |              | to find      |              |
|              |              |              | memory align |              |
|              |              |              | ment/padding |              |
|              |              |              | issues       |              |
+--------------+--------------+--------------+--------------+--------------+
| FGtogether   | OT_BOOLEAN   | False        | F and G      | CasADi::Worh |
|              |              |              | cannot be    | pInternal    |
|              |              |              | evaluated    |              |
|              |              |              | separately   |              |
+--------------+--------------+--------------+--------------+--------------+
| FJandND      | OT_BOOLEAN   | False        | Enable       | CasADi::Worh |
|              |              |              | Fritz-John   | pInternal    |
|              |              |              | and non-diff |              |
|              |              |              | erentiable   |              |
|              |              |              | check        |              |
|              |              |              | heuristics   |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasibleDual | OT_BOOLEAN   | False        | Activate     | CasADi::Worh |
|              |              |              | dual         | pInternal    |
|              |              |              | feasibility  |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasibleInit | OT_BOOLEAN   | False        | Activate     | CasADi::Worh |
|              |              |              | initial      | pInternal    |
|              |              |              | feasibility  |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasibleInit | OT_REAL      | 0.001        | Feasibility  | CasADi::Worh |
| Tol          |              |              | tolerance    | pInternal    |
|              |              |              | for no-      |              |
|              |              |              | objective    |              |
|              |              |              | feasible     |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasibleOnly | OT_BOOLEAN   | False        | Activate     | CasADi::Worh |
|              |              |              | feasible-    | pInternal    |
|              |              |              | only mode    |              |
+--------------+--------------+--------------+--------------+--------------+
| FidifEps     | OT_REAL      | 0.000        | Finite       | CasADi::Worh |
|              |              |              | difference   | pInternal    |
|              |              |              | perturbation |              |
+--------------+--------------+--------------+--------------+--------------+
| FidifHM      | OT_BOOLEAN   | False        | Approximate  | CasADi::Worh |
|              |              |              | Hessian by   | pInternal    |
|              |              |              | finite       |              |
|              |              |              | differences  |              |
|              |              |              | (otherwise   |              |
|              |              |              | BFGS)        |              |
+--------------+--------------+--------------+--------------+--------------+
| FilterBisecA | OT_BOOLEAN   | True         | Filter       | CasADi::Worh |
| lpha         |              |              | heuristic to | pInternal    |
|              |              |              | save Armijo  |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| FilterGammaC | OT_REAL      | 0.000        | Constraint   | CasADi::Worh |
| V            |              |              | violation    | pInternal    |
|              |              |              | decrease     |              |
|              |              |              | factor in    |              |
|              |              |              | Filter       |              |
|              |              |              | acceptance   |              |
|              |              |              | check        |              |
+--------------+--------------+--------------+--------------+--------------+
| FilterGammaF | OT_REAL      | 0.000        | Objective    | CasADi::Worh |
|              |              |              | decrease     | pInternal    |
|              |              |              | factor in    |              |
|              |              |              | Filter       |              |
|              |              |              | acceptance   |              |
|              |              |              | check        |              |
+--------------+--------------+--------------+--------------+--------------+
| FilterInters | OT_BOOLEAN   | True         | Filter       | CasADi::Worh |
| ecAlpha      |              |              | heuristic to | pInternal    |
|              |              |              | save Armijo  |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| FirstDifCent | OT_BOOLEAN   | True         | Use central  | CasADi::Worh |
| ral          |              |              | finite       | pInternal    |
|              |              |              | difference   |              |
|              |              |              | quotient for |              |
|              |              |              | first        |              |
|              |              |              | derivatives  |              |
+--------------+--------------+--------------+--------------+--------------+
| FocusOnFeas  | OT_BOOLEAN   | True         | Enable       | CasADi::Worh |
|              |              |              | Focus-on-    | pInternal    |
|              |              |              | Feasibility  |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| FocusOnFeasF | OT_REAL      | 1.360        | Factor in    | CasADi::Worh |
| actor        |              |              | Focus-on-    | pInternal    |
|              |              |              | Feasibility  |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| GammaAlpha   | OT_REAL      | 0.050        | Safety       | CasADi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | alphamin     |              |
|              |              |              | calculation  |              |
|              |              |              | by Filter    |              |
+--------------+--------------+--------------+--------------+--------------+
| GroupMethod  | OT_INTEGER   | 1            | Select       | CasADi::Worh |
|              |              |              | method to    | pInternal    |
|              |              |              | determine    |              |
|              |              |              | graph        |              |
|              |              |              | colouring    |              |
|              |              |              | groups       |              |
+--------------+--------------+--------------+--------------+--------------+
| IgnoreFilter | OT_BOOLEAN   | False        | Activate     | CasADi::Worh |
| Crit         |              |              | accelerating | pInternal    |
|              |              |              | heuristics   |              |
|              |              |              | for Filter   |              |
+--------------+--------------+--------------+--------------+--------------+
| IncBettsTau  | OT_REAL      | 2            | Increase     | CasADi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | Betts'       |              |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| IncBettsTauM | OT_REAL      | 100          | Larger       | CasADi::Worh |
| ore          |              |              | increase     | pInternal    |
|              |              |              | factor for   |              |
|              |              |              | Betts'       |              |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| IncreaseIWS  | OT_REAL      | 1            | Increase     | CasADi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | estimated    |              |
|              |              |              | integer      |              |
|              |              |              | workspace    |              |
|              |              |              | requirement  |              |
+--------------+--------------+--------------+--------------+--------------+
| IncreaseRWS  | OT_REAL      | 1            | Increase     | CasADi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | estimated    |              |
|              |              |              | real         |              |
|              |              |              | workspace    |              |
|              |              |              | requirement  |              |
+--------------+--------------+--------------+--------------+--------------+
| Infty        | OT_REAL      | 1.000e+20    | Upper bound  | CasADi::Worh |
|              |              |              | for numbers  | pInternal    |
|              |              |              | to be        |              |
|              |              |              | regarded as  |              |
|              |              |              | finite       |              |
+--------------+--------------+--------------+--------------+--------------+
| InftyUnbound | OT_REAL      | 1.000e+20    | Tolerance    | CasADi::Worh |
| ed           |              |              | for unbounde | pInternal    |
|              |              |              | dness        |              |
|              |              |              | detection    |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| InitialLMest | OT_BOOLEAN   | True         | Enable       | CasADi::Worh |
|              |              |              | initial      | pInternal    |
|              |              |              | Lagrange     |              |
|              |              |              | multiplier   |              |
|              |              |              | estimate     |              |
+--------------+--------------+--------------+--------------+--------------+
| KeepAcceptab | OT_BOOLEAN   | True         | Save         | CasADi::Worh |
| leSol        |              |              | acceptable   | pInternal    |
|              |              |              | solutions as |              |
|              |              |              | fallback     |              |
+--------------+--------------+--------------+--------------+--------------+
| LMestQPipCom | OT_REAL      | 0.003        | IP complemen | CasADi::Worh |
| Tol          |              |              | tarity       | pInternal    |
|              |              |              | tolerance in |              |
|              |              |              | initial      |              |
|              |              |              | multiplier   |              |
|              |              |              | estimate     |              |
+--------------+--------------+--------------+--------------+--------------+
| LMestQPipRes | OT_REAL      | 1            | IP residual  | CasADi::Worh |
| Tol          |              |              | tolerance in | pInternal    |
|              |              |              | initial      |              |
|              |              |              | multiplier   |              |
|              |              |              | estimate     |              |
+--------------+--------------+--------------+--------------+--------------+
| LinMult      | OT_BOOLEAN   | False        | Control      | CasADi::Worh |
|              |              |              | Lagrange     | pInternal    |
|              |              |              | multiplier   |              |
|              |              |              | update       |              |
+--------------+--------------+--------------+--------------+--------------+
| LogLevel     | OT_INTEGER   | 0            | Enable XML   | CasADi::Worh |
|              |              |              | logfiles and | pInternal    |
|              |              |              | writing      |              |
|              |              |              | interval     |              |
+--------------+--------------+--------------+--------------+--------------+
| LogResult    | OT_INTEGER   | 0            | Enable XML   | CasADi::Worh |
|              |              |              | result       | pInternal    |
|              |              |              | logging and  |              |
|              |              |              | detail level |              |
+--------------+--------------+--------------+--------------+--------------+
| LowPassAlpha | OT_REAL      | 0.950        | Lowpass-     | CasADi::Worh |
| F            |              |              | filter       | pInternal    |
|              |              |              | update       |              |
|              |              |              | factor for   |              |
|              |              |              | objective    |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| LowPassAlpha | OT_REAL      | 0.950        | Lowpass-     | CasADi::Worh |
| G            |              |              | filter       | pInternal    |
|              |              |              | update       |              |
|              |              |              | factor for   |              |
|              |              |              | constraint   |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| LowPassAlpha | OT_REAL      | 0.100        | Lowpass-     | CasADi::Worh |
| Merit        |              |              | filter       | pInternal    |
|              |              |              | update       |              |
|              |              |              | factor for   |              |
|              |              |              | merit        |              |
|              |              |              | function     |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| LowPassFilte | OT_BOOLEAN   | True         | Enable       | CasADi::Worh |
| r            |              |              | lowpass-     | pInternal    |
|              |              |              | filter       |              |
|              |              |              | termination  |              |
|              |              |              | criterion    |              |
+--------------+--------------+--------------+--------------+--------------+
| MAPivotThres | OT_REAL      | 0.000        | Pivoting     | CasADi::Worh |
| hold         |              |              | tolerance    | pInternal    |
|              |              |              | for MA       |              |
|              |              |              | solvers      |              |
+--------------+--------------+--------------+--------------+--------------+
| MatrixCC     | OT_BOOLEAN   | False        | Not to be    | CasADi::Worh |
|              |              |              | included     | pInternal    |
|              |              |              | into a       |              |
|              |              |              | parameter    |              |
|              |              |              | file!        |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxCalls     | OT_INTEGER   | 2.147e+09    | Upper bound  | CasADi::Worh |
|              |              |              | to Reverse C | pInternal    |
|              |              |              | ommunication |              |
|              |              |              | calls        |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxForce     | OT_INTEGER   | 1000         | Maximum      | CasADi::Worh |
|              |              |              | number of    | pInternal    |
|              |              |              | Force        |              |
|              |              |              | recovery     |              |
|              |              |              | strategy     |              |
|              |              |              | steps        |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxGPart     | OT_INTEGER   | 1            | (experimenta | CasADi::Worh |
|              |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| MaxIter      | OT_INTEGER   | 500          | Upper bound  | CasADi::Worh |
|              |              |              | on major     | pInternal    |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxLScounter | OT_INTEGER   | 3            | Control      | CasADi::Worh |
|              |              |              | activation   | pInternal    |
|              |              |              | of Filter    |              |
|              |              |              | acceleration |              |
|              |              |              | heuristics   |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxNorm      | OT_BOOLEAN   | True         | Select max-  | CasADi::Worh |
|              |              |              | norm instead | pInternal    |
|              |              |              | of 1-norm in |              |
|              |              |              | Filter       |              |
+--------------+--------------+--------------+--------------+--------------+
| MeritFunctio | OT_INTEGER   | 4            | Select merit | CasADi::Worh |
| n            |              |              | function and | pInternal    |
|              |              |              | penalty      |              |
|              |              |              | update [0,   |              |
|              |              |              | 3..5]        |              |
+--------------+--------------+--------------+--------------+--------------+
| MeritGradTol | OT_REAL      | 0.000        | Threshold of | CasADi::Worh |
|              |              |              | meritfunctio | pInternal    |
|              |              |              | n gradient   |              |
|              |              |              | for          |              |
|              |              |              | increasing   |              |
|              |              |              | Hessian regu |              |
|              |              |              | larisation   |              |
+--------------+--------------+--------------+--------------+--------------+
| MinBettsTau  | OT_REAL      | 0.000        | Lower bound  | CasADi::Worh |
|              |              |              | for Betts'   | pInternal    |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| MoreRelax    | OT_BOOLEAN   | False        | Introduce    | CasADi::Worh |
|              |              |              | one          | pInternal    |
|              |              |              | relaxation   |              |
|              |              |              | variable for |              |
|              |              |              | every        |              |
|              |              |              | constraint   |              |
+--------------+--------------+--------------+--------------+--------------+
| NLPmethod    | OT_INTEGER   | 1            | Select (1) M | CasADi::Worh |
|              |              |              | eritfunction | pInternal    |
|              |              |              | or (3)       |              |
|              |              |              | Filter globa |              |
|              |              |              | lisation     |              |
+--------------+--------------+--------------+--------------+--------------+
| NLPprint     | OT_INTEGER   | 2            | NLP print    | CasADi::Worh |
|              |              |              | level        | pInternal    |
|              |              |              | [-1..4]      |              |
+--------------+--------------+--------------+--------------+--------------+
| PairMethod   | OT_INTEGER   | 1            | Select       | CasADi::Worh |
|              |              |              | method to    | pInternal    |
|              |              |              | determine    |              |
|              |              |              | graph        |              |
|              |              |              | colouring    |              |
|              |              |              | pairgroups   |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdEpsBar | OT_REAL      | 0.900        | Penalty      | CasADi::Worh |
|              |              |              | update       | pInternal    |
|              |              |              | parameter    |              |
|              |              |              | factor for M |              |
|              |              |              | eritFunction |              |
|              |              |              | = 3          |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdEpsKFa | OT_REAL      | 2            | Penalty      | CasADi::Worh |
| c            |              |              | update       | pInternal    |
|              |              |              | parameter    |              |
|              |              |              | factor for M |              |
|              |              |              | eritFunction |              |
|              |              |              | = 4          |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdEpsKSe | OT_INTEGER   | 2            | Penalty      | CasADi::Worh |
| quence       |              |              | update       | pInternal    |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdMaxDel | OT_REAL      | 11           | Max penalty  | CasADi::Worh |
| taK          |              |              | for MeritFun | pInternal    |
|              |              |              | ction = 4    |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdMaxFac | OT_REAL      | 100000000    | Max factor   | CasADi::Worh |
|              |              |              | for          | pInternal    |
|              |              |              | increasing   |              |
|              |              |              | penalty for  |              |
|              |              |              | MeritFunctio |              |
|              |              |              | n = 4        |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdRBar   | OT_REAL      | 2            | Penalty      | CasADi::Worh |
|              |              |              | update       | pInternal    |
|              |              |              | parameter    |              |
|              |              |              | for MeritFun |              |
|              |              |              | ction = 3    |              |
+--------------+--------------+--------------+--------------+--------------+
| PrecisionF   | OT_REAL      | 0.000        | (currently   | CasADi::Worh |
|              |              |              | unused)      | pInternal    |
|              |              |              | Relative     |              |
|              |              |              | precision of |              |
|              |              |              | objective    |              |
+--------------+--------------+--------------+--------------+--------------+
| PrecisionG   | OT_REAL      | 0.000        | (currently   | CasADi::Worh |
|              |              |              | unused)      | pInternal    |
|              |              |              | Relative     |              |
|              |              |              | precision of |              |
|              |              |              | constraints  |              |
+--------------+--------------+--------------+--------------+--------------+
| QPscaleParam | OT_REAL      | 0            | (currently   | CasADi::Worh |
|              |              |              | unused)      | pInternal    |
|              |              |              | Scaling      |              |
|              |              |              | factor for   |              |
|              |              |              | QP           |              |
+--------------+--------------+--------------+--------------+--------------+
| QuadraticPro | OT_BOOLEAN   | False        | Not to be    | CasADi::Worh |
| blem         |              |              | included     | pInternal    |
|              |              |              | into a       |              |
|              |              |              | parameter    |              |
|              |              |              | file!        |              |
+--------------+--------------+--------------+--------------+--------------+
| ReduceBettsT | OT_REAL      | 0.300        | Decrease     | CasADi::Worh |
| au           |              |              | factor for   | pInternal    |
|              |              |              | Betts'       |              |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| RegStrategy  | OT_INTEGER   | 1            | Select       | CasADi::Worh |
|              |              |              | Hessian regu | pInternal    |
|              |              |              | larisation   |              |
|              |              |              | strategy in  |              |
|              |              |              | Filter       |              |
+--------------+--------------+--------------+--------------+--------------+
| ReinitFilter | OT_BOOLEAN   | False        | Enables      | CasADi::Worh |
|              |              |              | Filter-reini | pInternal    |
|              |              |              | tialisation  |              |
|              |              |              | accelerating |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| RelaxMaxDelt | OT_REAL      | 0.920        | Upper bound  | CasADi::Worh |
| a            |              |              | for          | pInternal    |
|              |              |              | accepting    |              |
|              |              |              | the          |              |
|              |              |              | constraint   |              |
|              |              |              | relaxation   |              |
|              |              |              | variable     |              |
+--------------+--------------+--------------+--------------+--------------+
| RelaxMaxPen  | OT_REAL      | 50000000     | Upper bound  | CasADi::Worh |
|              |              |              | on the       | pInternal    |
|              |              |              | constraint   |              |
|              |              |              | relaxation   |              |
|              |              |              | penalty      |              |
+--------------+--------------+--------------+--------------+--------------+
| RelaxRho     | OT_REAL      | 6            | Update       | CasADi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | the          |              |
|              |              |              | constraint   |              |
|              |              |              | relaxation   |              |
|              |              |              | penalty      |              |
+--------------+--------------+--------------+--------------+--------------+
| RelaxStart   | OT_REAL      | 1            | Initial      | CasADi::Worh |
|              |              |              | value of the | pInternal    |
|              |              |              | constraint   |              |
|              |              |              | relaxation   |              |
|              |              |              | penalty      |              |
+--------------+--------------+--------------+--------------+--------------+
| RestUntilFea | OT_BOOLEAN   | False        | Do           | CasADi::Worh |
| s            |              |              | restoration  | pInternal    |
|              |              |              | until a      |              |
|              |              |              | feasible     |              |
|              |              |              | solution is  |              |
|              |              |              | found        |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaleConIter | OT_BOOLEAN   | False        | Scale        | CasADi::Worh |
|              |              |              | constraints  | pInternal    |
|              |              |              | in every     |              |
|              |              |              | iteration    |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaleFacObj  | OT_REAL      | 10           | Value to     | CasADi::Worh |
|              |              |              | scale large  | pInternal    |
|              |              |              | objective    |              |
|              |              |              | functions to |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaleFacQP   | OT_REAL      | 10           | Upper bound  | CasADi::Worh |
|              |              |              | on resulting | pInternal    |
|              |              |              | matrix norm  |              |
|              |              |              | for QP       |              |
|              |              |              | scaling      |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaledFD     | OT_BOOLEAN   | True         | Use a scaled | CasADi::Worh |
|              |              |              | perturbation | pInternal    |
|              |              |              | for finite   |              |
|              |              |              | differences  |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaledKKT    | OT_BOOLEAN   | True         | Scale KKT    | CasADi::Worh |
|              |              |              | conditions   | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| ScaledObj    | OT_BOOLEAN   | True         | Scale the    | CasADi::Worh |
|              |              |              | objective    | pInternal    |
|              |              |              | function     |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaledQP     | OT_BOOLEAN   | True         | Scale some   | CasADi::Worh |
|              |              |              | matrices     | pInternal    |
|              |              |              | handed to    |              |
|              |              |              | the QP       |              |
+--------------+--------------+--------------+--------------+--------------+
| StartBettsTa | OT_REAL      | 0.100        | Initial      | CasADi::Worh |
| u            |              |              | value for    | pInternal    |
|              |              |              | Betts'       |              |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| SwitchingDel | OT_REAL      | 0.010        | Filter       | CasADi::Worh |
| ta           |              |              | switching    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| SwitchingSCV | OT_REAL      | 1.100        | Filter       | CasADi::Worh |
|              |              |              | switching    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| SwitchingSF  | OT_REAL      | 2.300        | Filter       | CasADi::Worh |
|              |              |              | switching    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| TakeQPSol    | OT_BOOLEAN   | False        | Evaluate QP  | CasADi::Worh |
|              |              |              | search       | pInternal    |
|              |              |              | direction    |              |
|              |              |              | regardless   |              |
|              |              |              | of           |              |
|              |              |              | convergence  |              |
+--------------+--------------+--------------+--------------+--------------+
| Timeout      | OT_REAL      | 300          | Timeout in   | CasADi::Worh |
|              |              |              | seconds      | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| TolComp      | OT_REAL      | 0.001        | Complementar | CasADi::Worh |
|              |              |              | ity          | pInternal    |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| TolFeas      | OT_REAL      | 0.000        | Feasibility  | CasADi::Worh |
|              |              |              | tolerance    | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| TolOpti      | OT_REAL      | 0.000        | Optimality   | CasADi::Worh |
|              |              |              | tolerance    | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| TolWeakActiv | OT_REAL      | 1            | (experimenta | CasADi::Worh |
| e            |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| TooBig       | OT_BOOLEAN   | True         | Enable too-  | CasADi::Worh |
|              |              |              | big          | pInternal    |
|              |              |              | termination  |              |
|              |              |              | heuristics   |              |
+--------------+--------------+--------------+--------------+--------------+
| TooBigCV     | OT_REAL      | 1.000e+25    | Upper bound  | CasADi::Worh |
|              |              |              | on           | pInternal    |
|              |              |              | constraint   |              |
|              |              |              | violation    |              |
|              |              |              | for too-big  |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| TooBigKKT    | OT_REAL      | 1.000e+30    | Upper bound  | CasADi::Worh |
|              |              |              | on KKT       | pInternal    |
|              |              |              | values for   |              |
|              |              |              | too-big      |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| UserDF       | OT_BOOLEAN   | True         | Objective    | CasADi::Worh |
|              |              |              | gradient     | pInternal    |
|              |              |              | values       |              |
|              |              |              | supplied by  |              |
|              |              |              | caller       |              |
+--------------+--------------+--------------+--------------+--------------+
| UserDG       | OT_BOOLEAN   | True         | Jacobian     | CasADi::Worh |
|              |              |              | values       | pInternal    |
|              |              |              | supplied by  |              |
|              |              |              | caller       |              |
+--------------+--------------+--------------+--------------+--------------+
| UserHM       | OT_BOOLEAN   | True         | Hessian      | CasADi::Worh |
|              |              |              | values       | pInternal    |
|              |              |              | supplied by  |              |
|              |              |              | caller       |              |
+--------------+--------------+--------------+--------------+--------------+
| UserHMstruct | OT_INTEGER   | 2            | Enable       | CasADi::Worh |
| ure          |              |              | automatic    | pInternal    |
|              |              |              | Hessian      |              |
|              |              |              | structure    |              |
|              |              |              | generation   |              |
|              |              |              | or checking  |              |
+--------------+--------------+--------------+--------------+--------------+
| WeakActiveSe | OT_BOOLEAN   | False        | (experimenta | CasADi::Worh |
| t            |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | CasADi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | CasADi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| eps          | OT_REAL      | 0.000        | Machine      | CasADi::Worh |
|              |              |              | epsilon      | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | CasADi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | objective    | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Expand the   | CasADi::NLPS |
|              |              | )            | constraint   | olverInterna |
|              |              |              | function in  | l            |
|              |              |              | terms of     |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX. |              |
|              |              |              | Deprecated,  |              |
|              |              |              | use \"expand\" |              |
|              |              |              | instead.     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | CasADi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | wether       |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| gauss_newton | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option. Use  | olverInterna |
|              |              |              | Gauss Newton | l            |
|              |              |              | Hessian appr |              |
|              |              |              | oximation    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| dient        |              | )            | option.      | olverInterna |
|              |              |              | Generate a   | l            |
|              |              |              | function for |              |
|              |              |              | calculating  |              |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | objective.   |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_hes | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| sian         |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Hessian of   |              |
|              |              |              | the          |              |
|              |              |              | Lagrangian   |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_jac | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
| obian        |              | )            | option.      | olverInterna |
|              |              |              | Generate an  | l            |
|              |              |              | exact        |              |
|              |              |              | Jacobian of  |              |
|              |              |              | the          |              |
|              |              |              | constraints  |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_f       | OT_Function  | None         | Function for | CasADi::Worh |
|              |              |              | calculating  | pInternal    |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (column, aut |              |
|              |              |              | ogenerated   |              |
|              |              |              | by default)  |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_lag     | OT_Function  | None         | Function for | CasADi::Worh |
|              |              |              | calculating  | pInternal    |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hess_lag     | OT_Function  | None         | Function for | CasADi::Worh |
|              |              |              | calculating  | pInternal    |
|              |              |              | the Hessian  |              |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| internalParC | OT_INTEGER   | 0            | Counter for  | CasADi::Worh |
| hanged       |              |              | changed      | pInternal    |
|              |              |              | parameters.  |              |
|              |              |              | Internal use |              |
|              |              |              | only.        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | CasADi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | CasADi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | CasADi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_f        | OT_Function  | None         | Function for | CasADi::Worh |
|              |              |              | calculating  | pInternal    |
|              |              |              | the jacobian |              |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (sparse row, |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_g        | OT_Function  | None         | Function for | CasADi::Worh |
|              |              |              | calculating  | pInternal    |
|              |              |              | the Jacobian |              |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | (autogenerat |              |
|              |              |              | ed by        |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | CasADi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | CasADi::Worh |
|              |              |              | uts)         | pInternal    |
|              |              |              | Monitor      |              |
|              |              |              | functions (e |              |
|              |              |              | val_f|eval_g |              |
|              |              |              | |eval_jac_g| |              |
|              |              |              | eval_grad_f| |              |
|              |              |              | eval_h)      |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | CasADi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | Deprecated   | CasADi::NLPS |
|              |              | )            | option.      | olverInterna |
|              |              |              | Expect F, G, | l            |
|              |              |              | H, J to have |              |
|              |              |              | an           |              |
|              |              |              | additional   |              |
|              |              |              | input        |              |
|              |              |              | argument     |              |
|              |              |              | appended at  |              |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| print_time   | OT_BOOLEAN   | True         | Print        | CasADi::Worh |
|              |              |              | information  | pInternal    |
|              |              |              | about        |              |
|              |              |              | execution    |              |
|              |              |              | time         |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipBarrier | OT_REAL      | 7.800        | IP barrier   | CasADi::Worh |
|              |              |              | parameter.   | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipComTol  | OT_REAL      | 0.000        | IP complemen | CasADi::Worh |
|              |              |              | tarity       | pInternal    |
|              |              |              | tolerance.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipFracBou | OT_REAL      | 0.880        | IP fraction- | CasADi::Worh |
| nd           |              |              | to-the-      | pInternal    |
|              |              |              | boundary     |              |
|              |              |              | parameter.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipLsMetho | OT_STRING    | None         | Select the   | CasADi::Worh |
| d            |              |              | direct       | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver used  |              |
|              |              |              | by the IP    |              |
|              |              |              | method.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipMinAlph | OT_REAL      | 0.000        | IP line      | CasADi::Worh |
| a            |              |              | search       | pInternal    |
|              |              |              | minimum step |              |
|              |              |              | size.        |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipRelaxDi | OT_REAL      | 2            | The          | CasADi::Worh |
| v            |              |              | relaxation   | pInternal    |
|              |              |              | term is      |              |
|              |              |              | divided by   |              |
|              |              |              | this value   |              |
|              |              |              | if           |              |
|              |              |              | successful.  |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipRelaxMa | OT_REAL      | 0.000        | Maximum      | CasADi::Worh |
| x            |              |              | relaxation   | pInternal    |
|              |              |              | value.       |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipRelaxMi | OT_REAL      | 0.000        | Mimimum      | CasADi::Worh |
| n            |              |              | relaxation   | pInternal    |
|              |              |              | value.       |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipRelaxMu | OT_REAL      | 10           | The          | CasADi::Worh |
| lt           |              |              | relaxation   | pInternal    |
|              |              |              | term is      |              |
|              |              |              | multiplied   |              |
|              |              |              | by this      |              |
|              |              |              | value if uns |              |
|              |              |              | uccessful.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipResTol  | OT_REAL      | 0.000        | IP residuals | CasADi::Worh |
|              |              |              | tolerance.   | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipTryRela | OT_BOOLEAN   | True         | Enable       | CasADi::Worh |
| x            |              |              | relaxation   | pInternal    |
|              |              |              | strategy     |              |
|              |              |              | when         |              |
|              |              |              | encountering |              |
|              |              |              | an error.    |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsItMaxIt | OT_INTEGER   | 1000         | Maximum      | CasADi::Worh |
| er           |              |              | number of    | pInternal    |
|              |              |              | iterations   |              |
|              |              |              | of the       |              |
|              |              |              | iterative    |              |
|              |              |              | linear       |              |
|              |              |              | solvers.     |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsItMetho | OT_STRING    | None         | Select the   | CasADi::Worh |
| d            |              |              | iterative    | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsItPreco | OT_STRING    | None         | Select preco | CasADi::Worh |
| ndMethod     |              |              | nditioner    | pInternal    |
|              |              |              | for the      |              |
|              |              |              | iterative    |              |
|              |              |              | linear       |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsRefineM | OT_INTEGER   | 10           | Maximum      | CasADi::Worh |
| axIter       |              |              | number of    | pInternal    |
|              |              |              | iterative    |              |
|              |              |              | refinement   |              |
|              |              |              | steps of the |              |
|              |              |              | direct       |              |
|              |              |              | linear       |              |
|              |              |              | solvers.     |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsScale   | OT_BOOLEAN   | True         | Enables      | CasADi::Worh |
|              |              |              | scaling on   | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver       |              |
|              |              |              | level.       |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsTol     | OT_REAL      | 0.000        | Tolerance    | CasADi::Worh |
|              |              |              | for the      | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsTrySimp | OT_BOOLEAN   | False        | Some         | CasADi::Worh |
| le           |              |              | matrices can | pInternal    |
|              |              |              | be solved    |              |
|              |              |              | without      |              |
|              |              |              | calling a    |              |
|              |              |              | linear       |              |
|              |              |              | equation sol |              |
|              |              |              | ver.Currentl |              |
|              |              |              | y only       |              |
|              |              |              | diagonal     |              |
|              |              |              | matrices are |              |
|              |              |              | supported.   |              |
|              |              |              | Non-diagonal |              |
|              |              |              | matrices     |              |
|              |              |              | will         |              |
|              |              |              | besolved     |              |
|              |              |              | with the     |              |
|              |              |              | chosen       |              |
|              |              |              | linear       |              |
|              |              |              | equation     |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_maxIter   | OT_INTEGER   | 80           | Imposes an   | CasADi::Worh |
|              |              |              | upper limit  | pInternal    |
|              |              |              | on the       |              |
|              |              |              | number of    |              |
|              |              |              | minor solver |              |
|              |              |              | iterations,  |              |
|              |              |              | i.e. for     |              |
|              |              |              | thequadratic |              |
|              |              |              | subproblem   |              |
|              |              |              | solver. If   |              |
|              |              |              | the limit is |              |
|              |              |              | reached      |              |
|              |              |              | before conve |              |
|              |              |              | rgence,WORHP |              |
|              |              |              | will         |              |
|              |              |              | activate QP  |              |
|              |              |              | recovery     |              |
|              |              |              | strategies   |              |
|              |              |              | to prevent a |              |
|              |              |              | solver       |              |
|              |              |              | breakdown.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_method    | OT_STRING    | None         | Select the   | CasADi::Worh |
|              |              |              | solution     | pInternal    |
|              |              |              | method used  |              |
|              |              |              | by the QP    |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnBeta   | OT_REAL      | 0.900        | NSN stepsize | CasADi::Worh |
|              |              |              | decrease     | pInternal    |
|              |              |              | factor.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnGradSt | OT_BOOLEAN   | True         | Enable       | CasADi::Worh |
| ep           |              |              | gradient     | pInternal    |
|              |              |              | steps in the |              |
|              |              |              | NSN method.  |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnKKT    | OT_REAL      | 0.000        | NSN KKT      | CasADi::Worh |
|              |              |              | tolerance.   | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnLsMeth | OT_STRING    | None         | Select the   | CasADi::Worh |
| od           |              |              | direct       | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver used  |              |
|              |              |              | by the NSN   |              |
|              |              |              | method.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnMinAlp | OT_REAL      | 0.000        | NSN line     | CasADi::Worh |
| ha           |              |              | search       | pInternal    |
|              |              |              | minimum step |              |
|              |              |              | size.        |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnSigma  | OT_REAL      | 0.010        | NSN line     | CasADi::Worh |
|              |              |              | search slope | pInternal    |
|              |              |              | parameter.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_printLeve | OT_STRING    | None         | Controls the | CasADi::Worh |
| l            |              |              | amount of QP | pInternal    |
|              |              |              | solver       |              |
|              |              |              | output.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | False        | Enable       | CasADi::Worh |
| rn           |              |              | scaling on   | pInternal    |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_strict    | OT_BOOLEAN   | True         | Use strict   | CasADi::Worh |
|              |              |              | termination  | pInternal    |
|              |              |              | criteria in  |              |
|              |              |              | IP method.   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | CasADi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | CasADi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | CasADi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | CasADi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-------------+--------------------------+
|     Id      |         Used in          |
+=============+==========================+
| eval_f      | CasADi::WorhpInternal    |
+-------------+--------------------------+
| eval_g      | CasADi::WorhpInternal    |
+-------------+--------------------------+
| eval_grad_f | CasADi::WorhpInternal    |
+-------------+--------------------------+
| eval_h      | CasADi::WorhpInternal    |
+-------------+--------------------------+
| eval_jac_g  | CasADi::WorhpInternal    |
+-------------+--------------------------+
| inputs      | CasADi::FunctionInternal |
+-------------+--------------------------+
| outputs     | CasADi::FunctionInternal |
+-------------+--------------------------+

>List of available stats
+--------------------+-----------------------+
|         Id         |        Used in        |
+====================+=======================+
| iter_count         | CasADi::WorhpInternal |
+--------------------+-----------------------+
| iteration          | CasADi::WorhpInternal |
+--------------------+-----------------------+
| iterations         | CasADi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_f           | CasADi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_g           | CasADi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_grad_f      | CasADi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_h           | CasADi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_jac_g       | CasADi::WorhpInternal |
+--------------------+-----------------------+
| return_code        | CasADi::WorhpInternal |
+--------------------+-----------------------+
| return_status      | CasADi::WorhpInternal |
+--------------------+-----------------------+
| t_callback_fun     | CasADi::WorhpInternal |
+--------------------+-----------------------+
| t_callback_prepare | CasADi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_f           | CasADi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_g           | CasADi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_grad_f      | CasADi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_h           | CasADi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_jac_g       | CasADi::WorhpInternal |
+--------------------+-----------------------+
| t_mainloop         | CasADi::WorhpInternal |
+--------------------+-----------------------+

Diagrams

C++ includes: worhp_solver.hpp ";

%feature("docstring") CasADi::WorhpSolver::solve "

the same as evaluate()

";

%feature("docstring") CasADi::WorhpSolver::input "

[UNSAFE] Obtain reference to inputs

Access input argument

";

%feature("docstring") CasADi::WorhpSolver::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") CasADi::WorhpSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") CasADi::WorhpSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") CasADi::WorhpSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") CasADi::WorhpSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs corresponds to nondifferentiated
inputs. The next nfwd*n_in inputs corresponds to forward seeds, one
direction at a time and the last nadj*n_out inputs corresponds to adjoint
seeds, one direction at a time. The first n_out outputs corresponds to
nondifferentiated outputs. The next nfwd*n_out outputs corresponds to
forward sensitivities, one direction at a time and the last nadj*n_in
outputs corresponds to adjoint sensitivties, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") CasADi::WorhpSolver::WorhpSolver "

>  CasADi::WorhpSolver::WorhpSolver()
------------------------------------------------------------------------

Default constructor.

>  CasADi::WorhpSolver::WorhpSolver(const Function &F, const Function &G)
------------------------------------------------------------------------

[DEPRECATED] Create an NLP solver instance (legacy syntax)

>  CasADi::WorhpSolver::WorhpSolver(const Function &nlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") CasADi::WorhpSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") CasADi::WorhpSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") CasADi::WorhpSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") CasADi::WorhpSolver::getInput "

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> CasADi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void CasADi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void CasADi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") CasADi::WorhpSolver::isNull "

Is a null pointer?

";

%feature("docstring") CasADi::WorhpSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") CasADi::WorhpSolver::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") CasADi::WorhpSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") CasADi::WorhpSolver::setJacSparsity "

Generate the sparsity of a Jacobian block.

";

%feature("docstring") CasADi::WorhpSolver::indexed_one_based "

[DEPRECATED]

";

%feature("docstring") CasADi::WorhpSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") CasADi::WorhpSolver::call "

>  std::vector<DMatrix> CasADi::Function::call(const std::vector< DMatrix > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<SX> CasADi::Function::call(const std::vector< SX > &arg, bool always_inline=false, bool never_inline=false)

>  std::vector<MX> CasADi::Function::call(const std::vector< MX > &arg, bool always_inline=false, bool never_inline=false)
------------------------------------------------------------------------

Evaluate the function symbolically or numerically.

>  std::vector<std::vector<MX> > CasADi::Function::call(const std::vector< std::vector< MX > > &arg, const Dictionary &paropt=Dictionary())

>  void CasADi::Function::call(const MXVector &arg, MXVector &output_res, const MXVectorVector &fseed, MXVectorVector &output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens)

>  std::vector<MX> CasADi::Function::call(const MX &arg)
------------------------------------------------------------------------

[DEPRECATED]

";

%feature("docstring") CasADi::WorhpSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") CasADi::WorhpSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") CasADi::WorhpSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") CasADi::WorhpSolver::dictionary "

Get the dictionary.

";

%feature("docstring") CasADi::WorhpSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") CasADi::WorhpSolver::indexed_zero_based "

[DEPRECATED]

";

%feature("docstring") CasADi::WorhpSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::WorhpSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") CasADi::WorhpSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") CasADi::WorhpSolver::evalMX "

[DEPRECATED]

";

%feature("docstring") CasADi::WorhpSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") CasADi::WorhpSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") CasADi::WorhpSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") CasADi::WorhpSolver::output "

[UNSAFE] Obtain reference to outputs

Access output argument

";

%feature("docstring") CasADi::WorhpSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") CasADi::WorhpSolver::evaluate "

Evaluate.

";

%feature("docstring") CasADi::WorhpSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") CasADi::WorhpSolver::jacG "

Access the Jacobian of the constraint function.

>Input scheme: CasADi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective. .           |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: CasADi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";


// File: classCasADi_1_1XMLNode.xml
%feature("docstring") CasADi::XMLNode::dump "[INTERNAL] ";

%feature("docstring") CasADi::XMLNode "[INTERNAL] C++ includes:
xml_node.hpp ";

%feature("docstring") CasADi::XMLNode::checkName "[INTERNAL]  check if the
name is equal to something

";

%feature("docstring") CasADi::XMLNode::addNode "[INTERNAL]  Read node from
parsed XML file.

";

%feature("docstring") CasADi::XMLNode::hasAttribute "[INTERNAL]  Check if
an attribute is present.

";

%feature("docstring") CasADi::XMLNode::setName "[INTERNAL]  Set the name of
the node.

";

%feature("docstring") CasADi::XMLNode::readAttribute "[INTERNAL]  Read the
value of an attribute.

";

%feature("docstring") CasADi::XMLNode::XMLNode "[INTERNAL] ";

%feature("docstring") CasADi::XMLNode::~XMLNode "[INTERNAL] ";

%feature("docstring") CasADi::XMLNode::setAttribute "[INTERNAL]  Add an
attribute.

";

%feature("docstring") CasADi::XMLNode::size "[INTERNAL]  Get the number of
children.

";

%feature("docstring") CasADi::XMLNode::getName "[INTERNAL]  Get the name of
the node.

";

%feature("docstring") CasADi::XMLNode::getAttribute "[INTERNAL]  Get an
attribute by its name.

";

%feature("docstring") CasADi::XMLNode::getText "

>  std::string CasADi::XMLNode::getText() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the text field.

>  void CasADi::XMLNode::getText(T &val) const 
------------------------------------------------------------------------
[INTERNAL] 
Get value of text field.

";

%feature("docstring") CasADi::XMLNode::hasChild "[INTERNAL]  Check if a
child is present.

";


// File: classCasADi_1_1ZeroByZero.xml
%feature("docstring") CasADi::ZeroByZero::getMultiplication "[INTERNAL]
Matrix multiplication.

The optinal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") CasADi::ZeroByZero::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") CasADi::ZeroByZero::getBinarySwitch "[INTERNAL]  Get
a binary operation operation.

";

%feature("docstring") CasADi::ZeroByZero::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") CasADi::ZeroByZero "[INTERNAL]  A zero-by-zero
matrix.

C++ includes: constant_mx.hpp ";

%feature("docstring") CasADi::ZeroByZero::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") CasADi::ZeroByZero::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") CasADi::ZeroByZero::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") CasADi::ZeroByZero::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") CasADi::ZeroByZero::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") CasADi::ZeroByZero::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") CasADi::ZeroByZero::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") CasADi::ZeroByZero::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") CasADi::ZeroByZero::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") CasADi::ZeroByZero::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") CasADi::ZeroByZero::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::ZeroByZero::size2 "[INTERNAL] ";

%feature("docstring") CasADi::ZeroByZero::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") CasADi::ZeroByZero::size1 "[INTERNAL] ";

%feature("docstring") CasADi::ZeroByZero::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") CasADi::ZeroByZero::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") CasADi::ZeroByZero::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") CasADi::ZeroByZero::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") CasADi::ZeroByZero::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") CasADi::ZeroByZero::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") CasADi::ZeroByZero::setDependencies "

>  void CasADi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") CasADi::ZeroByZero::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") CasADi::ZeroByZero::getInnerProd "[INTERNAL]   Matrix
multiplcation.

Inner product

";

%feature("docstring") CasADi::ZeroByZero::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") CasADi::ZeroByZero::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") CasADi::ZeroByZero::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::ZeroByZero::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") CasADi::ZeroByZero::numel "[INTERNAL]  Get shape.

";

%feature("docstring") CasADi::ZeroByZero::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") CasADi::ZeroByZero::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") CasADi::ZeroByZero::getVertsplit "[INTERNAL]  Create
a vertical split node (vectors only)

";

%feature("docstring") CasADi::ZeroByZero::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") CasADi::ZeroByZero::getHorzsplit "[INTERNAL]  Create
a horizontal split node.

";

%feature("docstring") CasADi::ZeroByZero::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") CasADi::ZeroByZero::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") CasADi::ZeroByZero::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") CasADi::ZeroByZero::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") CasADi::ZeroByZero::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") CasADi::ZeroByZero::getSetSparse "[INTERNAL]  Get
densification.

";

%feature("docstring") CasADi::ZeroByZero::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") CasADi::ZeroByZero::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") CasADi::ZeroByZero::size "[INTERNAL] ";

%feature("docstring") CasADi::ZeroByZero::~ZeroByZero "[INTERNAL]
Destructor.

";

%feature("docstring") CasADi::ZeroByZero::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") CasADi::ZeroByZero::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") CasADi::ZeroByZero::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") CasADi::ZeroByZero::assign "

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void CasADi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") CasADi::ZeroByZero::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") CasADi::ZeroByZero::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") CasADi::ZeroByZero::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") CasADi::ZeroByZero::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") CasADi::ZeroByZero::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") CasADi::ZeroByZero::shape "[INTERNAL] ";

%feature("docstring") CasADi::ZeroByZero::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") CasADi::ZeroByZero::getNorm2 "[INTERNAL]  Spectran
norm.

";

%feature("docstring") CasADi::ZeroByZero::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") CasADi::ZeroByZero::dep "

>  const MX & CasADi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & CasADi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::ZeroByZero::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") CasADi::ZeroByZero::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") CasADi::ZeroByZero::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") CasADi::ZeroByZero::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") CasADi::ZeroByZero::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") CasADi::ZeroByZero::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") CasADi::ZeroByZero::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") CasADi::ZeroByZero::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") CasADi::ZeroByZero::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") CasADi::ZeroByZero::print "

>  void CasADi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void CasADi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") CasADi::ZeroByZero::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") CasADi::ZeroByZero::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") CasADi::ZeroByZero::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") CasADi::ZeroByZero::__nonzero__ "[INTERNAL]  Return
truth value of an MX.

";

%feature("docstring") CasADi::ZeroByZero::sparsity "

>  const Sparsity& CasADi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & CasADi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") CasADi::ZeroByZero::getBinary "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") CasADi::ZeroByZero::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") CasADi::ZeroByZero::evaluateMX "

>  void CasADi::ConstantMX::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";


// File: classCasADi_1_1ZeroSX.xml
%feature("docstring") CasADi::ZeroSX::hasDep "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::ZeroSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::ZeroSX::getName "[INTERNAL] ";

%feature("docstring") CasADi::ZeroSX::~ZeroSX "[INTERNAL] ";

%feature("docstring") CasADi::ZeroSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") CasADi::ZeroSX::isZero "[INTERNAL]  Properties.

";

%feature("docstring") CasADi::ZeroSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::ZeroSX::getValue "[INTERNAL]  Get the value.

";

%feature("docstring") CasADi::ZeroSX::marked "[INTERNAL] ";

%feature("docstring") CasADi::ZeroSX::init "[INTERNAL]  Initialize the node
(currently used only to give a similar interface to MXNode)

";

%feature("docstring") CasADi::ZeroSX::ZeroSX "[INTERNAL] ";

%feature("docstring") CasADi::ZeroSX::isNan "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::ZeroSX::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") CasADi::ZeroSX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") CasADi::ZeroSX::isAlmostZero "[INTERNAL]  Properties.

";

%feature("docstring") CasADi::ZeroSX::dep "[INTERNAL]  get the reference of
a child

";

%feature("docstring") CasADi::ZeroSX::getIntValue "[INTERNAL]  Get the
value.

";

%feature("docstring") CasADi::ZeroSX::isInteger "[INTERNAL]  Properties.

";

%feature("docstring") CasADi::ZeroSX::mark "[INTERNAL] ";

%feature("docstring") CasADi::ZeroSX::isConstant "[INTERNAL]  Properties.

";

%feature("docstring") CasADi::ZeroSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") CasADi::ZeroSX::isInf "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::ZeroSX "[INTERNAL]  Represents a zero SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") CasADi::ZeroSX::print "[INTERNAL]  print

";

%feature("docstring") CasADi::ZeroSX::isOne "[INTERNAL]  check properties
of a node

";

%feature("docstring") CasADi::ZeroSX::ndep "[INTERNAL]  Number of
dependencies.

";


// File: namespaceCasADi.xml
%feature("docstring") CasADi::isNonIncreasing "
Check if the vector is non-increasing.

";

%feature("docstring") CasADi::getPtr "

>  DataType * CasADi::getPtr(Matrix< DataType > &v)
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the data contained in the vector

>  const DataType * CasADi::getPtr(const Matrix< DataType > &v)

>  T * CasADi::getPtr(std::vector< T > &v)

>  const T * CasADi::getPtr(const std::vector< T > &v)
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the data contained in the vector.

";

%feature("docstring") CasADi::rank "

Obtain the structural rank of a sparsity-pattern.

";

%feature("docstring") CasADi::bvec_or "[INTERNAL] ";

%feature("docstring") CasADi::logic_and "

Logical and, returns (an expression evaluating to) 1 if both expressions are
nonzero and 0 otherwise.

";

%feature("docstring") CasADi::deepcopy "[INTERNAL]  Make a deep copy of an
object (Note: default is a shallow copy!)

";

%feature("docstring") CasADi::makeDense "

[DEPRECATED]

";

%feature("docstring") CasADi::jacGIn "

>  JacGInputIOSchemeVector<M> CasADi::jacGIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of an NLP Jacobian function

>Input scheme: CasADi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

";

%feature("docstring") CasADi::getFree "

Get all the free variables in an expression.

";

%feature("docstring") CasADi::controldaeIn "

>  ControlledDAEInputIOSchemeVector<M> CasADi::controldaeIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M())
------------------------------------------------------------------------

Input arguments of an ODE/DAE function

>Input scheme: CasADi::ControlledDAEInput (CONTROL_DAE_NUM_IN = 10) [controldaeIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROL_DAE_T          | t                      | Global physical time.  |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X          | x                      | State vector           |
|                        |                        | (dimension nx-by-1).   |
|                        |                        | Should have same       |
|                        |                        | amount of non-zeros as |
|                        |                        | DAEOutput:DAE_RES .    |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_Z          | z                      | Algebraic state vector |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_P          | p                      | Parameter vector       |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U          | u                      | Control vector         |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U_INTERP   | u_interp               | Control vector,        |
|                        |                        | linearly interpolated  |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X_MAJOR    | x_major                | State vector           |
|                        |                        | (dimension nx-by-1) at |
|                        |                        | the last major time-   |
|                        |                        | step .                 |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_T0         | t0                     | Time at start of       |
|                        |                        | control interval       |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_TF         | tf                     | Time at end of control |
|                        |                        | interval (1-by-1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::tangent "

>  MX CasADi::tangent(const MX &ex, const MX &arg)
------------------------------------------------------------------------

split vertically, retaining groups of cols

Parameters:
-----------

output_offset:  List of all start cols for each group the last col group
will run to the end.

horzcat(horzsplit(x,...)) = x

>  SX CasADi::tangent(const SX &ex, const SX &arg)
------------------------------------------------------------------------

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring") CasADi::makeVector "[INTERNAL]  Make a vector of a
certain length with its entries specified Usage C++:
makeVector<ClassName>(LENGTH, ENTRY_INDEX_1, ENTRY_VALUE_1, ENTRY_INDEX_2,
ENTRY_VALUE_2, ...) Usage Python: makeVector(ClassName,(LENGTH,
ENTRY_INDEX_1, ENTRY_VALUE_1, ENTRY_INDEX_2, ENTRY_VALUE_2 ...)

";

%feature("docstring") CasADi::getOperatorRepresentation "

>  std::string CasADi::getOperatorRepresentation(const MX &x, const std::vector< std::string > &args)
------------------------------------------------------------------------

Get a string representation for a binary MX, using custom arguments.

>  std::string CasADi::getOperatorRepresentation(const SXElement &x, const std::vector< std::string > &args)
------------------------------------------------------------------------

Get a string representation for a binary SX, using custom arguments.

";

%feature("docstring") CasADi::casadi_swap "[INTERNAL]  SWAP: x <-> y.

";

%feature("docstring") CasADi::sp_diag "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::heaviside "

Heaviside function.

\\\\[ \\\\begin{cases} H(x) = 0 & x<0 \\\\\\\\ H(x) = 1/2 & x=0 \\\\\\\\
H(x) = 1 & x>0 \\\\\\\\ \\\\end{cases} \\\\]

";

%feature("docstring") CasADi::spy "

Get the sparsity pattern of a matrix.

";

%feature("docstring") CasADi::nlpSolverOut "

>  NLPSolverOutputIOSchemeVector<M> CasADi::nlpSolverOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M())
------------------------------------------------------------------------

Output arguments of an NLP Solver

>Output scheme: CasADi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::vec "

>  MX CasADi::vec(const MX &x)
------------------------------------------------------------------------

Returns a vectorized version of the MX Same as reshape(x, x.numel(),1)

a c b d

turns into

a b c d

>  Matrix< DataType > CasADi::vec(const Matrix< DataType > &a)
------------------------------------------------------------------------

make a vector Reshapes/vectorizes the Matrix<DataType> such that the shape
becomes (expr.numel(),1). Columns are stacked on top of each other. Same as
reshape(expr, expr.numel(),1)

a c b d  turns into

a b c d

>  Sparsity CasADi::vec(const Sparsity &a)
------------------------------------------------------------------------

Vectorize the pattern.

";

%feature("docstring") CasADi::isIncreasing "

Check if the vector is strictly increasing.

";

%feature("docstring") CasADi::slicot_mb03vy "[INTERNAL] ";

%feature("docstring") CasADi::ocpIn "

>  OCPInputIOSchemeVector<M> CasADi::ocpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M(), const std::string &arg_s9="", const M &arg_m9=M(), const std::string &arg_s10="", const M &arg_m10=M(), const std::string &arg_s11="", const M &arg_m11=M(), const std::string &arg_s12="", const M &arg_m12=M())
------------------------------------------------------------------------

Input arguments of an OCP Solver ns: Number of shooting nodes: from option
number_of_grid_points nx: Number of states: from
ffcn.input(INTEGRATOR_X0).size() nc: Number of constants duting intergation:
ffcn.input(INTEGRATOR_P).size() nu: Number of controls: from nc - np np:
Number of parameters: from option number_of_parameters nh: Number of point
constraints: from cfcn.input(0).size()

>Input scheme: CasADi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

";

%feature("docstring") CasADi::getMinor "";

%feature("docstring") CasADi::trim_empty "";

%feature("docstring") CasADi::stabilizedQpIn "

>  StabilizedQPSolverInputIOSchemeVector<M> CasADi::stabilizedQpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M(), const std::string &arg_s9="", const M &arg_m9=M(), const std::string &arg_s10="", const M &arg_m10=M(), const std::string &arg_s11="", const M &arg_m11=M())
------------------------------------------------------------------------

Input arguments of a QP problem

>Input scheme: CasADi::StabilizedQPSolverInput (STABILIZED_QP_SOLVER_NUM_IN = 13) [stabilizedQpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| STABILIZED_QP_SOLVER_H | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_G | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_A | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | uba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lbx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | ubx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_X | x0                     | dense, (n x 1)         |
| 0                      |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lam_x0                 | dense                  |
| AM_X0                  |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muR                    | dense (1 x 1)          |
| UR                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muE                    | dense (nc x 1)         |
| UE                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | mu                     | dense (nc x 1)         |
| U                      |                        |                        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::describeInput "";

%feature("docstring") CasADi::collocationPoints "

Obtain collocation points of specific order and scheme.

Parameters:
-----------

scheme:  'radau' or 'legendre'

";

%feature("docstring") CasADi::__nonzero__< SXElement > " ";

%feature("docstring") CasADi::erfinv "

>  T CasADi::erfinv(const T &x)
------------------------------------------------------------------------
[INTERNAL] 
 Inverse of the error function.

>  double CasADi::erfinv(double x)
------------------------------------------------------------------------
[INTERNAL]  throw ()
 CasADi additions.

";

%feature("docstring") CasADi::tan "[INTERNAL]  Pre-C99 elementary functions
from the math.h (cmath) header.

";

%feature("docstring") CasADi::vertcat "

>  MX CasADi::vertcat(const MX &a, const MX &b)
------------------------------------------------------------------------

concatenate horizontally, two matrices

>  MX CasADi::vertcat(const std::vector< MX > &comp)
------------------------------------------------------------------------

concatenate horizontally

vertcat(vertsplit(x,...)) = x

>  Matrix< DataType > CasADi::vertcat(const std::vector< Matrix< DataType > > &v)
------------------------------------------------------------------------

Concatenate a list of matrices horizontally Alternative terminology:
horizontal stack, hstack, horizontal append, [a b].

vertcat(vertsplit(x,...)) = x

>  Matrix< DataType > CasADi::vertcat(const Matrix< DataType > &x, const Matrix< DataType > &y)
------------------------------------------------------------------------
[INTERNAL]

>  Sparsity CasADi::vertcat(const std::vector< Sparsity > &v)
------------------------------------------------------------------------

Concatenate a list of sparsities vertically Alternative terminology:
vertical stack, vstack, vertical append, [a;b].

";

%feature("docstring") CasADi::compress "

Remove identical calculations.

";

%feature("docstring") CasADi::isinf "[INTERNAL]  throw () C99 elementary
functions from the math.h header.

";

%feature("docstring") CasADi::makeSparse "

[DEPRECATED]

";

%feature("docstring") CasADi::any "";

%feature("docstring") CasADi::print "[INTERNAL]  Print description.

";

%feature("docstring") CasADi::sp_compress "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::blockmatrix "

>  SX CasADi::blockmatrix(SX array[n][m])
------------------------------------------------------------------------
[INTERNAL] 
Create a block matrix.

Return matrix

loop over cols

Create a col

append components to the col

append col to matrix

>  SX CasADi::blockmatrix(SX array[n])
------------------------------------------------------------------------
[INTERNAL] 
Create a block matrix (vector)

Return matrix

loop over cols

append components

";

%feature("docstring") CasADi::dpleIn "

>  DPLEInputIOSchemeVector<M> CasADi::dpleIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of a dple solver

>Input scheme: CasADi::DPLEInput (DPLE_NUM_IN = 3) [dpleIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_A                 | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+
| DPLE_V                 | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::vecNZ "

>  MX CasADi::vecNZ(const MX &x)
------------------------------------------------------------------------

Returns a vectorized version of the MX, prseverving only nonzeros.

>  Matrix< DataType > CasADi::vecNZ(const Matrix< DataType > &a)
------------------------------------------------------------------------

Returns a flattened version of the Matrix, preserving only nonzeros.

";

%feature("docstring") CasADi::exp "[INTERNAL]  Pre-C99 elementary functions
from the math.h (cmath) header.

";

%feature("docstring") CasADi::if_else "

>  MX CasADi::if_else(const MX &cond, const MX &if_true, const MX &if_false)
------------------------------------------------------------------------

Branching on MX nodes Ternary operator, \"cond ? if_true : if_false\".

>  SX CasADi::if_else(const SX &cond, const SX &if_true, const SX &if_false)
------------------------------------------------------------------------

Integrate f from a to b using Gaussian quadrature with n points.

>  T CasADi::if_else(const SXElement &cond, const T &if_true, const T &if_false)
------------------------------------------------------------------------
[INTERNAL] 
Expand the expression as a weighted sum (with constant weights)

";

%feature("docstring") CasADi::casadi_scal "[INTERNAL]  SCAL: x <- alpha*x.

";

%feature("docstring") CasADi::countNodes "

>  int CasADi::countNodes(const MX &A)
------------------------------------------------------------------------

Count number of nodes

>  int CasADi::countNodes(const SX &A)
------------------------------------------------------------------------

Count number of nodes.

";

%feature("docstring") CasADi::matrixName< int > "

Get typename.

";

%feature("docstring") CasADi::log10 "[INTERNAL]  Pre-C99 elementary
functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::qpStruct "

>  QPStructIOSchemeVector<M> CasADi::qpStruct(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Structure specification of a QP

";

%feature("docstring") CasADi::poly_coeff "

extracts polynomial coefficients from an expression

ex Scalar expression that represents a polynomial  x Scalar symbol that th
epolynomial is build up with

";

%feature("docstring") CasADi::tanh "[INTERNAL]  Pre-C99 elementary
functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::isVector "

[DEPRECATED]

";

%feature("docstring") CasADi::constpow "[INTERNAL]   CasADi additions.

";

%feature("docstring") CasADi::daeIn "

>  DAEInputIOSchemeVector<M> CasADi::daeIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Input arguments of an ODE/DAE function

>Input scheme: CasADi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

";

%feature("docstring") CasADi::sp_banded "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::createParent "

>  MX CasADi::createParent(std::vector< MX > &deps)
------------------------------------------------------------------------

Create a parent MX on which all given MX's will depend.

In some sense, this function is the inverse of

Parameters:
-----------

deps:  Must all be symbolic matrices.

>  MX CasADi::createParent(const std::vector< Sparsity > &deps, std::vector< MX > &output_children)

>  MX CasADi::createParent(const std::vector< MX > &deps, std::vector< MX > &output_children)
------------------------------------------------------------------------

Create a parent MX on which a bunch of MX's (sizes given as argument) will
depend.

";

%feature("docstring") CasADi::inBounds "

>  bool CasADi::inBounds(const std::vector< T > &v, int upper)
------------------------------------------------------------------------

Check if for each element of v holds: v_i < upper.

>  bool CasADi::inBounds(const std::vector< T > &v, int lower, int upper)
------------------------------------------------------------------------

Check if for each element of v holds: lower <= v_i < upper.

";

%feature("docstring") CasADi::sprank "

Obtain the structural rank of a sparsity-pattern.

";

%feature("docstring") CasADi::dense_mul_nt "[INTERNAL] ";

%feature("docstring") CasADi::sinh "[INTERNAL]  Pre-C99 elementary
functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::qpIn "

>  QPSolverInputIOSchemeVector<M> CasADi::qpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M())
------------------------------------------------------------------------

Input arguments of a QP problem

>Input scheme: CasADi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::isnan "[INTERNAL]  throw () C99 elementary
functions from the math.h header.

";

%feature("docstring") CasADi::blocksplit "

>  std::vector< std::vector< MX > > CasADi::blocksplit(const MX &x, const std::vector< int > &vert_offset, const std::vector< int > &horz_offset)
------------------------------------------------------------------------

chop up into blocks

vert_offset Defines the boundaries of the block cols horz_offset Defines the
boundaries of the block rows

blockcat(blocksplit(x,...,...)) = x

>  std::vector< std::vector< MX > > CasADi::blocksplit(const MX &x, int vert_incr=1, int horz_incr=1)
------------------------------------------------------------------------

chop up into blocks

vert_incr Defines the increment for block boundaries in col dimension
horz_incr Defines the increment for block boundaries in row dimension

blockcat(blocksplit(x,...,...)) = x

>  std::vector< std::vector< Matrix< DataType > > > CasADi::blocksplit(const Matrix< DataType > &x, const std::vector< int > &vert_offset, const std::vector< int > &horz_offset)
------------------------------------------------------------------------

chop up into blocks

vert_offset Defines the boundaries of the block rows horz_offset Defines the
boundaries of the block columns

blockcat(blocksplit(x,...,...)) = x

>  std::vector< std::vector< Matrix< DataType > > > CasADi::blocksplit(const Matrix< DataType > &x, int vert_incr=1, int horz_incr=1)
------------------------------------------------------------------------

chop up into blocks

vert_incr Defines the increment for block boundaries in row dimension
horz_incr Defines the increment for block boundaries in column dimension

blockcat(blocksplit(x,...,...)) = x

";

%feature("docstring") CasADi::logic_or "

Logical or, returns (an expression evaluating to) 1 if at least one
expression is nonzero and 0 otherwise.

";

%feature("docstring") CasADi::substituteInPlace "

>  void CasADi::substituteInPlace(const std::vector< MX > &v, std::vector< MX > &vdef, bool reverse=false)
------------------------------------------------------------------------
[INTERNAL] 
Inplace substitution Substitute variables v out of the expressions
vdef sequentially.

>  void CasADi::substituteInPlace(const std::vector< MX > &v, std::vector< MX > &vdef, std::vector< MX > &ex, bool reverse=false)
------------------------------------------------------------------------
[INTERNAL] 
Inplace substitution with piggyback expressions Substitute variables v
out of the expressions vdef sequentially, as well as out of a number
of other expressions piggyback.

>  void CasADi::substituteInPlace(const SX &v, SX &vdef, bool reverse=false)
------------------------------------------------------------------------

Substitute variable var out of or into an expression expr.

>  void CasADi::substituteInPlace(const SX &v, SX &vdef, std::vector< SX > &ex, bool reverse=false)
------------------------------------------------------------------------

Substitute variable var out of or into an expression expr, with an arbitrary
number of other expressions piggyback.

>  void CasADi::substituteInPlace(const std::vector< SX > &v, std::vector< SX > &vdef, std::vector< SX > &ex, bool reverse=false)
------------------------------------------------------------------------

Substitute variable var out of or into an expression expr, with an arbitrary
number of other expressions piggyback (vector version)

";

%feature("docstring") CasADi::sdqpOut "

>  SDQPOutputIOSchemeVector<M> CasADi::sdqpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M())
------------------------------------------------------------------------

Output arguments of an SDQP Solver

>Output scheme: CasADi::SDQPOutput (SDQP_SOLVER_NUM_OUT = 8) [sdqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_P          | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL       | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL_COST  | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::casadi_iamax "[INTERNAL]  IAMAX: index
corresponding to the entry with the largest absolute value.

";

%feature("docstring") CasADi::write_matlab "

>  void CasADi::write_matlab(std::ostream &stream, const std::vector< T > &v)
------------------------------------------------------------------------

Print vector, matlab style.

>  void CasADi::write_matlab(std::ostream &stream, const std::vector< std::vector< T > > &v)
------------------------------------------------------------------------

Print matrix, matlab style.

";

%feature("docstring") CasADi::socpStruct "

>  SOCPStructIOSchemeVector<M> CasADi::socpStruct(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Structure specification of an SOCP

";

%feature("docstring") CasADi::hash_sparsity "

Hash a sparsity pattern.

";

%feature("docstring") CasADi::getSchemeEntryNames "";

%feature("docstring") CasADi::upperNZ "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::veccat "

>  MX CasADi::veccat(const std::vector< MX > &comp)
------------------------------------------------------------------------

Concatenate vertically while vectorizing all arguments.

>  Matrix< DataType > CasADi::veccat(const std::vector< Matrix< DataType > > &comp)
------------------------------------------------------------------------

concatenate vertically while vectorizing all arguments with vec

";

%feature("docstring") CasADi::getSchemeEntryEnumName "";

%feature("docstring") CasADi::lpIn "

>  LPSolverInputIOSchemeVector<M> CasADi::lpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M())
------------------------------------------------------------------------

Input arguments of a LP problem

>Input scheme: CasADi::LPSolverInput (LP_SOLVER_NUM_IN = 7) [lpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_C            | c                      | The vector c: dense (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| LP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::ssym "

[DEPRECATED]

";

%feature("docstring") CasADi::isNonDecreasing "

Check if the vector is non-decreasing.

";

%feature("docstring") CasADi::pw_lin "

t a scalar variable (e.g. time)

Create a piecewise linear function Create a piecewise linear function:

Inputs: tval vector with the the discrete values of t (monotonically
increasing) val vector with the corresponding function values (same length
as tval)

";

%feature("docstring") CasADi::adj "";

%feature("docstring") CasADi::getIntValue "

[DEPRECATED]

";

%feature("docstring") CasADi::isMonotone "

Check if the vector is monotone.

";

%feature("docstring") CasADi::isConstant "

[DEPRECATED]

";

%feature("docstring") CasADi::ramp "

ramp function

\\\\[ \\\\begin{cases} R(x) = 0 & x <= 1 \\\\\\\\ R(x) = x & x > 1 \\\\\\\\
\\\\end{cases} \\\\]

Also called: slope function

";

%feature("docstring") CasADi::cosh "[INTERNAL]  Pre-C99 elementary
functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::isMinusOne "

[DEPRECATED]

";

%feature("docstring") CasADi::isRegular "

>  bool CasADi::isRegular(const Matrix< DataType > &ex)

>  bool CasADi::isRegular(const MX &ex)

>  bool CasADi::isRegular(const SXElement &ex)

>  bool CasADi::isRegular(const SX &ex)
------------------------------------------------------------------------

[DEPRECATED]

>  bool CasADi::isRegular(const std::vector< T > &v)
------------------------------------------------------------------------

Checks if vector does not contain NaN or Inf.

";

%feature("docstring") CasADi::str "";

%feature("docstring") CasADi::if_else_zero "[INTERNAL]  Conditional
assignment.

";

%feature("docstring") CasADi::getSchemeName "";

%feature("docstring") CasADi::fabs "[INTERNAL]  Pre-C99 elementary
functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::acos "[INTERNAL]  Pre-C99 elementary
functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::isTril "

[DEPRECATED]

";

%feature("docstring") CasADi::sp_triplet "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::dormqr_ "[INTERNAL]  Multiply right hand side
with Q-transpose (lapack)

";

%feature("docstring") CasADi::norm_1 "

>  MX CasADi::norm_1(const MX &x)

>  Matrix< DataType > CasADi::norm_1(const Matrix< DataType > &x)
------------------------------------------------------------------------

1-norm

>  T CasADi::norm_1(const std::vector< T > &x)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::norm_2 "

>  MX CasADi::norm_2(const MX &x)

>  Matrix< DataType > CasADi::norm_2(const Matrix< DataType > &x)
------------------------------------------------------------------------

2-norm

>  T CasADi::norm_2(const std::vector< T > &x)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::integratorOut "

>  IntegratorOutputIOSchemeVector<M> CasADi::integratorOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M())
------------------------------------------------------------------------

Output arguments of an integrator

>Output scheme: CasADi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::project "

Create a new matrix with a given sparsity pattern but with the nonzeros
taken from an existing matrix.

";

%feature("docstring") CasADi::all "";

%feature("docstring") CasADi::inv "

>  MX CasADi::inv(const MX &A)
------------------------------------------------------------------------

Matrix inverse (experimental)

";

%feature("docstring") CasADi::dense_mul_nn "[INTERNAL] ";

%feature("docstring") CasADi::expand "

Expand the expression as a weighted sum (with constant weights)

";

%feature("docstring") CasADi::matrix_expand "

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring") CasADi::isTriu "

[DEPRECATED]

";

%feature("docstring") CasADi::matrixName< SXElement > " [INTERNAL] ";

%feature("docstring") CasADi::hessLagIn "

>  HessLagInputIOSchemeVector<M> CasADi::hessLagIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Input arguments of an NLP Hessian function

>Input scheme: CasADi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective. .           |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::gradFIn "

>  GradFInputIOSchemeVector<M> CasADi::gradFIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of an NLP objective gradient function

>Input scheme: CasADi::GradFInput (GRADF_NUM_IN = 3) [gradFIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| GRADF_X   | x     | Decision variable . |
+-----------+-------+---------------------+
| GRADF_P   | p     | Fixed parameter .   |
+-----------+-------+---------------------+

";

%feature("docstring") CasADi::ocpOut "

>  OCPOutputIOSchemeVector<M> CasADi::ocpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Output arguments of an OCP Solver

>Output scheme: CasADi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::sdqpStruct "

>  SDQPStructIOSchemeVector<M> CasADi::sdqpStruct(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Structure specification of an SDQP

";

%feature("docstring") CasADi::applymap "[INTERNAL]  Apply a function f to
each element in a vector

";

%feature("docstring") CasADi::blockcat "

>  MX CasADi::blockcat(const std::vector< std::vector< MX > > &v)
------------------------------------------------------------------------

Construct a matrix from a list of list of blocks.

blockcat(blocksplit(x,...,...)) = x

>  MX CasADi::blockcat(const MX &A, const MX &B, const MX &C, const MX &D)

>  Matrix< DataType > CasADi::blockcat(const std::vector< std::vector< Matrix< DataType > > > &v)
------------------------------------------------------------------------

Construct a matrix from a list of list of blocks.

>  Matrix< DataType > CasADi::blockcat(const Matrix< DataType > &A, const Matrix< DataType > &B, const Matrix< DataType > &C, const Matrix< DataType > &D)
------------------------------------------------------------------------
[INTERNAL] 
Construct a matrix from 4 blocks.

";

%feature("docstring") CasADi::polyval "

Evaluate a polynomial with coefficeints p in x.

";

%feature("docstring") CasADi::sumCols "

Return a col-wise summation of elements.

";

%feature("docstring") CasADi::mayerIn "

>  MayerInputIOSchemeVector<M> CasADi::mayerIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of a Mayer Term nx: Number of states: from
ffcn.input(INTEGRATOR_X0).size() np: Number of parameters: from option
number_of_parameters>Input scheme: CasADi::MayerInput (MAYER_NUM_IN = 3)
[mayerIn]
+-----------+-------+---------------------------------------------+ | Full
name | Short |                 Description                 |
+===========+=======+=============================================+ |
MAYER_X   | x     | States at the end of integration (nx x 1) . |
+-----------+-------+---------------------------------------------+ |
MAYER_P   | p     | Problem parameters (np x 1) .               |
+-----------+-------+---------------------------------------------+

";

%feature("docstring") CasADi::casadi_asum "[INTERNAL]  ASUM: ||x||_1 ->
return.

";

%feature("docstring") CasADi::explicitRK "

Construct an explicit Runge-Kutta integrator.

Parameters:
-----------

f:  dynamical system

>Input scheme: CasADi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: CasADi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

tf:  Integration end time

order:  Order of integration

ne:  Number of times the RK primitive is repeated over the integration
interval

";

%feature("docstring") CasADi::msym "

[DEPRECATED]

";

%feature("docstring") CasADi::slicot_periodic_schur "

>  void CasADi::slicot_periodic_schur(int n, int K, const std::vector< double > &a, std::vector< double > &t, std::vector< double > &z, std::vector< double > &eig_real, std::vector< double > &eig_imag)

>  void CasADi::slicot_periodic_schur(int n, int K, const std::vector< double > &a, std::vector< double > &t, std::vector< double > &z, std::vector< double > &dwork, std::vector< double > &eig_real, std::vector< double > &eig_imag)
------------------------------------------------------------------------
[INTERNAL]

>  void CasADi::slicot_periodic_schur(const std::vector< Matrix< double > > &A, std::vector< Matrix< double > > &output_T, std::vector< Matrix< double > > &output_Z, std::vector< double > &eig_real, std::vector< double > &output_eig_imag)
------------------------------------------------------------------------

Obtain Periodic Schur Form of a set of matrices.

Finds Z_i such that

Z_1' * H_1 * Z_2 = T_1,           Z_2' * H_2 * Z_3 = T_2, ...           Z_K'
* H_K * Z_1 = T_K,

with T_1 in Hessenberg form (upper triangular + one band below the diagonal)
and T_2..T_K upper diagonal

";

%feature("docstring") CasADi::rectangle "

rectangle function

\\\\[ \\\\begin{cases} \\\\Pi(x) = 1 & |x| < 1/2 \\\\\\\\ \\\\Pi(x) = 1/2 &
|x| = 1/2 \\\\\\\\ \\\\Pi(x) = 0 & |x| > 1/2 \\\\\\\\ \\\\end{cases} \\\\]

Also called: gate function, block function, band function, pulse function,
window function

";

%feature("docstring") CasADi::hash_combine "[INTERNAL]  Generate a hash
value incrementally (function taken from boost)

";

%feature("docstring") CasADi::addMultiple "

same as: res += mul(A,v)

";

%feature("docstring") CasADi::cos "[INTERNAL]  Pre-C99 elementary functions
from the math.h (cmath) header.

";

%feature("docstring") CasADi::densify "

[DEPRECATED]

";

%feature("docstring") CasADi::toVector "[INTERNAL] ";

%feature("docstring") CasADi::getSchemeEntryName "";

%feature("docstring") CasADi::norm_F "

Frobenius norm.

";

%feature("docstring") CasADi::dtrsm_ "[INTERNAL]   Solve upper triangular
system (lapack)

";

%feature("docstring") CasADi::gradFOut "

>  GradFOutputIOSchemeVector<M> CasADi::gradFOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Output arguments of an NLP objective gradient function

>Output scheme: CasADi::GradFOutput (GRADF_NUM_OUT = 4) [gradFOut]
+------------+-------+-------------------------------+
| Full name  | Short |          Description          |
+============+=======+===============================+
| GRADF_GRAD | grad  | Jacobian of the constraints . |
+------------+-------+-------------------------------+
| GRADF_F    | f     | Objective function .          |
+------------+-------+-------------------------------+
| GRADF_G    | g     | Constraint function .         |
+------------+-------+-------------------------------+

";

%feature("docstring") CasADi::collocationPointsGen "";

%feature("docstring") CasADi::lookupvector "

Returns a vector for quickly looking up entries of supplied list.

lookupvector[i]!=-1 <=> v contains i v[lookupvector[i]] == i <=> v contains
i

Duplicates are treated by looking up last occurence

";

%feature("docstring") CasADi::lowerSparsity "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::isZero "

[DEPRECATED]

";

%feature("docstring") CasADi::ptrVec "[INTERNAL]  Convenience function,
convert vectors to vectors of pointers.

";

%feature("docstring") CasADi::linsolOut "

>  LinsolOutputIOSchemeVector<M> CasADi::linsolOut(const std::string &arg_s0="", const M &arg_m0=M())
------------------------------------------------------------------------

Output arguments of a linear solver

>Output scheme: CasADi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

";

%feature("docstring") CasADi::reshape "

>  MX CasADi::reshape(const MX &x, std::pair< int, int > rc)
------------------------------------------------------------------------

Returns a reshaped version of the MX, dimensions as a vector.

>  MX CasADi::reshape(const MX &x, int nrow, int ncol)
------------------------------------------------------------------------

Returns a reshaped version of the MX.

>  MX CasADi::reshape(const MX &x, const Sparsity &sp)
------------------------------------------------------------------------

Reshape the MX.

>  Sparsity CasADi::reshape(const Sparsity &a, int nrow, int ncol)
------------------------------------------------------------------------

Reshape the sparsity pattern keeping the relative location of the nonzeros.

";

%feature("docstring") CasADi::has_empty "";

%feature("docstring") CasADi::sp_band "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::det "

>  MX CasADi::det(const MX &A)
------------------------------------------------------------------------

Matrix determinant (experimental)

";

%feature("docstring") CasADi::blkdiag "

>  MX CasADi::blkdiag(const std::vector< MX > &A)

>  MX CasADi::blkdiag(const MX &A, const MX &B)
------------------------------------------------------------------------

Construct a matrix with given blocks on the diagonal.

>  Matrix< DataType > CasADi::blkdiag(const std::vector< Matrix< DataType > > &A)
------------------------------------------------------------------------

Construct a matrix with given block on the diagonal.

>  Sparsity CasADi::blkdiag(const std::vector< Sparsity > &v)
------------------------------------------------------------------------

Construct a Sparsity with given blocks on the diagonal.

";

%feature("docstring") CasADi::kron "

Kronecker tensor product.

Creates a block matrix in which each element (i,j) is a_ij*b

";

%feature("docstring") CasADi::slicot_mb03wd "[INTERNAL] ";

%feature("docstring") CasADi::getDescription "[INTERNAL]  Print description
to string.

";

%feature("docstring") CasADi::horzsplit "

>  std::vector< MX > CasADi::horzsplit(const MX &x, const std::vector< int > &output_offset)
------------------------------------------------------------------------

split vertically, retaining groups of cols

Parameters:
-----------

output_offset:  List of all start cols for each group the last col group
will run to the end.

horzcat(horzsplit(x,...)) = x

>  std::vector< MX > CasADi::horzsplit(const MX &x, int incr=1)

>  std::vector< Matrix< DataType > > CasADi::horzsplit(const Matrix< DataType > &v, int incr=1)
------------------------------------------------------------------------

split vertically, retaining fixed-sized groups of cols

Parameters:
-----------

incr:  Size of each group of cols

horzcat(horzsplit(x,...)) = x

>  std::vector< Matrix< DataType > > CasADi::horzsplit(const Matrix< DataType > &v, const std::vector< int > &offset)
------------------------------------------------------------------------

split vertically, retaining groups of cols

Parameters:
-----------

offset:  List of all start cols for each group the last col group will run
to the end.

horzcat(horzsplit(x,...)) = x

>  std::vector< Sparsity > CasADi::horzsplit(const Sparsity &sp, const std::vector< int > &output_offset)
------------------------------------------------------------------------

Split up a sparsity pattern horizontally.

";

%feature("docstring") CasADi::dgetrs_ "[INTERNAL]   Solve a system of
equation using an LU-factorized matrix (lapack)

";

%feature("docstring") CasADi::slicot_mb03vd "[INTERNAL] ";

%feature("docstring") CasADi::asin "[INTERNAL]  Pre-C99 elementary
functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::getRepresentation "[INTERNAL]  Print
representation to string.

";

%feature("docstring") CasADi::lpStruct "

>  LPStructIOSchemeVector<M> CasADi::lpStruct(const std::string &arg_s0="", const M &arg_m0=M())
------------------------------------------------------------------------

Structure specification of an LP

";

%feature("docstring") CasADi::isSymbolicSparse "

[DEPRECATED]

";

%feature("docstring") CasADi::dependsOn "

>  bool CasADi::dependsOn(const SX &f, const SX &arg)
------------------------------------------------------------------------

Check if expression depends on the argument The argument must be symbolic.

>  bool CasADi::dependsOn(const MX &ex, const std::vector< MX > &arg)
------------------------------------------------------------------------

Check if expression depends on any of the arguments The arguments must be
symbolic.

";

%feature("docstring") CasADi::gauss_quadrature "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring") CasADi::taylor "

univariate taylor series expansion

Calculate the taylor expansion of expression 'ex' up to order 'order' with
repsect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:>>   x

";

%feature("docstring") CasADi::inner_prod "

>  MX CasADi::inner_prod(const MX &x, const MX &y)
------------------------------------------------------------------------

Take the inner product of two vectors Equals.

with x and y vectors

>  Matrix< DataType > CasADi::inner_prod(const Matrix< DataType > &x, const Matrix< DataType > &y)
------------------------------------------------------------------------

Inner product of two matrices Equals.

with x and y matrices of the same dimension

>  T CasADi::inner_prod(const std::vector< T > &a, const std::vector< T > &b)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::matrixName "

Get typename.

";

%feature("docstring") CasADi::qcqpIn "

>  QCQPSolverInputIOSchemeVector<M> CasADi::qcqpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M(), const std::string &arg_s9="", const M &arg_m9=M(), const std::string &arg_s10="", const M &arg_m10=M(), const std::string &arg_s11="", const M &arg_m11=M())
------------------------------------------------------------------------

Input arguments of a QP problem

>Input scheme: CasADi::QCQPSolverInput (QCQP_SOLVER_NUM_IN = 13) [qcqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_H          | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_G          | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_P          | p                      | The horizontal stack   |
|                        |                        | of all Pi. Each Pi is  |
|                        |                        | sparse (n x n). Only   |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical. .   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_Q          | q                      | The vertical stack of  |
|                        |                        | all qi: dense, (nq n x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_R          | r                      | The vertical stack of  |
|                        |                        | all scalars ri (nq x   |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_A          | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBA        | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBA        | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBX        | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBX        | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_X0         | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X0     | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::eig_symbolic "

Attempts to find the eigenvalues of a symbolic matrix This will only work
for up to 3x3 matrices.

Bring m in block diagonal form, calculating eigenvalues of each block
seperately ";

%feature("docstring") CasADi::trace "

>  MX CasADi::trace(const MX &A)
------------------------------------------------------------------------

Matrix trace.

";

%feature("docstring") CasADi::__nonzero__ "

>  bool CasADi::__nonzero__(const SXElement &val)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::sq "[INTERNAL] ";

%feature("docstring") CasADi::trans "

>  Matrix<DataType> CasADi::trans(const Matrix< DataType > &x)

>  MX CasADi::trans(const MX &x)
------------------------------------------------------------------------

[DEPRECATED]

>  Sparsity CasADi::trans(const Sparsity &a)
------------------------------------------------------------------------

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::casadi_nrm2 "[INTERNAL]  NRM2: ||x||_2 ->
return.

";

%feature("docstring") CasADi::log "[INTERNAL]  Pre-C99 elementary functions
from the math.h (cmath) header.

";

%feature("docstring") CasADi::daeOut "

>  DAEOutputIOSchemeVector<M> CasADi::daeOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Output arguments of an DAE function

>Output scheme: CasADi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

";

%feature("docstring") CasADi::abs "[INTERNAL]  Pre-C99 elementary functions
from the math.h (cmath) header.

";

%feature("docstring") CasADi::cross "

Matlab's cross command.

";

%feature("docstring") CasADi::casadi_fill "[INTERNAL]  FILL: x <- alpha.

";

%feature("docstring") CasADi::sumAll "

Return summation of all elements.

";

%feature("docstring") CasADi::operation_checker "[INTERNAL] ";

%feature("docstring") CasADi::sp_sparse "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::nlpOut "

>  NLPOutputIOSchemeVector<M> CasADi::nlpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Output arguments of an NLP function

>Output scheme: CasADi::NLPOutput (NL_NUM_OUT = 3) [nlpOut]
+-----------+-------+-----------------------+
| Full name | Short |      Description      |
+===========+=======+=======================+
| NL_F      | f     | Objective function .  |
+-----------+-------+-----------------------+
| NL_G      | g     | Constraint function . |
+-----------+-------+-----------------------+

";

%feature("docstring") CasADi::dlaqge_ "[INTERNAL]  Equilibriate the system.

";

%feature("docstring") CasADi::upperSparsity "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::getSchemeSize "";

%feature("docstring") CasADi::gradient "

>  MX CasADi::gradient(const MX &ex, const MX &arg)
------------------------------------------------------------------------

split vertically, retaining groups of cols

Parameters:
-----------

output_offset:  List of all start cols for each group the last col group
will run to the end.

horzcat(horzsplit(x,...)) = x

>  SX CasADi::gradient(const SX &ex, const SX &arg)
------------------------------------------------------------------------

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring") CasADi::sdpStruct "

>  SDPStructIOSchemeVector<M> CasADi::sdpStruct(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Structure specification of an SDP

";

%feature("docstring") CasADi::evalf "

>  Matrix< double > CasADi::evalf(const SX &ex, const SX &v, const Matrix< double > &vdef)
------------------------------------------------------------------------

Substitute variable v with value vdef in an expression ex, and evaluate
numerically Note: this is not efficient. For critical parts (loops) of your
code, always use SXFunction.

>  Matrix< double > CasADi::evalf(const SX &ex)
------------------------------------------------------------------------

Evaluate an SX graph numerically Note: this is not efficient. For critical
parts (loops) of your code, always use SXFunction.

";

%feature("docstring") CasADi::collocationPointsL "

Obtain collocation points of specific order and scheme.

Parameters:
-----------

scheme:  'radau' or 'legendre'

";

%feature("docstring") CasADi::dense_mul_tn "[INTERNAL] ";

%feature("docstring") CasADi::isSmooth "

[DEPRECATED:use ex.isSmooth()]

";

%feature("docstring") CasADi::isIdentity "

[DEPRECATED]

";

%feature("docstring") CasADi::nullspace "

Computes the nullspace of a matrix A.

Finds Z m-by-(m-n) such that AZ = 0 with A n-by-m with m > n

Assumes A is full rank

Inspired by Numerical Methods in Scientific Computing by Ake Bjorck

";

%feature("docstring") CasADi::getSchemeEntryEnum "";

%feature("docstring") CasADi::sp_tril "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::poly_roots "

Attempts to find the roots of a polynomial.

This will only work for polynomials up to order 3 It is assumed that the
roots are real.

";

%feature("docstring") CasADi::sp_dense "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::logic_not "

Logical not, returns (an expression evaluating to) 1 if expression is zero
and 0 otherwise.

";

%feature("docstring") CasADi::range "

>  std::vector< int > CasADi::range(int start, int stop, int step, int len)
------------------------------------------------------------------------

Range function

Parameters:
-----------

start:

stop:

step:

len:  Consider a infinitely long list [start, start+step, start+2*step, ...]
Elements larger than or equal to stop are chopped off.

>  std::vector< int > CasADi::range(int stop)
------------------------------------------------------------------------

Range function

Parameters:
-----------

stop:

list [0,1,2...stop-1]

";

%feature("docstring") CasADi::transpose "

>  MX CasADi::transpose(const MX &x)
------------------------------------------------------------------------

Transpose an expression.

>  Matrix< DataType > CasADi::transpose(const Matrix< DataType > &x)
------------------------------------------------------------------------

Transpose of a matrix.

>  Sparsity CasADi::transpose(const Sparsity &a)
------------------------------------------------------------------------

Transpose the pattern.

";

%feature("docstring") CasADi::casadi_dot "[INTERNAL]  DOT: inner_prod(x,y)
-> return.

";

%feature("docstring") CasADi::collocationInterpolators "[INTERNAL]  Obtain
collocation interpolating matrices.

Parameters:
-----------

tau_root:  location of collocation points, as obtained from
collocationPoints

C:  interpolating coefficients to obtain derivatives Length: order+1, order
+ 1

dX/dt (j) ~ Sum_i C[j][i]*X(i)

Parameters:
-----------

D:  interpolating coefficients to obtain end state Length: order+1

";

%feature("docstring") CasADi::norm_inf "

>  MX CasADi::norm_inf(const MX &x)

>  Matrix< DataType > CasADi::norm_inf(const Matrix< DataType > &x)
------------------------------------------------------------------------

Infinity-norm.

>  T CasADi::norm_inf(const std::vector< T > &x)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::isDense "

[DEPRECATED]

";

%feature("docstring") CasADi::atan "[INTERNAL]  Pre-C99 elementary
functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::hnlpIn "

>  HNLPInputIOSchemeVector<M> CasADi::hnlpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Input arguments of an Homotopy NLP function

>Input scheme: CasADi::HNLPInput (HNL_NUM_IN = 4) [hnlpIn]
+-----------+-------+----------------------+
| Full name | Short |     Description      |
+===========+=======+======================+
| HNL_X     | x     | Decision variable .  |
+-----------+-------+----------------------+
| HNL_P     | p     | Fixed parameter .    |
+-----------+-------+----------------------+
| HNL_TAU   | tau   | Homotopy parameter . |
+-----------+-------+----------------------+

";

%feature("docstring") CasADi::casadi_mm_tn_sparse "[INTERNAL]  Sparse
matrix-matrix multiplication, the first argument is transposed: z <- z +
x'*y.

";

%feature("docstring") CasADi::dense "

>  MX CasADi::dense(const MX &x)
------------------------------------------------------------------------

create a clipped view into a matrix Create a sparse matrix from a dense
matrix A, with sparsity pattern sp

MX clip(const MX& A, const Sparsity& sp) { Join the sparsity patterns
std::vector<int> mapping; Sparsity sp =
A.sparsity().patternIntersection(sp,mapping);

Split up the mapping std::vector<int> nzA,nzB;

Copy sparsity for(int k=0; k<mapping.size(); ++k){ if(mapping[k]<0){
nzA.push_back(k); } else if(mapping[k]>0){ nzB.push_back(k); } else { throw
CasadiException(\"Pattern intersection not empty\"); } }

Create mapping MX ret; ret.assignNode(new Mapping(sp));
ret->assign(A,range(nzA.size()),nzA); ret->assign(B,range(nzB.size()),nzB);
return ret;

}

Make the matrix dense if not already

>  Matrix< DataType > CasADi::dense(const Matrix< DataType > &A)
------------------------------------------------------------------------

Make a matrix dense.

";

%feature("docstring") CasADi::sp_triu "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::pinv "

>  Matrix< double > CasADi::pinv(const Matrix< double > &A, linearSolverCreator lsolver, const Dictionary &dict=Dictionary())

>  MX CasADi::pinv(const MX &A, linearSolverCreator lsolver, const Dictionary &dict=Dictionary())
------------------------------------------------------------------------

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1>size2), mul(A,pinv(A)) is unity. If the matrix
A is slender (size2<size1), mul(pinv(A),A) is unity.

>  Matrix< DataType > CasADi::pinv(const Matrix< DataType > &A)
------------------------------------------------------------------------

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size2>size1), mul(A,pinv(A)) is unity. If the matrix
A is slender (size1<size2), mul(pinv(A),A) is unity.

";

%feature("docstring") CasADi::sumRows "

Return a row-wise summation of elements.

";

%feature("docstring") CasADi::printme "[INTERNAL]   CasADi additions.

";

%feature("docstring") CasADi::isEqual "

>  bool CasADi::isEqual(const GenericMatrix< MatType > &x, const GenericMatrix< MatType > &y)
------------------------------------------------------------------------

Check if two expressions are equal, assuming that they are comparible.

>  bool CasADi::isEqual(const MX &ex1, const MX &ex2)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") CasADi::nlpSolverIn "

>  NLPSolverInputIOSchemeVector<M> CasADi::nlpSolverIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M())
------------------------------------------------------------------------

Input arguments of an NLP Solver

>Input scheme: CasADi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::tril2symm "

Convert a lower triangular matrix to a symmetric one.

";

%feature("docstring") CasADi::matrixName< double > "

Get typename.

";

%feature("docstring") CasADi::hasNonStructuralZeros "

[DEPRECATED]

";

%feature("docstring") CasADi::linsolIn "

>  LinsolInputIOSchemeVector<M> CasADi::linsolIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of a linear solver

>Input scheme: CasADi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

";

%feature("docstring") CasADi::simplify "

>  void CasADi::simplify(MX &ex)

>  void CasADi::simplify(SX &ex)
------------------------------------------------------------------------

Simplify an expression.

>  void CasADi::simplify(SXElement &ex)
------------------------------------------------------------------------

Simplify the expression: formulates the expression as and eliminates terms.

";

%feature("docstring") CasADi::bvec_clear "[INTERNAL] ";

%feature("docstring") CasADi::lowerNZ "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::floor "[INTERNAL]  Pre-C99 elementary
functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::sin "[INTERNAL]  Pre-C99 elementary functions
from the math.h (cmath) header.

";

%feature("docstring") CasADi::printCompact "

Print compact, introducing new variables for shared subexpressions.

";

%feature("docstring") CasADi::graph_substitute "

>  MX CasADi::graph_substitute(const MX &ex, const std::vector< MX > &v, const std::vector< MX > &vdef)
------------------------------------------------------------------------

Substitute variable v with expression vdef in an expression ex, preserving
nodes.

>  std::vector< MX > CasADi::graph_substitute(const std::vector< MX > &ex, const std::vector< MX > &v, const std::vector< MX > &vdef)
------------------------------------------------------------------------

Substitute variable var with expression expr in multiple expressions,
preserving nodes.

";

%feature("docstring") CasADi::horzcat "

>  MX CasADi::horzcat(const MX &a, const MX &b)
------------------------------------------------------------------------

concatenate vertically, two matrices

>  MX CasADi::horzcat(const std::vector< MX > &x)
------------------------------------------------------------------------

concatenate vertically

horzcat(horzsplit(x,...)) = x

>  Matrix< DataType > CasADi::horzcat(const std::vector< Matrix< DataType > > &v)
------------------------------------------------------------------------

Concatenate a list of matrices vertically Alternative terminology: vertical
stack, vstack, vertical append, [a;b].

horzcat(horzsplit(x,...)) = x

>  Matrix< DataType > CasADi::horzcat(const Matrix< DataType > &x, const Matrix< DataType > &y)
------------------------------------------------------------------------
[INTERNAL]

>  Sparsity CasADi::horzcat(const std::vector< Sparsity > &v)
------------------------------------------------------------------------

Concatenate a list of sparsities horizontally Alternative terminology:
horizontal stack, hstack, horizontal append, [a b].

";

%feature("docstring") CasADi::extractShared "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring") CasADi::controlsimulatorIn "

>  ControlSimulatorInputIOSchemeVector<M> CasADi::controlsimulatorIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Input arguments of a control simulator

>Input scheme: CasADi::ControlSimulatorInput (CONTROLSIMULATOR_NUM_IN = 4) [controlsimulatorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROLSIMULATOR_X0    | x0                     | Differential or        |
|                        |                        | algebraic state at t0  |
|                        |                        | (dimension nx-by-1) .  |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_P     | p                      | Parameters that are    |
|                        |                        | fixed over the entire  |
|                        |                        | horizon (dimension np- |
|                        |                        | by-1) .                |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_U     | u                      | Parameters that change |
|                        |                        | over the integration   |
|                        |                        | intervals (dimension   |
|                        |                        | nu-by-(ns-1)) .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::getNZDense "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::dgetrf_ "[INTERNAL]  LU-Factorize dense
matrix (lapack)

";

%feature("docstring") CasADi::asinh "

>  T CasADi::asinh(const T &x)
------------------------------------------------------------------------
[INTERNAL] 
Pre-C99 elementary functions from the math.h (cmath) header.

>  double CasADi::asinh(double x)
------------------------------------------------------------------------
[INTERNAL]  throw ()
Pre-C99 elementary functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::twice "[INTERNAL] ";

%feature("docstring") CasADi::getcopy "[INTERNAL]  Make a deep copy of an
object (Note: default is a shallow copy!)

";

%feature("docstring") CasADi::complement "

Returns the list of all i in [0,size[ not found in supplied list.

The supplied vector may contain duplicates and may be non-monotonous The
supplied vector will be checked for bounds The result vector is guaranteed
to be monotonously increasing

";

%feature("docstring") CasADi::diag "

>  MX CasADi::diag(const MX &x)
------------------------------------------------------------------------

Get the diagonal of a matrix or construct a diagonal.

When the input is square, the diagonal elements are returned. If the input
is vector-like, a diagonal matrix is constructed with it.

>  Matrix< DataType > CasADi::diag(const Matrix< DataType > &A)
------------------------------------------------------------------------

Get the diagonal of a matrix or construct a diagonal When the input is
square, the diagonal elements are returned. If the input is vector- like, a
diagonal matrix is constructed with it.

";

%feature("docstring") CasADi::sp_rowcol "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::jacobian "

>  MX CasADi::jacobian(const MX &ex, const MX &arg)
------------------------------------------------------------------------

Calculate jacobian via source code transformation.

Uses CasADi::MXFunction::jac

>  SX CasADi::jacobian(const SX &ex, const SX &arg)
------------------------------------------------------------------------

Calculate jacobian via source code transformation.

Uses CasADi::SXFunction::jac

";

%feature("docstring") CasADi::sort "[INTERNAL]  Sort the data in a vector.

Parameters:
-----------

values:  the vector that needs sorting

sorted_values:  the sorted vector

indices:  The indices such that 'sorted_values= values[indices]'

invert_indices:  Output indices such that 'sorted_values[indices=values'

";

%feature("docstring") CasADi::isTranspose "

[DEPRECATED]

";

%feature("docstring") CasADi::solve "

>  Matrix< double > CasADi::solve(const Matrix< double > &A, const Matrix< double > &b, linearSolverCreator lsolver, const Dictionary &dict=Dictionary())

>  MX CasADi::solve(const MX &A, const MX &b, linearSolverCreator lsolver=SymbolicQR::creator, const Dictionary &dict=Dictionary())
------------------------------------------------------------------------

Solve a system of equations: A*x = b.

>  Matrix< DataType > CasADi::solve(const Matrix< DataType > &A, const Matrix< DataType > &b)
------------------------------------------------------------------------

Solve a system of equations: A*x = b The solve routine works similar to
Matlab's backslash when A is square and nonsingular. The algorithm used is
the following:

A simple forward or backward substitution if A is upper or lower triangular

If the linear system is at most 3-by-3, form the inverse via minor expansion
and multiply

Permute the variables and equations as to get a (structurally) nonzero
diagonal, then perform a QR factorization without pivoting and solve the
factorized system.

Note 1: If there are entries of the linear system known to be zero, these
will be removed. Elements that are very small, or will evaluate to be zero,
can still cause numerical errors, due to the lack of pivoting (which is not
possible since cannot compare the size of entries)

Note 2: When permuting the linear system, a BLT (block lower triangular)
transformation is formed. Only the permutation part of this is however used.
An improvement would be to solve block-by-block if there are multiple BLT
blocks.

";

%feature("docstring") CasADi::repr "

>  void CasADi::repr(const std::vector< T > &v, std::ostream &stream=std::cout)
------------------------------------------------------------------------
[INTERNAL] 
Print representation.

";

%feature("docstring") CasADi::repmat "

Repeat matrix A n times vertically and m times horizontally.

";

%feature("docstring") CasADi::isSymbolic "

[DEPRECATED]

";

%feature("docstring") CasADi::getSchemeEntryDoc "";

%feature("docstring") CasADi::sdpOut "

>  SDPOutputIOSchemeVector<M> CasADi::sdpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M())
------------------------------------------------------------------------

Output arguments of an SDP Solver

>Output scheme: CasADi::SDPOutput (SDP_SOLVER_NUM_OUT = 8) [sdpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_X           | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_P           | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL        | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_COST        | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL_COST   | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_A       | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_X       | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::integratorIn "

>  IntegratorInputIOSchemeVector<M> CasADi::integratorIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M())
------------------------------------------------------------------------

Input arguments of an integrator

>Input scheme: CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::mtaylor "

>  SX CasADi::mtaylor(const SX &ex, const SX &x, const SX &a, int order=1)
------------------------------------------------------------------------

multivariate taylor series expansion

Do taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

>  SX CasADi::mtaylor(const SX &ex, const SX &x, const SX &a, int order, const std::vector< int > &order_contributions)
------------------------------------------------------------------------

multivariate taylor series expansion

Do taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

The argument order_contributions can denote how match each variable
contributes to the aggregated order. If x=[x,y] and
order_contributions=[1,2], then the aggregated order of $x^n y^m$ equals
$1n+2m$.

Example usage

$ \\\\sin(b+a)+\\\\cos(b+a)(x-a)+\\\\cos(b+a)(y-b) $ $ y+x-(x^3+3y x^2+3 y^2
x+y^3)/6 $ $ (-3 x^2 y-x^3)/6+y+x $

";

%feature("docstring") CasADi::casadi_axpy "[INTERNAL]  AXPY: y <- a*x + y.

";

%feature("docstring") CasADi::sdpIn "

>  SDPInputIOSchemeVector<M> CasADi::sdpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M())
------------------------------------------------------------------------

Input arguments of a SDP problem

>Input scheme: CasADi::SDPInput (SDP_SOLVER_NUM_IN = 9) [sdpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_F           | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_C           | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_G           | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_A           | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBA         | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBA         | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBX         | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBX         | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::makeSemiExplicit "";

%feature("docstring") CasADi::rdaeOut "

>  RDAEOutputIOSchemeVector<M> CasADi::rdaeOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Output arguments of an ODE/DAE backward integration function

>Output scheme: CasADi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring") CasADi::hessian "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring") CasADi::bvec_toggle "[INTERNAL] ";

%feature("docstring") CasADi::substitute "

>  MX CasADi::substitute(const MX &ex, const MX &v, const MX &vdef)

>  SX CasADi::substitute(const SX &ex, const SX &v, const SX &vdef)
------------------------------------------------------------------------

Substitute variable v with expression vdef in an expression ex.

>  std::vector< MX > CasADi::substitute(const std::vector< MX > &ex, const std::vector< MX > &v, const std::vector< MX > &vdef)

>  std::vector< SX > CasADi::substitute(const std::vector< SX > &ex, const std::vector< SX > &v, const std::vector< SX > &vdef)
------------------------------------------------------------------------

Substitute variable var with expression expr in multiple expressions.

";

%feature("docstring") CasADi::isSingular "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::sdqpIn "

>  SDQPInputIOSchemeVector<M> CasADi::sdqpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M())
------------------------------------------------------------------------

Input arguments of a SDQP problem

>Input scheme: CasADi::SDQPInput (SDQP_SOLVER_NUM_IN = 10) [sdqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_H          | h                      | The matrix H: sparse ( |
|                        |                        | n x n) .               |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_F          | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_G          | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::qr "[INTERNAL]  QR factorization using the
modified Gram-Schmidt algorithm More stable than the classical Gram-Schmidt,
but may break down if the rows of A are nearly linearly dependent See J.
Demmel: Applied Numerical Linear Algebra (algorithm 3.1.). Note that in
SWIG, Q and R are returned by value.

";

%feature("docstring") CasADi::vertsplit "

>  std::vector< MX > CasADi::vertsplit(const MX &x, const std::vector< int > &output_offset)

>  std::vector< Matrix< DataType > > CasADi::vertsplit(const Matrix< DataType > &v, const std::vector< int > &offset)
------------------------------------------------------------------------

split horizontally, retaining groups of rows

Parameters:
-----------

output_offset:  List of all start rows for each group the last row group
will run to the end.

vertcat(vertsplit(x,...)) = x

>  std::vector< MX > CasADi::vertsplit(const MX &x, int incr=1)

>  std::vector< Matrix< DataType > > CasADi::vertsplit(const Matrix< DataType > &v, int incr=1)
------------------------------------------------------------------------

split horizontally, retaining fixed-sized groups of rows

Parameters:
-----------

incr:  Size of each group of rows

vertcat(vertsplit(x,...)) = x

>  std::vector< Sparsity > CasADi::vertsplit(const Sparsity &sp, const std::vector< int > &output_offset)
------------------------------------------------------------------------

Split up a sparsity pattern vertically.

";

%feature("docstring") CasADi::get_bvec_t "

>  bvec_t * CasADi::get_bvec_t(std::vector< double > &v)
------------------------------------------------------------------------

Get an pointer of sets of booleans from a double vector

>  const bvec_t * CasADi::get_bvec_t(const std::vector< double > &v)
------------------------------------------------------------------------

Get an pointer of sets of booleans from a double vector.

>  bvec_t* CasADi::get_bvec_t(std::vector< T > &v)

>  const bvec_t* CasADi::get_bvec_t(const std::vector< T > &v)
------------------------------------------------------------------------
[INTERNAL] 
Get an pointer of sets of booleans from a double vector.

";

%feature("docstring") CasADi::acosh "

>  T CasADi::acosh(const T &x)
------------------------------------------------------------------------
[INTERNAL] 
Pre-C99 elementary functions from the math.h (cmath) header.

>  double CasADi::acosh(double x)
------------------------------------------------------------------------
[INTERNAL]  throw ()
Pre-C99 elementary functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::erf "

>  T CasADi::erf(const T &x)
------------------------------------------------------------------------
[INTERNAL] 
C99 elementary functions from the math.h header.

>  double CasADi::erf(double x)
------------------------------------------------------------------------
[INTERNAL]  throw ()
C99 elementary functions from the math.h header.

";

%feature("docstring") CasADi::pow "[INTERNAL]  Pre-C99 elementary functions
from the math.h (cmath) header.

";

%feature("docstring") CasADi::pw_const "

Create a piecewise constant function Create a piecewise constant function
with n=val.size() intervals.

Inputs:

Parameters:
-----------

t:  a scalar variable (e.g. time)

tval:  vector with the discrete values of t at the interval transitions
(length n-1)

val:  vector with the value of the function for each interval (length n)

";

%feature("docstring") CasADi::jacobianTimesVector "

Calculate the Jacobian and multiply by a vector from the left This is
equivalent to mul(jacobian(ex,arg),v) or mul(jacobian(ex,arg).T,v) for
transpose_jacobian set to false and true respectively. If contrast to these
expressions, it will use directional derivatives which is typically (but not
necessarily) more efficient if the complete Jacobian is not needed and v has
few rows.

";

%feature("docstring") CasADi::sqrt "[INTERNAL]  Pre-C99 elementary
functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::outer_prod "

>  MX CasADi::outer_prod(const MX &x, const MX &y)
------------------------------------------------------------------------

Take the outer product of two vectors Equals.

with x and y vectors

>  Matrix< DataType > CasADi::outer_prod(const Matrix< DataType > &x, const Matrix< DataType > &y)
------------------------------------------------------------------------

Outer product of two vectors Equals.

with x and y vectors

";

%feature("docstring") CasADi::triangle "

triangle function

\\\\[ \\\\begin{cases} \\\\Lambda(x) = 0 & |x| >= 1 \\\\\\\\ \\\\Lambda(x) =
1-|x| & |x| < 1 \\\\end{cases} \\\\]

";

%feature("docstring") CasADi::shared_cast "

>  B CasADi::shared_cast(SharedObject &A)
------------------------------------------------------------------------
[INTERNAL] 
Typecast a shared object to a base class to a shared object to a
derived class, cf. dynamic_cast

Get a pointer to the node

Create a return object

Assign node of B and return

Null pointer if not pointing towards the right type of object

>  const B CasADi::shared_cast(const SharedObject &A)
------------------------------------------------------------------------
[INTERNAL] 
Typecast a shared object to a base class to a shared object to a
derived class, cf. dynamic_cast (const)

";

%feature("docstring") CasADi::dgeqrf_ "[INTERNAL]  QR-factorize dense
matrix (lapack)

";

%feature("docstring") CasADi::getName "

[DEPRECATED]

";

%feature("docstring") CasADi::nnz "

[DEPRECATED]

";

%feature("docstring") CasADi::qcqpStruct "

>  QCQPStructIOSchemeVector<M> CasADi::qcqpStruct(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Structure specification of a QP

";

%feature("docstring") CasADi::atanh "

>  T CasADi::atanh(const T &x)
------------------------------------------------------------------------
[INTERNAL] 
Pre-C99 elementary functions from the math.h (cmath) header.

>  double CasADi::atanh(double x)
------------------------------------------------------------------------
[INTERNAL]  throw ()
Pre-C99 elementary functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::sp_unit "

[DEPRECATED] Replaced with static methods in the Sparsity class

";

%feature("docstring") CasADi::isDecreasing "

Check if the vector is strictly decreasing.

";

%feature("docstring") CasADi::getValue "

[DEPRECATED]

";

%feature("docstring") CasADi::fmin "

>  T CasADi::fmin(const T &x, const T &n)

>  T CasADi::fmin(const T &x, double n)

>  T CasADi::fmin(double x, const T &n)
------------------------------------------------------------------------
[INTERNAL] 
C99 elementary functions from the math.h header.

>  double CasADi::fmin(double x, double y)

>  int CasADi::fmin(int x, int y)
------------------------------------------------------------------------
[INTERNAL]  throw ()
C99 elementary functions from the math.h header.

";

%feature("docstring") CasADi::isStrictlyMonotone "

Check if the vector is strictly monotone.

";

%feature("docstring") CasADi::qcqpOut "

>  QCQPSolverOutputIOSchemeVector<M> CasADi::qcqpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Output arguments of an QP Solver

>Output scheme: CasADi::QCQPSolverOutput (QCQP_SOLVER_NUM_OUT = 5) [qcqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_X          | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_COST       | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::casadi_copy_sparse "[INTERNAL]  COPY sparse:
y <- x.

";

%feature("docstring") CasADi::vecNZcat "

>  MX CasADi::vecNZcat(const std::vector< MX > &comp)
------------------------------------------------------------------------

concatenate vertically while vecing all arguments with vecNZ

>  Matrix< DataType > CasADi::vecNZcat(const std::vector< Matrix< DataType > > &comp)
------------------------------------------------------------------------

concatenate vertically while vectorizing all arguments with vecNZ

";

%feature("docstring") CasADi::linspace "

>  MatType CasADi::linspace(const GenericMatrix< MatType > &a, const GenericMatrix< MatType > &b, int nsteps)
------------------------------------------------------------------------

Matlab's linspace command.

>  void CasADi::linspace(std::vector< T > &v, const F &first, const L &last)
------------------------------------------------------------------------
[INTERNAL] 
Matlab's linspace.

";

%feature("docstring") CasADi::dgeequ_ "[INTERNAL]  Calculate col and row
scalings.

";

%feature("docstring") CasADi::jacGOut "

>  JacGOutputIOSchemeVector<M> CasADi::jacGOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Output arguments of an NLP Jacobian function

>Output scheme: CasADi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") CasADi::sign "[INTERNAL]  Sign function, note that
sign(nan) == nan.

";

%feature("docstring") CasADi::isOne "

[DEPRECATED]

";

%feature("docstring") CasADi::copysign "

>  T CasADi::copysign(const T &x, const T &y)
------------------------------------------------------------------------
[INTERNAL] 
 copysign function

>  double CasADi::copysign(double x, double y)
------------------------------------------------------------------------
[INTERNAL] 
copysign function

";

%feature("docstring") CasADi::dpleOut "

>  DPLEOutputIOSchemeVector<M> CasADi::dpleOut(const std::string &arg_s0="", const M &arg_m0=M())
------------------------------------------------------------------------

Output arguments of a dple solver

>Output scheme: CasADi::DPLEOutput (DPLE_NUM_OUT = 2) [dpleOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_P                 | p                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, blkdiag     |
|                        |                        | otherwise) (cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::nlpIn "

>  NLPInputIOSchemeVector<M> CasADi::nlpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of an NLP function

>Input scheme: CasADi::NLPInput (NL_NUM_IN = 3) [nlpIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| NL_X      | x     | Decision variable . |
+-----------+-------+---------------------+
| NL_P      | p     | Fixed parameter .   |
+-----------+-------+---------------------+

";

%feature("docstring") CasADi::sparse "

Make a matrix sparse by removing numerical zeros.

";

%feature("docstring") CasADi::socpOut "

>  SOCPOutputIOSchemeVector<M> CasADi::socpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Output arguments of an SOCP Solver

>Output scheme: CasADi::SOCPOutput (SOCP_SOLVER_NUM_OUT = 5) [socpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::ceil "[INTERNAL]  Pre-C99 elementary
functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::unite "

Unite two matrices no overlapping sparsity.

";

%feature("docstring") CasADi::tril "

>  MatType CasADi::tril(const GenericMatrix< MatType > &a)
------------------------------------------------------------------------

Get the lower triangular part of a matrix.

>  Sparsity CasADi::tril(const Sparsity &sp, bool includeDiagonal=true)
------------------------------------------------------------------------

Get lower triangular part.

";

%feature("docstring") CasADi::casadi_trans "[INTERNAL]  TRANS: y <-
trans(x)

";

%feature("docstring") CasADi::atan2 "[INTERNAL]  Pre-C99 elementary
functions from the math.h (cmath) header.

";

%feature("docstring") CasADi::isScalar "

[DEPRECATED]

";

%feature("docstring") CasADi::is_a "[INTERNAL]  Check if a shared object is
of a certain type.

";

%feature("docstring") CasADi::describeOutput "";

%feature("docstring") CasADi::rdaeIn "

>  RDAEInputIOSchemeVector<M> CasADi::rdaeIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M())
------------------------------------------------------------------------

Input arguments of an ODE/DAE backward integration function

>Input scheme: CasADi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

";

%feature("docstring") CasADi::implicitRK "

Construct an implicit Runge-Kutta integrator.

Parameters:
-----------

f:  dynamical system

>Input scheme: CasADi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: CasADi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

tf:  Integration end time

order:  Order of integration

scheme:  Collocation scheme, as excepted by collocationPoints function.

ne:  Number of times the RK primitive is repeated over the integration
interval

";

%feature("docstring") CasADi::qpOut "

>  QPSolverOutputIOSchemeVector<M> CasADi::qpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Output arguments of an QP Solver

>Output scheme: CasADi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::isEmpty "

[DEPRECATED]

";

%feature("docstring") CasADi::isInteger "

[DEPRECATED]

";

%feature("docstring") CasADi::socpIn "

>  SOCPInputIOSchemeVector<M> CasADi::socpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M(), const std::string &arg_s9="", const M &arg_m9=M())
------------------------------------------------------------------------

Input arguments of a SOCP problem

>Input scheme: CasADi::SOCPInput (SOCP_SOLVER_NUM_IN = 11) [socpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_G          | g                      | The horizontal stack   |
|                        |                        | of all matrices Gi: (  |
|                        |                        | n x N) .               |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_H          | h                      | The vertical stack of  |
|                        |                        | all vectors hi: ( N x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_E          | e                      | The vertical stack of  |
|                        |                        | all vectors ei: ( nm x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_F          | f                      | The vertical stack of  |
|                        |                        | all scalars fi: ( m x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::lpOut "

>  LPSolverOutputIOSchemeVector<M> CasADi::lpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Output arguments of an LP Solver

>Output scheme: CasADi::LPSolverOutput (LP_SOLVER_NUM_OUT = 5) [lpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| LP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") CasADi::read_matlab "

>  void CasADi::read_matlab(std::istream &stream, std::vector< T > &v)
------------------------------------------------------------------------

Read vector, matlab style.

>  void CasADi::read_matlab(std::ifstream &file, std::vector< std::vector< T > > &v)
------------------------------------------------------------------------

Read matrix, matlab style.

";

%feature("docstring") CasADi::cofactor "";

%feature("docstring") CasADi::hash_value "[INTERNAL]  Hash value of an
integer.

";

%feature("docstring") CasADi::triu "

>  MatType CasADi::triu(const GenericMatrix< MatType > &a)
------------------------------------------------------------------------

Get the upper triangular part of a matrix.

>  Sparsity CasADi::triu(const Sparsity &sp, bool includeDiagonal=true)
------------------------------------------------------------------------

Get upper triangular part.

";

%feature("docstring") CasADi::triu2symm "

Convert a upper triangular matrix to a symmetric one.

";

%feature("docstring") CasADi::getSymbols "

>  std::vector< SXElement > CasADi::getSymbols(const SX &e)
------------------------------------------------------------------------

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:   SXFunction::getFree()

>  std::vector< MX > CasADi::getSymbols(const MX &e)

>  std::vector< MX > CasADi::getSymbols(const std::vector< MX > &e)
------------------------------------------------------------------------

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:   MXFunction::getFree()

";

%feature("docstring") CasADi::hessLagOut "

>  HessLagOutputIOSchemeVector<M> CasADi::hessLagOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M())
------------------------------------------------------------------------

Output arguments of an NLP Hessian function

>Output scheme: CasADi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") CasADi::fmax "

>  T CasADi::fmax(const T &x, const T &n)

>  T CasADi::fmax(const T &x, double n)

>  T CasADi::fmax(double x, const T &n)
------------------------------------------------------------------------
[INTERNAL] 
C99 elementary functions from the math.h header.

>  double CasADi::fmax(double x, double y)

>  int CasADi::fmax(int x, int y)
------------------------------------------------------------------------
[INTERNAL]  throw ()
C99 elementary functions from the math.h header.

";

%feature("docstring") CasADi::mul "

>  MX CasADi::mul(const MX &x, const MX &y, const Sparsity &sp_z=Sparsity())
------------------------------------------------------------------------

Take the matrix product of 2 MX objects.

With optional sp_z you can specify the sparsity of the result A typical use
case might be where the product is only constructed to inspect the trace of
it. sp_z diagonal will be more efficient then.

>  MX CasADi::mul(const std::vector< MX > &x)
------------------------------------------------------------------------

Take the matrix product of n MX objects.

>  Matrix< DataType > CasADi::mul(const Matrix< DataType > &x, const Matrix< DataType > &y, const Sparsity &sp_z=Sparsity())
------------------------------------------------------------------------

Matrix product of two matrices.

With optional sp_z you can specify the sparsity of the result A typical use
case might be where the product is only constructed to inspect the trace of
it. sp_z diagonal will be more efficient then.

>  Matrix< DataType > CasADi::mul(const std::vector< Matrix< DataType > > &args)
------------------------------------------------------------------------

Matrix product of n matrices.

>  Sparsity CasADi::mul(const Sparsity &a, const Sparsity &b)
------------------------------------------------------------------------

Get the sparsity resulting from a matrix multiplication.

";

%feature("docstring") CasADi::casadi_copy "[INTERNAL]  COPY: y <-x.

";


// File: namespaceIpopt.xml


// File: namespacestd.xml


// File: 01_8dox.xml


// File: 02_8dox.xml


// File: 03_8dox.xml


// File: 04_8dox.xml


// File: 05_8dox.xml


// File: 06_8dox.xml


// File: a0__schemes_8hpp.xml


// File: all_8hpp.xml


// File: assertion_8cpp.xml


// File: symbolic_2mx_2assertion_8hpp.xml


// File: documentation_2examples_2misc_2assertion_8hpp.xml


// File: autogenerated_8cpp.xml


// File: b0__options_8hpp.xml


// File: binary__mx_8hpp.xml


// File: binary__mx__impl_8hpp.xml


// File: binary__sx_8hpp.xml


// File: c0__monitors_8hpp.xml


// File: call__function_8cpp.xml


// File: call__function_8hpp.xml


// File: callback_8hpp.xml


// File: casadi_8hpp.xml


// File: casadi__calculus_8hpp.xml


// File: casadi__exception_8hpp.xml


// File: casadi__limits_8hpp.xml


// File: casadi__math_8hpp.xml


// File: casadi__meta_8cpp.xml


// File: casadi__meta_8hpp.xml


// File: casadi__options_8cpp.xml


// File: casadi__options_8hpp.xml


// File: casadi__types_8hpp.xml


// File: code__generator_8cpp.xml


// File: code__generator_8hpp.xml


// File: collocation__integrator_8cpp.xml


// File: collocation__integrator_8hpp.xml


// File: collocation__integrator__internal_8cpp.xml


// File: collocation__integrator__internal_8hpp.xml


// File: coloring_8hpp.xml


// File: concat_8cpp.xml


// File: concat_8hpp.xml


// File: constant__mx_8cpp.xml


// File: constant__mx_8hpp.xml


// File: constant__sx_8hpp.xml


// File: control__simulator_8cpp.xml


// File: control__simulator_8hpp.xml


// File: control__simulator__internal_8cpp.xml


// File: control__simulator__internal_8hpp.xml


// File: controlsimulator_8hpp.xml


// File: countNodes_8hpp.xml


// File: cplex__internal_8cpp.xml


// File: cplex__internal_8hpp.xml


// File: cplex__solver_8cpp.xml


// File: cplex__solver_8hpp.xml


// File: createParent_8hpp.xml


// File: csparse_8cpp.xml


// File: csparse_8hpp.xml


// File: csparse__cholesky_8cpp.xml


// File: csparse__cholesky_8hpp.xml


// File: csparse__cholesky__internal_8cpp.xml


// File: csparse__cholesky__internal_8hpp.xml


// File: csparse__internal_8cpp.xml


// File: csparse__internal_8hpp.xml


// File: ctemplate_8cpp.xml
%feature("docstring") main  "
This file does absolutely nothing but including all headers ";


// File: custom__function_8cpp.xml


// File: custom__function_8hpp.xml


// File: custom__function__internal_8cpp.xml


// File: custom__function__internal_8hpp.xml


// File: customfunction_8hpp.xml


// File: customfunction__c_8hpp.xml


// File: cvodes__integrator_8cpp.xml


// File: cvodes__integrator_8hpp.xml


// File: cvodes__internal_8cpp.xml


// File: cvodes__internal_8hpp.xml


// File: d0__stats_8hpp.xml


// File: determinant_8cpp.xml


// File: determinant_8hpp.xml


// File: direct__collocation_8cpp.xml


// File: direct__collocation_8hpp.xml


// File: direct__collocation__internal_8cpp.xml


// File: direct__collocation__internal_8hpp.xml


// File: direct__multiple__shooting_8cpp.xml


// File: direct__multiple__shooting_8hpp.xml


// File: direct__multiple__shooting__internal_8cpp.xml


// File: direct__multiple__shooting__internal_8hpp.xml


// File: direct__single__shooting_8cpp.xml


// File: direct__single__shooting_8hpp.xml


// File: direct__single__shooting__internal_8cpp.xml


// File: direct__single__shooting__internal_8hpp.xml


// File: dotdraw_8hpp.xml


// File: dple__internal_8cpp.xml


// File: dple__internal_8hpp.xml


// File: dple__solver_8cpp.xml


// File: dple__solver_8hpp.xml


// File: dsdp__internal_8cpp.xml


// File: dsdp__internal_8hpp.xml


// File: dsdp__solver_8cpp.xml


// File: dsdp__solver_8hpp.xml


// File: dulmageMendelsohn_8hpp.xml


// File: e0__diagram_8hpp.xml


// File: exacthessian_8hpp.xml


// File: expand_8hpp.xml


// File: expression__tools_8hpp.xml


// File: external__function_8cpp.xml


// File: external__function_8hpp.xml


// File: external__function__internal_8cpp.xml


// File: external__function__internal_8hpp.xml


// File: fixed__step__integrator_8cpp.xml


// File: fixed__step__integrator_8hpp.xml


// File: fixed__step__integrator__internal_8cpp.xml


// File: fixed__step__integrator__internal_8hpp.xml


// File: function_8cpp.xml


// File: function_8hpp.xml


// File: function__internal_8cpp.xml


// File: function__internal_8hpp.xml


// File: functor_8cpp.xml


// File: functor_8hpp.xml


// File: functor__internal_8cpp.xml


// File: functor__internal_8hpp.xml


// File: generateCode_8hpp.xml


// File: generic__expression_8hpp.xml


// File: generic__expression__tools_8hpp.xml


// File: generic__matrix_8hpp.xml


// File: generic__matrix__tools_8hpp.xml


// File: generic__type_8cpp.xml


// File: generic__type_8hpp.xml


// File: generic__type__internal_8hpp.xml


// File: getnonzeros_8cpp.xml


// File: getnonzeros_8hpp.xml


// File: homotopy__nlp__internal_8cpp.xml


// File: homotopy__nlp__internal_8hpp.xml


// File: homotopy__nlp__solver_8cpp.xml


// File: homotopy__nlp__solver_8hpp.xml


// File: idas_8hpp.xml


// File: idas__integrator_8cpp.xml


// File: idas__integrator_8hpp.xml


// File: idas__internal_8cpp.xml


// File: idas__internal_8hpp.xml


// File: implicit__fixed__step__integrator_8cpp.xml


// File: implicit__fixed__step__integrator_8hpp.xml


// File: implicit__fixed__step__integrator__internal_8cpp.xml


// File: implicit__fixed__step__integrator__internal_8hpp.xml


// File: implicit__function_8cpp.xml


// File: implicit__function_8hpp.xml


// File: implicit__function__internal_8cpp.xml


// File: implicit__function__internal_8hpp.xml


// File: inner__prod_8cpp.xml


// File: inner__prod_8hpp.xml


// File: integration__tools_8cpp.xml


// File: integration__tools_8hpp.xml


// File: integrator_8cpp.xml


// File: integrator_8hpp.xml


// File: integrator__internal_8cpp.xml


// File: integrator__internal_8hpp.xml


// File: inverse_8cpp.xml


// File: inverse_8hpp.xml


// File: io__interface_8hpp.xml


// File: io__scheme_8cpp.xml


// File: io__scheme_8hpp.xml


// File: io__scheme__internal_8cpp.xml


// File: io__scheme__internal_8hpp.xml


// File: io__scheme__vector_8hpp.xml


// File: ipopt_8hpp.xml


// File: ipopt__internal_8cpp.xml


// File: ipopt__internal_8hpp.xml


// File: ipopt__nlp_8cpp.xml


// File: ipopt__nlp_8hpp.xml


// File: ipopt__solver_8cpp.xml


// File: ipopt__solver_8hpp.xml


// File: jacSparsity_8hpp.xml


// File: kinsol__internal_8cpp.xml


// File: kinsol__internal_8hpp.xml


// File: kinsol__solver_8cpp.xml


// File: kinsol__solver_8hpp.xml


// File: KinsolSolver_8hpp.xml


// File: knitro__internal_8cpp.xml


// File: knitro__internal_8hpp.xml


// File: knitro__solver_8cpp.xml


// File: knitro__solver_8hpp.xml


// File: lapack__lu__dense_8cpp.xml


// File: lapack__lu__dense_8hpp.xml


// File: lapack__qr__dense_8cpp.xml


// File: lapack__qr__dense_8hpp.xml


// File: limitPrinting_8hpp.xml


// File: limitPrinting__c_8hpp.xml


// File: linear__solver_8cpp.xml


// File: linear__solver_8hpp.xml


// File: linear__solver__internal_8cpp.xml


// File: linear__solver__internal_8hpp.xml


// File: LinearSolver_8hpp.xml


// File: lp__internal_8cpp.xml


// File: lp__internal_8hpp.xml


// File: lp__solver_8cpp.xml


// File: lp__solver_8hpp.xml


// File: main_8dox.xml


// File: matrix_8hpp.xml


// File: matrix__expand_8hpp.xml


// File: matrix__impl_8hpp.xml


// File: matrix__tools_8cpp.xml


// File: matrix__tools_8hpp.xml


// File: multiple__output_8cpp.xml


// File: multiple__output_8hpp.xml


// File: multiplication_8hpp.xml


// File: multiplication__impl_8hpp.xml


// File: mx_8cpp.xml


// File: mx_8hpp.xml


// File: mx__function_8cpp.xml


// File: mx__function_8hpp.xml


// File: mx__function__internal_8cpp.xml


// File: mx__function__internal_8hpp.xml


// File: mx__node_8cpp.xml


// File: mx__node_8hpp.xml


// File: mx__tools_8cpp.xml


// File: mx__tools_8hpp.xml


// File: newton__implicit__internal_8cpp.xml


// File: newton__implicit__internal_8hpp.xml


// File: newton__implicit__solver_8cpp.xml


// File: newton__implicit__solver_8hpp.xml


// File: NewtonImplicitSolver_8hpp.xml


// File: nlp__implicit__internal_8cpp.xml


// File: nlp__implicit__internal_8hpp.xml


// File: nlp__implicit__solver_8cpp.xml


// File: nlp__implicit__solver_8hpp.xml


// File: nlp__qp__internal_8cpp.xml


// File: nlp__qp__internal_8hpp.xml


// File: nlp__qp__solver_8cpp.xml


// File: nlp__qp__solver_8hpp.xml


// File: nlp__solver_8cpp.xml


// File: nlp__solver_8hpp.xml


// File: nlp__solver__internal_8cpp.xml


// File: nlp__solver__internal_8hpp.xml


// File: NLPImplicitSolver_8hpp.xml


// File: nonzeros_8hpp.xml


// File: norm_8cpp.xml


// File: norm_8hpp.xml


// File: nullspace_8cpp.xml


// File: nullspace_8hpp.xml


// File: nullspace__internal_8cpp.xml


// File: nullspace__internal_8hpp.xml


// File: ocp__solver_8cpp.xml


// File: ocp__solver_8hpp.xml


// File: ocp__solver__internal_8cpp.xml


// File: ocp__solver__internal_8hpp.xml


// File: old__collocation__integrator_8cpp.xml


// File: old__collocation__integrator_8hpp.xml


// File: old__collocation__integrator__internal_8cpp.xml


// File: old__collocation__integrator__internal_8hpp.xml


// File: ooqp__internal_8cpp.xml


// File: ooqp__internal_8hpp.xml


// File: ooqp__solver_8cpp.xml


// File: ooqp__solver_8hpp.xml


// File: options__functionality_8cpp.xml


// File: options__functionality_8hpp.xml


// File: parallelizer_8cpp.xml


// File: symbolic_2function_2parallelizer_8hpp.xml


// File: documentation_2examples_2Function_2parallelizer_8hpp.xml


// File: parallelizer__internal_8cpp.xml


// File: parallelizer__internal_8hpp.xml


// File: polynomial_8cpp.xml


// File: polynomial_8hpp.xml


// File: printable__object_8cpp.xml


// File: printable__object_8hpp.xml


// File: printme_8hpp.xml


// File: profiling_8cpp.xml
%feature("docstring") getRealTime  "
Returns the real time, in seconds, or -1.0 if an error occurred.

Time is measured since an arbitrary and OS-dependent start time. The
returned real time is only useful for computing an elapsed time between two
calls to this function.

";


// File: profiling_8hpp.xml
%feature("docstring") profileWrite  "
[INTERNAL] ";
%feature("docstring") ProfilingType< ProfilingData_TIMELINE >  " [INTERNAL]
";

%feature("docstring") profileWriteBare  "[INTERNAL] ";

%feature("docstring") ProfilingType< ProfilingData_NAME >  " [INTERNAL] ";

%feature("docstring") profileWriteTime  "[INTERNAL] ";

%feature("docstring") getRealTime  "[INTERNAL]  Returns the real time, in
seconds, or -1.0 if an error occurred.

Time is measured since an arbitrary and OS-dependent start time. The
returned real time is only useful for computing an elapsed time between two
calls to this function.

";

%feature("docstring") profileWriteExit  "[INTERNAL] ";

%feature("docstring") ProfilingType  "[INTERNAL] ";

%feature("docstring") profileWriteEntry  "[INTERNAL] ";

%feature("docstring") ptrToLong  "[INTERNAL] ";

%feature("docstring") profileWriteSourceLine  "[INTERNAL] ";

%feature("docstring") profileWriteName  "[INTERNAL] ";

%feature("docstring") ProfilingType< ProfilingData_ENTRY >  " [INTERNAL] ";

%feature("docstring") ProfilingType< ProfilingData_SOURCE >  " [INTERNAL] ";

%feature("docstring") ProfilingType< ProfilingData_IO >  " [INTERNAL] ";

%feature("docstring") ProfilingType< ProfilingData_EXIT >  " [INTERNAL] ";


// File: psd__indef__dple__internal_8cpp.xml


// File: psd__indef__dple__internal_8hpp.xml


// File: psd__indef__dple__solver_8cpp.xml


// File: psd__indef__dple__solver_8hpp.xml


// File: qcqp__qp__internal_8cpp.xml


// File: qcqp__qp__internal_8hpp.xml


// File: qcqp__qp__solver_8cpp.xml


// File: qcqp__qp__solver_8hpp.xml


// File: qcqp__solver_8cpp.xml


// File: qcqp__solver_8hpp.xml


// File: qcqp__solver__internal_8cpp.xml


// File: qcqp__solver__internal_8hpp.xml


// File: qp__lp__internal_8cpp.xml


// File: qp__lp__internal_8hpp.xml


// File: qp__lp__solver_8cpp.xml


// File: qp__lp__solver_8hpp.xml


// File: qp__solver_8cpp.xml


// File: qp__solver_8hpp.xml


// File: qp__solver__internal_8cpp.xml


// File: qp__solver__internal_8hpp.xml


// File: qp__stabilizer_8cpp.xml


// File: qp__stabilizer_8hpp.xml


// File: qp__stabilizer__internal_8cpp.xml


// File: qp__stabilizer__internal_8hpp.xml


// File: qpoases__internal_8cpp.xml


// File: qpoases__internal_8hpp.xml


// File: qpoases__solver_8cpp.xml


// File: qpoases__solver_8hpp.xml


// File: range_8hpp.xml


// File: reshape_8cpp.xml


// File: reshape_8hpp.xml


// File: rk__integrator_8cpp.xml


// File: rk__integrator_8hpp.xml


// File: rk__integrator__internal_8cpp.xml


// File: rk__integrator__internal_8hpp.xml


// File: runtime_8hpp.xml


// File: scaled__nlp__internal_8cpp.xml


// File: scaled__nlp__internal_8hpp.xml


// File: scaled__nlp__solver_8cpp.xml


// File: scaled__qp__internal_8hpp.xml


// File: schemes__helpers_8hpp.xml


// File: schemes__metadata_8cpp.xml


// File: schemes__metadata_8hpp.xml


// File: scpgen_8cpp.xml


// File: scpgen_8hpp.xml


// File: scpgen__internal_8cpp.xml


// File: scpgen__internal_8hpp.xml


// File: sdp__sdqp__internal_8cpp.xml


// File: sdp__sdqp__internal_8hpp.xml


// File: sdp__sdqp__solver_8cpp.xml


// File: sdp__sdqp__solver_8hpp.xml


// File: sdp__socp__internal_8cpp.xml


// File: sdp__socp__internal_8hpp.xml


// File: sdp__socp__solver_8cpp.xml


// File: sdp__socp__solver_8hpp.xml


// File: sdp__solver_8cpp.xml


// File: sdp__solver_8hpp.xml


// File: sdp__solver__internal_8cpp.xml


// File: sdp__solver__internal_8hpp.xml


// File: sdqp__solver_8cpp.xml


// File: sdqp__solver_8hpp.xml


// File: sdqp__solver__internal_8cpp.xml


// File: sdqp__solver__internal_8hpp.xml


// File: set__sparse_8cpp.xml


// File: set__sparse_8hpp.xml


// File: setnonzeros_8hpp.xml


// File: setnonzeros__impl_8hpp.xml


// File: shared__object_8cpp.xml


// File: shared__object_8hpp.xml


// File: simple__homotopy__nlp__internal_8cpp.xml


// File: simple__homotopy__nlp__internal_8hpp.xml


// File: simple__homotopy__nlp__solver_8cpp.xml


// File: simple__homotopy__nlp__solver_8hpp.xml


// File: simple__indef__dple__internal_8cpp.xml


// File: simple__indef__dple__internal_8hpp.xml


// File: simple__indef__dple__solver_8cpp.xml


// File: simple__indef__dple__solver_8hpp.xml


// File: simulator_8cpp.xml


// File: symbolic_2function_2simulator_8hpp.xml


// File: documentation_2examples_2integrators_2simulator_8hpp.xml


// File: simulator__internal_8cpp.xml


// File: simulator__internal_8hpp.xml


// File: slice_8cpp.xml


// File: slice_8hpp.xml


// File: slicot__tools_8cpp.xml
%feature("docstring") CasADi::mb03vy_ "
[INTERNAL] ";
%feature("docstring") CasADi::mb03wd_ "[INTERNAL] ";

%feature("docstring") CasADi::mb03vd_ "[INTERNAL] ";


// File: slicot__tools_8hpp.xml


// File: snopt__internal_8cpp.xml


// File: snopt__internal_8hpp.xml


// File: snopt__solver_8cpp.xml


// File: snopt__solver_8hpp.xml


// File: socp__qcqp__internal_8cpp.xml


// File: socp__qcqp__internal_8hpp.xml


// File: socp__qcqp__solver_8cpp.xml


// File: socp__qcqp__solver_8hpp.xml


// File: socp__solver_8cpp.xml


// File: socp__solver_8hpp.xml


// File: socp__solver__internal_8cpp.xml


// File: socp__solver__internal_8hpp.xml


// File: solve_8hpp.xml


// File: solve__impl_8hpp.xml


// File: sparsity_8cpp.xml


// File: sparsity_8hpp.xml


// File: sparsity__internal_8cpp.xml


// File: sparsity__internal_8hpp.xml


// File: sparsity__tools_8cpp.xml


// File: sparsity__tools_8hpp.xml


// File: split_8cpp.xml


// File: split_8hpp.xml


// File: sqic__internal_8cpp.xml


// File: sqic__internal_8hpp.xml


// File: sqic__solver_8cpp.xml


// File: sqic__solver_8hpp.xml


// File: sqp__internal_8cpp.xml


// File: sqp__internal_8hpp.xml


// File: sqp__method_8cpp.xml


// File: sqp__method_8hpp.xml


// File: ssym_8hpp.xml


// File: stabilized__qp__solver_8cpp.xml


// File: stabilized__qp__solver_8hpp.xml


// File: stabilized__qp__solver__internal_8cpp.xml


// File: stabilized__qp__solver__internal_8hpp.xml


// File: stabilized__sqic__internal_8cpp.xml


// File: stabilized__sqic__internal_8hpp.xml


// File: stabilized__sqic__solver_8cpp.xml


// File: stabilized__sqic__solver_8hpp.xml


// File: stabilized__sqp__internal_8cpp.xml


// File: stabilized__sqp__internal_8hpp.xml


// File: stabilized__sqp__method_8cpp.xml


// File: stabilized__sqp__method_8hpp.xml


// File: std__vector__tools_8cpp.xml


// File: std__vector__tools_8hpp.xml


// File: stronglyConnectedComponents_8hpp.xml


// File: subassign_8cpp.xml


// File: subassign_8hpp.xml


// File: submatrix_8hpp.xml


// File: subref_8cpp.xml


// File: subref_8hpp.xml


// File: sundials__integrator_8cpp.xml


// File: sundials__integrator_8hpp.xml


// File: sundials__internal_8cpp.xml


// File: sundials__internal_8hpp.xml


// File: sx__element_8cpp.xml


// File: sx__element_8hpp.xml


// File: sx__function_8cpp.xml


// File: sx__function_8hpp.xml


// File: sx__function__internal_8cpp.xml


// File: sx__function__internal_8hpp.xml


// File: sx__node_8cpp.xml


// File: sx__node_8hpp.xml


// File: sx__tools_8cpp.xml


// File: sx__tools_8hpp.xml


// File: SXaddition_8hpp.xml


// File: SXFunction__constr__oct_8hpp.xml


// File: SXFunction__constr__py_8hpp.xml


// File: symbolic__mx_8cpp.xml


// File: symbolic__mx_8hpp.xml


// File: symbolic__nlp_8cpp.xml


// File: symbolic__nlp_8hpp.xml


// File: symbolic__ocp_8cpp.xml


// File: symbolic__ocp_8hpp.xml


// File: symbolic__qr_8cpp.xml


// File: symbolic__qr_8hpp.xml


// File: symbolic__qr__internal_8cpp.xml


// File: symbolic__qr__internal_8hpp.xml


// File: symbolic__sx_8hpp.xml


// File: symbolicsubstitution_8hpp.xml


// File: tolerance_8hpp.xml


// File: transpose_8cpp.xml


// File: transpose_8hpp.xml


// File: unary__mx_8cpp.xml


// File: unary__mx_8hpp.xml


// File: unary__sx_8hpp.xml


// File: variable_8cpp.xml


// File: variable_8hpp.xml


// File: variable__internal_8cpp.xml


// File: veccat_8hpp.xml


// File: weak__ref_8cpp.xml


// File: weak__ref_8hpp.xml


// File: worhp__internal_8cpp.xml


// File: worhp__internal_8hpp.xml


// File: worhp__solver_8cpp.xml


// File: worhp__solver_8hpp.xml


// File: wsnopt_8hpp.xml
%feature("docstring") snopt_memb  "
[INTERNAL] ";
%feature("docstring") snopt_init  "[INTERNAL] ";

%feature("docstring") snopt_spec  "[INTERNAL] ";

%feature("docstring") sninit_  "[INTERNAL] ";

%feature("docstring") snopt_geti  "[INTERNAL] ";

%feature("docstring") snopt_c  "[INTERNAL] ";

%feature("docstring") snset_  "[INTERNAL] ";

%feature("docstring") snseti_  "[INTERNAL] ";

%feature("docstring") snopt_getc  "[INTERNAL] ";

%feature("docstring") snsetr_  "[INTERNAL] ";

%feature("docstring") snopt_getr  "[INTERNAL] ";

%feature("docstring") snopt_seti  "[INTERNAL] ";

%feature("docstring") snopt_setr  "[INTERNAL] ";

%feature("docstring") snopt_set  "[INTERNAL] ";


// File: wsqic_8cpp.xml
%feature("docstring") main  "
";


// File: wsqic_8hpp.xml
%feature("docstring") sqicSolve  "
[INTERNAL] ";
%feature("docstring") sqicSolveStabilized  "[INTERNAL] ";

%feature("docstring") sqic  "[INTERNAL] ";

%feature("docstring") sqicDestroy  "[INTERNAL] ";


// File: x__function__internal_8hpp.xml


// File: xml__node_8cpp.xml


// File: xml__node_8hpp.xml


// File: group__HomotopyNLPSolver__doc.xml


// File: group__ImplicitFunction__doc.xml


// File: group__DAE__doc.xml


// File: group__iname.xml


// File: group__oname.xml


// File: group__iind.xml


// File: group__oind.xml


// File: group__Tvalset.xml


// File: group__Tvalget.xml


// File: group__LinearSolver__doc.xml


// File: group__LPSolver__doc.xml


// File: group__NLPSolver__doc.xml


// File: group__Nullspace__doc.xml


// File: group__QCQPSolver__doc.xml


// File: group__QPSolver__doc.xml


// File: group__SDPSolver__doc.xml


// File: group__SDQPSolver__doc.xml


// File: group__SOCPSolver__doc.xml


// File: group__StabilizedQPSolver__doc.xml


// File: group__expression__tools.xml


// File: group__IdasIntegrator__doc.xml


// File: group__DPLE__doc.xml


// File: group__scheme__IntegratorOutput.xml


// File: group__scheme__QCQPSolverInput.xml


// File: group__scheme__HessLagOutput.xml


// File: group__scheme__LinsolInput.xml


// File: group__scheme__SOCPOutput.xml


// File: group__scheme__NLPSolverOutput.xml


// File: group__scheme__SDPInput.xml


// File: group__scheme__LPSolverInput.xml


// File: group__scheme__RDAEInput.xml


// File: group__scheme__DPLEInput.xml


// File: group__scheme__NLPOutput.xml


// File: group__scheme__SOCPInput.xml


// File: group__scheme__SDPOutput.xml


// File: group__scheme__NLPSolverInput.xml


// File: group__scheme__DAEInput.xml


// File: group__scheme__DAEOutput.xml


// File: group__scheme__InputOutputScheme.xml


// File: group__scheme__StabilizedQPSolverInput.xml


// File: group__scheme__GradFInput.xml


// File: group__scheme__LPSolverOutput.xml


// File: group__scheme__GradFOutput.xml


// File: group__scheme__SDQPInput.xml


// File: group__scheme__OCPInput.xml


// File: group__scheme__QCQPSolverOutput.xml


// File: group__scheme__MayerInput.xml


// File: group__scheme__ControlledDAEInput.xml


// File: group__scheme__NLPInput.xml


// File: group__scheme__IntegratorInput.xml


// File: group__scheme__QPSolverInput.xml


// File: group__scheme__OCPOutput.xml


// File: group__scheme__RDAEOutput.xml


// File: group__scheme__JacGOutput.xml


// File: group__scheme__LinsolOutput.xml


// File: group__scheme__SDQPOutput.xml


// File: group__scheme__ControlSimulatorInput.xml


// File: group__scheme__JacGInput.xml


// File: group__scheme__DPLEOutput.xml


// File: group__scheme__HessLagInput.xml


// File: group__scheme__QPSolverOutput.xml


// File: group__scheme__HNLPInput.xml


// File: chapter1.xml


// File: chapter2.xml


// File: chapter3.xml


// File: chapter4.xml


// File: chapter5.xml


// File: chapter6.xml


// File: dir_e2a50488b69715d5548bca2aaaf9863f.xml


// File: dir_ce1ed73062f868813342a0dbe0b188c3.xml


// File: dir_46be2948e36a72ca7083c45a7aacae3d.xml


// File: dir_ae41fa44f543d3884cb1229e52cfbde1.xml


// File: dir_62baf75c1cae6d04dc949badf483bad5.xml


// File: dir_c9fbaf78972edfee4bf9d5b9071a484a.xml


// File: dir_8eb78af56ef852d69abf4113da88a5b1.xml


// File: dir_60248c841205460cf98fa2018890b346.xml


// File: dir_57219f8d770ed4e6491bcfbe72b7011f.xml


// File: dir_a984da1ccd3c043fbecd4b1a3559d400.xml


// File: dir_9a6dbbd50d0de6d7f5fded540d662d82.xml


// File: dir_0109fa8becc269e8647c5a1a8998a324.xml


// File: dir_3773ed2679cec60bd80be23ac5e35e06.xml


// File: dir_e841d045f7c3a6bdbbb6156355455b74.xml


// File: dir_a725a21e798488997f71696d6eeec41c.xml


// File: dir_aefdd95fd748783590a947fc47bb53a9.xml


// File: dir_3b99da1e039aa20d2c42bf369d403f80.xml


// File: dir_7beb3931621bf51a9a0e4e4cab9f0222.xml


// File: dir_0ef00fd62c4396deaa893efc1e8eeeca.xml


// File: dir_6c6f05b36003a966768934497a9e98ec.xml


// File: dir_9c9bde343795073a87e6a08325b51d76.xml


// File: dir_3ba6a51aef214c11b783c1c5ab85f69c.xml


// File: dir_4197094c95560f4cac74547cb6e8c1c9.xml


// File: dir_e9078b9afc67341ce0051ea8263f6a54.xml


// File: dir_631365d53216e8869a44acbbbef8850f.xml


// File: dir_17bd1baaf2dd06d6fe6b2a970e7d7a4f.xml


// File: dir_2ea7ffc32a222753be66859f14c30b60.xml


// File: dir_714ec8dbb353bb970985b10d06b51b28.xml


// File: dir_0e9dbbf5869827a2c9467439f468682f.xml


// File: dir_160e375c81aade60a9a3ac5b6f6a1850.xml


// File: dir_5d2cea1fb9d6f1a70aa8c32c593e7a64.xml


// File: dir_38cae3957561478ffeb7ddfac20e384f.xml


// File: dir_38b724e79999953aab66567f3dbbfa93.xml


// File: dir_1936376a71de761d5e90910f3edab001.xml


// File: dir_ce445109d2bc54d04c0a5134ae147918.xml


// File: dir_5f42808c1d4d60c759a1acb709cfb462.xml


// File: algebra_2LinearSolver_8py-example.xml


// File: Function_2customfunction_8py-example.xml


// File: Function_2customfunction_c_8cc-example.xml


// File: Function_2expand_8py-example.xml


// File: Function_2parallelizer_8py-example.xml


// File: integrators_2controlsimulator_8py-example.xml


// File: integrators_2idas_8py-example.xml


// File: integrators_2simulator_8py-example.xml


// File: integrators_2tolerance_8py-example.xml


// File: matrix_2coloring_8py-example.xml


// File: matrix_2dulmageMendelsohn_8py-example.xml


// File: matrix_2stronglyConnectedComponents_8py-example.xml


// File: misc_2all_8cc-example.xml


// File: misc_2assertion_8py-example.xml


// File: misc_2dotdraw_8py-example.xml


// File: misc_2limitPrinting_8py-example.xml


// File: misc_2limitPrinting_c_8cc-example.xml


// File: misc_2printme_8py-example.xml


// File: misc_2range_8cc-example.xml


// File: MX_2createParent_8py-example.xml


// File: MX_2matrix_expand_8py-example.xml


// File: MX_2veccat_8py-example.xml


// File: solvers_2callback_8py-example.xml


// File: solvers_2exacthessian_8py-example.xml


// File: solvers_2ipopt_8py-example.xml


// File: solvers_2KinsolSolver_8py-example.xml


// File: solvers_2NewtonImplicitSolver_8py-example.xml


// File: solvers_2NLPImplicitSolver_8py-example.xml


// File: SX_2countNodes_8py-example.xml


// File: SX_2generateCode_8py-example.xml


// File: SX_2jacSparsity_8py-example.xml


// File: SX_2ssym_8py-example.xml


// File: SX_2SXaddition_8cc-example.xml


// File: SX_2SXFunction_constr_oct_8m-example.xml


// File: SX_2SXFunction_constr_py_8py-example.xml


// File: SX_2symbolicsubstitution_8py-example.xml

