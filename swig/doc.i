
// File: index.xml

// File: classCasADi_1_1AcadoFunction.xml
%feature("docstring") CasADi::AcadoFunction "

CasADi to ACADO function interface.

C++ includes: acado_function.hpp ";

%feature("docstring")  CasADi::AcadoFunction::AcadoFunction "CasADi::AcadoFunction::AcadoFunction(const FX &f=FX()) ";

%feature("docstring")  CasADi::AcadoFunction::~AcadoFunction "CasADi::AcadoFunction::~AcadoFunction() ";

%feature("docstring")  CasADi::AcadoFunction::init "void
CasADi::AcadoFunction::init() ";

%feature("docstring")  CasADi::AcadoFunction::fcn "void
CasADi::AcadoFunction::fcn(double *x, double *res) ";

%feature("docstring")  CasADi::AcadoFunction::fcn_fwd "void
CasADi::AcadoFunction::fcn_fwd(int number, double *x, double *seed,
double *f, double *df) ";

%feature("docstring")  CasADi::AcadoFunction::fcn_adj "void
CasADi::AcadoFunction::fcn_adj(int number, double *x, double *seed,
double *f, double *df) ";


// File: classCasADi_1_1AcadoIntegratorBackend.xml
%feature("docstring") CasADi::AcadoIntegratorBackend "C++ includes:
acado_integrator_backend.hpp ";

%feature("docstring")
CasADi::AcadoIntegratorBackend::AcadoIntegratorBackend "CasADi::AcadoIntegratorBackend::AcadoIntegratorBackend(void
*user_data)

Constructor. ";

%feature("docstring")
CasADi::AcadoIntegratorBackend::~AcadoIntegratorBackend "CasADi::AcadoIntegratorBackend::~AcadoIntegratorBackend()

Destructor. ";

%feature("docstring")
CasADi::AcadoIntegratorBackend::AcadoIntegratorBackend "CasADi::AcadoIntegratorBackend::AcadoIntegratorBackend(const
ACADO::DifferentialEquation &rhs_)

Default constructor. ";

%feature("docstring")
CasADi::AcadoIntegratorBackend::AcadoIntegratorBackend "CasADi::AcadoIntegratorBackend::AcadoIntegratorBackend(const
AcadoIntegratorBackend &arg)

Copy constructor (deep copy). ";

%feature("docstring")  CasADi::AcadoIntegratorBackend::clone "ACADO::Integrator * CasADi::AcadoIntegratorBackend::clone() const

The (virtual) copy constructor ";

%feature("docstring")  CasADi::AcadoIntegratorBackend::freezeMesh "ACADO::returnValue CasADi::AcadoIntegratorBackend::freezeMesh() ";

%feature("docstring")  CasADi::AcadoIntegratorBackend::freezeAll "ACADO::returnValue CasADi::AcadoIntegratorBackend::freezeAll() ";

%feature("docstring")  CasADi::AcadoIntegratorBackend::unfreeze "ACADO::returnValue CasADi::AcadoIntegratorBackend::unfreeze() ";

%feature("docstring")  CasADi::AcadoIntegratorBackend::step "ACADO::returnValue CasADi::AcadoIntegratorBackend::step(int number) ";

%feature("docstring")  CasADi::AcadoIntegratorBackend::stop "ACADO::returnValue CasADi::AcadoIntegratorBackend::stop() ";

%feature("docstring")
CasADi::AcadoIntegratorBackend::setDxInitialization "ACADO::returnValue
CasADi::AcadoIntegratorBackend::setDxInitialization(double *dx0) ";

%feature("docstring")
CasADi::AcadoIntegratorBackend::getNumberOfSteps "int
CasADi::AcadoIntegratorBackend::getNumberOfSteps() const ";

%feature("docstring")
CasADi::AcadoIntegratorBackend::getNumberOfRejectedSteps "int
CasADi::AcadoIntegratorBackend::getNumberOfRejectedSteps() const ";

%feature("docstring")  CasADi::AcadoIntegratorBackend::getStepSize "double CasADi::AcadoIntegratorBackend::getStepSize() const ";


// File: classCasADi_1_1AcadoInterface.xml
%feature("docstring") CasADi::AcadoInterface "

Id

Type

Default

Description

Used in

absolute_tolerance

OT_REAL

None

CasADi::AcadoInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

auto_init

OT_BOOLEAN

false

initialize differential and angebraic states by a forward integration

CasADi::AcadoInternal

dynamic_sensitivity

OT_STRING

forward_sensitivities or backward_sensitivities

CasADi::AcadoInternal

exact_jacobian

OT_BOOLEAN

true

CasADi::AcadoInternal

final_time

OT_REAL

1.0

CasADi::AcadoInternal

hessian_approximation

OT_STRING

None

CasADi::AcadoInternal

integrator

OT_STRING

None

CasADi::AcadoInternal

integrator_tolerance

OT_REAL

None

CasADi::AcadoInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

kkt_tolerance

OT_REAL

None

CasADi::AcadoInternal

max_num_integrator_steps

OT_INTEGER

None

CasADi::AcadoInternal

max_num_iterations

OT_INTEGER

None

CasADi::AcadoInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

number_of_shooting_nodes

OT_INTEGER

20

CasADi::AcadoInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

periodic_bounds

OT_INTEGERVECTOR

None

CasADi::AcadoInternal

print_level

OT_STRING

\"low\"

\"none\", \"low\", \"medium\", \"high\", \"debug\"

CasADi::AcadoInternal

relaxation_parameter

OT_REAL

None

CasADi::AcadoInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

start_time

OT_REAL

0.0

CasADi::AcadoInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: acado_interface.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::AcadoInterface::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::AcadoInterface::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::AcadoInterface::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::AcadoInterface::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::AcadoInterface::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::AcadoInterface::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::AcadoInterface::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::AcadoInterface::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::AcadoInterface::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::AcadoInterface::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::AcadoInterface::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::AcadoInterface::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::AcadoInterface::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::AcadoInterface::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::AcadoInterface::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::AcadoInterface::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::AcadoInterface::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::AcadoInterface::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::AcadoInterface::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::AcadoInterface::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::AcadoInterface::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::AcadoInterface::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::AcadoInterface::AcadoInterface "CasADi::AcadoInterface::AcadoInterface()

Default constructor. ";

%feature("docstring")  CasADi::AcadoInterface::AcadoInterface "CasADi::AcadoInterface::AcadoInterface(const FX &ffcn, const FX &mfcn,
const FX &cfcn=FX(), const FX &rfcn=FX())

Constructor taking a DAE rhs function, an objective function and a
constraint function -- for use with ACADO integrators. ";

%feature("docstring")  CasADi::AcadoInterface::setIntegrators "void
CasADi::AcadoInterface::setIntegrators(const std::vector< Integrator >
&integrators)

Set a user-provided integrator. ";

%feature("docstring")  CasADi::AcadoInterface::checkNode "bool
CasADi::AcadoInterface::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::AcadoInterface::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::AcadoInterface::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::AcadoInterface::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::AcadoInterface::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::AcadoInterface::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::AcadoInterface::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::AcadoInterface::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::AcadoInterface::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::AcadoInterface::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::AcadoInterface::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::AcadoInterface::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::AcadoInterface::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::AcadoInterface::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::AcadoInterface::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::AcadoInterface::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::AcadoInterface::jacSparsity "CRSSparsity & CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::AcadoInterface::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::AcadoInterface::input "const Matrix<
double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::AcadoInterface::input "Matrix< double
> & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::AcadoInterface::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::AcadoInterface::output "Matrix< double
> & CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::AcadoInterface::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::AcadoInterface::fwdSeed "Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::AcadoInterface::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::AcadoInterface::fwdSens "Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::AcadoInterface::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::AcadoInterface::adjSeed "Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::AcadoInterface::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::AcadoInterface::adjSens "Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::AcadoInterface::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::AcadoInterface::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::AcadoInterface::getStats "const
Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::AcadoInterface::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::AcadoInterface::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::AcadoInterface::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::AcadoInterface::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::AcadoInterface::assignNodeNoCount "void CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::AcadoInterface::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::AcadoInterface::get "SharedObjectNode
* CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::AcadoInterface::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::AcadoInterface::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::AcadoInterface::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::AcadoInterface::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::AcadoInterface::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::AcadoInterface::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::AcadoInterface::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::AcadoInterface::getRepresentation "string CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::AcadoInterface::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1AcadoInternal.xml
%feature("docstring") CasADi::AcadoInternal "

Id

Type

Default

Description

Used in

absolute_tolerance

OT_REAL

None

CasADi::AcadoInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

auto_init

OT_BOOLEAN

false

initialize differential and angebraic states by a forward integration

CasADi::AcadoInternal

dynamic_sensitivity

OT_STRING

forward_sensitivities or backward_sensitivities

CasADi::AcadoInternal

exact_jacobian

OT_BOOLEAN

true

CasADi::AcadoInternal

final_time

OT_REAL

1.0

CasADi::AcadoInternal

hessian_approximation

OT_STRING

None

CasADi::AcadoInternal

integrator

OT_STRING

None

CasADi::AcadoInternal

integrator_tolerance

OT_REAL

None

CasADi::AcadoInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

kkt_tolerance

OT_REAL

None

CasADi::AcadoInternal

max_num_integrator_steps

OT_INTEGER

None

CasADi::AcadoInternal

max_num_iterations

OT_INTEGER

None

CasADi::AcadoInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

number_of_shooting_nodes

OT_INTEGER

20

CasADi::AcadoInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

periodic_bounds

OT_INTEGERVECTOR

None

CasADi::AcadoInternal

print_level

OT_STRING

\"low\"

\"none\", \"low\", \"medium\", \"high\", \"debug\"

CasADi::AcadoInternal

relaxation_parameter

OT_REAL

None

CasADi::AcadoInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

start_time

OT_REAL

0.0

CasADi::AcadoInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: acado_internal.hpp ";

%feature("docstring")  CasADi::AcadoInternal::~AcadoInternal "CasADi::AcadoInternal::~AcadoInternal()

Destructor. ";

%feature("docstring")  CasADi::AcadoInternal::clone "virtual
AcadoInternal* CasADi::AcadoInternal::clone() const

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::AcadoInternal::init "void
CasADi::AcadoInternal::init()

Initialize the solver. ";

%feature("docstring")  CasADi::AcadoInternal::evaluate "void
CasADi::AcadoInternal::evaluate(int nfdir, int nadir)

Solve the problem. ";

%feature("docstring")  CasADi::AcadoInternal::getRef "int
CasADi::AcadoInternal::getRef(void *) ";

%feature("docstring")  CasADi::AcadoInternal::returnRef "void
CasADi::AcadoInternal::returnRef(int ref) ";

%feature("docstring")  CasADi::AcadoInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::AcadoInternal::jacobian "virtual FX
CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int >
> &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::AcadoInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::AcadoInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::AcadoInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::AcadoInternal::inputStruct "FunctionIO
& CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::AcadoInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::AcadoInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::AcadoInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::AcadoInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")  CasADi::AcadoInternal::unidirectionalColoring "CRSSparsity CasADi::FXInternal::unidirectionalColoring(const
CRSSparsity &A, const CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::AcadoInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::AcadoInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::AcadoInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::AcadoInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::AcadoInternal::input "Matrix< double >
& CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::AcadoInternal::input "const Matrix<
double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::AcadoInternal::output "Matrix< double
> & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::AcadoInternal::output "const Matrix<
double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::AcadoInternal::fwdSeed "Matrix< double
> & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::AcadoInternal::fwdSeed "const Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::AcadoInternal::fwdSens "Matrix< double
> & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::AcadoInternal::fwdSens "const Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::AcadoInternal::adjSeed "Matrix< double
> & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::AcadoInternal::adjSeed "const Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::AcadoInternal::adjSens "Matrix< double
> & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::AcadoInternal::adjSens "const Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::AcadoInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::AcadoInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::AcadoInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::AcadoInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::AcadoInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::AcadoInternal::getStat "GenericType
CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::AcadoInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::AcadoInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::AcadoInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::AcadoInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::AcadoInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::AcadoInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::AcadoInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::AcadoInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::AcadoInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::AcadoInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::AcadoInternal::getOption "GenericType
CasADi::OptionsFunctionalityNode::getOption(const std::string &str)
const

get an option value ";

%feature("docstring")  CasADi::AcadoInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::AcadoInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::AcadoInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::AcadoInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::AcadoInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: structCasADi_1_1AlgElData.xml
%feature("docstring") CasADi::AlgElData "C++ includes:
sx_function_internal.hpp ";


// File: classCasADi_1_1BinaryOp.xml
%feature("docstring") CasADi::BinaryOp "

Represents any binary operation that involves two matrices.

Joel Andersson

C++ includes: binary_op.hpp ";

%feature("docstring")  CasADi::BinaryOp::BinaryOp "CasADi::BinaryOp::BinaryOp(Operation op, const MX &x, const MX &y)

Constructor. ";

%feature("docstring")  CasADi::BinaryOp::~BinaryOp "CasADi::BinaryOp::~BinaryOp()=0

Destructor. ";

%feature("docstring")  CasADi::BinaryOp::print "void
CasADi::BinaryOp::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::BinaryOp::isOperation "virtual bool
CasADi::BinaryOp::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::BinaryOp::evaluateMX "void
CasADi::BinaryOp::evaluateMX(const MXPtrV &input, MXPtrV &output,
const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed,
MXPtrVV &adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::BinaryOp::clone "virtual MXNode*
CasADi::MXNode::clone() const =0

Clone function. ";

%feature("docstring")  CasADi::BinaryOp::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::BinaryOp::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::BinaryOp::evaluate "virtual void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const
DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)=0

Evaluate the function. ";

%feature("docstring")  CasADi::BinaryOp::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::BinaryOp::evaluateSX "virtual void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV &fwdSens, const
SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)=0

Evaluate symbolically ( SX) ";

%feature("docstring")  CasADi::BinaryOp::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::BinaryOp::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::BinaryOp::propagateSparsity "virtual
void CasADi::MXNode::propagateSparsity(const DMatrixPtrV &input,
DMatrixPtrV &output)=0

Propagate sparsity. ";

%feature("docstring")  CasADi::BinaryOp::getName "const string &
CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::BinaryOp::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::BinaryOp::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::BinaryOp::isMapping "virtual bool
CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::BinaryOp::isEvaluation "virtual bool
CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::BinaryOp::isOutputNode "virtual bool
CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::BinaryOp::isMultipleOutput "virtual
bool CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::BinaryOp::isJacobian "virtual bool
CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::BinaryOp::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::BinaryOp::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::BinaryOp::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::BinaryOp::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::BinaryOp::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::BinaryOp::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::BinaryOp::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::BinaryOp::getNumOutputs "virtual int
CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::BinaryOp::sparsity "const CRSSparsity
& CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::BinaryOp::sparsity "const CRSSparsity
& CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::BinaryOp::isNonLinear "virtual bool
CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::BinaryOp::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::BinaryOp::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::BinaryOp::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::BinaryOp::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::BinaryOp::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::BinaryOp::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::BinaryOp::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::BinaryOp::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::BinaryOp::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::BinaryOp::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::BinaryOp::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::BinaryOp::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::BinaryOp::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::BinaryOp::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::BinaryOp::eval "virtual Matrix<double>
CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::BinaryOp::eval "virtual Matrix<SX>
CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::BinaryOp::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::BinaryOp::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::BinaryOp::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::BinaryOp::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1BinaryOperation.xml
%feature("docstring") CasADi::BinaryOperation "C++ includes:
casadi_math.hpp ";


// File: classCasADi_1_1BinaryOperation_3_01ADD_01_4.xml
%feature("docstring") CasADi::BinaryOperation< ADD > "

Addition.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::BinaryOperation< ADD >::printRoutines "
CasADi::BinaryOperation< ADD >::printRoutines(\"(\",\"+\",\")\")
static bool f00_is_zero() ";


// File: classCasADi_1_1BinaryOperation_3_01CONSTPOW_01_4.xml
%feature("docstring") CasADi::BinaryOperation< CONSTPOW > "

Power, defined only for y constant.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::BinaryOperation< CONSTPOW
>::printRoutines " CasADi::BinaryOperation< CONSTPOW
>::printRoutines(\"pow(\",\",\",\")\") static bool f00_is_zero() ";


// File: classCasADi_1_1BinaryOperation_3_01DIV_01_4.xml
%feature("docstring") CasADi::BinaryOperation< DIV > "

Division.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::BinaryOperation< DIV >::printRoutines "
CasADi::BinaryOperation< DIV >::printRoutines(\"(\",\"/\",\")\")
static bool f00_is_zero() ";


// File: classCasADi_1_1BinaryOperation_3_01EQUALITY_01_4.xml
%feature("docstring") CasADi::BinaryOperation< EQUALITY > "

Equality.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::BinaryOperation< EQUALITY
>::printRoutines " CasADi::BinaryOperation< EQUALITY
>::printRoutines(\"(\",\"==\",\")\") static bool f00_is_zero() ";


// File: classCasADi_1_1BinaryOperation_3_01FMAX_01_4.xml
%feature("docstring") CasADi::BinaryOperation< FMAX > "

Maximum.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::BinaryOperation< FMAX >::printRoutines
" CasADi::BinaryOperation< FMAX
>::printRoutines(\"fmax(\",\",\",\")\") static bool f00_is_zero() ";


// File: classCasADi_1_1BinaryOperation_3_01FMIN_01_4.xml
%feature("docstring") CasADi::BinaryOperation< FMIN > "

Minimum.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::BinaryOperation< FMIN >::printRoutines
" CasADi::BinaryOperation< FMIN
>::printRoutines(\"fmin(\",\",\",\")\") static bool f00_is_zero() ";


// File: classCasADi_1_1BinaryOperation_3_01MUL_01_4.xml
%feature("docstring") CasADi::BinaryOperation< MUL > "

Multiplication.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::BinaryOperation< MUL >::printRoutines "
CasADi::BinaryOperation< MUL >::printRoutines(\"(\",\"*\",\")\")
static bool f00_is_zero() ";


// File: classCasADi_1_1BinaryOperation_3_01POW_01_4.xml
%feature("docstring") CasADi::BinaryOperation< POW > "

Power, defined only for x>=0.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::BinaryOperation< POW >::printRoutines "
CasADi::BinaryOperation< POW >::printRoutines(\"pow(\",\",\",\")\")
static bool f00_is_zero() ";


// File: classCasADi_1_1BinaryOperation_3_01PRINTME_01_4.xml
%feature("docstring") CasADi::BinaryOperation< PRINTME > "

Identity operator with the side effect of printing.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::BinaryOperation< PRINTME
>::printRoutines " CasADi::BinaryOperation< PRINTME
>::printRoutines(\"printme(\",\",\",\")\") static bool f00_is_zero()
";


// File: classCasADi_1_1BinaryOperation_3_01SUB_01_4.xml
%feature("docstring") CasADi::BinaryOperation< SUB > "

Subtraction.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::BinaryOperation< SUB >::printRoutines "
CasADi::BinaryOperation< SUB >::printRoutines(\"(\",\"-\",\")\")
static bool f00_is_zero() ";


// File: classCasADi_1_1BinaryOperationE.xml
%feature("docstring") CasADi::BinaryOperationE "C++ includes:
casadi_math.hpp ";


// File: classCasADi_1_1BinarySXNode.xml
%feature("docstring") CasADi::BinarySXNode "

Represents a basic binary operation on two SX nodes.

Joel Andersson

C++ includes: binary_sx_node.hpp ";

%feature("docstring")  CasADi::BinarySXNode::isConstant "bool
CasADi::SXNode::isConstant() const

check properties of a node ";

%feature("docstring")  CasADi::BinarySXNode::isInteger "bool
CasADi::SXNode::isInteger() const ";

%feature("docstring")  CasADi::BinarySXNode::isSymbolic "bool
CasADi::SXNode::isSymbolic() const ";

%feature("docstring")  CasADi::BinarySXNode::isZero "bool
CasADi::SXNode::isZero() const ";

%feature("docstring")  CasADi::BinarySXNode::isOne "bool
CasADi::SXNode::isOne() const ";

%feature("docstring")  CasADi::BinarySXNode::isMinusOne "bool
CasADi::SXNode::isMinusOne() const ";

%feature("docstring")  CasADi::BinarySXNode::isNan "bool
CasADi::SXNode::isNan() const ";

%feature("docstring")  CasADi::BinarySXNode::isInf "bool
CasADi::SXNode::isInf() const ";

%feature("docstring")  CasADi::BinarySXNode::isMinusInf "bool
CasADi::SXNode::isMinusInf() const ";

%feature("docstring")  CasADi::BinarySXNode::getValue "double
CasADi::SXNode::getValue() const

Get value of a constant node. ";

%feature("docstring")  CasADi::BinarySXNode::getIntValue "int
CasADi::SXNode::getIntValue() const ";

%feature("docstring")  CasADi::BinarySXNode::BinarySXNode "CasADi::BinarySXNode::BinarySXNode(Operation op_, const SX &child1_)

Constructors. ";

%feature("docstring")  CasADi::BinarySXNode::BinarySXNode "CasADi::BinarySXNode::BinarySXNode(Operation op_, const SX &child1_,
const SX &child2_) ";

%feature("docstring")  CasADi::BinarySXNode::~BinarySXNode "CasADi::BinarySXNode::~BinarySXNode()

This is a rather complex destructor which is necessary since the
default destructor can cause stack overflow due to recursive calling.
";

%feature("docstring")  CasADi::BinarySXNode::isSmooth "bool
CasADi::BinarySXNode::isSmooth() const

Check if smooth. ";

%feature("docstring")  CasADi::BinarySXNode::hasDep "virtual bool
CasADi::BinarySXNode::hasDep() const ";

%feature("docstring")  CasADi::BinarySXNode::ndep "virtual int
CasADi::BinarySXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::BinarySXNode::dep "const SX &
CasADi::BinarySXNode::dep(int i) const

get the reference of a child ";

%feature("docstring")  CasADi::BinarySXNode::dep "SX &
CasADi::BinarySXNode::dep(int i)

get the reference of a child ";

%feature("docstring")  CasADi::BinarySXNode::getOp "virtual int
CasADi::BinarySXNode::getOp() const

Get the operation. ";

%feature("docstring")  CasADi::BinarySXNode::print "virtual void
CasADi::BinarySXNode::print(std::ostream &stream, long
&remaining_calls) const

print ";

%feature("docstring")  CasADi::BinarySXNode::getName "const
std::string & CasADi::SXNode::getName() const ";

%feature("docstring")  CasADi::BinarySXNode::isEqual "bool
CasADi::SXNode::isEqual(const SXNode &node) const

comparison ";

%feature("docstring")  CasADi::BinarySXNode::isEqual "bool
CasADi::SXNode::isEqual(const SX &scalar) const

comparison ";

%feature("docstring")  CasADi::BinarySXNode::print "void
CasADi::SXNode::print(std::ostream &stream) const

print ";


// File: classCasADi_1_1Interfaces_1_1BLT.xml
%feature("docstring") CasADi::Interfaces::BLT "

BLT decomposition.

C++ includes: csparse_tools.hpp ";

%feature("docstring")  CasADi::Interfaces::BLT::BLT "CasADi::Interfaces::BLT::BLT(CRSSparsity s, int seed=0)

Constructor. ";


// File: classCasADi_1_1casadi__limits.xml
%feature("docstring") CasADi::casadi_limits "C++ includes:
casadi_limits.hpp ";


// File: classCasADi_1_1casadi__limits_3_01SX_01_4.xml
%feature("docstring") CasADi::casadi_limits< SX > " C++ includes:
sx.hpp ";


// File: classCasADi_1_1casadi__math.xml
%feature("docstring") CasADi::casadi_math "

Easy access to all the functions for a particular type.

C++ includes: casadi_math.hpp ";


// File: classCasADi_1_1casadi__operators.xml
%feature("docstring") CasADi::casadi_operators "C++ includes:
casadi_operators.hpp ";


// File: classCasADi_1_1casadi__operators_3_01SX_01_4.xml
%feature("docstring") CasADi::casadi_operators< SX > " C++ includes:
sx.hpp ";


// File: classCasADi_1_1CasadiException.xml
%feature("docstring") CasADi::CasadiException "

Casadi exception class.

Joel Andersson

C++ includes: casadi_exception.hpp ";

%feature("docstring")  CasADi::CasadiException::CasadiException "CasADi::CasadiException::CasadiException()

Default constructor. ";

%feature("docstring")  CasADi::CasadiException::CasadiException "CasADi::CasadiException::CasadiException(const std::string &msg)

Form message string. ";

%feature("docstring")  CasADi::CasadiException::~CasadiException "CasADi::CasadiException::~CasadiException()  throw () Destructor. ";

%feature("docstring")  CasADi::CasadiException::what "virtual const
char* CasADi::CasadiException::what() const  throw () Display error.
";


// File: classCasADi_1_1Interfaces_1_1CasadiLifter.xml
%feature("docstring") CasADi::Interfaces::CasadiLifter "C++ includes:
casadi_lifter.hpp ";

%feature("docstring")  CasADi::Interfaces::CasadiLifter::CasadiLifter
"CasADi::Interfaces::CasadiLifter::CasadiLifter(LiftoptInternal
*interface) ";

%feature("docstring")  CasADi::Interfaces::CasadiLifter::~CasadiLifter
"virtual CasADi::Interfaces::CasadiLifter::~CasadiLifter() ";

%feature("docstring")  CasADi::Interfaces::CasadiLifter::evalUserFcn "long
CasADi::Interfaces::CasadiLifter::evalUserFcn(liftopt::TLifterArgs<
double > &args) ";


// File: classCasADi_1_1CFunction.xml
%feature("docstring") CasADi::CFunction "

Interface to function implemented as plain code.

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: c_function.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::CFunction::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::CFunction::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::CFunction::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::CFunction::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::CFunction::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::CFunction::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::CFunction::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::CFunction::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::CFunction::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::CFunction::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::CFunction::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::CFunction::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::CFunction::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::CFunction::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::CFunction::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::CFunction::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::CFunction::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::CFunction::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::CFunction::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::CFunction::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::CFunction::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::CFunction::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::CFunction::CFunction "CasADi::CFunction::CFunction()

default constructor ";

%feature("docstring")  CasADi::CFunction::CFunction "CasADi::CFunction::CFunction(CFunctionWrapper c_fcn, const
std::vector< CRSSparsity > &inputscheme, const std::vector<
CRSSparsity > &outputscheme)

Create a function with input/output schemes given. ";

%feature("docstring")  CasADi::CFunction::CFunction "CasADi::CFunction::CFunction(CFunctionWrapper c_fcn)

Create a function, user sets inputs outputs manually. ";

%feature("docstring")  CasADi::CFunction::checkNode "bool
CasADi::CFunction::checkNode() const

Check if the pointer points towards a valid object. ";

%feature("docstring")  CasADi::CFunction::setUserData "void
CasADi::CFunction::setUserData(void *user_data)

Set user data structure (to be passed to all functions) ";

%feature("docstring")  CasADi::CFunction::getUserData "void *
CasADi::CFunction::getUserData() const

Get user data structure (to be passed to all functions) ";

%feature("docstring")  CasADi::CFunction::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::CFunction::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::CFunction::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::CFunction::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::CFunction::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::CFunction::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::CFunction::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::CFunction::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::CFunction::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::CFunction::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::CFunction::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::CFunction::call "std::vector<DMatrix>
CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::CFunction::call "std::vector<SXMatrix>
CasADi::FX::call(const std::vector< SXMatrix > &x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::CFunction::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::CFunction::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::CFunction::jacSparsity "CRSSparsity &
CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::CFunction::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::CFunction::input "const Matrix< double
> & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::CFunction::input "Matrix< double > &
CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::CFunction::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::CFunction::output "Matrix< double > &
CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::CFunction::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::CFunction::fwdSeed "Matrix< double > &
CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::CFunction::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::CFunction::fwdSens "Matrix< double > &
CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::CFunction::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::CFunction::adjSeed "Matrix< double > &
CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::CFunction::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::CFunction::adjSens "Matrix< double > &
CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::CFunction::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::CFunction::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::CFunction::getStats "const Dictionary
& CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::CFunction::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::CFunction::symbolicInput "std::vector<
MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::CFunction::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::CFunction::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::CFunction::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::CFunction::get "const SharedObjectNode
* CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::CFunction::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::CFunction::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::CFunction::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::CFunction::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::CFunction::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::CFunction::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::CFunction::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::CFunction::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::CFunction::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::CFunction::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1CFunctionInternal.xml
%feature("docstring") CasADi::CFunctionInternal "

Internal class for CFunction.

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: c_function_internal.hpp ";

%feature("docstring")  CasADi::CFunctionInternal::CFunctionInternal "CasADi::CFunctionInternal::CFunctionInternal(CFunctionWrapper c_fcn,
const std::vector< CasADi::CRSSparsity > &inputscheme, const
std::vector< CasADi::CRSSparsity > &outputscheme)

Create a function. ";

%feature("docstring")  CasADi::CFunctionInternal::~CFunctionInternal "CasADi::CFunctionInternal::~CFunctionInternal()

Destructor. ";

%feature("docstring")  CasADi::CFunctionInternal::clone "virtual
CFunctionInternal* CasADi::CFunctionInternal::clone() const

Cloning. ";

%feature("docstring")  CasADi::CFunctionInternal::setUserData "void
CasADi::CFunctionInternal::setUserData(void *user_data)

Set user data structure (to be passed to all functions) ";

%feature("docstring")  CasADi::CFunctionInternal::getUserData "void *
CasADi::CFunctionInternal::getUserData() const

Get user data structure (to be passed to all functions) ";

%feature("docstring")  CasADi::CFunctionInternal::evaluate "void
CasADi::CFunctionInternal::evaluate(int nfdir, int nadir)

Evaluate. ";

%feature("docstring")  CasADi::CFunctionInternal::init "void
CasADi::CFunctionInternal::init()

Initialize. ";

%feature("docstring")  CasADi::CFunctionInternal::evaluate_switch "void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::CFunctionInternal::jacobian "virtual
FX CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int
> > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::CFunctionInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::CFunctionInternal::numeric_jacobian "FX CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::CFunctionInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::CFunctionInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::CFunctionInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::CFunctionInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::CFunctionInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::CFunctionInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::CFunctionInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::CFunctionInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::CFunctionInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::CFunctionInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::CFunctionInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::CFunctionInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::CFunctionInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::CFunctionInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::CFunctionInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::CFunctionInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::CFunctionInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::CFunctionInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::CFunctionInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::CFunctionInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::CFunctionInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::CFunctionInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::CFunctionInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::CFunctionInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::CFunctionInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::CFunctionInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::CFunctionInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::CFunctionInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::CFunctionInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::CFunctionInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::CFunctionInternal::setJacSparsity "void CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int
iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::CFunctionInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::CFunctionInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::CFunctionInternal::getFullJacobian "void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::CFunctionInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::CFunctionInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::CFunctionInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::CFunctionInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::CFunctionInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::CFunctionInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::CFunctionInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::CFunctionInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::CFunctionInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::CFunctionInternal::deepCopyMembers "void CasADi::SharedObjectNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::CFunctionInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1ConstantSXNode.xml
%feature("docstring") CasADi::ConstantSXNode "

Reprsents a constant SX.

Joel Andersson

C++ includes: constant_sx_node.hpp ";

%feature("docstring")  CasADi::ConstantSXNode::isInteger "bool
CasADi::SXNode::isInteger() const ";

%feature("docstring")  CasADi::ConstantSXNode::isSymbolic "bool
CasADi::SXNode::isSymbolic() const ";

%feature("docstring")  CasADi::ConstantSXNode::hasDep "bool
CasADi::SXNode::hasDep() const ";

%feature("docstring")  CasADi::ConstantSXNode::isZero "bool
CasADi::SXNode::isZero() const ";

%feature("docstring")  CasADi::ConstantSXNode::isOne "bool
CasADi::SXNode::isOne() const ";

%feature("docstring")  CasADi::ConstantSXNode::isMinusOne "bool
CasADi::SXNode::isMinusOne() const ";

%feature("docstring")  CasADi::ConstantSXNode::isNan "bool
CasADi::SXNode::isNan() const ";

%feature("docstring")  CasADi::ConstantSXNode::isInf "bool
CasADi::SXNode::isInf() const ";

%feature("docstring")  CasADi::ConstantSXNode::isMinusInf "bool
CasADi::SXNode::isMinusInf() const ";

%feature("docstring")  CasADi::ConstantSXNode::getIntValue "int
CasADi::SXNode::getIntValue() const ";

%feature("docstring")  CasADi::ConstantSXNode::~ConstantSXNode "virtual CasADi::ConstantSXNode::~ConstantSXNode() ";

%feature("docstring")  CasADi::ConstantSXNode::getValue "virtual
double CasADi::ConstantSXNode::getValue() const =0

Get the value must be defined. ";

%feature("docstring")  CasADi::ConstantSXNode::isConstant "virtual
bool CasADi::ConstantSXNode::isConstant() const

Properties. ";

%feature("docstring")  CasADi::ConstantSXNode::getName "const
std::string & CasADi::SXNode::getName() const ";

%feature("docstring")  CasADi::ConstantSXNode::getOp "int
CasADi::SXNode::getOp() const

get the operation only for binary nodes ";

%feature("docstring")  CasADi::ConstantSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SXNode &node) const

comparison ";

%feature("docstring")  CasADi::ConstantSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SX &scalar) const

comparison ";

%feature("docstring")  CasADi::ConstantSXNode::ndep "virtual int
CasADi::SXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::ConstantSXNode::dep "const SX &
CasADi::SXNode::dep(int i) const

get the reference of a child ";

%feature("docstring")  CasADi::ConstantSXNode::dep "SX &
CasADi::SXNode::dep(int i)

get the reference of a child ";

%feature("docstring")  CasADi::ConstantSXNode::isSmooth "bool
CasADi::SXNode::isSmooth() const

Check if smooth. ";

%feature("docstring")  CasADi::ConstantSXNode::print "void
CasADi::SXNode::print(std::ostream &stream) const

print ";


// File: classCasADi_1_1CplexInternal.xml
%feature("docstring") CasADi::CplexInternal "

Name

Description

NLP_X_INIT

Decision variables initial guess.

NLP_LBX

Decision variables lower bound.

NLP_UBX

Decision variables upper bound.

NLP_LBG

Constraints lower bound.

NLP_UBG

Constraints upper bound.

NLP_LAMBDA_INIT

Lambda multipliers initial guess.

NLP_P

Static parameters on which the objective and constraints might depend.
Input scheme: CasADi::NLPInput (NLP_NUM_IN = 7) Name

Description

NLP_X_OPT

Decision variables for optimal solution.

NLP_COST

Objective/cost function for optimal solution.

NLP_LAMBDA_OPT

Lambda multipliers function for optimal solution.

NLP_LAMBDA_LBX

Lower bound multipliers for optimal solution When in warm start mode,
this output will be used as input

NLP_LAMBDA_UBX

Upper bound multipliers for optimal solution When in warm start mode,
this output will be used as input Output scheme: CasADi::NLPOutput
(NLP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

exact_jacobian

OT_BOOLEAN

false

CasADi::CplexInternal

is_differential

OT_INTEGERVECTOR

Option()

CasADi::CplexInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::CplexInternal

name

OT_STRING

\"unnamed_cplex_problem\"

CasADi::CplexInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

objsense

OT_INTEGER

CPX_MIN

optimization sense (CPX_MIN or CPX_MAX)

CasADi::CplexInternal

reltol

OT_REAL

1e-6

relative tolerence for the IVP solution

CasADi::CplexInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: cplex_internal.hpp ";

%feature("docstring")  CasADi::CplexInternal::CplexInternal "CasADi::CplexInternal::CplexInternal(const FX &F, const FX &G, const
FX &H, const FX &J, const FX &GF) ";

%feature("docstring")  CasADi::CplexInternal::~CplexInternal "CasADi::CplexInternal::~CplexInternal() ";

%feature("docstring")  CasADi::CplexInternal::clone "virtual
CplexInternal* CasADi::CplexInternal::clone() const

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::CplexInternal::setX "void
CasADi::CplexInternal::setX(const std::vector< double > &x) ";

%feature("docstring")  CasADi::CplexInternal::getSol "vector< double
> CasADi::CplexInternal::getSol() ";

%feature("docstring")  CasADi::CplexInternal::init "void
CasADi::CplexInternal::init()

Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but
before evaluating. If passed to another class (in the constructor),
this class should invoke this function when initialized. ";

%feature("docstring")  CasADi::CplexInternal::evaluate "void
CasADi::CplexInternal::evaluate(int nfdir, int nadir)

Evaluate. ";

%feature("docstring")  CasADi::CplexInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::CplexInternal::jacobian "virtual FX
CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int >
> &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::CplexInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::CplexInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::CplexInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::CplexInternal::inputStruct "FunctionIO
& CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::CplexInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::CplexInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::CplexInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::CplexInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")  CasADi::CplexInternal::unidirectionalColoring "CRSSparsity CasADi::FXInternal::unidirectionalColoring(const
CRSSparsity &A, const CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::CplexInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::CplexInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::CplexInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::CplexInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::CplexInternal::input "Matrix< double >
& CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::CplexInternal::input "const Matrix<
double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::CplexInternal::output "Matrix< double
> & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::CplexInternal::output "const Matrix<
double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::CplexInternal::fwdSeed "Matrix< double
> & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::CplexInternal::fwdSeed "const Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::CplexInternal::fwdSens "Matrix< double
> & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::CplexInternal::fwdSens "const Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::CplexInternal::adjSeed "Matrix< double
> & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::CplexInternal::adjSeed "const Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::CplexInternal::adjSens "Matrix< double
> & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::CplexInternal::adjSens "const Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::CplexInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::CplexInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::CplexInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::CplexInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::CplexInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::CplexInternal::getStat "GenericType
CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::CplexInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::CplexInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::CplexInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::CplexInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::CplexInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::CplexInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::CplexInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::CplexInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::CplexInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::CplexInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::CplexInternal::getOption "GenericType
CasADi::OptionsFunctionalityNode::getOption(const std::string &str)
const

get an option value ";

%feature("docstring")  CasADi::CplexInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::CplexInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::CplexInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::CplexInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::CplexInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1CplexMatrix.xml
%feature("docstring") CasADi::CplexMatrix "

CplexMatrix is a class used to convert CasADi matrices to CPLEX format
(similar to CSC). The class definition can be found in
cplex_internal.cpp.

Carlo Savorgnan

C++ includes: cplex_internal.hpp ";

%feature("docstring")  CasADi::CplexMatrix::set "void
CasADi::CplexMatrix::set(const FX &funct, int n_out, bool symm)

reads matrix in casadi format ";

%feature("docstring")  CasADi::CplexMatrix::matval "double *
CasADi::CplexMatrix::matval()

returns non-zero values ";

%feature("docstring")  CasADi::CplexMatrix::matbeg "int *
CasADi::CplexMatrix::matbeg()

returns indices of the beginning of columns ";

%feature("docstring")  CasADi::CplexMatrix::matcnt "int *
CasADi::CplexMatrix::matcnt()

returns number of entries per column ";

%feature("docstring")  CasADi::CplexMatrix::matind "int *
CasADi::CplexMatrix::matind()

returns row numbers ";


// File: classCasADi_1_1CplexSolver.xml
%feature("docstring") CasADi::CplexSolver "

Interface to CPLEX solver. Attention! The interface is not complete
yet. Also if a quadratic term can be set with this interface, it is
ignored!

Carlo Savorgnan

Name

Description

NLP_X_INIT

Decision variables initial guess.

NLP_LBX

Decision variables lower bound.

NLP_UBX

Decision variables upper bound.

NLP_LBG

Constraints lower bound.

NLP_UBG

Constraints upper bound.

NLP_LAMBDA_INIT

Lambda multipliers initial guess.

NLP_P

Static parameters on which the objective and constraints might depend.
Input scheme: CasADi::NLPInput (NLP_NUM_IN = 7) Name

Description

NLP_X_OPT

Decision variables for optimal solution.

NLP_COST

Objective/cost function for optimal solution.

NLP_LAMBDA_OPT

Lambda multipliers function for optimal solution.

NLP_LAMBDA_LBX

Lower bound multipliers for optimal solution When in warm start mode,
this output will be used as input

NLP_LAMBDA_UBX

Upper bound multipliers for optimal solution When in warm start mode,
this output will be used as input Output scheme: CasADi::NLPOutput
(NLP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

exact_jacobian

OT_BOOLEAN

false

CasADi::CplexInternal

is_differential

OT_INTEGERVECTOR

Option()

CasADi::CplexInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::CplexInternal

name

OT_STRING

\"unnamed_cplex_problem\"

CasADi::CplexInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

objsense

OT_INTEGER

CPX_MIN

optimization sense (CPX_MIN or CPX_MAX)

CasADi::CplexInternal

reltol

OT_REAL

1e-6

relative tolerence for the IVP solution

CasADi::CplexInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: cplex_solver.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::CplexSolver::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::CplexSolver::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::CplexSolver::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::CplexSolver::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::CplexSolver::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::CplexSolver::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::CplexSolver::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::CplexSolver::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::CplexSolver::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::CplexSolver::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::CplexSolver::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::CplexSolver::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::CplexSolver::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::CplexSolver::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::CplexSolver::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::CplexSolver::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::CplexSolver::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::CplexSolver::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::CplexSolver::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::CplexSolver::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::CplexSolver::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::CplexSolver::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::CplexSolver::CplexSolver "CasADi::CplexSolver::CplexSolver()

Default constructor. ";

%feature("docstring")  CasADi::CplexSolver::CplexSolver "CasADi::CplexSolver::CplexSolver(const FX &F, const FX &G=FX(), const
FX &H=FX(), const FX &J=FX(), const FX &GF=FX())

Constuct an NLP with non-linear constraints and provided hessian
approximation. ";

%feature("docstring")  CasADi::CplexSolver::setIntParam "void
CasADi::CplexSolver::setIntParam(const std::string &name, int val)

Set CPLEX integer parameters. ";

%feature("docstring")  CasADi::CplexSolver::setDoubleParam "void
CasADi::CplexSolver::setDoubleParam(const std::string &name, double
val)

Set CPLEX double parameters. ";

%feature("docstring")  CasADi::CplexSolver::checkNode "bool
CasADi::CplexSolver::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::CplexSolver::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::CplexSolver::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::CplexSolver::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::CplexSolver::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::CplexSolver::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::CplexSolver::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::CplexSolver::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::CplexSolver::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::CplexSolver::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::CplexSolver::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::CplexSolver::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::CplexSolver::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::CplexSolver::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::CplexSolver::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::CplexSolver::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::CplexSolver::jacSparsity "CRSSparsity
& CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::CplexSolver::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::CplexSolver::input "const Matrix<
double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::CplexSolver::input "Matrix< double > &
CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::CplexSolver::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::CplexSolver::output "Matrix< double >
& CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::CplexSolver::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::CplexSolver::fwdSeed "Matrix< double >
& CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::CplexSolver::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::CplexSolver::fwdSens "Matrix< double >
& CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::CplexSolver::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::CplexSolver::adjSeed "Matrix< double >
& CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::CplexSolver::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::CplexSolver::adjSens "Matrix< double >
& CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::CplexSolver::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::CplexSolver::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::CplexSolver::getStats "const
Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::CplexSolver::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::CplexSolver::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::CplexSolver::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::CplexSolver::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::CplexSolver::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::CplexSolver::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::CplexSolver::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::CplexSolver::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::CplexSolver::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::CplexSolver::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::CplexSolver::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::CplexSolver::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::CplexSolver::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::CplexSolver::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::CplexSolver::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::CplexSolver::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1CRSSparsity.xml
%feature("docstring") CasADi::CRSSparsity "

General sparsity class.

The storage format is a compressed row storage (CRS) format.

In this format, the structural non-zero elements are stored in row-
major order, starting from the upper left corner of the matrix and
ending in the lower right corner.

In addition to the dimension ( size1(), size2()), (i.e. the number of
rows and the number of columns respectively), there are also two
vectors of integers:

1. \"rowind\" [length size1()+1], which contains the index to the
first non-zero element on or after the corresponding row. All the non-
zero elements of a particular i are thus the elements with index el
that fulfils: rowind[i] <= el < rowind[i+1].

2. \"col\" [same length as the number of non-zero elements, size()]
The columns for each of the structural non-zeros.

Note that with this format, it is cheap to loop over all the non-zero
elements of a particular row, constant time per elment, but expensive
to jump to access a location (i,j).

If the matrix is dense, i.e. length(col) == size1()*size2(), the
format reduces to standard dense row major format, which allows access
to an arbitrary element in constant time.

Since the object is reference counted (it inherits from SharedObject),
severl matrices are allowed to share the same sparsity pattern.

See:   Matrix

Joel Andersson

C++ includes: crs_sparsity.hpp ";

/*  Size and element counting  */

%feature("docstring")  CasADi::CRSSparsity::size1 "int
CasADi::CRSSparsity::size1() const

Get the number of rows. ";

%feature("docstring")  CasADi::CRSSparsity::size2 "int
CasADi::CRSSparsity::size2() const

Get the number of columns. ";

%feature("docstring")  CasADi::CRSSparsity::numel "int
CasADi::CRSSparsity::numel() const

The total number of elements, including structural zeros, i.e.
size1()*size2()

See:   size() ";

%feature("docstring")  CasADi::CRSSparsity::size "int
CasADi::CRSSparsity::size() const

Get the number of (structural) non-zeros.

See:   numel() ";

%feature("docstring")  CasADi::CRSSparsity::sizeU "int
CasADi::CRSSparsity::sizeU() const

Number of non-zeros in the upper triangular half, i.e. the number of
elements (i,j) with j>=i. ";

%feature("docstring")  CasADi::CRSSparsity::sizeL "int
CasADi::CRSSparsity::sizeL() const

Number of non-zeros in the lower triangular half, i.e. the number of
elements (i,j) with j<=i. ";

%feature("docstring")  CasADi::CRSSparsity::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::CRSSparsity::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::CRSSparsity::CRSSparsity "CasADi::CRSSparsity::CRSSparsity(int null=0)

Default constructor, optional int argument which must be zero to
allows implicit type conversion. ";

%feature("docstring")  CasADi::CRSSparsity::CRSSparsity "CasADi::CRSSparsity::CRSSparsity(int nrow, int ncol, bool dense=false)

Construct a sparsity pattern (sparse/dense) ";

%feature("docstring")  CasADi::CRSSparsity::CRSSparsity "CasADi::CRSSparsity::CRSSparsity(int nrow, int ncol, std::vector< int
> col, std::vector< int > rowind)

Construct a sparsity pattern from vectors. ";

%feature("docstring")  CasADi::CRSSparsity::sanityCheck "void
CasADi::CRSSparsity::sanityCheck(bool complete=false) const

Check if the dimensions and rowind,col vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as
possible result ";

%feature("docstring")  CasADi::CRSSparsity::diag "CRSSparsity
CasADi::CRSSparsity::diag(std::vector< int > &mapping) const

Get the diagonal of the matrix/create a diagonal matrix (mapping will
contain the nonzero mapping) When the input is square, the diagonal
elements are returned. If the input is vector-like, a diagonal matrix
is constructed with it. ";

%feature("docstring")  CasADi::CRSSparsity::checkNode "bool
CasADi::CRSSparsity::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::CRSSparsity::col "const vector< int >
& CasADi::CRSSparsity::col() const

Get a reference to col-vector, containing columns for all non-zero
elements (see class description) ";

%feature("docstring")  CasADi::CRSSparsity::col "int
CasADi::CRSSparsity::col(int el) const

Get the column of a non-zero element. ";

%feature("docstring")  CasADi::CRSSparsity::rowind "const vector< int
> & CasADi::CRSSparsity::rowind() const

Get a reference to the rowindex of all row element (see class
description) ";

%feature("docstring")  CasADi::CRSSparsity::rowind "int
CasADi::CRSSparsity::rowind(int i) const

Get a reference to the rowindex of row i (see class description) ";

%feature("docstring")  CasADi::CRSSparsity::colRef "vector< int > &
CasADi::CRSSparsity::colRef()

Get a reference to the columns of all non-zero element (copy if not
unique!) ";

%feature("docstring")  CasADi::CRSSparsity::rowindRef "vector< int >
& CasADi::CRSSparsity::rowindRef()

Get a reference to the rowindex of all row element (copy if not
unique!) ";

%feature("docstring")  CasADi::CRSSparsity::getRow "vector< int >
CasADi::CRSSparsity::getRow() const

Get the row for each non-zero entry Together with the col-vector, this
vector gives the sparsity of the matrix in sparse triplet format, i.e.
the row and column for each non-zero elements. ";

%feature("docstring")  CasADi::CRSSparsity::resize "void
CasADi::CRSSparsity::resize(int nrow, int ncol)

Resize. ";

%feature("docstring")  CasADi::CRSSparsity::reshape "CRSSparsity
CasADi::CRSSparsity::reshape(int n, int m) const

Reshape a sparsity, order of nonzeros remains the same. ";

%feature("docstring")  CasADi::CRSSparsity::getNZ "int
CasADi::CRSSparsity::getNZ(int i, int j)

Get the index of a non-zero element Add the element if it does not
exist and copy object if it's not unique. ";

%feature("docstring")  CasADi::CRSSparsity::getNZ "int
CasADi::CRSSparsity::getNZ(int i, int j) const

Get the index of an exstd::vector<unsigned short>isting non-zero
element return -1 if the element does not exists. ";

%feature("docstring")  CasADi::CRSSparsity::getNZ "std::vector<int>
CasADi::CRSSparsity::getNZ(std::vector< int > ii, std::vector< int >
jj) const

Get a set of non-zero element return -1 if the element does not
exists. ";

%feature("docstring")  CasADi::CRSSparsity::getSparsityCRS "void
CasADi::CRSSparsity::getSparsityCRS(std::vector< int > &rowind,
std::vector< int > &col) const

Get the sparsity in CRS format. ";

%feature("docstring")  CasADi::CRSSparsity::getSparsity "void
CasADi::CRSSparsity::getSparsity(std::vector< int > &row, std::vector<
int > &col) const

Get the sparsity in sparse triplet format. ";

%feature("docstring")  CasADi::CRSSparsity::bucketSort "void
CasADi::CRSSparsity::bucketSort(std::vector< std::list< int > >
&buckets, std::vector< int > &row) const

Bucket sort the elements by column. ";

%feature("docstring")  CasADi::CRSSparsity::getSub "CRSSparsity
CasADi::CRSSparsity::getSub(const std::vector< int > &ii, const
std::vector< int > &jj, std::vector< int > &mapping) const

Get a submatrix. ";

%feature("docstring")  CasADi::CRSSparsity::transpose "CRSSparsity
CasADi::CRSSparsity::transpose(std::vector< int > &mapping) const

Transpose the matrix and get the reordering of the non-zero entries,
i.e. the non-zeros of the original matrix for each non-zero of the new
matrix. ";

%feature("docstring")  CasADi::CRSSparsity::patternUnion "CRSSparsity
CasADi::CRSSparsity::patternUnion(const CRSSparsity &y, std::vector<
unsigned char > &mapping, bool f00_is_zero=true, bool
f0x_is_zero=false, bool fx0_is_zero=false) const

Union of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero
elements The mapping matrix contains the arguments for each nonzero,
the first bit indicates if the first argument is nonzero, the second
bit indicates if the second argument is nonzero (note that none of,
one of or both of the arguments can be nonzero) ";

%feature("docstring")  CasADi::CRSSparsity::patternIntersection "CRSSparsity CasADi::CRSSparsity::patternIntersection(const CRSSparsity
&y, std::vector< unsigned char > &mapping) const

Intersection of two sparsity patterns Returns the new sparsity pattern
as well as a mapping with the same length as the number of non-zero
elements The value is 1 if the non-zero comes from the first (i.e.
this) object, 2 if it is from the second and 3 (i.e. 1 | 2) if from
both. ";

%feature("docstring")  CasADi::CRSSparsity::patternProduct "CRSSparsity CasADi::CRSSparsity::patternProduct(const CRSSparsity
&y_trans, std::vector< std::vector< std::pair< int, int > > >
&mapping) const

Sparsity pattern for a matrix-matrix product Returns the new sparsity
pattern as well as a mapping with the same length as the number of
non-zero elements The mapping contains a vector of the index pairs
that makes up the scalar products for each non-zero. ";

%feature("docstring")  CasADi::CRSSparsity::patternProduct "CRSSparsity CasADi::CRSSparsity::patternProduct(const CRSSparsity
&y_trans) const

Sparsity pattern for a matrix-matrix product No mapping. ";

%feature("docstring")  CasADi::CRSSparsity::enlarge "void
CasADi::CRSSparsity::enlarge(int nrow, int ncol, const std::vector<
int > &ii, const std::vector< int > &jj)

Enlarge matrix Make the matrix larger by inserting empty rows and
columns, keeping the existing non-zeros.

For the matrices A to B A(m,n) length(ii)=m , length(jj)=n
B(nrow,ncol)

A=enlarge(m,n,ii,jj) makes sure that

B[ii,jj] == A ";

%feature("docstring")  CasADi::CRSSparsity::enlargeRows "void
CasADi::CRSSparsity::enlargeRows(int nrow, const std::vector< int >
&ii)

Enlarge the matrix along the first dimension (i.e. insert rows) ";

%feature("docstring")  CasADi::CRSSparsity::enlargeColumns "void
CasADi::CRSSparsity::enlargeColumns(int ncol, const std::vector< int >
&jj)

Enlarge the matrix along the second dimension (i.e. insert columns) ";

%feature("docstring")  CasADi::CRSSparsity::makeDense "CRSSparsity
CasADi::CRSSparsity::makeDense(std::vector< int > &mapping) const

Make a patten dense. ";

%feature("docstring")  CasADi::CRSSparsity::erase "std::vector<int>
CasADi::CRSSparsity::erase(const std::vector< int > &ii, const
std::vector< int > &jj)

Erase rows and columns Erase rows and/or columns of a matrix. ";

%feature("docstring")  CasADi::CRSSparsity::append "void
CasADi::CRSSparsity::append(const CRSSparsity &sp)

Append another sparsity patten vertically. ";

%feature("docstring")  CasADi::CRSSparsity::reserve "void
CasADi::CRSSparsity::reserve(int nnz, int nrow)

Reserve space. ";

%feature("docstring")  CasADi::CRSSparsity::dense "bool
CasADi::CRSSparsity::dense() const

Is dense? ";

%feature("docstring")  CasADi::CRSSparsity::diagonal "bool
CasADi::CRSSparsity::diagonal() const

Is diagonal? ";

%feature("docstring")  CasADi::CRSSparsity::depth_first_search "int
CasADi::CRSSparsity::depth_first_search(int j, int top, int *xi, int
*pstack, const int *pinv)

depth-first-search of the graph of a matrix, starting at node j (from
CSparse) ";

%feature("docstring")
CasADi::CRSSparsity::strongly_connected_components "void
CasADi::CRSSparsity::strongly_connected_components()

find the strongly connected components of a square matrix (from
CSparse) ";

%feature("docstring")  CasADi::CRSSparsity::flip "int
CasADi::CRSSparsity::flip(int i) ";

%feature("docstring")  CasADi::CRSSparsity::unflip "int
CasADi::CRSSparsity::unflip(int i) ";

%feature("docstring")  CasADi::CRSSparsity::marked "int
CasADi::CRSSparsity::marked(int *w, int j) ";

%feature("docstring")  CasADi::CRSSparsity::mark "void
CasADi::CRSSparsity::mark(int *w, int j) ";

%feature("docstring")  CasADi::CRSSparsity::dimString "std::string
CasADi::CRSSparsity::dimString() const ";

%feature("docstring")  CasADi::CRSSparsity::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::CRSSparsity::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::CRSSparsity::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::CRSSparsity::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::CRSSparsity::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::CRSSparsity::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::CRSSparsity::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::CRSSparsity::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::CRSSparsity::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::CRSSparsity::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::CRSSparsity::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::CRSSparsity::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::CRSSparsity::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::CRSSparsity::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1CRSSparsityNode.xml
%feature("docstring") CasADi::CRSSparsityNode "C++ includes:
crs_sparsity.hpp ";

%feature("docstring")  CasADi::CRSSparsityNode::CRSSparsityNode "CasADi::CRSSparsityNode::CRSSparsityNode(int nrow, int ncol,
std::vector< int > col, std::vector< int > rowind)

Construct a sparsity pattern from vectors. ";

%feature("docstring")  CasADi::CRSSparsityNode::sanityCheck "void
CasADi::CRSSparsityNode::sanityCheck(bool complete=false) const

Check if the dimensions and rowind,col vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as
possible result ";

%feature("docstring")  CasADi::CRSSparsityNode::clone "virtual
CRSSparsityNode* CasADi::CRSSparsityNode::clone() const

Clone. ";

%feature("docstring")  CasADi::CRSSparsityNode::repr "virtual void
CasADi::CRSSparsityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::CRSSparsityNode::print "virtual void
CasADi::CRSSparsityNode::print(std::ostream &stream) const

Print description. ";

%feature("docstring")  CasADi::CRSSparsityNode::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::CRSSparsityNode::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::CRSSparsityNode::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";


// File: classCasADi_1_1Interfaces_1_1CSparse.xml
%feature("docstring") CasADi::Interfaces::CSparse "

LinearSolver with CSparse Interface.

CSparse is an CasADi::FX mapping from 2 inputs [ A (matrix),b
(vector)] to one output [x (vector)].

The usual procedure to use CSparse is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

trans

OT_BOOLEAN

false

CasADi::LinearSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: csparse.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Interfaces::CSparse::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::Interfaces::CSparse::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::Interfaces::CSparse::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::Interfaces::CSparse::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::Interfaces::CSparse::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::Interfaces::CSparse::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Interfaces::CSparse::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::Interfaces::CSparse::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::Interfaces::CSparse::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::Interfaces::CSparse::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::Interfaces::CSparse::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::Interfaces::CSparse::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::Interfaces::CSparse::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::Interfaces::CSparse::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::Interfaces::CSparse::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::Interfaces::CSparse::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::Interfaces::CSparse::hasSetOption "bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Interfaces::CSparse::printOptions "void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Interfaces::CSparse::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Interfaces::CSparse::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::Interfaces::CSparse::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::Interfaces::CSparse::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::Interfaces::CSparse::CSparse "CasADi::Interfaces::CSparse::CSparse()

Default (empty) constructor. ";

%feature("docstring")  CasADi::Interfaces::CSparse::CSparse "CasADi::Interfaces::CSparse::CSparse(const CRSSparsity &sp)

Create a linear solver given a sparsity pattern. ";

%feature("docstring")  CasADi::Interfaces::CSparse::checkNode "bool
CasADi::Interfaces::CSparse::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::Interfaces::CSparse::setSparsity "void
CasADi::LinearSolver::setSparsity(const CRSSparsity &sparsity)

Set sparsity (before initialization) ";

%feature("docstring")  CasADi::Interfaces::CSparse::prepare "void
CasADi::LinearSolver::prepare()

Factorize the matrix. ";

%feature("docstring")  CasADi::Interfaces::CSparse::solve "void
CasADi::LinearSolver::solve()

Solve the system of equations, internal vector. ";

%feature("docstring")  CasADi::Interfaces::CSparse::solve "void
CasADi::LinearSolver::solve(double *x, int nrhs=1, bool
transpose=false)

Solve the factorized system of equations. ";

%feature("docstring")  CasADi::Interfaces::CSparse::prepared "bool
CasADi::LinearSolver::prepared() const

Check if prepared. ";

%feature("docstring")  CasADi::Interfaces::CSparse::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::Interfaces::CSparse::getNumOutputs "int CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::Interfaces::CSparse::setNumInputs "void CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::Interfaces::CSparse::setNumOutputs "void CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::Interfaces::CSparse::evaluate_old "void CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::Interfaces::CSparse::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::Interfaces::CSparse::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::Interfaces::CSparse::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Interfaces::CSparse::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Interfaces::CSparse::call "vector< MX
> CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::Interfaces::CSparse::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::Interfaces::CSparse::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::Interfaces::CSparse::call "std::vector<MX> CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::Interfaces::CSparse::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::Interfaces::CSparse::jacSparsity "CRSSparsity & CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Interfaces::CSparse::setJacSparsity "void CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int
oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Interfaces::CSparse::input "const
Matrix< double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::CSparse::input "Matrix<
double > & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::CSparse::output "const
Matrix< double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::CSparse::output "Matrix<
double > & CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::Interfaces::CSparse::fwdSeed "const
Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::Interfaces::CSparse::fwdSeed "Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Interfaces::CSparse::fwdSens "const
Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::CSparse::fwdSens "Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::CSparse::adjSeed "const
Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::CSparse::adjSeed "Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::CSparse::adjSens "const
Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::CSparse::adjSens "Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::CSparse::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::Interfaces::CSparse::removeMonitor "void CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::Interfaces::CSparse::getStats "const
Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Interfaces::CSparse::getStat "GenericType CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::Interfaces::CSparse::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Interfaces::CSparse::clone "SharedObject CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::Interfaces::CSparse::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::Interfaces::CSparse::assignNodeNoCount
"void CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::Interfaces::CSparse::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::Interfaces::CSparse::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::Interfaces::CSparse::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Interfaces::CSparse::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::Interfaces::CSparse::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Interfaces::CSparse::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::Interfaces::CSparse::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::Interfaces::CSparse::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::Interfaces::CSparse::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::Interfaces::CSparse::getRepresentation
"string CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::Interfaces::CSparse::getDescription "string CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1Interfaces_1_1CSparseInternal.xml
%feature("docstring") CasADi::Interfaces::CSparseInternal "

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

trans

OT_BOOLEAN

false

CasADi::LinearSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: csparse_internal.hpp ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::CSparseInternal "CasADi::Interfaces::CSparseInternal::CSparseInternal(const CRSSparsity
&sp) ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::CSparseInternal "CasADi::Interfaces::CSparseInternal::CSparseInternal(const
CSparseInternal &linsol) ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::~CSparseInternal "CasADi::Interfaces::CSparseInternal::~CSparseInternal() ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::init "void CasADi::Interfaces::CSparseInternal::init()

Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but
before evaluating. If passed to another class (in the constructor),
this class should invoke this function when initialized. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::prepare "void CasADi::Interfaces::CSparseInternal::prepare() ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::solve "void CasADi::Interfaces::CSparseInternal::solve(double *x, int nrhs,
bool transpose) ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::clone "CSparseInternal * CasADi::Interfaces::CSparseInternal::clone() const

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::evaluate "void CasADi::LinearSolverInternal::evaluate(int nfdir, int nadir)

Evaluate. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::solve "void CasADi::LinearSolverInternal::solve() ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::nrow "int
CasADi::LinearSolverInternal::nrow() const ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::ncol "int
CasADi::LinearSolverInternal::ncol() const ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::nnz "int
CasADi::LinearSolverInternal::nnz() const ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::col "const std::vector<int>& CasADi::LinearSolverInternal::col() const ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::rowind "const std::vector<int>& CasADi::LinearSolverInternal::rowind() const
";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::jacobian "virtual FX CasADi::FXInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::hessian "FX CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::inputStruct "FunctionIO &
CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::inputStruct "const FunctionIO &
CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::outputStruct "FunctionIO &
CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::outputStruct "const FunctionIO &
CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::print "virtual void CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::unidirectionalColoring "CRSSparsity CasADi::FXInternal::unidirectionalColoring(const
CRSSparsity &A, const CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::isInit "bool CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::verbose "bool CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::monitored
"bool CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::input "Matrix< double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::input "const Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::output "Matrix< double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::output "const Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::fwdSeed "Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::fwdSeed "const Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int
dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::fwdSens "Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::fwdSens "const Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::adjSeed "Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::adjSeed "const Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int
dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::adjSens "Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::adjSens "const Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::getStats "const Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::getJacSparsity "CRSSparsity
CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::jacSparsity "CRSSparsity &
CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::symbolicInput "std::vector< MX >
CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::setOption
"void CasADi::OptionsFunctionalityNode::setOption(const std::string
&str, const GenericType &val)

set an option ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::setOption
"void CasADi::OptionsFunctionalityNode::setOption(const Dictionary
&dict)

set a set of options ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::hasOption
"bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::getOption
"GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::repr "virtual void CasADi::OptionsFunctionalityNode::repr(std::ostream
&stream) const

Print representation. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::dictionary
"const Dictionary & CasADi::OptionsFunctionalityNode::dictionary()
const

Get the dictionary. ";

%feature("docstring")
CasADi::Interfaces::CSparseInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Interfaces::CSparseInternal::getCount "int CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1Sundials_1_1CVodesIntegrator.xml
%feature("docstring") CasADi::Sundials::CVodesIntegrator "

Function that integrates the ODE:

ydot == f(t,y,p) from t0 to tf

given the initial condition y(t0) == y0;

A call to evaluate will integrate to the end.

You can retrieve the entire state trajectory as follows, after the
evaluate call: Call reset. Then call integrate(t_i) and getOuput for a
series of times t_i.

Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Input scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3) Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Output scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3)

Id

Type

Default

Description

Used in

abstol

OT_REAL

1e-8

absolute tolerence for the IVP solution

CasADi::IntegratorInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

asens_abstol

OT_REAL

absolute tolerence for the adjoint sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

asens_iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

asens_linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

asens_lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

asens_max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

asens_pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

asens_reltol

OT_REAL

relative tolerence for the adjoint sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

asens_upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

exact_jacobian

OT_BOOLEAN

false

CasADi::IntegratorInternal

finite_difference_fsens

OT_BOOLEAN

false

use finite differences to approximate the forward sensitivity
equations (if AD is not available)

CasADi::IntegratorInternal

fsens_abstol

OT_REAL

absolute tolerence for the forward sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

fsens_all_at_once

OT_BOOLEAN

true

calculate all right hand sides of the sensitivity equations at once

CasADi::Sundials::CVodesInternal

fsens_err_con

OT_INTEGER

false

include the forward sensitivities in all error controls

CasADi::IntegratorInternal

fsens_reltol

OT_REAL

relative tolerence for the forward sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

fsens_scaling_factors

OT_REALVECTOR

scaling factor for the components if finite differences is used

CasADi::IntegratorInternal

fsens_sensitiviy_parameters

OT_INTEGERVECTOR

specifies which components will be used when estimating the
sensitivity equations

CasADi::IntegratorInternal

interpolation_type

OT_STRING

\"hermite\"

type of interpolation for the adjoint sensitivities (\"hermite\" or
\"polynomial\")

CasADi::IntegratorInternal

is_differential

OT_INTEGERVECTOR

None

CasADi::IntegratorInternal

iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

linear_multistep_method

OT_STRING

\"bdf\"

\"bdf\" or \"adams\"

CasADi::Sundials::CVodesInternal

linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

linear_solver_creator

OT_LINEARSOLVER

GenericType()

An linear solver creator function

CasADi::IntegratorInternal

linear_solver_options

OT_DICTIONARY

GenericType()

Options to be passed to the linear solver

CasADi::IntegratorInternal

lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

max_multistep_order

OT_INTEGER

5

CasADi::IntegratorInternal

max_num_steps

OT_INTEGER

10000

maximum number of steps

CasADi::IntegratorInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

nonlinear_solver_iteration

OT_STRING

\"newton\"

\"newton\" or \"functional\"

CasADi::Sundials::CVodesInternal

nrhs

OT_INTEGER

1

number of right hand sides

CasADi::IntegratorInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

quad_err_con

OT_BOOLEAN

false

should the quadratures affect the step size control

CasADi::IntegratorInternal

reltol

OT_REAL

1e-6

relative tolerence for the IVP solution

CasADi::IntegratorInternal

sensitivity_method

OT_STRING

\"simultaneous\"

\"simultaneous\" or \"staggered\"

CasADi::IntegratorInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

steps_per_checkpoint

OT_INTEGER

20

number of steps between two consecutive checkpoints

CasADi::IntegratorInternal

stop_at_end

OT_BOOLEAN

false

Stop the integrator at the end of the interval

CasADi::IntegratorInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

t0

OT_REAL

0.0

start of the integration

CasADi::IntegratorInternal

tf

OT_REAL

1.0

end of the integration

CasADi::IntegratorInternal

upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

use_preconditioner

OT_BOOLEAN

false

precondition an iterative solver

CasADi::IntegratorInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

Id

Used in

CVodesInternal::reset

CasADi::Sundials::CVodesInternal

CVodesInternal::rhsB

CasADi::Sundials::CVodesInternal

integrate

CasADi::Sundials::CVodesInternal List of available monitors

C++ includes: cvodes_integrator.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::setInput "void CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::setOutput "void CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::setFwdSeed
"void CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::setFwdSens
"void CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::setAdjSeed
"void CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::setAdjSens
"void CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::getInput "void CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::getOutput "void CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::getFwdSeed
"void CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::getFwdSens
"void CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::getAdjSeed
"void CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::getAdjSens
"void CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::setOption "void CasADi::OptionsFunctionality::setOption(const std::string &str,
const GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::setOption "void CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::copyOptions
"void CasADi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::dictionary
"const Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::makeUnique
"void CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::makeUnique
"void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::CVodesIntegrator "CasADi::Sundials::CVodesIntegrator::CVodesIntegrator()

Default constructor. ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::CVodesIntegrator "CasADi::Sundials::CVodesIntegrator::CVodesIntegrator(const FX &f,
const FX &q=FX())

Create an integrator for explicit ODEs.

Parameters:
-----------

f:   CasADi::FX mapping from CasADi::DAEInput to CasADi::DAEInput ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::checkNode "bool CasADi::Sundials::CVodesIntegrator::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::clone "Integrator CasADi::Integrator::clone() const

Clone. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::printStats
"void CasADi::Integrator::printStats(std::ostream &stream=std::cout)
const

Print solver statistics. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::reset "void CasADi::Integrator::reset(int fsens_order=0, int asens_order=0)

Reset the solver and bring the time back to t0. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::integrate "void CasADi::Integrator::integrate(double t_out)

Integrate until a specified time point. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::resetAdj "void CasADi::Integrator::resetAdj()

Reset the solver of the adjoint problem and take time to tf. ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::integrateAdj "void
CasADi::Integrator::integrateAdj(double t_out)

Integrate backwards in time until a specified time point. ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::setInitialTime "void
CasADi::Integrator::setInitialTime(double t0)

Set initial time. ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::setFinalTime "void
CasADi::Integrator::setFinalTime(double tf)

Set final time. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::setStopTime
"void CasADi::Integrator::setStopTime(double tf)

Set a stop time for the forward integration. ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::setLinearSolver "void
CasADi::Integrator::setLinearSolver(const LinearSolver &linsol, const
FX &jac=FX())

Set linear solver. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::getJacobian
"FX CasADi::Integrator::getJacobian()

Get the Jacobian. ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::getLinearSolver "LinearSolver
CasADi::Integrator::getLinearSolver()

Get the Linear solver. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::getDAE "FX
CasADi::Integrator::getDAE()

Get the DAE. ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::evaluate "void CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::solve "void CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::jacobian "FX CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::jacobian "FX CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::hessian "FX CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::call "vector< MX > CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::call "std::vector<MX> CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::jacSparsity
"CRSSparsity & CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::input "const Matrix< double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::input "Matrix< double > & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::output "const Matrix< double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::output "Matrix< double > & CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::fwdSeed "const Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::fwdSeed "Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::fwdSens "const Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::fwdSens "Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::adjSeed "const Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::adjSeed "Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::adjSens "const Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::adjSens "Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::addMonitor
"void CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::getStats "const Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::getStat "GenericType CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::symbolicInput "std::vector< MX >
CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::assignNode
"void CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::getCount "int CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::print "void CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::isInit "bool CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::Sundials::CVodesIntegrator::isNull "bool CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")
CasADi::Sundials::CVodesIntegrator::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1Sundials_1_1CVodesInternal.xml
%feature("docstring") CasADi::Sundials::CVodesInternal "

Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Input scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3) Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Output scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3)

Id

Type

Default

Description

Used in

abstol

OT_REAL

1e-8

absolute tolerence for the IVP solution

CasADi::IntegratorInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

asens_abstol

OT_REAL

absolute tolerence for the adjoint sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

asens_iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

asens_linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

asens_lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

asens_max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

asens_pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

asens_reltol

OT_REAL

relative tolerence for the adjoint sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

asens_upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

exact_jacobian

OT_BOOLEAN

false

CasADi::IntegratorInternal

finite_difference_fsens

OT_BOOLEAN

false

use finite differences to approximate the forward sensitivity
equations (if AD is not available)

CasADi::IntegratorInternal

fsens_abstol

OT_REAL

absolute tolerence for the forward sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

fsens_all_at_once

OT_BOOLEAN

true

calculate all right hand sides of the sensitivity equations at once

CasADi::Sundials::CVodesInternal

fsens_err_con

OT_INTEGER

false

include the forward sensitivities in all error controls

CasADi::IntegratorInternal

fsens_reltol

OT_REAL

relative tolerence for the forward sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

fsens_scaling_factors

OT_REALVECTOR

scaling factor for the components if finite differences is used

CasADi::IntegratorInternal

fsens_sensitiviy_parameters

OT_INTEGERVECTOR

specifies which components will be used when estimating the
sensitivity equations

CasADi::IntegratorInternal

interpolation_type

OT_STRING

\"hermite\"

type of interpolation for the adjoint sensitivities (\"hermite\" or
\"polynomial\")

CasADi::IntegratorInternal

is_differential

OT_INTEGERVECTOR

None

CasADi::IntegratorInternal

iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

linear_multistep_method

OT_STRING

\"bdf\"

\"bdf\" or \"adams\"

CasADi::Sundials::CVodesInternal

linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

linear_solver_creator

OT_LINEARSOLVER

GenericType()

An linear solver creator function

CasADi::IntegratorInternal

linear_solver_options

OT_DICTIONARY

GenericType()

Options to be passed to the linear solver

CasADi::IntegratorInternal

lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

max_multistep_order

OT_INTEGER

5

CasADi::IntegratorInternal

max_num_steps

OT_INTEGER

10000

maximum number of steps

CasADi::IntegratorInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

nonlinear_solver_iteration

OT_STRING

\"newton\"

\"newton\" or \"functional\"

CasADi::Sundials::CVodesInternal

nrhs

OT_INTEGER

1

number of right hand sides

CasADi::IntegratorInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

quad_err_con

OT_BOOLEAN

false

should the quadratures affect the step size control

CasADi::IntegratorInternal

reltol

OT_REAL

1e-6

relative tolerence for the IVP solution

CasADi::IntegratorInternal

sensitivity_method

OT_STRING

\"simultaneous\"

\"simultaneous\" or \"staggered\"

CasADi::IntegratorInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

steps_per_checkpoint

OT_INTEGER

20

number of steps between two consecutive checkpoints

CasADi::IntegratorInternal

stop_at_end

OT_BOOLEAN

false

Stop the integrator at the end of the interval

CasADi::IntegratorInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

t0

OT_REAL

0.0

start of the integration

CasADi::IntegratorInternal

tf

OT_REAL

1.0

end of the integration

CasADi::IntegratorInternal

upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

use_preconditioner

OT_BOOLEAN

false

precondition an iterative solver

CasADi::IntegratorInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

Id

Used in

CVodesInternal::reset

CasADi::Sundials::CVodesInternal

CVodesInternal::rhsB

CasADi::Sundials::CVodesInternal

integrate

CasADi::Sundials::CVodesInternal List of available monitors

C++ includes: cvodes_internal.hpp ";

%feature("docstring")
CasADi::Sundials::CVodesInternal::CVodesInternal "CasADi::Sundials::CVodesInternal::CVodesInternal(const FX &f, const FX
&q)

Constructor. ";

%feature("docstring")
CasADi::Sundials::CVodesInternal::deepCopyMembers "void
CasADi::Sundials::CVodesInternal::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::clone "CVodesInternal * CasADi::Sundials::CVodesInternal::clone() const

Clone. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::create "virtual CVodesInternal* CasADi::Sundials::CVodesInternal::create(const
FX &f, const FX &q) const

Create a new integrator. ";

%feature("docstring")
CasADi::Sundials::CVodesInternal::~CVodesInternal "CasADi::Sundials::CVodesInternal::~CVodesInternal()

Destructor. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::init "void
CasADi::Sundials::CVodesInternal::init()

Initialize stage. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::initAdj "void CasADi::Sundials::CVodesInternal::initAdj()

Initialize the adjoint problem (can only be called after the first
integration) ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::reset "void
CasADi::Sundials::CVodesInternal::reset(int fsens_order, int
asens_order)

Reset the solver and bring the time back to t0. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::resetAdj "void CasADi::Sundials::CVodesInternal::resetAdj()

Reset the solver of the adjoint problem and take time to tf. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::integrate "void CasADi::Sundials::CVodesInternal::integrate(double t_out)

Integrate until a specified time point. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::integrateAdj
"void CasADi::Sundials::CVodesInternal::integrateAdj(double t_out)

Integrate backwards in time until a specified time point. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::setStopTime "void CasADi::Sundials::CVodesInternal::setStopTime(double tf)

Set the stop time of the forward integration. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::getJacobian "FX CasADi::Sundials::CVodesInternal::getJacobian()

Get the jacobian in the nonlinear iteration The result is an
CasADi::FX mapping from CasADi::Sundials::MInput to
CasADi::Sundials::MOutput. ";

%feature("docstring")
CasADi::Sundials::CVodesInternal::getLinearSolver "LinearSolver
CasADi::Sundials::CVodesInternal::getLinearSolver()

Get the Linear solver. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::evaluate "void CasADi::IntegratorInternal::evaluate(int nfdir, int nadir)

evaluate ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::jac "Integrator CasADi::IntegratorInternal::jac(bool with_x, bool with_p)

Create an integrator which integrates the ODE/DAE augmented with the
forward sensitivity equations. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::jacobian "FX
CasADi::IntegratorInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")
CasADi::Sundials::CVodesInternal::getJacSparsity "CRSSparsity
CasADi::IntegratorInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Sundials::CVodesInternal::setInitialTime "void
CasADi::IntegratorInternal::setInitialTime(double t0)

Set initial time. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::setFinalTime
"void CasADi::IntegratorInternal::setFinalTime(double tf)

Set final time. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::setDimensions
"void CasADi::IntegratorInternal::setDimensions(int nx, int np) ";

%feature("docstring")
CasADi::Sundials::CVodesInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")
CasADi::Sundials::CVodesInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")
CasADi::Sundials::CVodesInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::inputStruct "const FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::outputStruct
"FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::outputStruct
"const FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::print "virtual void CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::Sundials::CVodesInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::getPartition
"void CasADi::FXInternal::getPartition(const std::vector< std::pair<
int, int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::verbose "bool CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::monitored "bool CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::input "Matrix< double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::output "Matrix< double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::output "const Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::fwdSeed "Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::fwdSeed "const Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int
dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::fwdSens "Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::fwdSens "const Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::adjSeed "Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::adjSeed "const Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int
dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::adjSens "Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::adjSens "const Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::setNumInputs
"void CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::setNumOutputs
"void CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::getNumInputs
"int CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::getNumOutputs
"int CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::getStats "const Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::Sundials::CVodesInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::symbolicInput
"std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")
CasADi::Sundials::CVodesInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::setOption "void CasADi::OptionsFunctionalityNode::setOption(const std::string
&str, const GenericType &val)

set an option ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::setOption "void CasADi::OptionsFunctionalityNode::setOption(const Dictionary
&dict)

set a set of options ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::hasSetOption
"bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::printOptions
"void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::repr "virtual void CasADi::OptionsFunctionalityNode::repr(std::ostream
&stream) const

Print representation. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::copyOptions "void CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::dictionary "const Dictionary & CasADi::OptionsFunctionalityNode::dictionary()
const

Get the dictionary. ";

%feature("docstring")  CasADi::Sundials::CVodesInternal::getCount "int CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1Densification.xml
%feature("docstring") CasADi::Densification "

Make an expression dense.

Joel Andersson

C++ includes: densification.hpp ";

%feature("docstring")  CasADi::Densification::Densification "CasADi::Densification::Densification(const MX &x)

Constructor. ";

%feature("docstring")  CasADi::Densification::~Densification "virtual
CasADi::Densification::~Densification()

Destructor. ";

%feature("docstring")  CasADi::Densification::clone "Densification *
CasADi::Densification::clone() const

Clone function. ";

%feature("docstring")  CasADi::Densification::print "void
CasADi::Densification::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::Densification::evaluate "void
CasADi::Densification::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const
DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::Densification::evaluateSX "void
CasADi::Densification::evaluateSX(const SXMatrixPtrV &input,
SXMatrixPtrV &output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV
&fwdSens, const SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::Densification::evaluateMX "void
CasADi::Densification::evaluateMX(const MXPtrV &input, MXPtrV &output,
const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed,
MXPtrVV &adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::Densification::propagateSparsity "void
CasADi::Densification::propagateSparsity(const DMatrixPtrV &input,
DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::Densification::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Densification::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::Densification::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::Densification::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::Densification::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::Densification::getName "const string &
CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::Densification::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::Densification::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::Densification::isMapping "virtual bool
CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::Densification::isEvaluation "virtual
bool CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::Densification::isOutputNode "virtual
bool CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::Densification::isMultipleOutput "virtual bool CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::Densification::isJacobian "virtual
bool CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::Densification::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::Densification::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::Densification::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::Densification::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::Densification::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::Densification::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::Densification::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::Densification::getNumOutputs "virtual
int CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::Densification::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::Densification::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::Densification::isNonLinear "virtual
bool CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::Densification::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::Densification::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::Densification::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::Densification::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::Densification::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::Densification::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::Densification::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::Densification::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::Densification::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::Densification::isOperation "virtual
bool CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::Densification::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::Densification::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::Densification::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::Densification::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::Densification::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::Densification::eval "virtual
Matrix<double> CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::Densification::eval "virtual
Matrix<SX> CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::Densification::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::Densification::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Densification::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::Densification::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1OptimalControl_1_1EquationSorter.xml
%feature("docstring") CasADi::OptimalControl::EquationSorter "";

%feature("docstring")
CasADi::OptimalControl::EquationSorter::EquationSorter "CasADi::OptimalControl::EquationSorter::EquationSorter(const
std::vector< SX > &x, const std::vector< SX > &xdot, const
std::vector< SX > &z, const std::vector< SX > &dae) ";

%feature("docstring")
CasADi::OptimalControl::EquationSorter::~EquationSorter "CasADi::OptimalControl::EquationSorter::~EquationSorter() ";

%feature("docstring")  CasADi::OptimalControl::EquationSorter::tarjan
"void CasADi::OptimalControl::EquationSorter::tarjan() ";

%feature("docstring")
CasADi::OptimalControl::EquationSorter::strongconnect "void
CasADi::OptimalControl::EquationSorter::strongconnect(int v, int i) ";

%feature("docstring")
CasADi::OptimalControl::EquationSorter::tarjanCellier "void
CasADi::OptimalControl::EquationSorter::tarjanCellier() ";

%feature("docstring")
CasADi::OptimalControl::EquationSorter::colorRed "void
CasADi::OptimalControl::EquationSorter::colorRed(int i, int j, int
eq_no) ";

%feature("docstring")
CasADi::OptimalControl::EquationSorter::colorBlue "void
CasADi::OptimalControl::EquationSorter::colorBlue(int i, int j) ";

%feature("docstring")
CasADi::OptimalControl::EquationSorter::decrease "void
CasADi::OptimalControl::EquationSorter::decrease(int v, int i) ";


// File: classCasADi_1_1Evaluation.xml
%feature("docstring") CasADi::Evaluation "

Joel Andersson

C++ includes: evaluation.hpp ";

%feature("docstring")  CasADi::Evaluation::Evaluation "CasADi::Evaluation::Evaluation(const FX &fcn, const std::vector< MX >
&dep)

Constructor. ";

%feature("docstring")  CasADi::Evaluation::~Evaluation "virtual
CasADi::Evaluation::~Evaluation()

Destructor. ";

%feature("docstring")  CasADi::Evaluation::clone "Evaluation *
CasADi::Evaluation::clone() const

Clone function. ";

%feature("docstring")  CasADi::Evaluation::print "void
CasADi::Evaluation::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::Evaluation::evaluate "void
CasADi::Evaluation::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const
DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::Evaluation::evaluateSX "void
CasADi::Evaluation::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV &fwdSens, const
SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::Evaluation::evaluateMX "void
CasADi::Evaluation::evaluateMX(const MXPtrV &input, MXPtrV &output,
const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed,
MXPtrVV &adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::Evaluation::propagateSparsity "void
CasADi::Evaluation::propagateSparsity(const DMatrixPtrV &input,
DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::Evaluation::isEvaluation "virtual bool
CasADi::Evaluation::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::Evaluation::getFunction "FX &
CasADi::Evaluation::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::Evaluation::getFunctionInput "virtual
int CasADi::Evaluation::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::Evaluation::getFunctionOutput "virtual
int CasADi::Evaluation::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::Evaluation::deepCopyMembers "void
CasADi::Evaluation::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Evaluation::getNumOutputs "virtual int
CasADi::Evaluation::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::Evaluation::sparsity "const
CRSSparsity & CasADi::Evaluation::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::Evaluation::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::Evaluation::isMultipleOutput "virtual
bool CasADi::MultipleOutput::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::Evaluation::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::Evaluation::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::Evaluation::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::Evaluation::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::Evaluation::getName "const string &
CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::Evaluation::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::Evaluation::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::Evaluation::isMapping "virtual bool
CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::Evaluation::isOutputNode "virtual bool
CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::Evaluation::isJacobian "virtual bool
CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::Evaluation::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::Evaluation::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::Evaluation::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::Evaluation::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::Evaluation::isNonLinear "virtual bool
CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::Evaluation::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::Evaluation::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::Evaluation::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::Evaluation::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::Evaluation::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::Evaluation::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::Evaluation::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::Evaluation::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::Evaluation::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::Evaluation::isOperation "virtual bool
CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::Evaluation::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::Evaluation::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::Evaluation::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::Evaluation::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::Evaluation::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::Evaluation::eval "virtual
Matrix<double> CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::Evaluation::eval "virtual Matrix<SX>
CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::Evaluation::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::Evaluation::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Evaluation::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::Evaluation::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1ExternalFunction.xml
%feature("docstring") CasADi::ExternalFunction "

Interface for a function that is not implemented by CasADi symbolics.

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: external_function.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::ExternalFunction::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::ExternalFunction::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::ExternalFunction::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::ExternalFunction::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::ExternalFunction::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::ExternalFunction::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::ExternalFunction::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::ExternalFunction::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::ExternalFunction::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::ExternalFunction::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::ExternalFunction::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::ExternalFunction::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::ExternalFunction::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::ExternalFunction::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::ExternalFunction::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::ExternalFunction::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::ExternalFunction::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::ExternalFunction::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::ExternalFunction::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::ExternalFunction::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::ExternalFunction::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::ExternalFunction::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::ExternalFunction::ExternalFunction "CasADi::ExternalFunction::ExternalFunction()

CONSTRUCTORS:

default constructor ";

%feature("docstring")  CasADi::ExternalFunction::ExternalFunction "CasADi::ExternalFunction::ExternalFunction(const std::string
&bin_name)

Create an empty function. ";

%feature("docstring")  CasADi::ExternalFunction::checkNode "bool
CasADi::ExternalFunction::checkNode() const

Check if the pointer points towards a valid object. ";

%feature("docstring")  CasADi::ExternalFunction::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::ExternalFunction::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::ExternalFunction::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::ExternalFunction::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::ExternalFunction::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::ExternalFunction::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::ExternalFunction::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::ExternalFunction::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::ExternalFunction::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::ExternalFunction::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::ExternalFunction::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::ExternalFunction::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::ExternalFunction::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::ExternalFunction::call "std::vector<MX> CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::ExternalFunction::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::ExternalFunction::jacSparsity "CRSSparsity & CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::ExternalFunction::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::ExternalFunction::input "const Matrix<
double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::ExternalFunction::input "Matrix<
double > & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::ExternalFunction::output "const
Matrix< double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::ExternalFunction::output "Matrix<
double > & CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::ExternalFunction::fwdSeed "const
Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::ExternalFunction::fwdSeed "Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::ExternalFunction::fwdSens "const
Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::ExternalFunction::fwdSens "Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::ExternalFunction::adjSeed "const
Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::ExternalFunction::adjSeed "Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::ExternalFunction::adjSens "const
Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::ExternalFunction::adjSens "Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::ExternalFunction::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::ExternalFunction::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::ExternalFunction::getStats "const
Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::ExternalFunction::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::ExternalFunction::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::ExternalFunction::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::ExternalFunction::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::ExternalFunction::assignNodeNoCount "void CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::ExternalFunction::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::ExternalFunction::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::ExternalFunction::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::ExternalFunction::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::ExternalFunction::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::ExternalFunction::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::ExternalFunction::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::ExternalFunction::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::ExternalFunction::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::ExternalFunction::getRepresentation "string CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::ExternalFunction::getDescription "string CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1ExternalFunctionInternal.xml
%feature("docstring") CasADi::ExternalFunctionInternal "

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: external_function_internal.hpp ";

%feature("docstring")
CasADi::ExternalFunctionInternal::ExternalFunctionInternal "CasADi::ExternalFunctionInternal::ExternalFunctionInternal(const
std::string &bin_name)

constructor ";

%feature("docstring")  CasADi::ExternalFunctionInternal::clone "ExternalFunctionInternal * CasADi::ExternalFunctionInternal::clone()
const

clone function ";

%feature("docstring")
CasADi::ExternalFunctionInternal::~ExternalFunctionInternal "CasADi::ExternalFunctionInternal::~ExternalFunctionInternal()

Destructor. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::evaluate "void CasADi::ExternalFunctionInternal::evaluate(int nfdir, int nadir)

Evaluate. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::init "void
CasADi::ExternalFunctionInternal::init()

Initialize. ";

%feature("docstring")
CasADi::ExternalFunctionInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::jacobian "virtual FX CasADi::FXInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")
CasADi::ExternalFunctionInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")
CasADi::ExternalFunctionInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::inputStruct "const FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::outputStruct
"FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::outputStruct
"const FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::print "virtual void CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::ExternalFunctionInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::ExternalFunctionInternal::getPartition
"void CasADi::FXInternal::getPartition(const std::vector< std::pair<
int, int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::verbose "bool CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::ExternalFunctionInternal::monitored "bool CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::input "Matrix< double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::output "Matrix< double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::output "const Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::fwdSeed "Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::fwdSeed "const Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int
dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::fwdSens "Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::fwdSens "const Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::adjSeed "Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::adjSeed "const Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int
dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::adjSens "Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::adjSens "const Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::setNumInputs
"void CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::setNumOutputs
"void CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::getNumInputs
"int CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::getNumOutputs
"int CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::getStats "const Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::ExternalFunctionInternal::getJacSparsity "CRSSparsity
CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::ExternalFunctionInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::symbolicInput
"std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")
CasADi::ExternalFunctionInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::setOption "void CasADi::OptionsFunctionalityNode::setOption(const std::string
&str, const GenericType &val)

set an option ";

%feature("docstring")  CasADi::ExternalFunctionInternal::setOption "void CasADi::OptionsFunctionalityNode::setOption(const Dictionary
&dict)

set a set of options ";

%feature("docstring")  CasADi::ExternalFunctionInternal::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::ExternalFunctionInternal::hasSetOption
"bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::ExternalFunctionInternal::printOptions
"void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::ExternalFunctionInternal::repr "virtual void CasADi::OptionsFunctionalityNode::repr(std::ostream
&stream) const

Print representation. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::copyOptions "void CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::dictionary "const Dictionary & CasADi::OptionsFunctionalityNode::dictionary()
const

Get the dictionary. ";

%feature("docstring")
CasADi::ExternalFunctionInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::ExternalFunctionInternal::getCount "int CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1OptimalControl_1_1FMIParser.xml
%feature("docstring") CasADi::OptimalControl::FMIParser "C++
includes: fmi_parser.hpp ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::makeUnique "void CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::makeUnique "void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::FMIParser "CasADi::OptimalControl::FMIParser::FMIParser()

Default (empty) constructor. ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::FMIParser "CasADi::OptimalControl::FMIParser::FMIParser(const std::string
&filename)

Create an FMI parser instance given the filename. ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::parse "OCP
& CasADi::OptimalControl::FMIParser::parse()

Parse from XML to C++ format. ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::ocp "OCP &
CasADi::OptimalControl::FMIParser::ocp()

Get the OCP. ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::ocp "const
OCP & CasADi::OptimalControl::FMIParser::ocp() const

Get the OCP (const ref) ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::checkNode "bool CasADi::OptimalControl::FMIParser::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::clone "SharedObject CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::assignNode "void CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")
CasADi::OptimalControl::FMIParser::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::getCount "int CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::isInit "bool CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::OptimalControl::FMIParser::isNull "bool CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")
CasADi::OptimalControl::FMIParser::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")
CasADi::OptimalControl::FMIParser::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1OptimalControl_1_1FMIParserInternal.xml
%feature("docstring") CasADi::OptimalControl::FMIParserInternal "C++
includes: fmi_parser_internal.hpp ";

%feature("docstring")
CasADi::OptimalControl::FMIParserInternal::FMIParserInternal "CasADi::OptimalControl::FMIParserInternal::FMIParserInternal(const
std::string &filename)

Constructor. ";

%feature("docstring")
CasADi::OptimalControl::FMIParserInternal::~FMIParserInternal "CasADi::OptimalControl::FMIParserInternal::~FMIParserInternal()

destructor ";

%feature("docstring")
CasADi::OptimalControl::FMIParserInternal::clone "virtual
FMIParserInternal* CasADi::OptimalControl::FMIParserInternal::clone()
const

clone ";

%feature("docstring")
CasADi::OptimalControl::FMIParserInternal::parse "OCP &
CasADi::OptimalControl::FMIParserInternal::parse()

Parse from XML to C++ format. ";

%feature("docstring")  CasADi::OptimalControl::FMIParserInternal::ocp
"OCP & CasADi::OptimalControl::FMIParserInternal::ocp()

Get the OCP. ";

%feature("docstring")  CasADi::OptimalControl::FMIParserInternal::ocp
"const OCP & CasADi::OptimalControl::FMIParserInternal::ocp() const

Get the OCP (const ref) ";

%feature("docstring")  CasADi::OptimalControl::FMIParserInternal::repr
"void CasADi::OptimalControl::FMIParserInternal::repr(std::ostream
&stream=std::cout) const

Print representation. ";

%feature("docstring")
CasADi::OptimalControl::FMIParserInternal::print "void
CasADi::OptimalControl::FMIParserInternal::print(std::ostream
&stream=std::cout) const

Print description. ";

%feature("docstring")
CasADi::OptimalControl::FMIParserInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")
CasADi::OptimalControl::FMIParserInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::OptimalControl::FMIParserInternal::init
"void CasADi::SharedObjectNode::init()

Initialize the object. ";


// File: classKINEMATICS_1_1Frame.xml
%feature("docstring") KINEMATICS::Frame "

define the concept of a mechanical frame

A frame is a concept from classical mechanics. One can define a frame
{1} rigorously as an ordered tuple of four vectors: three 0-vectors
(ex,ey,ez) denoting the axis orientations

one 1-vector (p) denoting the position of the frame's origin.

It is convenient to write the constituents of {1} in a 4x4 matrix form
T_10, in which the defining vectors of frame {1} have been written in
{0} coordinates: T = [ex ey ez p]

or T = [ R p ;0 0 0 1]

with R a 3x3 rotation matrix p a 3x1 position vector

In this toolbox, a Frame has a reference Frame and a Transformation
matrix as members. The user constructs a chain (or rather a tree) of
frames by calling the constructors of Frame.

The longer explanation:

Frames can be intuitively defined by the formalism of active
interpretation of transformation matrices. Put yourself in frame {i}.
Now imagine taking a copy of the vector-tuplet that defines frame {i}
and moving and rotating these vectors at will. You have performed an
action on objects in vector space. You are at a certain pose of the
copied tuple which you now say defines frame {j}.

You write down the vectors of {j} with respect to {i} and expressed in
{i} in a matrix T_ji It is convenient to use elemental transformations
to obtain T_ji. For example, {j} may be defined by starting from a
copy of {i}, moving it over a distance L and rotating it over its
(moved) z-axis:

Joris Gillis

C++ includes: frame.hpp ";

%feature("docstring")  KINEMATICS::Frame::Frame "KINEMATICS::Frame::Frame()

Constructors. ";

%feature("docstring")  KINEMATICS::Frame::Frame "KINEMATICS::Frame::Frame(const std::string &name, const SXMatrix &q,
const SXMatrix &dq, const SXMatrix &ddq)

Constructor for the world frame (top of the hierarchy)

Constructor for the world frame (top of the hierarchy)

Parameters:
-----------

name:  name of the Frame

q:  nx1 expression containg the n default time-dependant symbols

dq:  nx1 expression containg the derivatives of the n default time-
dependant symbols

ddq:  nx1 expression containg the second derivatives of the n default
time- dependant variables

time:  the symbol that represents time

In the above, n is any integer, but the same at all three instances.
";

%feature("docstring")  KINEMATICS::Frame::Frame "KINEMATICS::Frame::Frame(Frame const &frame)

Copy constructor Copy constructor. ";

%feature("docstring")  KINEMATICS::Frame::Frame "KINEMATICS::Frame::Frame(const std::string &name, const Frame &ref,
const SXMatrix &T)

Chain constructor for the world frame - to create the hierarchy of
Frames.

Chain constructor for the world frame - to create the hierarchy of
Frames

Parameters:
-----------

name:  name of the Frame

ref:  the reference Frame with respect to which the T holds

T:  4x4 transformation matrix Can be conveniently constructed with the
global functions TRx, TRy, ... ";

%feature("docstring")  KINEMATICS::Frame::~Frame "KINEMATICS::Frame::~Frame() ";

%feature("docstring")  KINEMATICS::Frame::getName "const std::string
& KINEMATICS::Frame::getName() const

Get the name of this frame. ";

%feature("docstring")  KINEMATICS::Frame::getQ "const SXMatrix &
KINEMATICS::Frame::getQ() const

Get the default time dependant symbols from the world frame. ";

%feature("docstring")  KINEMATICS::Frame::getDQ "const SXMatrix &
KINEMATICS::Frame::getDQ() const

Get the derivatives of the default time dependant symbols from the
world frame. ";

%feature("docstring")  KINEMATICS::Frame::getDDQ "const SXMatrix &
KINEMATICS::Frame::getDDQ() const

Get the second derivatives of the default time dependant symbols from
the world frame. ";

%feature("docstring")  KINEMATICS::Frame::getCommonFrame "Frame
KINEMATICS::Frame::getCommonFrame(Frame other) const

returns the lowermost Frame in the hierarchy this Frame shares with
the other Frame ";

%feature("docstring")  KINEMATICS::Frame::chain "SXMatrix
KINEMATICS::Frame::chain(const SXMatrix &e, const Frame &ei, bool
type) const

keep left-multiplying e by transformation matrices going from this
frame to the ei frame

keep left-multiplying e by transformation matrices going from this
frame to the ei frame

Parameters:
-----------

e:  the expression that will be transformed will typically be vector-
like but can be a matrix as well

ei:  the Frame in which the result should be expressed (Expressed In)

type:  specifies if e is to be treated position-like (1) or direction-
like (0)

the transformed expression

See:   KinVec  Consider the Frame tree: ( Frame 3).chain(e,( Frame 5))

will return inv(T_52)*inv(T_20)*T_10*T_31*e ";


// File: classKINEMATICS_1_1FrameNode.xml
%feature("docstring") KINEMATICS::FrameNode "

Internal class to make Frame trees reference-safe.

C++ includes: frame_node.hpp ";

%feature("docstring")  KINEMATICS::FrameNode::FrameNode "KINEMATICS::FrameNode::FrameNode(const std::string &name, const
SXMatrix &q, const SXMatrix &dq, const SXMatrix &ddq)

Constructor. ";

%feature("docstring")  KINEMATICS::FrameNode::FrameNode "KINEMATICS::FrameNode::FrameNode(const std::string &name, const Frame
&ref, const SXMatrix &T) ";

%feature("docstring")  KINEMATICS::FrameNode::~FrameNode "KINEMATICS::FrameNode::~FrameNode() ";

%feature("docstring")  KINEMATICS::FrameNode::print "void
KINEMATICS::FrameNode::print(std::ostream &stream)

Print. ";


// File: classCasADi_1_1FunctionIO.xml
%feature("docstring") CasADi::FunctionIO "

Structure that contains the numerical values for the inputs or outputs
of a function.

Joel Andersson

C++ includes: function_io.hpp ";

%feature("docstring")  CasADi::FunctionIO::FunctionIO "CasADi::FunctionIO::FunctionIO()

Constructor. ";

%feature("docstring")  CasADi::FunctionIO::init "void
CasADi::FunctionIO::init()

(Re)allocate the data ";


// File: classCasADi_1_1FX.xml
%feature("docstring") CasADi::FX "

General function.

A general function $f$ in casadi can be multi-input, multi-output.
Number of inputs: nin getNumInputs()  Number of outputs: nout
getNumOutputs()

We can view this function as a being composed of a (nin, nout) grid of
single-input, single-output primitive functions.  Each such primitive
function $f_{i,j} \\\\forall i \\\\in [0,nin-1], j \\\\in [0,nout-1]$
can map as $\\\\mathbf{R}^{n,m}\\\\to\\\\mathbf{R}^{p,q}$, in which
n,m,p,q can take different values for every (i,j) pair.

When passing input, you specify which partition i is active. You pass
the numbers flattened, as a vector of size $(n*m)$.  When requesting
output, you specify which partition j is active. You get the numbers
flattened, as a vector of size $(p*q)$.

To calculate jacobians, you need to have $(m=1,q=1)$.

Write the jacobian as $J_{i,j} = \\\\nabla f_{i,j} =
\\\\frac{\\\\partial f_{i,j}(\\\\vec{x})}{\\\\partial \\\\vec{x}}$.

Using $\\\\vec{v} \\\\in \\\\mathbf{R}^n$ as a forward seed:
setFwdSeed(v,i)  Retrieving $\\\\vec{s}_f \\\\in \\\\mathbf{R}^p$
from: getFwdSens(sf,j)

Using $\\\\vec{w} \\\\in \\\\mathbf{R}^p$ as a forward seed:
setAdjSeed(w,j)  Retrieving $\\\\vec{s}_a \\\\in \\\\mathbf{R}^n $
from: getAdjSens(sa,i)

We have the following relationships for function mapping from a column
vector to a column vector:

$ \\\\vec{s}_f = \\\\nabla f_{i,j} . \\\\vec{v}$ $ \\\\vec{s}_a =
(\\\\nabla f_{i,j})^T . \\\\vec{w}$

Some quantities is these formulas must be transposed:  input row:
transpose $ \\\\vec{v} $ and $\\\\vec{s}_a$  output row: transpose $
\\\\vec{w} $ and $\\\\vec{s}_f$

NOTE: FX's are allowed to modify their input arguments when
evaluating: implicitFunction, IDAS solver Futher releases may disallow
this. for developers Each function consists of 4 files:  1. public
class headerfile: imported in python  2. public class implementation
3. internal class headerfile: should only be used by derived classes
4. internal class implementation

python and c++ should be 1-to-1  There should be no extra features in
1.  All the functionality should exist in 1.  If it means that c++
will be more \"pythonic\", so be it.

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: fx.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::FX::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::FX::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::FX::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::FX::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::FX::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::FX::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::FX::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::FX::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::FX::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::FX::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::FX::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::FX::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::FX::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::FX::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::FX::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::FX::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::FX::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::FX::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::FX::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::FX::dictionary "const Dictionary &
CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::FX::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::FX::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::FX::FX "CasADi::FX::FX()

default constructor ";

%feature("docstring")  CasADi::FX::~FX "CasADi::FX::~FX()

Destructor. ";

%feature("docstring")  CasADi::FX::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::FX::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::FX::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::FX::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::FX::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::FX::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::FX::solve "void CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::FX::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::FX::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::FX::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::FX::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::FX::call "std::vector<DMatrix>
CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::FX::call "std::vector<SXMatrix>
CasADi::FX::call(const std::vector< SXMatrix > &x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::FX::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::FX::call "std::vector<std::vector<MX>
> CasADi::FX::call(const std::vector< std::vector< MX > > &x, const
Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::FX::jacSparsity "CRSSparsity &
CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::FX::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::FX::checkNode "bool
CasADi::FX::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::FX::input "const Matrix< double > &
CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::FX::output "const Matrix< double > &
CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::FX::fwdSeed "const Matrix< double > &
CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::FX::fwdSens "const Matrix< double > &
CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::FX::adjSeed "const Matrix< double > &
CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::FX::adjSens "const Matrix< double > &
CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::FX::input "Matrix< double > &
CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::FX::output "Matrix< double > &
CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::FX::fwdSeed "Matrix< double > &
CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::FX::fwdSens "Matrix< double > &
CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::FX::adjSeed "Matrix< double > &
CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::FX::adjSens "Matrix< double > &
CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::FX::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::FX::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::FX::getStats "const Dictionary &
CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::FX::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::FX::symbolicInput "std::vector< MX >
CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::FX::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::FX::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::FX::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::FX::get "const SharedObjectNode *
CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::FX::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::FX::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::FX::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::FX::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::FX::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::FX::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::FX::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::FX::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::FX::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::FX::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1FXInternal.xml
%feature("docstring") CasADi::FXInternal "

Internal class for FX.

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: fx_internal.hpp ";

%feature("docstring")  CasADi::FXInternal::~FXInternal "CasADi::FXInternal::~FXInternal()=0

Destructor. ";

%feature("docstring")  CasADi::FXInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::FXInternal::evaluate "virtual void
CasADi::FXInternal::evaluate(int nfdir, int nadir)=0

Evaluate. ";

%feature("docstring")  CasADi::FXInternal::init "void
CasADi::FXInternal::init()

Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but
before evaluating. If passed to another class (in the constructor),
this class should invoke this function when initialized. ";

%feature("docstring")  CasADi::FXInternal::jacobian "virtual FX
CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int >
> &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::FXInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::FXInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::FXInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::FXInternal::inputStruct "FunctionIO &
CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::FXInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::FXInternal::outputStruct "FunctionIO &
CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::FXInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::FXInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")  CasADi::FXInternal::unidirectionalColoring "CRSSparsity CasADi::FXInternal::unidirectionalColoring(const
CRSSparsity &A, const CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::FXInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::FXInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::FXInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::FXInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::FXInternal::input "Matrix< double > &
CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::FXInternal::input "const Matrix<
double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::FXInternal::output "Matrix< double > &
CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::FXInternal::output "const Matrix<
double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::FXInternal::fwdSeed "Matrix< double >
& CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::FXInternal::fwdSeed "const Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::FXInternal::fwdSens "Matrix< double >
& CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::FXInternal::fwdSens "const Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::FXInternal::adjSeed "Matrix< double >
& CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::FXInternal::adjSeed "const Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::FXInternal::adjSens "Matrix< double >
& CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::FXInternal::adjSens "const Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::FXInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::FXInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::FXInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::FXInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::FXInternal::getStats "const Dictionary
& CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::FXInternal::getStat "GenericType
CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::FXInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::FXInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::FXInternal::jacSparsity "CRSSparsity &
CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::FXInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::FXInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::FXInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::FXInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::FXInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::FXInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::FXInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::FXInternal::getOption "GenericType
CasADi::OptionsFunctionalityNode::getOption(const std::string &str)
const

get an option value ";

%feature("docstring")  CasADi::FXInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::FXInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::FXInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::FXInternal::clone "virtual
SharedObjectNode* CasADi::SharedObjectNode::clone() const =0

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::FXInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::FXInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1GenericType.xml
%feature("docstring") CasADi::GenericType "

Generic data type.

Joel Andersson

C++ includes: generic_type.hpp ";

%feature("docstring")  CasADi::GenericType::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::GenericType::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType() ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(bool b) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(int i) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(double d) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(const std::vector< bool > &iv) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(const std::vector< int > &iv) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(const std::vector< double > &dv) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(const std::string &s) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(const char s[]) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(const SharedObject &obj) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(const Dictionary &dict) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(NLPSolverCreator ptr)

Creator functions. ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(linearSolverCreator ptr) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(integratorCreator ptr) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(QPSolverCreator ptr) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(implicitFunctionCreator ptr) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(JacobianGenerator ptr) ";

%feature("docstring")  CasADi::GenericType::GenericType "CasADi::GenericType::GenericType(SparsityGenerator ptr) ";

%feature("docstring")  CasADi::GenericType::isBool "bool
CasADi::GenericType::isBool() const

Is boolean? ";

%feature("docstring")  CasADi::GenericType::isInt "bool
CasADi::GenericType::isInt() const

Is an integer? ";

%feature("docstring")  CasADi::GenericType::isDouble "bool
CasADi::GenericType::isDouble() const

Is a double? ";

%feature("docstring")  CasADi::GenericType::isString "bool
CasADi::GenericType::isString() const

Is a string? ";

%feature("docstring")  CasADi::GenericType::isIntVector "bool
CasADi::GenericType::isIntVector() const

Is a vector of ints? ";

%feature("docstring")  CasADi::GenericType::isDoubleVector "bool
CasADi::GenericType::isDoubleVector() const

Is a vector of doubles? ";

%feature("docstring")  CasADi::GenericType::isSharedObject "bool
CasADi::GenericType::isSharedObject() const

Is a shared object? ";

%feature("docstring")  CasADi::GenericType::toBool "bool
CasADi::GenericType::toBool() const

Convert to boolean. ";

%feature("docstring")  CasADi::GenericType::toInt "int
CasADi::GenericType::toInt() const

Convert to int. ";

%feature("docstring")  CasADi::GenericType::toDouble "double
CasADi::GenericType::toDouble() const

Convert to double. ";

%feature("docstring")  CasADi::GenericType::toString "const string &
CasADi::GenericType::toString() const

Convert to string. ";

%feature("docstring")  CasADi::GenericType::toIntVector "const
vector< int > & CasADi::GenericType::toIntVector() const

Convert to vector of ints. ";

%feature("docstring")  CasADi::GenericType::toDoubleVector "const
vector< double > & CasADi::GenericType::toDoubleVector() const

Convert to vector of doubles. ";

%feature("docstring")  CasADi::GenericType::toSharedObject "const
SharedObject & CasADi::GenericType::toSharedObject() const

Convert to shared object. ";

%feature("docstring")  CasADi::GenericType::is_a "bool
CasADi::GenericType::is_a() const

Check if it is of a certain type (implementation in
generic_type_internal.hpp) ";

%feature("docstring")  CasADi::GenericType::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::GenericType::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::GenericType::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::GenericType::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::GenericType::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::GenericType::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::GenericType::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::GenericType::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::GenericType::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::GenericType::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::GenericType::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::GenericType::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::GenericType::checkNode "bool
CasADi::SharedObject::checkNode() const

Assert that the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::GenericType::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::GenericType::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1GenericTypeInternal.xml
%feature("docstring") CasADi::GenericTypeInternal "C++ includes:
generic_type_internal.hpp ";

%feature("docstring")
CasADi::GenericTypeInternal::GenericTypeInternal "CasADi::GenericTypeInternal< T >::GenericTypeInternal(const T &d) ";

%feature("docstring")
CasADi::GenericTypeInternal::~GenericTypeInternal "virtual
CasADi::GenericTypeInternal< T >::~GenericTypeInternal() ";

%feature("docstring")  CasADi::GenericTypeInternal::clone "virtual
GenericTypeInternal<T>* CasADi::GenericTypeInternal< T >::clone()
const

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::GenericTypeInternal::print "virtual
void CasADi::GenericTypeInternal< T >::print(std::ostream &stream)
const

Print a destription of the object. ";

%feature("docstring")  CasADi::GenericTypeInternal::deepCopyMembers "void CasADi::SharedObjectNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::GenericTypeInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::GenericTypeInternal::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::GenericTypeInternal::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1GSL_1_1GslIntegrator.xml
%feature("docstring") CasADi::GSL::GslIntegrator "

Function that integrates the ODE:

ydot == f(t,y,p) from t0 to tf

given the initial condition y(t0) == y0;

A call to evaluate will integrate to the end.

You can retrieve the entire state trajectory as follows, after the
evaluate call: Call reset. Then call integrate(t_i) and getOuput for a
series of times t_i.

Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Input scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3) Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Output scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3)

Id

Type

Default

Description

Used in

abstol

OT_REAL

1e-8

absolute tolerence for the IVP solution

CasADi::IntegratorInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

asens_abstol

OT_REAL

absolute tolerence for the adjoint sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

asens_iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

asens_linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

asens_lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

asens_max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

asens_pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

asens_reltol

OT_REAL

relative tolerence for the adjoint sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

asens_upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

exact_jacobian

OT_BOOLEAN

false

CasADi::IntegratorInternal

finite_difference_fsens

OT_BOOLEAN

false

use finite differences to approximate the forward sensitivity
equations (if AD is not available)

CasADi::IntegratorInternal

fsens_abstol

OT_REAL

absolute tolerence for the forward sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

fsens_err_con

OT_INTEGER

false

include the forward sensitivities in all error controls

CasADi::IntegratorInternal

fsens_reltol

OT_REAL

relative tolerence for the forward sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

fsens_scaling_factors

OT_REALVECTOR

scaling factor for the components if finite differences is used

CasADi::IntegratorInternal

fsens_sensitiviy_parameters

OT_INTEGERVECTOR

specifies which components will be used when estimating the
sensitivity equations

CasADi::IntegratorInternal

interpolation_type

OT_STRING

\"hermite\"

type of interpolation for the adjoint sensitivities (\"hermite\" or
\"polynomial\")

CasADi::IntegratorInternal

is_differential

OT_INTEGERVECTOR

None

CasADi::IntegratorInternal

iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

linear_solver_creator

OT_LINEARSOLVER

GenericType()

An linear solver creator function

CasADi::IntegratorInternal

linear_solver_options

OT_DICTIONARY

GenericType()

Options to be passed to the linear solver

CasADi::IntegratorInternal

lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

max_multistep_order

OT_INTEGER

5

CasADi::IntegratorInternal

max_num_steps

OT_INTEGER

10000

maximum number of steps

CasADi::IntegratorInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

nrhs

OT_INTEGER

1

number of right hand sides

CasADi::IntegratorInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

quad_err_con

OT_BOOLEAN

false

should the quadratures affect the step size control

CasADi::IntegratorInternal

reltol

OT_REAL

1e-6

relative tolerence for the IVP solution

CasADi::IntegratorInternal

sensitivity_method

OT_STRING

\"simultaneous\"

\"simultaneous\" or \"staggered\"

CasADi::IntegratorInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

steps_per_checkpoint

OT_INTEGER

20

number of steps between two consecutive checkpoints

CasADi::IntegratorInternal

stop_at_end

OT_BOOLEAN

false

Stop the integrator at the end of the interval

CasADi::IntegratorInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

t0

OT_REAL

0.0

start of the integration

CasADi::IntegratorInternal

tf

OT_REAL

1.0

end of the integration

CasADi::IntegratorInternal

upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

use_preconditioner

OT_BOOLEAN

false

precondition an iterative solver

CasADi::IntegratorInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

Id

Used in

GslInternal::reset

CasADi::GSL::GslInternal List of available monitors

C++ includes: gsl_integrator.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::GSL::GslIntegrator::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::GSL::GslIntegrator::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::GSL::GslIntegrator::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::GSL::GslIntegrator::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::GSL::GslIntegrator::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::GSL::GslIntegrator::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::GSL::GslIntegrator::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::GSL::GslIntegrator::GslIntegrator "CasADi::GSL::GslIntegrator::GslIntegrator()

Default constructor. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::GslIntegrator "CasADi::GSL::GslIntegrator::GslIntegrator(const FX &f, const FX
&q=FX())

Create an integrator for explicit ODEs.

Parameters:
-----------

f:   CasADi::FX mapping from CasADi::Sundials::ODEInput to
CasADi::Sundials::ODEOutput. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::checkNode "bool
CasADi::GSL::GslIntegrator::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::clone "Integrator
CasADi::Integrator::clone() const

Clone. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::printStats "void
CasADi::Integrator::printStats(std::ostream &stream=std::cout) const

Print solver statistics. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::reset "void
CasADi::Integrator::reset(int fsens_order=0, int asens_order=0)

Reset the solver and bring the time back to t0. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::integrate "void
CasADi::Integrator::integrate(double t_out)

Integrate until a specified time point. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::resetAdj "void
CasADi::Integrator::resetAdj()

Reset the solver of the adjoint problem and take time to tf. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::integrateAdj "void
CasADi::Integrator::integrateAdj(double t_out)

Integrate backwards in time until a specified time point. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::setInitialTime "void CasADi::Integrator::setInitialTime(double t0)

Set initial time. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::setFinalTime "void
CasADi::Integrator::setFinalTime(double tf)

Set final time. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::setStopTime "void
CasADi::Integrator::setStopTime(double tf)

Set a stop time for the forward integration. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::setLinearSolver "void CasADi::Integrator::setLinearSolver(const LinearSolver &linsol,
const FX &jac=FX())

Set linear solver. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getJacobian "FX
CasADi::Integrator::getJacobian()

Get the Jacobian. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getLinearSolver "LinearSolver CasADi::Integrator::getLinearSolver()

Get the Linear solver. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getDAE "FX
CasADi::Integrator::getDAE()

Get the DAE. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::GSL::GslIntegrator::setNumOutputs "void CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::GSL::GslIntegrator::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::GSL::GslIntegrator::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::GSL::GslIntegrator::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::GSL::GslIntegrator::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::GSL::GslIntegrator::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::GSL::GslIntegrator::call "std::vector<MX> CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::GSL::GslIntegrator::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::jacSparsity "CRSSparsity & CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::setJacSparsity "void CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int
oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::input "const
Matrix< double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::input "Matrix<
double > & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::output "const
Matrix< double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::output "Matrix<
double > & CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::GSL::GslIntegrator::fwdSeed "const
Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::fwdSeed "Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::fwdSens "const
Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::fwdSens "Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::adjSeed "const
Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::adjSeed "Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::adjSens "const
Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::adjSens "Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::removeMonitor "void CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getStats "const
Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getStat "GenericType CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::GSL::GslIntegrator::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::GSL::GslIntegrator::assignNodeNoCount "void CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::GSL::GslIntegrator::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::GSL::GslIntegrator::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::GSL::GslIntegrator::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::GSL::GslIntegrator::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getRepresentation "string CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::GSL::GslIntegrator::getDescription "string CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1GSL_1_1GslInternal.xml
%feature("docstring") CasADi::GSL::GslInternal "

Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Input scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3) Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Output scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3)

Id

Type

Default

Description

Used in

abstol

OT_REAL

1e-8

absolute tolerence for the IVP solution

CasADi::IntegratorInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

asens_abstol

OT_REAL

absolute tolerence for the adjoint sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

asens_iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

asens_linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

asens_lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

asens_max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

asens_pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

asens_reltol

OT_REAL

relative tolerence for the adjoint sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

asens_upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

exact_jacobian

OT_BOOLEAN

false

CasADi::IntegratorInternal

finite_difference_fsens

OT_BOOLEAN

false

use finite differences to approximate the forward sensitivity
equations (if AD is not available)

CasADi::IntegratorInternal

fsens_abstol

OT_REAL

absolute tolerence for the forward sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

fsens_err_con

OT_INTEGER

false

include the forward sensitivities in all error controls

CasADi::IntegratorInternal

fsens_reltol

OT_REAL

relative tolerence for the forward sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

fsens_scaling_factors

OT_REALVECTOR

scaling factor for the components if finite differences is used

CasADi::IntegratorInternal

fsens_sensitiviy_parameters

OT_INTEGERVECTOR

specifies which components will be used when estimating the
sensitivity equations

CasADi::IntegratorInternal

interpolation_type

OT_STRING

\"hermite\"

type of interpolation for the adjoint sensitivities (\"hermite\" or
\"polynomial\")

CasADi::IntegratorInternal

is_differential

OT_INTEGERVECTOR

None

CasADi::IntegratorInternal

iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

linear_solver_creator

OT_LINEARSOLVER

GenericType()

An linear solver creator function

CasADi::IntegratorInternal

linear_solver_options

OT_DICTIONARY

GenericType()

Options to be passed to the linear solver

CasADi::IntegratorInternal

lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

max_multistep_order

OT_INTEGER

5

CasADi::IntegratorInternal

max_num_steps

OT_INTEGER

10000

maximum number of steps

CasADi::IntegratorInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

nrhs

OT_INTEGER

1

number of right hand sides

CasADi::IntegratorInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

quad_err_con

OT_BOOLEAN

false

should the quadratures affect the step size control

CasADi::IntegratorInternal

reltol

OT_REAL

1e-6

relative tolerence for the IVP solution

CasADi::IntegratorInternal

sensitivity_method

OT_STRING

\"simultaneous\"

\"simultaneous\" or \"staggered\"

CasADi::IntegratorInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

steps_per_checkpoint

OT_INTEGER

20

number of steps between two consecutive checkpoints

CasADi::IntegratorInternal

stop_at_end

OT_BOOLEAN

false

Stop the integrator at the end of the interval

CasADi::IntegratorInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

t0

OT_REAL

0.0

start of the integration

CasADi::IntegratorInternal

tf

OT_REAL

1.0

end of the integration

CasADi::IntegratorInternal

upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

use_preconditioner

OT_BOOLEAN

false

precondition an iterative solver

CasADi::IntegratorInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

Id

Used in

GslInternal::reset

CasADi::GSL::GslInternal List of available monitors

C++ includes: gsl_internal.hpp ";

%feature("docstring")  CasADi::GSL::GslInternal::GslInternal "CasADi::GSL::GslInternal::GslInternal(const FX &f, const FX &q)

Constructor. ";

%feature("docstring")  CasADi::GSL::GslInternal::clone "GslInternal *
CasADi::GSL::GslInternal::clone() const

Clone. ";

%feature("docstring")  CasADi::GSL::GslInternal::create "virtual
GslInternal* CasADi::GSL::GslInternal::create(const FX &f, const FX
&q) const

Create a new integrator. ";

%feature("docstring")  CasADi::GSL::GslInternal::~GslInternal "CasADi::GSL::GslInternal::~GslInternal()

Destructor. ";

%feature("docstring")  CasADi::GSL::GslInternal::init "void
CasADi::GSL::GslInternal::init()

Initialize stage. ";

%feature("docstring")  CasADi::GSL::GslInternal::reset "void
CasADi::GSL::GslInternal::reset(int fsens_order, int asens_order)

Reset the solver and bring the time back to t0. ";

%feature("docstring")  CasADi::GSL::GslInternal::integrate "void
CasADi::GSL::GslInternal::integrate(double t_out)

Integrate until a specified time point. ";

%feature("docstring")  CasADi::GSL::GslInternal::setStopTime "void
CasADi::GSL::GslInternal::setStopTime(double tf)

Set the stop time of the forward integration. ";

%feature("docstring")  CasADi::GSL::GslInternal::resetAdj "void
CasADi::GSL::GslInternal::resetAdj()

Reset the solver of the adjoint problem and take time to tf. ";

%feature("docstring")  CasADi::GSL::GslInternal::integrateAdj "void
CasADi::GSL::GslInternal::integrateAdj(double t_out)

Integrate backwards in time until a specified time point. ";

%feature("docstring")  CasADi::GSL::GslInternal::getJacobian "FX
CasADi::GSL::GslInternal::getJacobian()

Nothing to see here. ";

%feature("docstring")  CasADi::GSL::GslInternal::getLinearSolver "LinearSolver CasADi::GSL::GslInternal::getLinearSolver()

Get the Linear solver. ";

%feature("docstring")  CasADi::GSL::GslInternal::setLinearSolver "void CasADi::GSL::GslInternal::setLinearSolver(const LinearSolver
&linsol, const FX &jac)

Set linear solver. ";

%feature("docstring")  CasADi::GSL::GslInternal::deepCopyMembers "void CasADi::IntegratorInternal::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::GSL::GslInternal::evaluate "void
CasADi::IntegratorInternal::evaluate(int nfdir, int nadir)

evaluate ";

%feature("docstring")  CasADi::GSL::GslInternal::jac "Integrator
CasADi::IntegratorInternal::jac(bool with_x, bool with_p)

Create an integrator which integrates the ODE/DAE augmented with the
forward sensitivity equations. ";

%feature("docstring")  CasADi::GSL::GslInternal::jacobian "FX
CasADi::IntegratorInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::GSL::GslInternal::getJacSparsity "CRSSparsity CasADi::IntegratorInternal::getJacSparsity(int iind, int
oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::GSL::GslInternal::setInitialTime "void
CasADi::IntegratorInternal::setInitialTime(double t0)

Set initial time. ";

%feature("docstring")  CasADi::GSL::GslInternal::setFinalTime "void
CasADi::IntegratorInternal::setFinalTime(double tf)

Set final time. ";

%feature("docstring")  CasADi::GSL::GslInternal::setDimensions "void
CasADi::IntegratorInternal::setDimensions(int nx, int np) ";

%feature("docstring")  CasADi::GSL::GslInternal::evaluate_switch "void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::GSL::GslInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::GSL::GslInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::GSL::GslInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::GSL::GslInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::GSL::GslInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::GSL::GslInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::GSL::GslInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::GSL::GslInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::GSL::GslInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::GSL::GslInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::GSL::GslInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::GSL::GslInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::GSL::GslInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::GSL::GslInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::GSL::GslInternal::input "const Matrix<
double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::GSL::GslInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::GSL::GslInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::GSL::GslInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::GSL::GslInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::GSL::GslInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::GSL::GslInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::GSL::GslInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::GSL::GslInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::GSL::GslInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::GSL::GslInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::GSL::GslInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::GSL::GslInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::GSL::GslInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::GSL::GslInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::GSL::GslInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::GSL::GslInternal::getStat "GenericType
CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::GSL::GslInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::GSL::GslInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::GSL::GslInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::GSL::GslInternal::getFullJacobian "void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::GSL::GslInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::GSL::GslInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::GSL::GslInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::GSL::GslInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::GSL::GslInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::GSL::GslInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::GSL::GslInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::GSL::GslInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::GSL::GslInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::GSL::GslInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1Sundials_1_1IdasIntegrator.xml
%feature("docstring") CasADi::Sundials::IdasIntegrator "

Interface to IDAS from the Sundials suite.

Creates an integrator instance which solves initial value problems in
differential-algebraic equations of the form:

f(t,y,der(y),z,p) == 0 der(q) = g(t,y,z,p)

The DAE thus consists of a fully implicit part (f) and an explicit
quadrature part (g). In the same way, the state vector is also
composed of two parts, the differential states and the quadrature
states, i.e. x = [y,q]

Joel Andersson

Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Input scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3) Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Output scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3)

Id

Type

Default

Description

Used in

abstol

OT_REAL

1e-8

absolute tolerence for the IVP solution

CasADi::IntegratorInternal

abstolv

OT_REALVECTOR

None

CasADi::Sundials::IdasInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

asens_abstol

OT_REAL

absolute tolerence for the adjoint sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

asens_iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

asens_linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

asens_lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

asens_max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

asens_pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

asens_reltol

OT_REAL

relative tolerence for the adjoint sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

asens_upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

calc_ic

OT_BOOLEAN

true

use IDACalcIC to get consistent initial conditions

CasADi::Sundials::IdasInternal

calc_icB

OT_BOOLEAN

false

use IDACalcIC to get consistent initial conditions

CasADi::Sundials::IdasInternal

cj_scaling

OT_BOOLEAN

false

IDAS scaling on cj for the user-defined linear solver module

CasADi::Sundials::IdasInternal

exact_jacobian

OT_BOOLEAN

false

CasADi::IntegratorInternal

extra_fsens_calc_ic

OT_BOOLEAN

false

Call calc ic an extra time, with fsens=0

CasADi::Sundials::IdasInternal

finite_difference_fsens

OT_BOOLEAN

false

use finite differences to approximate the forward sensitivity
equations (if AD is not available)

CasADi::IntegratorInternal

first_time

OT_REAL

GenericType()

first requested time as a fraction of the time interval

CasADi::Sundials::IdasInternal

fsens_abstol

OT_REAL

absolute tolerence for the forward sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

fsens_abstolv

OT_REALVECTOR

None

CasADi::Sundials::IdasInternal

fsens_err_con

OT_INTEGER

false

include the forward sensitivities in all error controls

CasADi::IntegratorInternal

fsens_reltol

OT_REAL

relative tolerence for the forward sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

fsens_scaling_factors

OT_REALVECTOR

scaling factor for the components if finite differences is used

CasADi::IntegratorInternal

fsens_sensitiviy_parameters

OT_INTEGERVECTOR

specifies which components will be used when estimating the
sensitivity equations

CasADi::IntegratorInternal

interpolation_type

OT_STRING

\"hermite\"

type of interpolation for the adjoint sensitivities (\"hermite\" or
\"polynomial\")

CasADi::IntegratorInternal

is_differential

OT_INTEGERVECTOR

None

CasADi::IntegratorInternal

iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

linear_solver_creator

OT_LINEARSOLVER

GenericType()

An linear solver creator function

CasADi::IntegratorInternal

linear_solver_options

OT_DICTIONARY

GenericType()

Options to be passed to the linear solver

CasADi::IntegratorInternal

lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

max_multistep_order

OT_INTEGER

5

CasADi::IntegratorInternal

max_num_steps

OT_INTEGER

10000

maximum number of steps

CasADi::IntegratorInternal

max_step_size

OT_REAL

0

maximim step size

CasADi::Sundials::IdasInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

nrhs

OT_INTEGER

1

number of right hand sides

CasADi::IntegratorInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

quad_err_con

OT_BOOLEAN

false

should the quadratures affect the step size control

CasADi::IntegratorInternal

reltol

OT_REAL

1e-6

relative tolerence for the IVP solution

CasADi::IntegratorInternal

sensitivity_method

OT_STRING

\"simultaneous\"

\"simultaneous\" or \"staggered\"

CasADi::IntegratorInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

steps_per_checkpoint

OT_INTEGER

20

number of steps between two consecutive checkpoints

CasADi::IntegratorInternal

stop_at_end

OT_BOOLEAN

false

Stop the integrator at the end of the interval

CasADi::IntegratorInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

suppress_algebraic

OT_BOOLEAN

false

supress algebraic variables in the error testing

CasADi::Sundials::IdasInternal

t0

OT_REAL

0.0

start of the integration

CasADi::IntegratorInternal

tf

OT_REAL

1.0

end of the integration

CasADi::IntegratorInternal

upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

use_preconditioner

OT_BOOLEAN

false

precondition an iterative solver

CasADi::IntegratorInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

Id

Used in

IdasInternal::correctInitialConditions

CasADi::Sundials::IdasInternal

IdasInternal::res

CasADi::Sundials::IdasInternal List of available monitors

C++ includes: idas_integrator.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Sundials::IdasIntegrator::setInput "void CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::setOutput "void CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::setFwdSeed "void CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::setFwdSens "void CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::setAdjSeed "void CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::setAdjSens "void CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Sundials::IdasIntegrator::getInput "void CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::getOutput "void CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::getFwdSeed "void CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::getFwdSens "void CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::getAdjSeed "void CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::getAdjSens "void CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::Sundials::IdasIntegrator::setOption "void CasADi::OptionsFunctionality::setOption(const std::string &str,
const GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::setOption "void CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::hasSetOption
"bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::printOptions
"void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::copyOptions "void CasADi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::dictionary "const Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::makeUnique "void CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::makeUnique "void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")
CasADi::Sundials::IdasIntegrator::IdasIntegrator "CasADi::Sundials::IdasIntegrator::IdasIntegrator()

Default constructor. ";

%feature("docstring")
CasADi::Sundials::IdasIntegrator::IdasIntegrator "CasADi::Sundials::IdasIntegrator::IdasIntegrator(const FX &f, const FX
&q=FX())

Create an integrator for a fully implicit DAE with quadrature states
(nz is the number of states not to be included in the state vector) ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::checkNode "bool CasADi::Sundials::IdasIntegrator::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")
CasADi::Sundials::IdasIntegrator::correctInitialConditions "void
CasADi::Sundials::IdasIntegrator::correctInitialConditions()

Correct the initial value for yp and z after resetting the solver. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::clone "Integrator CasADi::Integrator::clone() const

Clone. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::printStats "void CasADi::Integrator::printStats(std::ostream &stream=std::cout)
const

Print solver statistics. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::reset "void
CasADi::Integrator::reset(int fsens_order=0, int asens_order=0)

Reset the solver and bring the time back to t0. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::integrate "void CasADi::Integrator::integrate(double t_out)

Integrate until a specified time point. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::resetAdj "void CasADi::Integrator::resetAdj()

Reset the solver of the adjoint problem and take time to tf. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::integrateAdj
"void CasADi::Integrator::integrateAdj(double t_out)

Integrate backwards in time until a specified time point. ";

%feature("docstring")
CasADi::Sundials::IdasIntegrator::setInitialTime "void
CasADi::Integrator::setInitialTime(double t0)

Set initial time. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::setFinalTime
"void CasADi::Integrator::setFinalTime(double tf)

Set final time. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::setStopTime "void CasADi::Integrator::setStopTime(double tf)

Set a stop time for the forward integration. ";

%feature("docstring")
CasADi::Sundials::IdasIntegrator::setLinearSolver "void
CasADi::Integrator::setLinearSolver(const LinearSolver &linsol, const
FX &jac=FX())

Set linear solver. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::getJacobian "FX CasADi::Integrator::getJacobian()

Get the Jacobian. ";

%feature("docstring")
CasADi::Sundials::IdasIntegrator::getLinearSolver "LinearSolver
CasADi::Integrator::getLinearSolver()

Get the Linear solver. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::getDAE "FX
CasADi::Integrator::getDAE()

Get the DAE. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::getNumInputs
"int CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::getNumOutputs
"int CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::setNumInputs
"void CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::setNumOutputs
"void CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::evaluate_old
"void CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::evaluate "void CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::call "vector< MX > CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::call "std::vector<MX> CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::jacSparsity "CRSSparsity & CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Sundials::IdasIntegrator::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::input "const
Matrix< double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::input "Matrix< double > & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::output "const Matrix< double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::output "Matrix< double > & CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::fwdSeed "const Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::fwdSeed "Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::fwdSens "const Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::fwdSens "Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::adjSeed "const Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::adjSeed "Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::adjSens "const Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::adjSens "Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::addMonitor "void CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::removeMonitor
"void CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::getStats "const Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::getStat "GenericType CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::symbolicInput
"std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::assignNode "void CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")
CasADi::Sundials::IdasIntegrator::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::getCount "int CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::Sundials::IdasIntegrator::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")
CasADi::Sundials::IdasIntegrator::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")
CasADi::Sundials::IdasIntegrator::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1Sundials_1_1IdasInternal.xml
%feature("docstring") CasADi::Sundials::IdasInternal "

Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Input scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3) Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Output scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3)

Id

Type

Default

Description

Used in

abstol

OT_REAL

1e-8

absolute tolerence for the IVP solution

CasADi::IntegratorInternal

abstolv

OT_REALVECTOR

None

CasADi::Sundials::IdasInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

asens_abstol

OT_REAL

absolute tolerence for the adjoint sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

asens_iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

asens_linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

asens_lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

asens_max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

asens_pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

asens_reltol

OT_REAL

relative tolerence for the adjoint sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

asens_upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

calc_ic

OT_BOOLEAN

true

use IDACalcIC to get consistent initial conditions

CasADi::Sundials::IdasInternal

calc_icB

OT_BOOLEAN

false

use IDACalcIC to get consistent initial conditions

CasADi::Sundials::IdasInternal

cj_scaling

OT_BOOLEAN

false

IDAS scaling on cj for the user-defined linear solver module

CasADi::Sundials::IdasInternal

exact_jacobian

OT_BOOLEAN

false

CasADi::IntegratorInternal

extra_fsens_calc_ic

OT_BOOLEAN

false

Call calc ic an extra time, with fsens=0

CasADi::Sundials::IdasInternal

finite_difference_fsens

OT_BOOLEAN

false

use finite differences to approximate the forward sensitivity
equations (if AD is not available)

CasADi::IntegratorInternal

first_time

OT_REAL

GenericType()

first requested time as a fraction of the time interval

CasADi::Sundials::IdasInternal

fsens_abstol

OT_REAL

absolute tolerence for the forward sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

fsens_abstolv

OT_REALVECTOR

None

CasADi::Sundials::IdasInternal

fsens_err_con

OT_INTEGER

false

include the forward sensitivities in all error controls

CasADi::IntegratorInternal

fsens_reltol

OT_REAL

relative tolerence for the forward sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

fsens_scaling_factors

OT_REALVECTOR

scaling factor for the components if finite differences is used

CasADi::IntegratorInternal

fsens_sensitiviy_parameters

OT_INTEGERVECTOR

specifies which components will be used when estimating the
sensitivity equations

CasADi::IntegratorInternal

interpolation_type

OT_STRING

\"hermite\"

type of interpolation for the adjoint sensitivities (\"hermite\" or
\"polynomial\")

CasADi::IntegratorInternal

is_differential

OT_INTEGERVECTOR

None

CasADi::IntegratorInternal

iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

linear_solver_creator

OT_LINEARSOLVER

GenericType()

An linear solver creator function

CasADi::IntegratorInternal

linear_solver_options

OT_DICTIONARY

GenericType()

Options to be passed to the linear solver

CasADi::IntegratorInternal

lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

max_multistep_order

OT_INTEGER

5

CasADi::IntegratorInternal

max_num_steps

OT_INTEGER

10000

maximum number of steps

CasADi::IntegratorInternal

max_step_size

OT_REAL

0

maximim step size

CasADi::Sundials::IdasInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

nrhs

OT_INTEGER

1

number of right hand sides

CasADi::IntegratorInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

quad_err_con

OT_BOOLEAN

false

should the quadratures affect the step size control

CasADi::IntegratorInternal

reltol

OT_REAL

1e-6

relative tolerence for the IVP solution

CasADi::IntegratorInternal

sensitivity_method

OT_STRING

\"simultaneous\"

\"simultaneous\" or \"staggered\"

CasADi::IntegratorInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

steps_per_checkpoint

OT_INTEGER

20

number of steps between two consecutive checkpoints

CasADi::IntegratorInternal

stop_at_end

OT_BOOLEAN

false

Stop the integrator at the end of the interval

CasADi::IntegratorInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

suppress_algebraic

OT_BOOLEAN

false

supress algebraic variables in the error testing

CasADi::Sundials::IdasInternal

t0

OT_REAL

0.0

start of the integration

CasADi::IntegratorInternal

tf

OT_REAL

1.0

end of the integration

CasADi::IntegratorInternal

upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

use_preconditioner

OT_BOOLEAN

false

precondition an iterative solver

CasADi::IntegratorInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

Id

Used in

IdasInternal::correctInitialConditions

CasADi::Sundials::IdasInternal

IdasInternal::res

CasADi::Sundials::IdasInternal List of available monitors

C++ includes: idas_internal.hpp ";

%feature("docstring")  CasADi::Sundials::IdasInternal::IdasInternal "CasADi::Sundials::IdasInternal::IdasInternal(const FX &f, const FX &q)

Constructor. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::clone "IdasInternal * CasADi::Sundials::IdasInternal::clone() const

Copy constructor.

Clone ";

%feature("docstring")  CasADi::Sundials::IdasInternal::create "virtual IdasInternal* CasADi::Sundials::IdasInternal::create(const FX
&f, const FX &q) const

Create a new integrator. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::deepCopyMembers
"void CasADi::Sundials::IdasInternal::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::~IdasInternal "CasADi::Sundials::IdasInternal::~IdasInternal()

Destructor. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::init "void
CasADi::Sundials::IdasInternal::init()

Initialize. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::initTaping "void CasADi::Sundials::IdasInternal::initTaping()

Initialize the taping. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::initAdj "void
CasADi::Sundials::IdasInternal::initAdj()

Initialize the adjoint problem (can only be called after the first
integration) ";

%feature("docstring")  CasADi::Sundials::IdasInternal::reset "void
CasADi::Sundials::IdasInternal::reset(int nfsens=0, int nasens=0)

Reset the solver and bring the time back to t0. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::resetAdj "void
CasADi::Sundials::IdasInternal::resetAdj()

Reset the solver of the adjoint problem and take time to tf. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::integrate "void CasADi::Sundials::IdasInternal::integrate(double t_out)

Integrate until a specified time point. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::integrateAdj "void CasADi::Sundials::IdasInternal::integrateAdj(double t_out)

Integrate backwards in time until a specified time point. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::setStopTime "void CasADi::Sundials::IdasInternal::setStopTime(double tf)

Set the stop time of the forward integration. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::printStats "void CasADi::Sundials::IdasInternal::printStats(std::ostream &stream)
const

Print solver statistics. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::getJacobian "FX CasADi::Sundials::IdasInternal::getJacobian()

Get the Jacobian. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::getLinearSolver
"LinearSolver CasADi::Sundials::IdasInternal::getLinearSolver()

Get the Linear solver. ";

%feature("docstring")
CasADi::Sundials::IdasInternal::correctInitialConditions "void
CasADi::Sundials::IdasInternal::correctInitialConditions()

Correct the initial conditions, i.e. calculate. ";

%feature("docstring")
CasADi::Sundials::IdasInternal::initUserDefinedLinearSolver "void
CasADi::Sundials::IdasInternal::initUserDefinedLinearSolver() ";

%feature("docstring")  CasADi::Sundials::IdasInternal::setLinearSolver
"void CasADi::Sundials::IdasInternal::setLinearSolver(const
LinearSolver &linsol, const FX &jac)

Set linear solver. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::copyNV "void
CasADi::Sundials::IdasInternal::copyNV(const Matrix< double > &x,
const Matrix< double > &xp, N_Vector &yz, N_Vector &yP, N_Vector &yQ)
";

%feature("docstring")  CasADi::Sundials::IdasInternal::copyNV "void
CasADi::Sundials::IdasInternal::copyNV(const N_Vector &yz, const
N_Vector &yP, const N_Vector &yQ, Matrix< double > &x, Matrix< double
> &xp) ";

%feature("docstring")  CasADi::Sundials::IdasInternal::getInitialState
"void CasADi::Sundials::IdasInternal::getInitialState() ";

%feature("docstring")  CasADi::Sundials::IdasInternal::setFinalState "void CasADi::Sundials::IdasInternal::setFinalState() ";

%feature("docstring")  CasADi::Sundials::IdasInternal::getForwardSeeds
"void CasADi::Sundials::IdasInternal::getForwardSeeds() ";

%feature("docstring")
CasADi::Sundials::IdasInternal::setForwardSensitivities "void
CasADi::Sundials::IdasInternal::setForwardSensitivities() ";

%feature("docstring")  CasADi::Sundials::IdasInternal::getAdjointSeeds
"void CasADi::Sundials::IdasInternal::getAdjointSeeds() ";

%feature("docstring")
CasADi::Sundials::IdasInternal::setAdjointSensitivities "void
CasADi::Sundials::IdasInternal::setAdjointSensitivities() ";

%feature("docstring")  CasADi::Sundials::IdasInternal::evaluate "void
CasADi::IntegratorInternal::evaluate(int nfdir, int nadir)

evaluate ";

%feature("docstring")  CasADi::Sundials::IdasInternal::jac "Integrator CasADi::IntegratorInternal::jac(bool with_x, bool with_p)

Create an integrator which integrates the ODE/DAE augmented with the
forward sensitivity equations. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::jacobian "FX
CasADi::IntegratorInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Sundials::IdasInternal::getJacSparsity
"CRSSparsity CasADi::IntegratorInternal::getJacSparsity(int iind, int
oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::setInitialTime
"void CasADi::IntegratorInternal::setInitialTime(double t0)

Set initial time. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::setFinalTime "void CasADi::IntegratorInternal::setFinalTime(double tf)

Set final time. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::setDimensions "void CasADi::IntegratorInternal::setDimensions(int nx, int np) ";

%feature("docstring")  CasADi::Sundials::IdasInternal::evaluate_switch
"void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::jacobian_switch
"FX CasADi::FXInternal::jacobian_switch(const std::vector< std::pair<
int, int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")
CasADi::Sundials::IdasInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::inputStruct "const FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::outputStruct "const FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::print "virtual
void CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::Sundials::IdasInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::Sundials::IdasInternal::getPartition "void CasADi::FXInternal::getPartition(const std::vector< std::pair<
int, int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::Sundials::IdasInternal::monitored "bool CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::output "Matrix< double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::fwdSeed "Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::fwdSens "Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::adjSeed "Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::adjSens "Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::setNumInputs "void CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::setNumOutputs "void CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::getNumInputs "int CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::getNumOutputs "int CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::getStats "const Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::setJacSparsity
"void CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int
iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::getFullJacobian
"void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::setOption "void CasADi::OptionsFunctionalityNode::setOption(const std::string
&str, const GenericType &val)

set an option ";

%feature("docstring")  CasADi::Sundials::IdasInternal::setOption "void CasADi::OptionsFunctionalityNode::setOption(const Dictionary
&dict)

set a set of options ";

%feature("docstring")  CasADi::Sundials::IdasInternal::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::Sundials::IdasInternal::hasSetOption "bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Sundials::IdasInternal::printOptions "void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::Sundials::IdasInternal::repr "virtual
void CasADi::OptionsFunctionalityNode::repr(std::ostream &stream)
const

Print representation. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::copyOptions "void CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::dictionary "const Dictionary & CasADi::OptionsFunctionalityNode::dictionary()
const

Get the dictionary. ";

%feature("docstring")  CasADi::Sundials::IdasInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1IfNode.xml
%feature("docstring") CasADi::IfNode "

Represents a branch in an MX tree TODO: Change name of file.

Joel Andersson

C++ includes: if_else_node.hpp ";

%feature("docstring")  CasADi::IfNode::IfNode "CasADi::IfNode::IfNode(const MX &cond, const MX &if_true)

Constructors. ";

%feature("docstring")  CasADi::IfNode::~IfNode "virtual
CasADi::IfNode::~IfNode()

Destructor. ";

%feature("docstring")  CasADi::IfNode::clone "IfNode *
CasADi::IfNode::clone() const

Clone function. ";

%feature("docstring")  CasADi::IfNode::print "void
CasADi::IfNode::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::IfNode::evaluate "void
CasADi::IfNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const
DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::IfNode::evaluateSX "void
CasADi::IfNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV &fwdSens, const
SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::IfNode::evaluateMX "void
CasADi::IfNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const
MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV
&adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::IfNode::propagateSparsity "void
CasADi::IfNode::propagateSparsity(const DMatrixPtrV &input,
DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::IfNode::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::IfNode::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::IfNode::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::IfNode::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::IfNode::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::IfNode::getName "const string &
CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::IfNode::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::IfNode::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::IfNode::isMapping "virtual bool
CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::IfNode::isEvaluation "virtual bool
CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::IfNode::isOutputNode "virtual bool
CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::IfNode::isMultipleOutput "virtual bool
CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::IfNode::isJacobian "virtual bool
CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::IfNode::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::IfNode::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::IfNode::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::IfNode::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::IfNode::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::IfNode::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::IfNode::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::IfNode::getNumOutputs "virtual int
CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::IfNode::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::IfNode::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::IfNode::isNonLinear "virtual bool
CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::IfNode::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::IfNode::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::IfNode::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::IfNode::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::IfNode::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::IfNode::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::IfNode::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::IfNode::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::IfNode::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::IfNode::isOperation "virtual bool
CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::IfNode::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::IfNode::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::IfNode::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::IfNode::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::IfNode::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::IfNode::eval "virtual Matrix<double>
CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::IfNode::eval "virtual Matrix<SX>
CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::IfNode::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::IfNode::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::IfNode::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::IfNode::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1ImplicitFunction.xml
%feature("docstring") CasADi::ImplicitFunction "

Abstract base class for the implicit function classes The equation:

F(z, x1, x2, ..., xn) == 0

where d_F/dz is invertable, implicitly defines the equation:

z := G(x1, x2, ..., xn)

F should be an FX mapping from (n+1) inputs to 1 output.
ImplicitFunction (G) is an FX mapping from n inputs to 1 output.

n may be zero.

You can provide an initial guess for z by setting output(0) of
ImplicitFunction.

Joel Andersson

Id

Type

Default

Description

Used in

abstol

OT_REAL

1e-6

Stopping criterion tolerance

CasADi::ImplicitFunctionInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: implicit_function.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::ImplicitFunction::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::ImplicitFunction::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::ImplicitFunction::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::ImplicitFunction::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::ImplicitFunction::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::ImplicitFunction::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::ImplicitFunction::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::ImplicitFunction::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::ImplicitFunction::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::ImplicitFunction::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::ImplicitFunction::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::ImplicitFunction::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::ImplicitFunction::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::ImplicitFunction::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::ImplicitFunction::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::ImplicitFunction::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::ImplicitFunction::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::ImplicitFunction::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::ImplicitFunction::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::ImplicitFunction::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::ImplicitFunction::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::ImplicitFunction::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::ImplicitFunction::checkNode "bool
CasADi::ImplicitFunction::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::ImplicitFunction::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::ImplicitFunction::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::ImplicitFunction::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::ImplicitFunction::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::ImplicitFunction::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::ImplicitFunction::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::ImplicitFunction::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::ImplicitFunction::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::ImplicitFunction::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::ImplicitFunction::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::ImplicitFunction::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::ImplicitFunction::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::ImplicitFunction::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::ImplicitFunction::call "std::vector<MX> CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::ImplicitFunction::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::ImplicitFunction::jacSparsity "CRSSparsity & CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::ImplicitFunction::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::ImplicitFunction::input "const Matrix<
double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::ImplicitFunction::input "Matrix<
double > & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::ImplicitFunction::output "const
Matrix< double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::ImplicitFunction::output "Matrix<
double > & CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::ImplicitFunction::fwdSeed "const
Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::ImplicitFunction::fwdSeed "Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::ImplicitFunction::fwdSens "const
Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::ImplicitFunction::fwdSens "Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::ImplicitFunction::adjSeed "const
Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::ImplicitFunction::adjSeed "Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::ImplicitFunction::adjSens "const
Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::ImplicitFunction::adjSens "Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::ImplicitFunction::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::ImplicitFunction::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::ImplicitFunction::getStats "const
Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::ImplicitFunction::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::ImplicitFunction::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::ImplicitFunction::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::ImplicitFunction::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::ImplicitFunction::assignNodeNoCount "void CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::ImplicitFunction::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::ImplicitFunction::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::ImplicitFunction::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::ImplicitFunction::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::ImplicitFunction::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::ImplicitFunction::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::ImplicitFunction::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::ImplicitFunction::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::ImplicitFunction::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::ImplicitFunction::getRepresentation "string CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::ImplicitFunction::getDescription "string CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1ImplicitFunctionInternal.xml
%feature("docstring") CasADi::ImplicitFunctionInternal "

Internal class.

Id

Type

Default

Description

Used in

abstol

OT_REAL

1e-6

Stopping criterion tolerance

CasADi::ImplicitFunctionInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: implicit_function_internal.hpp ";

%feature("docstring")
CasADi::ImplicitFunctionInternal::ImplicitFunctionInternal "CasADi::ImplicitFunctionInternal::ImplicitFunctionInternal(const FX
&f, int nrhs)

Constructor.

Parameters:
-----------

f:   FX mapping from (n+1) inputs to 1 output. ";

%feature("docstring")
CasADi::ImplicitFunctionInternal::~ImplicitFunctionInternal "CasADi::ImplicitFunctionInternal::~ImplicitFunctionInternal()=0

Destructor. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::init "void
CasADi::ImplicitFunctionInternal::init()

Initialize. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::evaluate "virtual void CasADi::ImplicitFunctionInternal::evaluate(int nfdir, int
nadir)=0

Solve the system of equations. ";

%feature("docstring")
CasADi::ImplicitFunctionInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::jacobian "virtual FX CasADi::FXInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")
CasADi::ImplicitFunctionInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")
CasADi::ImplicitFunctionInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::inputStruct "const FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::outputStruct
"FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::outputStruct
"const FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::print "virtual void CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::ImplicitFunctionInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::getPartition
"void CasADi::FXInternal::getPartition(const std::vector< std::pair<
int, int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::verbose "bool CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::monitored "bool CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::input "Matrix< double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::output "Matrix< double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::output "const Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::fwdSeed "Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::fwdSeed "const Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int
dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::fwdSens "Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::fwdSens "const Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::adjSeed "Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::adjSeed "const Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int
dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::adjSens "Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::adjSens "const Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::setNumInputs
"void CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::setNumOutputs
"void CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::getNumInputs
"int CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::getNumOutputs
"int CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::getStats "const Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::ImplicitFunctionInternal::getJacSparsity "CRSSparsity
CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::ImplicitFunctionInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::symbolicInput
"std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")
CasADi::ImplicitFunctionInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::setOption "void CasADi::OptionsFunctionalityNode::setOption(const std::string
&str, const GenericType &val)

set an option ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::setOption "void CasADi::OptionsFunctionalityNode::setOption(const Dictionary
&dict)

set a set of options ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::hasSetOption
"bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::printOptions
"void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::repr "virtual void CasADi::OptionsFunctionalityNode::repr(std::ostream
&stream) const

Print representation. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::copyOptions "void CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::dictionary "const Dictionary & CasADi::OptionsFunctionalityNode::dictionary()
const

Get the dictionary. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::clone "virtual SharedObjectNode* CasADi::SharedObjectNode::clone() const =0

Make a deep copy of the instance. ";

%feature("docstring")
CasADi::ImplicitFunctionInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::ImplicitFunctionInternal::getCount "int CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1IndexList.xml
%feature("docstring") CasADi::IndexList "

Class representing a non-regular (and thus non-slice) index list

C++ includes: slice.hpp ";

%feature("docstring")  CasADi::IndexList::IndexList "CasADi::IndexList::IndexList()

Constructor. ";

%feature("docstring")  CasADi::IndexList::IndexList "CasADi::IndexList::IndexList(int i) ";

%feature("docstring")  CasADi::IndexList::IndexList "CasADi::IndexList::IndexList(const std::vector< int > &i) ";

%feature("docstring")  CasADi::IndexList::IndexList "CasADi::IndexList::IndexList(const Slice &i) ";

%feature("docstring")  CasADi::IndexList::getAll "std::vector< int >
CasADi::IndexList::getAll(int len) const

Get a vector of indices. ";


// File: classCasADi_1_1IndexSet.xml
%feature("docstring") CasADi::IndexSet "

Class representing a set of indices of arbitrary order

C++ includes: slice.hpp ";

%feature("docstring")  CasADi::IndexSet::IndexSet "CasADi::IndexSet::IndexSet(int i)

A single element. ";

%feature("docstring")  CasADi::IndexSet::IndexSet "CasADi::IndexSet::IndexSet(const std::vector< int > &v)

A set of indices. ";

%feature("docstring")  CasADi::IndexSet::getAll "const std::vector<
int > & CasADi::IndexSet::getAll(int len) const

Get a vector of indices. ";


// File: classCasADi_1_1InfSXNode.xml
%feature("docstring") CasADi::InfSXNode "

Represents an infinity SX.

Joel Andersson

C++ includes: constant_sx_node.hpp ";

%feature("docstring")  CasADi::InfSXNode::isInteger "bool
CasADi::SXNode::isInteger() const ";

%feature("docstring")  CasADi::InfSXNode::isSymbolic "bool
CasADi::SXNode::isSymbolic() const ";

%feature("docstring")  CasADi::InfSXNode::hasDep "bool
CasADi::SXNode::hasDep() const ";

%feature("docstring")  CasADi::InfSXNode::isZero "bool
CasADi::SXNode::isZero() const ";

%feature("docstring")  CasADi::InfSXNode::isOne "bool
CasADi::SXNode::isOne() const ";

%feature("docstring")  CasADi::InfSXNode::isMinusOne "bool
CasADi::SXNode::isMinusOne() const ";

%feature("docstring")  CasADi::InfSXNode::isNan "bool
CasADi::SXNode::isNan() const ";

%feature("docstring")  CasADi::InfSXNode::isMinusInf "bool
CasADi::SXNode::isMinusInf() const ";

%feature("docstring")  CasADi::InfSXNode::getIntValue "int
CasADi::SXNode::getIntValue() const ";

%feature("docstring")  CasADi::InfSXNode::InfSXNode "CasADi::InfSXNode::InfSXNode() ";

%feature("docstring")  CasADi::InfSXNode::~InfSXNode "virtual
CasADi::InfSXNode::~InfSXNode() ";

%feature("docstring")  CasADi::InfSXNode::getValue "virtual double
CasADi::InfSXNode::getValue() const

Get the value. ";

%feature("docstring")  CasADi::InfSXNode::isInf "virtual bool
CasADi::InfSXNode::isInf() const

Properties. ";

%feature("docstring")  CasADi::InfSXNode::isConstant "virtual bool
CasADi::ConstantSXNode::isConstant() const

Properties. ";

%feature("docstring")  CasADi::InfSXNode::print "void
CasADi::SXNode::print(std::ostream &stream) const

print ";

%feature("docstring")  CasADi::InfSXNode::getName "const std::string
& CasADi::SXNode::getName() const ";

%feature("docstring")  CasADi::InfSXNode::getOp "int
CasADi::SXNode::getOp() const

get the operation only for binary nodes ";

%feature("docstring")  CasADi::InfSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SXNode &node) const

comparison ";

%feature("docstring")  CasADi::InfSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SX &scalar) const

comparison ";

%feature("docstring")  CasADi::InfSXNode::ndep "virtual int
CasADi::SXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::InfSXNode::dep "const SX &
CasADi::SXNode::dep(int i) const

get the reference of a child ";

%feature("docstring")  CasADi::InfSXNode::dep "SX &
CasADi::SXNode::dep(int i)

get the reference of a child ";

%feature("docstring")  CasADi::InfSXNode::isSmooth "bool
CasADi::SXNode::isSmooth() const

Check if smooth. ";


// File: classCasADi_1_1IntegerSXNode.xml
%feature("docstring") CasADi::IntegerSXNode "

Represents a constant integer SX.

Joel Andersson

C++ includes: constant_sx_node.hpp ";

%feature("docstring")  CasADi::IntegerSXNode::getValue "virtual
double CasADi::IntegerSXNode::getValue() const

evaluate function ";

%feature("docstring")  CasADi::IntegerSXNode::getIntValue "virtual
int CasADi::IntegerSXNode::getIntValue() const ";

%feature("docstring")  CasADi::IntegerSXNode::isSymbolic "bool
CasADi::SXNode::isSymbolic() const ";

%feature("docstring")  CasADi::IntegerSXNode::hasDep "bool
CasADi::SXNode::hasDep() const ";

%feature("docstring")  CasADi::IntegerSXNode::isZero "bool
CasADi::SXNode::isZero() const ";

%feature("docstring")  CasADi::IntegerSXNode::isOne "bool
CasADi::SXNode::isOne() const ";

%feature("docstring")  CasADi::IntegerSXNode::isMinusOne "bool
CasADi::SXNode::isMinusOne() const ";

%feature("docstring")  CasADi::IntegerSXNode::isNan "bool
CasADi::SXNode::isNan() const ";

%feature("docstring")  CasADi::IntegerSXNode::isInf "bool
CasADi::SXNode::isInf() const ";

%feature("docstring")  CasADi::IntegerSXNode::isMinusInf "bool
CasADi::SXNode::isMinusInf() const ";

%feature("docstring")  CasADi::IntegerSXNode::~IntegerSXNode "virtual
CasADi::IntegerSXNode::~IntegerSXNode() ";

%feature("docstring")  CasADi::IntegerSXNode::IntegerSXNode "CasADi::IntegerSXNode::IntegerSXNode(int value) ";

%feature("docstring")  CasADi::IntegerSXNode::isInteger "virtual bool
CasADi::IntegerSXNode::isInteger() const

Properties. ";

%feature("docstring")  CasADi::IntegerSXNode::isConstant "virtual
bool CasADi::ConstantSXNode::isConstant() const

Properties. ";

%feature("docstring")  CasADi::IntegerSXNode::print "void
CasADi::SXNode::print(std::ostream &stream) const

print ";

%feature("docstring")  CasADi::IntegerSXNode::getName "const
std::string & CasADi::SXNode::getName() const ";

%feature("docstring")  CasADi::IntegerSXNode::getOp "int
CasADi::SXNode::getOp() const

get the operation only for binary nodes ";

%feature("docstring")  CasADi::IntegerSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SXNode &node) const

comparison ";

%feature("docstring")  CasADi::IntegerSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SX &scalar) const

comparison ";

%feature("docstring")  CasADi::IntegerSXNode::ndep "virtual int
CasADi::SXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::IntegerSXNode::dep "const SX &
CasADi::SXNode::dep(int i) const

get the reference of a child ";

%feature("docstring")  CasADi::IntegerSXNode::dep "SX &
CasADi::SXNode::dep(int i)

get the reference of a child ";

%feature("docstring")  CasADi::IntegerSXNode::isSmooth "bool
CasADi::SXNode::isSmooth() const

Check if smooth. ";


// File: classCasADi_1_1Integrator.xml
%feature("docstring") CasADi::Integrator "

Integrator abstract base class An \"integrator\" is a function that
solves an initial value problem (IVP) of the generic form:

F(t,x,der(x),z,p) == 0 x(t0) = x0 over a time interval [t0, tf].

It has (currently) 6 inputs, initial time, final time, initial state
(vector-valued), parameter (vector-valued), as well as guesses for the
initial state derivative and algebraic variables. The latter two are
only relevant for implicit integrators.

In addition to this, the integrator provides some additional
functionality, such as getting the value of the state and/or
sensitivities at certain time points. Controls are assumed to be
parametrized at this point.

The class does not specify how the function F above should be
represented, nor the method used for the integration, but assumes that
it steps forward in time (ruling out collocation in particular). The
actual form of the ODE/DAE is defined in the derived classes.

inputs: 0: State at t0 (dimension nx-by-1) 1: Parameter (dimension np-
by-1) 2: State derivative at t0 (dimension nx-by-1)

outputs: 0: State at tf 1: State derivative at tf

Joel Andersson

Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Input scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3) Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Output scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3)

Id

Type

Default

Description

Used in

abstol

OT_REAL

1e-8

absolute tolerence for the IVP solution

CasADi::IntegratorInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

asens_abstol

OT_REAL

absolute tolerence for the adjoint sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

asens_iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

asens_linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

asens_lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

asens_max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

asens_pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

asens_reltol

OT_REAL

relative tolerence for the adjoint sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

asens_upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

exact_jacobian

OT_BOOLEAN

false

CasADi::IntegratorInternal

finite_difference_fsens

OT_BOOLEAN

false

use finite differences to approximate the forward sensitivity
equations (if AD is not available)

CasADi::IntegratorInternal

fsens_abstol

OT_REAL

absolute tolerence for the forward sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

fsens_err_con

OT_INTEGER

false

include the forward sensitivities in all error controls

CasADi::IntegratorInternal

fsens_reltol

OT_REAL

relative tolerence for the forward sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

fsens_scaling_factors

OT_REALVECTOR

scaling factor for the components if finite differences is used

CasADi::IntegratorInternal

fsens_sensitiviy_parameters

OT_INTEGERVECTOR

specifies which components will be used when estimating the
sensitivity equations

CasADi::IntegratorInternal

interpolation_type

OT_STRING

\"hermite\"

type of interpolation for the adjoint sensitivities (\"hermite\" or
\"polynomial\")

CasADi::IntegratorInternal

is_differential

OT_INTEGERVECTOR

None

CasADi::IntegratorInternal

iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

linear_solver_creator

OT_LINEARSOLVER

GenericType()

An linear solver creator function

CasADi::IntegratorInternal

linear_solver_options

OT_DICTIONARY

GenericType()

Options to be passed to the linear solver

CasADi::IntegratorInternal

lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

max_multistep_order

OT_INTEGER

5

CasADi::IntegratorInternal

max_num_steps

OT_INTEGER

10000

maximum number of steps

CasADi::IntegratorInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

nrhs

OT_INTEGER

1

number of right hand sides

CasADi::IntegratorInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

quad_err_con

OT_BOOLEAN

false

should the quadratures affect the step size control

CasADi::IntegratorInternal

reltol

OT_REAL

1e-6

relative tolerence for the IVP solution

CasADi::IntegratorInternal

sensitivity_method

OT_STRING

\"simultaneous\"

\"simultaneous\" or \"staggered\"

CasADi::IntegratorInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

steps_per_checkpoint

OT_INTEGER

20

number of steps between two consecutive checkpoints

CasADi::IntegratorInternal

stop_at_end

OT_BOOLEAN

false

Stop the integrator at the end of the interval

CasADi::IntegratorInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

t0

OT_REAL

0.0

start of the integration

CasADi::IntegratorInternal

tf

OT_REAL

1.0

end of the integration

CasADi::IntegratorInternal

upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

use_preconditioner

OT_BOOLEAN

false

precondition an iterative solver

CasADi::IntegratorInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: integrator.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Integrator::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::Integrator::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::Integrator::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::Integrator::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::Integrator::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::Integrator::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Integrator::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::Integrator::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::Integrator::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::Integrator::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::Integrator::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::Integrator::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::Integrator::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::Integrator::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::Integrator::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::Integrator::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::Integrator::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Integrator::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Integrator::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Integrator::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::Integrator::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::Integrator::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::Integrator::Integrator "CasADi::Integrator::Integrator()

Default constructor. ";

%feature("docstring")  CasADi::Integrator::clone "Integrator
CasADi::Integrator::clone() const

Clone. ";

%feature("docstring")  CasADi::Integrator::printStats "void
CasADi::Integrator::printStats(std::ostream &stream=std::cout) const

Print solver statistics. ";

%feature("docstring")  CasADi::Integrator::reset "void
CasADi::Integrator::reset(int fsens_order=0, int asens_order=0)

Reset the solver and bring the time back to t0. ";

%feature("docstring")  CasADi::Integrator::integrate "void
CasADi::Integrator::integrate(double t_out)

Integrate until a specified time point. ";

%feature("docstring")  CasADi::Integrator::resetAdj "void
CasADi::Integrator::resetAdj()

Reset the solver of the adjoint problem and take time to tf. ";

%feature("docstring")  CasADi::Integrator::integrateAdj "void
CasADi::Integrator::integrateAdj(double t_out)

Integrate backwards in time until a specified time point. ";

%feature("docstring")  CasADi::Integrator::setInitialTime "void
CasADi::Integrator::setInitialTime(double t0)

Set initial time. ";

%feature("docstring")  CasADi::Integrator::setFinalTime "void
CasADi::Integrator::setFinalTime(double tf)

Set final time. ";

%feature("docstring")  CasADi::Integrator::setStopTime "void
CasADi::Integrator::setStopTime(double tf)

Set a stop time for the forward integration. ";

%feature("docstring")  CasADi::Integrator::checkNode "bool
CasADi::Integrator::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::Integrator::setLinearSolver "void
CasADi::Integrator::setLinearSolver(const LinearSolver &linsol, const
FX &jac=FX())

Set linear solver. ";

%feature("docstring")  CasADi::Integrator::getJacobian "FX
CasADi::Integrator::getJacobian()

Get the Jacobian. ";

%feature("docstring")  CasADi::Integrator::getLinearSolver "LinearSolver CasADi::Integrator::getLinearSolver()

Get the Linear solver. ";

%feature("docstring")  CasADi::Integrator::getDAE "FX
CasADi::Integrator::getDAE()

Get the DAE. ";

%feature("docstring")  CasADi::Integrator::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::Integrator::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::Integrator::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::Integrator::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::Integrator::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::Integrator::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::Integrator::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::Integrator::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::Integrator::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Integrator::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Integrator::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::Integrator::call "std::vector<DMatrix>
CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::Integrator::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::Integrator::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::Integrator::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::Integrator::jacSparsity "CRSSparsity &
CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Integrator::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Integrator::input "const Matrix<
double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Integrator::input "Matrix< double > &
CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Integrator::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Integrator::output "Matrix< double > &
CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::Integrator::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::Integrator::fwdSeed "Matrix< double >
& CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Integrator::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Integrator::fwdSens "Matrix< double >
& CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Integrator::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Integrator::adjSeed "Matrix< double >
& CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Integrator::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Integrator::adjSens "Matrix< double >
& CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Integrator::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::Integrator::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::Integrator::getStats "const Dictionary
& CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Integrator::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::Integrator::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Integrator::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::Integrator::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::Integrator::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::Integrator::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::Integrator::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Integrator::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::Integrator::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Integrator::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::Integrator::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::Integrator::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::Integrator::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::Integrator::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::Integrator::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1IntegratorInternal.xml
%feature("docstring") CasADi::IntegratorInternal "

Internal storage for integrator related data.

Joel Andersson

Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Input scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3) Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Output scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3)

Id

Type

Default

Description

Used in

abstol

OT_REAL

1e-8

absolute tolerence for the IVP solution

CasADi::IntegratorInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

asens_abstol

OT_REAL

absolute tolerence for the adjoint sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

asens_iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

asens_linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

asens_lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

asens_max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

asens_pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

asens_reltol

OT_REAL

relative tolerence for the adjoint sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

asens_upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

exact_jacobian

OT_BOOLEAN

false

CasADi::IntegratorInternal

finite_difference_fsens

OT_BOOLEAN

false

use finite differences to approximate the forward sensitivity
equations (if AD is not available)

CasADi::IntegratorInternal

fsens_abstol

OT_REAL

absolute tolerence for the forward sensitivity solution [default:
equal to abstol]

CasADi::IntegratorInternal

fsens_err_con

OT_INTEGER

false

include the forward sensitivities in all error controls

CasADi::IntegratorInternal

fsens_reltol

OT_REAL

relative tolerence for the forward sensitivity solution [default:
equal to reltol]

CasADi::IntegratorInternal

fsens_scaling_factors

OT_REALVECTOR

scaling factor for the components if finite differences is used

CasADi::IntegratorInternal

fsens_sensitiviy_parameters

OT_INTEGERVECTOR

specifies which components will be used when estimating the
sensitivity equations

CasADi::IntegratorInternal

interpolation_type

OT_STRING

\"hermite\"

type of interpolation for the adjoint sensitivities (\"hermite\" or
\"polynomial\")

CasADi::IntegratorInternal

is_differential

OT_INTEGERVECTOR

None

CasADi::IntegratorInternal

iterative_solver

OT_STRING

\"gmres\"

\"gmres\", \"bcgstab\", \"tfqmr\"

CasADi::IntegratorInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

linear_solver

OT_STRING

\"dense\"

\"dense\", \"banded\" or \"iterative\"

CasADi::IntegratorInternal

linear_solver_creator

OT_LINEARSOLVER

GenericType()

An linear solver creator function

CasADi::IntegratorInternal

linear_solver_options

OT_DICTIONARY

GenericType()

Options to be passed to the linear solver

CasADi::IntegratorInternal

lower_bandwidth

OT_INTEGER

lower band-width of banded jacobians

CasADi::IntegratorInternal

max_krylov

OT_INTEGER

10

maximum krylov subspace size

CasADi::IntegratorInternal

max_multistep_order

OT_INTEGER

5

CasADi::IntegratorInternal

max_num_steps

OT_INTEGER

10000

maximum number of steps

CasADi::IntegratorInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

nrhs

OT_INTEGER

1

number of right hand sides

CasADi::IntegratorInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::IntegratorInternal

quad_err_con

OT_BOOLEAN

false

should the quadratures affect the step size control

CasADi::IntegratorInternal

reltol

OT_REAL

1e-6

relative tolerence for the IVP solution

CasADi::IntegratorInternal

sensitivity_method

OT_STRING

\"simultaneous\"

\"simultaneous\" or \"staggered\"

CasADi::IntegratorInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

steps_per_checkpoint

OT_INTEGER

20

number of steps between two consecutive checkpoints

CasADi::IntegratorInternal

stop_at_end

OT_BOOLEAN

false

Stop the integrator at the end of the interval

CasADi::IntegratorInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

t0

OT_REAL

0.0

start of the integration

CasADi::IntegratorInternal

tf

OT_REAL

1.0

end of the integration

CasADi::IntegratorInternal

upper_bandwidth

OT_INTEGER

upper band-width of banded jacobians

CasADi::IntegratorInternal

use_preconditioner

OT_BOOLEAN

false

precondition an iterative solver

CasADi::IntegratorInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: integrator_internal.hpp ";

%feature("docstring")  CasADi::IntegratorInternal::IntegratorInternal
"CasADi::IntegratorInternal::IntegratorInternal(const FX &f, const FX
&q)

Constructor. ";

%feature("docstring")  CasADi::IntegratorInternal::~IntegratorInternal
"CasADi::IntegratorInternal::~IntegratorInternal()=0

Destructor. ";

%feature("docstring")  CasADi::IntegratorInternal::clone "virtual
IntegratorInternal* CasADi::IntegratorInternal::clone() const =0

Clone. ";

%feature("docstring")  CasADi::IntegratorInternal::deepCopyMembers "void CasADi::IntegratorInternal::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::IntegratorInternal::create "virtual
IntegratorInternal* CasADi::IntegratorInternal::create(const FX &f,
const FX &q) const =0

Create a new integrator. ";

%feature("docstring")  CasADi::IntegratorInternal::setLinearSolver "virtual void CasADi::IntegratorInternal::setLinearSolver(const
LinearSolver &linsol, const FX &jac)=0

Set linear solver. ";

%feature("docstring")  CasADi::IntegratorInternal::printStats "virtual void CasADi::IntegratorInternal::printStats(std::ostream
&stream) const =0

Print solver statistics. ";

%feature("docstring")  CasADi::IntegratorInternal::reset "virtual
void CasADi::IntegratorInternal::reset(int fsens_order, int
asens_order)=0

Reset the solver and bring the time back to t0. ";

%feature("docstring")  CasADi::IntegratorInternal::resetAdj "virtual
void CasADi::IntegratorInternal::resetAdj()=0

Reset the solver of the adjoint problem and take time to tf. ";

%feature("docstring")  CasADi::IntegratorInternal::integrate "virtual
void CasADi::IntegratorInternal::integrate(double t_out)=0

Integrate until a specified time point. ";

%feature("docstring")  CasADi::IntegratorInternal::integrateAdj "virtual void CasADi::IntegratorInternal::integrateAdj(double t_out)=0

Integrate backwards in time until a specified time point. ";

%feature("docstring")  CasADi::IntegratorInternal::setStopTime "virtual void CasADi::IntegratorInternal::setStopTime(double tf)=0

Set stop time for the integration. ";

%feature("docstring")  CasADi::IntegratorInternal::evaluate "void
CasADi::IntegratorInternal::evaluate(int nfdir, int nadir)

evaluate ";

%feature("docstring")  CasADi::IntegratorInternal::init "void
CasADi::IntegratorInternal::init()

Initialize. ";

%feature("docstring")  CasADi::IntegratorInternal::jac "Integrator
CasADi::IntegratorInternal::jac(bool with_x, bool with_p)

Create an integrator which integrates the ODE/DAE augmented with the
forward sensitivity equations. ";

%feature("docstring")  CasADi::IntegratorInternal::jacobian "FX
CasADi::IntegratorInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::IntegratorInternal::getJacSparsity "CRSSparsity CasADi::IntegratorInternal::getJacSparsity(int iind, int
oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::IntegratorInternal::getJacobian "virtual FX CasADi::IntegratorInternal::getJacobian()=0

Get the Jacobian. ";

%feature("docstring")  CasADi::IntegratorInternal::getLinearSolver "virtual LinearSolver CasADi::IntegratorInternal::getLinearSolver()=0

Get the Linear solver. ";

%feature("docstring")  CasADi::IntegratorInternal::setInitialTime "void CasADi::IntegratorInternal::setInitialTime(double t0)

Set initial time. ";

%feature("docstring")  CasADi::IntegratorInternal::setFinalTime "void
CasADi::IntegratorInternal::setFinalTime(double tf)

Set final time. ";

%feature("docstring")  CasADi::IntegratorInternal::setDimensions "void CasADi::IntegratorInternal::setDimensions(int nx, int np) ";

%feature("docstring")  CasADi::IntegratorInternal::evaluate_switch "void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::IntegratorInternal::jacobian_switch "FX CasADi::FXInternal::jacobian_switch(const std::vector< std::pair<
int, int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::IntegratorInternal::numeric_jacobian "FX CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::IntegratorInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::IntegratorInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::IntegratorInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::IntegratorInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::IntegratorInternal::outputStruct "const FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::IntegratorInternal::print "virtual
void CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::IntegratorInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::IntegratorInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::IntegratorInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::IntegratorInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::IntegratorInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::IntegratorInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::IntegratorInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::IntegratorInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::IntegratorInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::IntegratorInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::IntegratorInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::IntegratorInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::IntegratorInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::IntegratorInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::IntegratorInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::IntegratorInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::IntegratorInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::IntegratorInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::IntegratorInternal::setNumOutputs "void CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::IntegratorInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::IntegratorInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::IntegratorInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::IntegratorInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::IntegratorInternal::setJacSparsity "void CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int
iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::IntegratorInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::IntegratorInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::IntegratorInternal::getFullJacobian "void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::IntegratorInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::IntegratorInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::IntegratorInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::IntegratorInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::IntegratorInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::IntegratorInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::IntegratorInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::IntegratorInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::IntegratorInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::IntegratorInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1InverseMapping.xml
%feature("docstring") CasADi::InverseMapping "

Maps non-zero elements.

Joel Andersson

C++ includes: inverse_mapping.hpp ";

%feature("docstring")  CasADi::InverseMapping::InverseMapping "CasADi::InverseMapping::InverseMapping(const MX &dep, const
std::vector< CRSSparsity > &sp, const std::vector< int > &nzind, const
std::vector< int > &depind)

Constructor. ";

%feature("docstring")  CasADi::InverseMapping::clone "InverseMapping
* CasADi::InverseMapping::clone() const

Clone function. ";

%feature("docstring")  CasADi::InverseMapping::~InverseMapping "virtual CasADi::InverseMapping::~InverseMapping()

Destructor. ";

%feature("docstring")  CasADi::InverseMapping::evaluate "void
CasADi::InverseMapping::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const
DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::InverseMapping::evaluateSX "void
CasADi::InverseMapping::evaluateSX(const SXMatrixPtrV &input,
SXMatrixPtrV &output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV
&fwdSens, const SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::InverseMapping::evaluateMX "void
CasADi::InverseMapping::evaluateMX(const MXPtrV &input, MXPtrV
&output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::InverseMapping::propagateSparsity "void CasADi::InverseMapping::propagateSparsity(const DMatrixPtrV
&input, DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::InverseMapping::getNumOutputs "int
CasADi::InverseMapping::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::InverseMapping::sparsity "const
CRSSparsity & CasADi::InverseMapping::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::InverseMapping::print "void
CasADi::InverseMapping::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::InverseMapping::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::InverseMapping::isMultipleOutput "virtual bool CasADi::MultipleOutput::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::InverseMapping::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::InverseMapping::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::InverseMapping::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::InverseMapping::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::InverseMapping::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::InverseMapping::getName "const string
& CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::InverseMapping::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::InverseMapping::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::InverseMapping::isMapping "virtual
bool CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::InverseMapping::isEvaluation "virtual
bool CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::InverseMapping::isOutputNode "virtual
bool CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::InverseMapping::isJacobian "virtual
bool CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::InverseMapping::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::InverseMapping::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::InverseMapping::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::InverseMapping::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::InverseMapping::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::InverseMapping::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::InverseMapping::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::InverseMapping::isNonLinear "virtual
bool CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::InverseMapping::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::InverseMapping::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::InverseMapping::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::InverseMapping::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::InverseMapping::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::InverseMapping::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::InverseMapping::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::InverseMapping::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::InverseMapping::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::InverseMapping::isOperation "virtual
bool CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::InverseMapping::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::InverseMapping::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::InverseMapping::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::InverseMapping::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::InverseMapping::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::InverseMapping::eval "virtual
Matrix<double> CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::InverseMapping::eval "virtual
Matrix<SX> CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::InverseMapping::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::InverseMapping::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::InverseMapping::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::InverseMapping::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1IpoptInternal.xml
%feature("docstring") CasADi::IpoptInternal "

Name

Description

NLP_X_INIT

Decision variables initial guess.

NLP_LBX

Decision variables lower bound.

NLP_UBX

Decision variables upper bound.

NLP_LBG

Constraints lower bound.

NLP_UBG

Constraints upper bound.

NLP_LAMBDA_INIT

Lambda multipliers initial guess.

NLP_P

Static parameters on which the objective and constraints might depend.
Input scheme: CasADi::NLPInput (NLP_NUM_IN = 7) Name

Description

NLP_X_OPT

Decision variables for optimal solution.

NLP_COST

Objective/cost function for optimal solution.

NLP_LAMBDA_OPT

Lambda multipliers function for optimal solution.

NLP_LAMBDA_LBX

Lower bound multipliers for optimal solution When in warm start mode,
this output will be used as input

NLP_LAMBDA_UBX

Upper bound multipliers for optimal solution When in warm start mode,
this output will be used as input Output scheme: CasADi::NLPOutput
(NLP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

accept_every_trial_step

OT_STRING

CasADi::IpoptInternal

acceptable_compl_inf_tol

OT_REAL

CasADi::IpoptInternal

acceptable_constr_viol_tol

OT_REAL

CasADi::IpoptInternal

acceptable_dual_inf_tol

OT_REAL

CasADi::IpoptInternal

acceptable_iter

OT_INTEGER

CasADi::IpoptInternal

acceptable_obj_change_tol

OT_REAL

CasADi::IpoptInternal

acceptable_tol

OT_REAL

CasADi::IpoptInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

alpha_for_y

OT_STRING

CasADi::IpoptInternal

alpha_for_y_tol

OT_REAL

CasADi::IpoptInternal

barrier_tol_factor

OT_REAL

CasADi::IpoptInternal

bound_frac

OT_REAL

CasADi::IpoptInternal

bound_mult_init_method

OT_STRING

CasADi::IpoptInternal

bound_mult_init_val

OT_REAL

CasADi::IpoptInternal

bound_mult_reset_threshold

OT_REAL

CasADi::IpoptInternal

bound_push

OT_REAL

CasADi::IpoptInternal

bound_relax_factor

OT_REAL

CasADi::IpoptInternal

check_derivatives_for_naninf

OT_STRING

CasADi::IpoptInternal

compl_inf_tol

OT_REAL

CasADi::IpoptInternal

constr_mult_init_max

OT_REAL

CasADi::IpoptInternal

constr_mult_reset_threshold

OT_REAL

CasADi::IpoptInternal

constr_viol_tol

OT_REAL

CasADi::IpoptInternal

corrector_type

OT_STRING

CasADi::IpoptInternal

derivative_test

OT_STRING

CasADi::IpoptInternal

derivative_test_perturbation

OT_REAL

CasADi::IpoptInternal

derivative_test_print_all

OT_STRING

CasADi::IpoptInternal

derivative_test_tol

OT_REAL

CasADi::IpoptInternal

diverging_iterates_tol

OT_REAL

CasADi::IpoptInternal

dual_inf_tol

OT_REAL

CasADi::IpoptInternal

evaluate_orig_obj_at_resto_trial

OT_STRING

CasADi::IpoptInternal

expect_infeasible_problem

OT_STRING

CasADi::IpoptInternal

expect_infeasible_problem_ctol

OT_REAL

CasADi::IpoptInternal

expect_infeasible_problem_ytol

OT_REAL

CasADi::IpoptInternal

file_print_level

OT_INTEGER

CasADi::IpoptInternal

first_hessian_perturbation

OT_REAL

CasADi::IpoptInternal

fixed_mu_oracle

OT_STRING

CasADi::IpoptInternal

fixed_variable_treatment

OT_STRING

CasADi::IpoptInternal

hessian_approximation

OT_STRING

CasADi::IpoptInternal

hessian_constant

OT_STRING

CasADi::IpoptInternal

honor_original_bounds

OT_STRING

CasADi::IpoptInternal

jac_c_constant

OT_STRING

CasADi::IpoptInternal

jac_d_constant

OT_STRING

CasADi::IpoptInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

jacobian_regularization_value

OT_REAL

CasADi::IpoptInternal

limited_memory_max_history

OT_INTEGER

CasADi::IpoptInternal

limited_memory_max_skipping

OT_INTEGER

CasADi::IpoptInternal

linear_scaling_on_demand

OT_STRING

CasADi::IpoptInternal

linear_solver

OT_STRING

CasADi::IpoptInternal

linear_system_scaling

OT_STRING

CasADi::IpoptInternal

ma27_la_init_factor

OT_REAL

CasADi::IpoptInternal

ma27_liw_init_factor

OT_REAL

CasADi::IpoptInternal

ma27_meminc_factor

OT_REAL

CasADi::IpoptInternal

ma27_pivtol

OT_REAL

CasADi::IpoptInternal

ma27_pivtolmax

OT_REAL

CasADi::IpoptInternal

ma57_automatic_scaling

OT_STRING

CasADi::IpoptInternal

ma57_block_size

OT_INTEGER

CasADi::IpoptInternal

ma57_node_amalgamation

OT_INTEGER

CasADi::IpoptInternal

ma57_pivot_order

OT_INTEGER

CasADi::IpoptInternal

ma57_pivtol

OT_REAL

CasADi::IpoptInternal

ma57_pivtolmax

OT_REAL

CasADi::IpoptInternal

ma57_pre_alloc

OT_REAL

CasADi::IpoptInternal

max_cpu_time

OT_REAL

CasADi::IpoptInternal

max_hessian_perturbation

OT_REAL

CasADi::IpoptInternal

max_iter

OT_INTEGER

CasADi::IpoptInternal

max_refinement_steps

OT_INTEGER

CasADi::IpoptInternal

max_soc

OT_INTEGER

CasADi::IpoptInternal

mehrotra_algorithm

OT_STRING

CasADi::IpoptInternal

min_hessian_perturbation

OT_REAL

CasADi::IpoptInternal

min_refinement_steps

OT_INTEGER

CasADi::IpoptInternal

mu_init

OT_REAL

CasADi::IpoptInternal

mu_linear_decrease_factor

OT_REAL

CasADi::IpoptInternal

mu_max

OT_REAL

CasADi::IpoptInternal

mu_max_fact

OT_REAL

CasADi::IpoptInternal

mu_min

OT_REAL

CasADi::IpoptInternal

mu_oracle

OT_STRING

CasADi::IpoptInternal

mu_strategy

OT_STRING

CasADi::IpoptInternal

mu_superlinear_decrease_power

OT_REAL

CasADi::IpoptInternal

mu_target

OT_REAL

CasADi::IpoptInternal

mumps_mem_percent

OT_INTEGER

CasADi::IpoptInternal

mumps_permuting_scaling

OT_INTEGER

CasADi::IpoptInternal

mumps_pivot_order

OT_INTEGER

CasADi::IpoptInternal

mumps_pivtol

OT_REAL

CasADi::IpoptInternal

mumps_pivtolmax

OT_REAL

CasADi::IpoptInternal

mumps_scaling

OT_INTEGER

CasADi::IpoptInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

nlp_lower_bound_inf

OT_REAL

CasADi::IpoptInternal

nlp_upper_bound_inf

OT_REAL

CasADi::IpoptInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

option_file_name

OT_STRING

CasADi::IpoptInternal

output_file

OT_STRING

CasADi::IpoptInternal

pardiso_matching_strategy

OT_STRING

CasADi::IpoptInternal

pardiso_msglvl

OT_INTEGER

CasADi::IpoptInternal

pardiso_out_of_core_power

OT_INTEGER

CasADi::IpoptInternal

pass_nonlinear_variables

OT_BOOLEAN

true

CasADi::IpoptInternal

perturb_dec_fact

OT_REAL

CasADi::IpoptInternal

perturb_inc_fact

OT_REAL

CasADi::IpoptInternal

perturb_inc_fact_first

OT_REAL

CasADi::IpoptInternal

point_perturbation_radius

OT_REAL

CasADi::IpoptInternal

print_level

OT_INTEGER

CasADi::IpoptInternal

print_options_documentation

OT_STRING

CasADi::IpoptInternal

print_time

OT_BOOLEAN

true

print information about execution time

CasADi::IpoptInternal

print_user_options

OT_STRING

CasADi::IpoptInternal

quality_function_max_section_steps

OT_INTEGER

CasADi::IpoptInternal

recalc_y

OT_STRING

CasADi::IpoptInternal

recalc_y_feas_tol

OT_REAL

CasADi::IpoptInternal

required_infeasibility_reduction

OT_REAL

CasADi::IpoptInternal

slack_bound_frac

OT_REAL

CasADi::IpoptInternal

slack_bound_push

OT_REAL

CasADi::IpoptInternal

soft_resto_pderror_reduction_factor

OT_REAL

CasADi::IpoptInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

start_with_resto

OT_STRING

CasADi::IpoptInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

tol

OT_REAL

CasADi::IpoptInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal

warm_start_bound_frac

OT_REAL

CasADi::IpoptInternal

warm_start_bound_push

OT_REAL

CasADi::IpoptInternal

warm_start_init_point

OT_STRING

CasADi::IpoptInternal

warm_start_mult_bound_push

OT_REAL

CasADi::IpoptInternal

warm_start_mult_init_max

OT_REAL

CasADi::IpoptInternal

warm_start_slack_bound_frac

OT_REAL

CasADi::IpoptInternal

warm_start_slack_bound_push

OT_REAL

CasADi::IpoptInternal

watchdog_shortened_iter_trigger

OT_INTEGER

CasADi::IpoptInternal

watchdog_trial_iter_max

OT_INTEGER

CasADi::IpoptInternal

wsmp_num_threads

OT_INTEGER

CasADi::IpoptInternal

wsmp_ordering_option

OT_INTEGER

CasADi::IpoptInternal

wsmp_pivtol

OT_REAL

CasADi::IpoptInternal

wsmp_pivtolmax

OT_REAL

CasADi::IpoptInternal

wsmp_scaling

OT_INTEGER

CasADi::IpoptInternal

wsmp_singularity_threshold

OT_REAL

CasADi::IpoptInternal List of available options

Id

Used in

eval_f

CasADi::IpoptInternal

eval_g

CasADi::IpoptInternal

eval_grad_f

CasADi::IpoptInternal

eval_jac_g

CasADi::IpoptInternal

eval_x

CasADi::IpoptInternal List of available monitors

Id

Used in

return_status

CasADi::IpoptInternal List of available stats

C++ includes: ipopt_internal.hpp ";

%feature("docstring")  CasADi::IpoptInternal::IpoptInternal "CasADi::IpoptInternal::IpoptInternal(const FX &F, const FX &G, const
FX &H, const FX &J, const FX &GF) ";

%feature("docstring")  CasADi::IpoptInternal::~IpoptInternal "CasADi::IpoptInternal::~IpoptInternal() ";

%feature("docstring")  CasADi::IpoptInternal::clone "virtual
IpoptInternal* CasADi::IpoptInternal::clone() const

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::IpoptInternal::init "void
CasADi::IpoptInternal::init()

Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but
before evaluating. If passed to another class (in the constructor),
this class should invoke this function when initialized. ";

%feature("docstring")  CasADi::IpoptInternal::evaluate "void
CasADi::IpoptInternal::evaluate(int nfdir, int nadir)

Evaluate. ";

%feature("docstring")  CasADi::IpoptInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::IpoptInternal::jacobian "virtual FX
CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int >
> &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::IpoptInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::IpoptInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::IpoptInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::IpoptInternal::inputStruct "FunctionIO
& CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::IpoptInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::IpoptInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::IpoptInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::IpoptInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")  CasADi::IpoptInternal::unidirectionalColoring "CRSSparsity CasADi::FXInternal::unidirectionalColoring(const
CRSSparsity &A, const CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::IpoptInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::IpoptInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::IpoptInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::IpoptInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::IpoptInternal::input "Matrix< double >
& CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::IpoptInternal::input "const Matrix<
double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::IpoptInternal::output "Matrix< double
> & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::IpoptInternal::output "const Matrix<
double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::IpoptInternal::fwdSeed "Matrix< double
> & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::IpoptInternal::fwdSeed "const Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::IpoptInternal::fwdSens "Matrix< double
> & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::IpoptInternal::fwdSens "const Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::IpoptInternal::adjSeed "Matrix< double
> & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::IpoptInternal::adjSeed "const Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::IpoptInternal::adjSens "Matrix< double
> & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::IpoptInternal::adjSens "const Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::IpoptInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::IpoptInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::IpoptInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::IpoptInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::IpoptInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::IpoptInternal::getStat "GenericType
CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::IpoptInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::IpoptInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::IpoptInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::IpoptInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::IpoptInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::IpoptInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::IpoptInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::IpoptInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::IpoptInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::IpoptInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::IpoptInternal::getOption "GenericType
CasADi::OptionsFunctionalityNode::getOption(const std::string &str)
const

get an option value ";

%feature("docstring")  CasADi::IpoptInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::IpoptInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::IpoptInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::IpoptInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::IpoptInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1Interfaces_1_1IpoptQPInternal.xml
%feature("docstring") CasADi::Interfaces::IpoptQPInternal "

Internal class for IpoptQPSolver.

Name

Description

QP_H

The square matrix H: sparse, (nx x nx). Only the lower triangular part
is actually used. The matrix is assumed to be symmetrical.

QP_G

The column vector G: dense, (nx x 1)

QP_A

The matrix A: sparse, (nc x nx) - product with x must be dense.

QP_LBA

dense, (nc x 1)

QP_UBA

dense, (nc x 1)

QP_LBX

dense, (nx x 1)

QP_UBX

dense, (nx x 1)

QP_X_INIT

dense, (nx x 1)

QP_LAMBDA_INIT

Input scheme: CasADi::QPInput (QP_NUM_IN = 9) Name

Description

QP_X_OPT

The optimal value of x as calculated with evaluate()

QP_COST

The value of the cost function as calculated with evaluate()

QP_LAMBDA_OPT

QP_LAMBDA_LBX

QP_LAMBDA_UBX

Output scheme: CasADi::QPOutput (QP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

accept_every_trial_step

OT_STRING

CasADi::Interfaces::IpoptQPInternal

acceptable_compl_inf_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

acceptable_constr_viol_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

acceptable_dual_inf_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

acceptable_iter

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

acceptable_obj_change_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

acceptable_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

alpha_for_y

OT_STRING

CasADi::Interfaces::IpoptQPInternal

alpha_for_y_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

barrier_tol_factor

OT_REAL

CasADi::Interfaces::IpoptQPInternal

bound_frac

OT_REAL

CasADi::Interfaces::IpoptQPInternal

bound_mult_init_method

OT_STRING

CasADi::Interfaces::IpoptQPInternal

bound_mult_init_val

OT_REAL

CasADi::Interfaces::IpoptQPInternal

bound_mult_reset_threshold

OT_REAL

CasADi::Interfaces::IpoptQPInternal

bound_push

OT_REAL

CasADi::Interfaces::IpoptQPInternal

bound_relax_factor

OT_REAL

CasADi::Interfaces::IpoptQPInternal

check_derivatives_for_naninf

OT_STRING

CasADi::Interfaces::IpoptQPInternal

compl_inf_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

constr_mult_init_max

OT_REAL

CasADi::Interfaces::IpoptQPInternal

constr_mult_reset_threshold

OT_REAL

CasADi::Interfaces::IpoptQPInternal

constr_viol_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

convex

OT_BOOLEAN

false

Specify true if you can guarantee that H will always be positive
definite

CasADi::QPSolverInternal

corrector_type

OT_STRING

CasADi::Interfaces::IpoptQPInternal

derivative_test

OT_STRING

CasADi::Interfaces::IpoptQPInternal

derivative_test_perturbation

OT_REAL

CasADi::Interfaces::IpoptQPInternal

derivative_test_print_all

OT_STRING

CasADi::Interfaces::IpoptQPInternal

derivative_test_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

diverging_iterates_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

dual_inf_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

evaluate_orig_obj_at_resto_trial

OT_STRING

CasADi::Interfaces::IpoptQPInternal

expect_infeasible_problem

OT_STRING

CasADi::Interfaces::IpoptQPInternal

expect_infeasible_problem_ctol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

expect_infeasible_problem_ytol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

file_print_level

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

first_hessian_perturbation

OT_REAL

CasADi::Interfaces::IpoptQPInternal

fixed_mu_oracle

OT_STRING

CasADi::Interfaces::IpoptQPInternal

fixed_variable_treatment

OT_STRING

CasADi::Interfaces::IpoptQPInternal

hessian_approximation

OT_STRING

CasADi::Interfaces::IpoptQPInternal

honor_original_bounds

OT_STRING

CasADi::Interfaces::IpoptQPInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

jacobian_regularization_value

OT_REAL

CasADi::Interfaces::IpoptQPInternal

limited_memory_max_history

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

limited_memory_max_skipping

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

linear_scaling_on_demand

OT_STRING

CasADi::Interfaces::IpoptQPInternal

linear_solver

OT_STRING

CasADi::Interfaces::IpoptQPInternal

linear_system_scaling

OT_STRING

CasADi::Interfaces::IpoptQPInternal

ma27_la_init_factor

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ma27_liw_init_factor

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ma27_meminc_factor

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ma27_pivtol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ma27_pivtolmax

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ma57_automatic_scaling

OT_STRING

CasADi::Interfaces::IpoptQPInternal

ma57_block_size

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

ma57_node_amalgamation

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

ma57_pivot_order

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

ma57_pivtol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ma57_pivtolmax

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ma57_pre_alloc

OT_REAL

CasADi::Interfaces::IpoptQPInternal

max_cpu_time

OT_REAL

CasADi::Interfaces::IpoptQPInternal

max_hessian_perturbation

OT_REAL

CasADi::Interfaces::IpoptQPInternal

max_iter

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

max_refinement_steps

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

max_soc

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

mehrotra_algorithm

OT_STRING

CasADi::Interfaces::IpoptQPInternal

min_hessian_perturbation

OT_REAL

CasADi::Interfaces::IpoptQPInternal

min_refinement_steps

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

mu_init

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mu_linear_decrease_factor

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mu_max

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mu_max_fact

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mu_min

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mu_oracle

OT_STRING

CasADi::Interfaces::IpoptQPInternal

mu_strategy

OT_STRING

CasADi::Interfaces::IpoptQPInternal

mu_superlinear_decrease_power

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mu_target

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mumps_mem_percent

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

mumps_permuting_scaling

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

mumps_pivot_order

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

mumps_pivtol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mumps_pivtolmax

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mumps_scaling

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

nlp_lower_bound_inf

OT_REAL

CasADi::Interfaces::IpoptQPInternal

nlp_upper_bound_inf

OT_REAL

CasADi::Interfaces::IpoptQPInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

option_file_name

OT_STRING

CasADi::Interfaces::IpoptQPInternal

output_file

OT_STRING

CasADi::Interfaces::IpoptQPInternal

pardiso_matching_strategy

OT_STRING

CasADi::Interfaces::IpoptQPInternal

pardiso_msglvl

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

pardiso_out_of_core_power

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

perturb_dec_fact

OT_REAL

CasADi::Interfaces::IpoptQPInternal

perturb_inc_fact

OT_REAL

CasADi::Interfaces::IpoptQPInternal

perturb_inc_fact_first

OT_REAL

CasADi::Interfaces::IpoptQPInternal

point_perturbation_radius

OT_REAL

CasADi::Interfaces::IpoptQPInternal

print_level

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

print_options_documentation

OT_STRING

CasADi::Interfaces::IpoptQPInternal

print_user_options

OT_STRING

CasADi::Interfaces::IpoptQPInternal

quality_function_max_section_steps

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

recalc_y

OT_STRING

CasADi::Interfaces::IpoptQPInternal

recalc_y_feas_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

required_infeasibility_reduction

OT_REAL

CasADi::Interfaces::IpoptQPInternal

slack_bound_frac

OT_REAL

CasADi::Interfaces::IpoptQPInternal

slack_bound_push

OT_REAL

CasADi::Interfaces::IpoptQPInternal

soft_resto_pderror_reduction_factor

OT_REAL

CasADi::Interfaces::IpoptQPInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

start_with_resto

OT_STRING

CasADi::Interfaces::IpoptQPInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

trans

OT_BOOLEAN

false

CasADi::QPSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal

warm_start_bound_frac

OT_REAL

CasADi::Interfaces::IpoptQPInternal

warm_start_bound_push

OT_REAL

CasADi::Interfaces::IpoptQPInternal

warm_start_init_point

OT_STRING

CasADi::Interfaces::IpoptQPInternal

warm_start_mult_bound_push

OT_REAL

CasADi::Interfaces::IpoptQPInternal

warm_start_mult_init_max

OT_REAL

CasADi::Interfaces::IpoptQPInternal

warm_start_slack_bound_frac

OT_REAL

CasADi::Interfaces::IpoptQPInternal

warm_start_slack_bound_push

OT_REAL

CasADi::Interfaces::IpoptQPInternal

watchdog_shortened_iter_trigger

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

watchdog_trial_iter_max

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

wsmp_num_threads

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

wsmp_ordering_option

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

wsmp_pivtol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

wsmp_pivtolmax

OT_REAL

CasADi::Interfaces::IpoptQPInternal

wsmp_scaling

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

wsmp_singularity_threshold

OT_REAL

CasADi::Interfaces::IpoptQPInternal List of available options

C++ includes: ipopt_qp_internal.hpp ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::IpoptQPInternal "CasADi::Interfaces::IpoptQPInternal::IpoptQPInternal()

Constructor. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::clone "IpoptQPInternal * CasADi::Interfaces::IpoptQPInternal::clone() const

Clone. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::IpoptQPInternal "CasADi::Interfaces::IpoptQPInternal::IpoptQPInternal(const CRSSparsity
&H, const CRSSparsity &G, const CRSSparsity &A)

Create a new Solver. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::~IpoptQPInternal "CasADi::Interfaces::IpoptQPInternal::~IpoptQPInternal()

Destructor. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::init "void CasADi::Interfaces::IpoptQPInternal::init()

Initialize. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::evaluate "void CasADi::Interfaces::IpoptQPInternal::evaluate(int nfdir, int
nadir)

Evaluate. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::solve "void CasADi::QPSolverInternal::solve() ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::jacobian "virtual FX CasADi::FXInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::hessian "FX CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::inputStruct "FunctionIO &
CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::inputStruct "const FunctionIO &
CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::outputStruct "FunctionIO &
CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::outputStruct "const FunctionIO &
CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::print "virtual void CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::unidirectionalColoring "CRSSparsity CasADi::FXInternal::unidirectionalColoring(const
CRSSparsity &A, const CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::isInit "bool CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::verbose "bool CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::monitored
"bool CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::input "Matrix< double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::input "const Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::output "Matrix< double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::output "const Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::fwdSeed "Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::fwdSeed "const Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int
dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::fwdSens "Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::fwdSens "const Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::adjSeed "Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::adjSeed "const Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int
dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::adjSens "Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::adjSens "const Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::getStats "const Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::getJacSparsity "CRSSparsity
CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::jacSparsity "CRSSparsity &
CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::symbolicInput "std::vector< MX >
CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::setOption
"void CasADi::OptionsFunctionalityNode::setOption(const std::string
&str, const GenericType &val)

set an option ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::setOption
"void CasADi::OptionsFunctionalityNode::setOption(const Dictionary
&dict)

set a set of options ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::hasOption
"bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::getOption
"GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::repr "virtual void CasADi::OptionsFunctionalityNode::repr(std::ostream
&stream) const

Print representation. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::dictionary
"const Dictionary & CasADi::OptionsFunctionalityNode::dictionary()
const

Get the dictionary. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPInternal::getCount "int CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1Interfaces_1_1IpoptQPSolver.xml
%feature("docstring") CasADi::Interfaces::IpoptQPSolver "

IPOPT QP Solver for quadratic programming.

min x'Hx + G'x

subject to LBA <= Ax <= UBA LBX <= x <= UBX

nx: number of decision variables (x) nc: number of constraints (A)

Name

Description

QP_H

The square matrix H: sparse, (nx x nx). Only the lower triangular part
is actually used. The matrix is assumed to be symmetrical.

QP_G

The column vector G: dense, (nx x 1)

QP_A

The matrix A: sparse, (nc x nx) - product with x must be dense.

QP_LBA

dense, (nc x 1)

QP_UBA

dense, (nc x 1)

QP_LBX

dense, (nx x 1)

QP_UBX

dense, (nx x 1)

QP_X_INIT

dense, (nx x 1)

QP_LAMBDA_INIT

Input scheme: CasADi::QPInput (QP_NUM_IN = 9) Name

Description

QP_X_OPT

The optimal value of x as calculated with evaluate()

QP_COST

The value of the cost function as calculated with evaluate()

QP_LAMBDA_OPT

QP_LAMBDA_LBX

QP_LAMBDA_UBX

Output scheme: CasADi::QPOutput (QP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

accept_every_trial_step

OT_STRING

CasADi::Interfaces::IpoptQPInternal

acceptable_compl_inf_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

acceptable_constr_viol_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

acceptable_dual_inf_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

acceptable_iter

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

acceptable_obj_change_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

acceptable_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

alpha_for_y

OT_STRING

CasADi::Interfaces::IpoptQPInternal

alpha_for_y_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

barrier_tol_factor

OT_REAL

CasADi::Interfaces::IpoptQPInternal

bound_frac

OT_REAL

CasADi::Interfaces::IpoptQPInternal

bound_mult_init_method

OT_STRING

CasADi::Interfaces::IpoptQPInternal

bound_mult_init_val

OT_REAL

CasADi::Interfaces::IpoptQPInternal

bound_mult_reset_threshold

OT_REAL

CasADi::Interfaces::IpoptQPInternal

bound_push

OT_REAL

CasADi::Interfaces::IpoptQPInternal

bound_relax_factor

OT_REAL

CasADi::Interfaces::IpoptQPInternal

check_derivatives_for_naninf

OT_STRING

CasADi::Interfaces::IpoptQPInternal

compl_inf_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

constr_mult_init_max

OT_REAL

CasADi::Interfaces::IpoptQPInternal

constr_mult_reset_threshold

OT_REAL

CasADi::Interfaces::IpoptQPInternal

constr_viol_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

convex

OT_BOOLEAN

false

Specify true if you can guarantee that H will always be positive
definite

CasADi::QPSolverInternal

corrector_type

OT_STRING

CasADi::Interfaces::IpoptQPInternal

derivative_test

OT_STRING

CasADi::Interfaces::IpoptQPInternal

derivative_test_perturbation

OT_REAL

CasADi::Interfaces::IpoptQPInternal

derivative_test_print_all

OT_STRING

CasADi::Interfaces::IpoptQPInternal

derivative_test_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

diverging_iterates_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

dual_inf_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

evaluate_orig_obj_at_resto_trial

OT_STRING

CasADi::Interfaces::IpoptQPInternal

expect_infeasible_problem

OT_STRING

CasADi::Interfaces::IpoptQPInternal

expect_infeasible_problem_ctol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

expect_infeasible_problem_ytol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

file_print_level

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

first_hessian_perturbation

OT_REAL

CasADi::Interfaces::IpoptQPInternal

fixed_mu_oracle

OT_STRING

CasADi::Interfaces::IpoptQPInternal

fixed_variable_treatment

OT_STRING

CasADi::Interfaces::IpoptQPInternal

hessian_approximation

OT_STRING

CasADi::Interfaces::IpoptQPInternal

honor_original_bounds

OT_STRING

CasADi::Interfaces::IpoptQPInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

jacobian_regularization_value

OT_REAL

CasADi::Interfaces::IpoptQPInternal

limited_memory_max_history

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

limited_memory_max_skipping

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

linear_scaling_on_demand

OT_STRING

CasADi::Interfaces::IpoptQPInternal

linear_solver

OT_STRING

CasADi::Interfaces::IpoptQPInternal

linear_system_scaling

OT_STRING

CasADi::Interfaces::IpoptQPInternal

ma27_la_init_factor

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ma27_liw_init_factor

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ma27_meminc_factor

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ma27_pivtol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ma27_pivtolmax

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ma57_automatic_scaling

OT_STRING

CasADi::Interfaces::IpoptQPInternal

ma57_block_size

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

ma57_node_amalgamation

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

ma57_pivot_order

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

ma57_pivtol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ma57_pivtolmax

OT_REAL

CasADi::Interfaces::IpoptQPInternal

ma57_pre_alloc

OT_REAL

CasADi::Interfaces::IpoptQPInternal

max_cpu_time

OT_REAL

CasADi::Interfaces::IpoptQPInternal

max_hessian_perturbation

OT_REAL

CasADi::Interfaces::IpoptQPInternal

max_iter

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

max_refinement_steps

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

max_soc

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

mehrotra_algorithm

OT_STRING

CasADi::Interfaces::IpoptQPInternal

min_hessian_perturbation

OT_REAL

CasADi::Interfaces::IpoptQPInternal

min_refinement_steps

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

mu_init

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mu_linear_decrease_factor

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mu_max

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mu_max_fact

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mu_min

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mu_oracle

OT_STRING

CasADi::Interfaces::IpoptQPInternal

mu_strategy

OT_STRING

CasADi::Interfaces::IpoptQPInternal

mu_superlinear_decrease_power

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mu_target

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mumps_mem_percent

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

mumps_permuting_scaling

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

mumps_pivot_order

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

mumps_pivtol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mumps_pivtolmax

OT_REAL

CasADi::Interfaces::IpoptQPInternal

mumps_scaling

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

nlp_lower_bound_inf

OT_REAL

CasADi::Interfaces::IpoptQPInternal

nlp_upper_bound_inf

OT_REAL

CasADi::Interfaces::IpoptQPInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

option_file_name

OT_STRING

CasADi::Interfaces::IpoptQPInternal

output_file

OT_STRING

CasADi::Interfaces::IpoptQPInternal

pardiso_matching_strategy

OT_STRING

CasADi::Interfaces::IpoptQPInternal

pardiso_msglvl

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

pardiso_out_of_core_power

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

perturb_dec_fact

OT_REAL

CasADi::Interfaces::IpoptQPInternal

perturb_inc_fact

OT_REAL

CasADi::Interfaces::IpoptQPInternal

perturb_inc_fact_first

OT_REAL

CasADi::Interfaces::IpoptQPInternal

point_perturbation_radius

OT_REAL

CasADi::Interfaces::IpoptQPInternal

print_level

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

print_options_documentation

OT_STRING

CasADi::Interfaces::IpoptQPInternal

print_user_options

OT_STRING

CasADi::Interfaces::IpoptQPInternal

quality_function_max_section_steps

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

recalc_y

OT_STRING

CasADi::Interfaces::IpoptQPInternal

recalc_y_feas_tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

required_infeasibility_reduction

OT_REAL

CasADi::Interfaces::IpoptQPInternal

slack_bound_frac

OT_REAL

CasADi::Interfaces::IpoptQPInternal

slack_bound_push

OT_REAL

CasADi::Interfaces::IpoptQPInternal

soft_resto_pderror_reduction_factor

OT_REAL

CasADi::Interfaces::IpoptQPInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

start_with_resto

OT_STRING

CasADi::Interfaces::IpoptQPInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

tol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

trans

OT_BOOLEAN

false

CasADi::QPSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal

warm_start_bound_frac

OT_REAL

CasADi::Interfaces::IpoptQPInternal

warm_start_bound_push

OT_REAL

CasADi::Interfaces::IpoptQPInternal

warm_start_init_point

OT_STRING

CasADi::Interfaces::IpoptQPInternal

warm_start_mult_bound_push

OT_REAL

CasADi::Interfaces::IpoptQPInternal

warm_start_mult_init_max

OT_REAL

CasADi::Interfaces::IpoptQPInternal

warm_start_slack_bound_frac

OT_REAL

CasADi::Interfaces::IpoptQPInternal

warm_start_slack_bound_push

OT_REAL

CasADi::Interfaces::IpoptQPInternal

watchdog_shortened_iter_trigger

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

watchdog_trial_iter_max

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

wsmp_num_threads

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

wsmp_ordering_option

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

wsmp_pivtol

OT_REAL

CasADi::Interfaces::IpoptQPInternal

wsmp_pivtolmax

OT_REAL

CasADi::Interfaces::IpoptQPInternal

wsmp_scaling

OT_INTEGER

CasADi::Interfaces::IpoptQPInternal

wsmp_singularity_threshold

OT_REAL

CasADi::Interfaces::IpoptQPInternal List of available options

C++ includes: ipopt_qp_solver.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::setInput "void CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::setOutput "void CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::setFwdSeed "void CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::setFwdSens "void CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::setAdjSeed "void CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::setAdjSens "void CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::getInput "void CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::getOutput "void CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::getFwdSeed "void CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::getFwdSens "void CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::getAdjSeed "void CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::getAdjSens "void CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::setOption "void CasADi::OptionsFunctionality::setOption(const std::string &str,
const GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::setOption "void CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::hasSetOption
"bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::printOptions
"void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::copyOptions
"void CasADi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::dictionary "const Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::makeUnique "void CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::makeUnique "void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")
CasADi::Interfaces::IpoptQPSolver::IpoptQPSolver "CasADi::Interfaces::IpoptQPSolver::IpoptQPSolver()

Default constructor. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPSolver::IpoptQPSolver "CasADi::Interfaces::IpoptQPSolver::IpoptQPSolver(const CRSSparsity &H,
const CRSSparsity &G, const CRSSparsity &A) ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::checkNode "bool CasADi::Interfaces::IpoptQPSolver::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::getNumInputs
"int CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPSolver::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::setNumInputs
"void CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")
CasADi::Interfaces::IpoptQPSolver::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::evaluate_old
"void CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::evaluate "void CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::jacobian "FX CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::jacobian "FX CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::call "vector< MX > CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::call "std::vector<MX> CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::jacSparsity
"CRSSparsity & CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPSolver::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::input "const Matrix< double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::input "Matrix< double > & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::output "const Matrix< double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::output "Matrix< double > & CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::fwdSeed "const Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::fwdSeed "Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::fwdSens "const Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::fwdSens "Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::adjSeed "const Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::adjSeed "Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::adjSens "const Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::adjSens "Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::addMonitor "void CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")
CasADi::Interfaces::IpoptQPSolver::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::getStats "const Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::getStat "GenericType CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")
CasADi::Interfaces::IpoptQPSolver::symbolicInput "std::vector< MX >
CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::clone "SharedObject CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::assignNode "void CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")
CasADi::Interfaces::IpoptQPSolver::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::getCount "int CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::isInit "bool CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::Interfaces::IpoptQPSolver::isNull "bool CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")
CasADi::Interfaces::IpoptQPSolver::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")
CasADi::Interfaces::IpoptQPSolver::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1IpoptSolver.xml
%feature("docstring") CasADi::IpoptSolver "

interface to IPOPT NLP solver

Name

Description

NLP_X_INIT

Decision variables initial guess.

NLP_LBX

Decision variables lower bound.

NLP_UBX

Decision variables upper bound.

NLP_LBG

Constraints lower bound.

NLP_UBG

Constraints upper bound.

NLP_LAMBDA_INIT

Lambda multipliers initial guess.

NLP_P

Static parameters on which the objective and constraints might depend.
Input scheme: CasADi::NLPInput (NLP_NUM_IN = 7) Name

Description

NLP_X_OPT

Decision variables for optimal solution.

NLP_COST

Objective/cost function for optimal solution.

NLP_LAMBDA_OPT

Lambda multipliers function for optimal solution.

NLP_LAMBDA_LBX

Lower bound multipliers for optimal solution When in warm start mode,
this output will be used as input

NLP_LAMBDA_UBX

Upper bound multipliers for optimal solution When in warm start mode,
this output will be used as input Output scheme: CasADi::NLPOutput
(NLP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

accept_every_trial_step

OT_STRING

CasADi::IpoptInternal

acceptable_compl_inf_tol

OT_REAL

CasADi::IpoptInternal

acceptable_constr_viol_tol

OT_REAL

CasADi::IpoptInternal

acceptable_dual_inf_tol

OT_REAL

CasADi::IpoptInternal

acceptable_iter

OT_INTEGER

CasADi::IpoptInternal

acceptable_obj_change_tol

OT_REAL

CasADi::IpoptInternal

acceptable_tol

OT_REAL

CasADi::IpoptInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

alpha_for_y

OT_STRING

CasADi::IpoptInternal

alpha_for_y_tol

OT_REAL

CasADi::IpoptInternal

barrier_tol_factor

OT_REAL

CasADi::IpoptInternal

bound_frac

OT_REAL

CasADi::IpoptInternal

bound_mult_init_method

OT_STRING

CasADi::IpoptInternal

bound_mult_init_val

OT_REAL

CasADi::IpoptInternal

bound_mult_reset_threshold

OT_REAL

CasADi::IpoptInternal

bound_push

OT_REAL

CasADi::IpoptInternal

bound_relax_factor

OT_REAL

CasADi::IpoptInternal

check_derivatives_for_naninf

OT_STRING

CasADi::IpoptInternal

compl_inf_tol

OT_REAL

CasADi::IpoptInternal

constr_mult_init_max

OT_REAL

CasADi::IpoptInternal

constr_mult_reset_threshold

OT_REAL

CasADi::IpoptInternal

constr_viol_tol

OT_REAL

CasADi::IpoptInternal

corrector_type

OT_STRING

CasADi::IpoptInternal

derivative_test

OT_STRING

CasADi::IpoptInternal

derivative_test_perturbation

OT_REAL

CasADi::IpoptInternal

derivative_test_print_all

OT_STRING

CasADi::IpoptInternal

derivative_test_tol

OT_REAL

CasADi::IpoptInternal

diverging_iterates_tol

OT_REAL

CasADi::IpoptInternal

dual_inf_tol

OT_REAL

CasADi::IpoptInternal

evaluate_orig_obj_at_resto_trial

OT_STRING

CasADi::IpoptInternal

expect_infeasible_problem

OT_STRING

CasADi::IpoptInternal

expect_infeasible_problem_ctol

OT_REAL

CasADi::IpoptInternal

expect_infeasible_problem_ytol

OT_REAL

CasADi::IpoptInternal

file_print_level

OT_INTEGER

CasADi::IpoptInternal

first_hessian_perturbation

OT_REAL

CasADi::IpoptInternal

fixed_mu_oracle

OT_STRING

CasADi::IpoptInternal

fixed_variable_treatment

OT_STRING

CasADi::IpoptInternal

hessian_approximation

OT_STRING

CasADi::IpoptInternal

hessian_constant

OT_STRING

CasADi::IpoptInternal

honor_original_bounds

OT_STRING

CasADi::IpoptInternal

jac_c_constant

OT_STRING

CasADi::IpoptInternal

jac_d_constant

OT_STRING

CasADi::IpoptInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

jacobian_regularization_value

OT_REAL

CasADi::IpoptInternal

limited_memory_max_history

OT_INTEGER

CasADi::IpoptInternal

limited_memory_max_skipping

OT_INTEGER

CasADi::IpoptInternal

linear_scaling_on_demand

OT_STRING

CasADi::IpoptInternal

linear_solver

OT_STRING

CasADi::IpoptInternal

linear_system_scaling

OT_STRING

CasADi::IpoptInternal

ma27_la_init_factor

OT_REAL

CasADi::IpoptInternal

ma27_liw_init_factor

OT_REAL

CasADi::IpoptInternal

ma27_meminc_factor

OT_REAL

CasADi::IpoptInternal

ma27_pivtol

OT_REAL

CasADi::IpoptInternal

ma27_pivtolmax

OT_REAL

CasADi::IpoptInternal

ma57_automatic_scaling

OT_STRING

CasADi::IpoptInternal

ma57_block_size

OT_INTEGER

CasADi::IpoptInternal

ma57_node_amalgamation

OT_INTEGER

CasADi::IpoptInternal

ma57_pivot_order

OT_INTEGER

CasADi::IpoptInternal

ma57_pivtol

OT_REAL

CasADi::IpoptInternal

ma57_pivtolmax

OT_REAL

CasADi::IpoptInternal

ma57_pre_alloc

OT_REAL

CasADi::IpoptInternal

max_cpu_time

OT_REAL

CasADi::IpoptInternal

max_hessian_perturbation

OT_REAL

CasADi::IpoptInternal

max_iter

OT_INTEGER

CasADi::IpoptInternal

max_refinement_steps

OT_INTEGER

CasADi::IpoptInternal

max_soc

OT_INTEGER

CasADi::IpoptInternal

mehrotra_algorithm

OT_STRING

CasADi::IpoptInternal

min_hessian_perturbation

OT_REAL

CasADi::IpoptInternal

min_refinement_steps

OT_INTEGER

CasADi::IpoptInternal

mu_init

OT_REAL

CasADi::IpoptInternal

mu_linear_decrease_factor

OT_REAL

CasADi::IpoptInternal

mu_max

OT_REAL

CasADi::IpoptInternal

mu_max_fact

OT_REAL

CasADi::IpoptInternal

mu_min

OT_REAL

CasADi::IpoptInternal

mu_oracle

OT_STRING

CasADi::IpoptInternal

mu_strategy

OT_STRING

CasADi::IpoptInternal

mu_superlinear_decrease_power

OT_REAL

CasADi::IpoptInternal

mu_target

OT_REAL

CasADi::IpoptInternal

mumps_mem_percent

OT_INTEGER

CasADi::IpoptInternal

mumps_permuting_scaling

OT_INTEGER

CasADi::IpoptInternal

mumps_pivot_order

OT_INTEGER

CasADi::IpoptInternal

mumps_pivtol

OT_REAL

CasADi::IpoptInternal

mumps_pivtolmax

OT_REAL

CasADi::IpoptInternal

mumps_scaling

OT_INTEGER

CasADi::IpoptInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

nlp_lower_bound_inf

OT_REAL

CasADi::IpoptInternal

nlp_upper_bound_inf

OT_REAL

CasADi::IpoptInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

option_file_name

OT_STRING

CasADi::IpoptInternal

output_file

OT_STRING

CasADi::IpoptInternal

pardiso_matching_strategy

OT_STRING

CasADi::IpoptInternal

pardiso_msglvl

OT_INTEGER

CasADi::IpoptInternal

pardiso_out_of_core_power

OT_INTEGER

CasADi::IpoptInternal

pass_nonlinear_variables

OT_BOOLEAN

true

CasADi::IpoptInternal

perturb_dec_fact

OT_REAL

CasADi::IpoptInternal

perturb_inc_fact

OT_REAL

CasADi::IpoptInternal

perturb_inc_fact_first

OT_REAL

CasADi::IpoptInternal

point_perturbation_radius

OT_REAL

CasADi::IpoptInternal

print_level

OT_INTEGER

CasADi::IpoptInternal

print_options_documentation

OT_STRING

CasADi::IpoptInternal

print_time

OT_BOOLEAN

true

print information about execution time

CasADi::IpoptInternal

print_user_options

OT_STRING

CasADi::IpoptInternal

quality_function_max_section_steps

OT_INTEGER

CasADi::IpoptInternal

recalc_y

OT_STRING

CasADi::IpoptInternal

recalc_y_feas_tol

OT_REAL

CasADi::IpoptInternal

required_infeasibility_reduction

OT_REAL

CasADi::IpoptInternal

slack_bound_frac

OT_REAL

CasADi::IpoptInternal

slack_bound_push

OT_REAL

CasADi::IpoptInternal

soft_resto_pderror_reduction_factor

OT_REAL

CasADi::IpoptInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

start_with_resto

OT_STRING

CasADi::IpoptInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

tol

OT_REAL

CasADi::IpoptInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal

warm_start_bound_frac

OT_REAL

CasADi::IpoptInternal

warm_start_bound_push

OT_REAL

CasADi::IpoptInternal

warm_start_init_point

OT_STRING

CasADi::IpoptInternal

warm_start_mult_bound_push

OT_REAL

CasADi::IpoptInternal

warm_start_mult_init_max

OT_REAL

CasADi::IpoptInternal

warm_start_slack_bound_frac

OT_REAL

CasADi::IpoptInternal

warm_start_slack_bound_push

OT_REAL

CasADi::IpoptInternal

watchdog_shortened_iter_trigger

OT_INTEGER

CasADi::IpoptInternal

watchdog_trial_iter_max

OT_INTEGER

CasADi::IpoptInternal

wsmp_num_threads

OT_INTEGER

CasADi::IpoptInternal

wsmp_ordering_option

OT_INTEGER

CasADi::IpoptInternal

wsmp_pivtol

OT_REAL

CasADi::IpoptInternal

wsmp_pivtolmax

OT_REAL

CasADi::IpoptInternal

wsmp_scaling

OT_INTEGER

CasADi::IpoptInternal

wsmp_singularity_threshold

OT_REAL

CasADi::IpoptInternal List of available options

Id

Used in

eval_f

CasADi::IpoptInternal

eval_g

CasADi::IpoptInternal

eval_grad_f

CasADi::IpoptInternal

eval_jac_g

CasADi::IpoptInternal

eval_x

CasADi::IpoptInternal List of available monitors

Id

Used in

return_status

CasADi::IpoptInternal List of available stats

C++ includes: ipopt_solver.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::IpoptSolver::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::IpoptSolver::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::IpoptSolver::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::IpoptSolver::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::IpoptSolver::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::IpoptSolver::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::IpoptSolver::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::IpoptSolver::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::IpoptSolver::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::IpoptSolver::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::IpoptSolver::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::IpoptSolver::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::IpoptSolver::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::IpoptSolver::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::IpoptSolver::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::IpoptSolver::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::IpoptSolver::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::IpoptSolver::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::IpoptSolver::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::IpoptSolver::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::IpoptSolver::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::IpoptSolver::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::IpoptSolver::IpoptSolver "CasADi::IpoptSolver::IpoptSolver()

Default constructor. ";

%feature("docstring")  CasADi::IpoptSolver::IpoptSolver "CasADi::IpoptSolver::IpoptSolver(const FX &F, const FX &G=FX(), const
FX &H=FX(), const FX &J=FX(), const FX &GF=FX())

Constuct an NLP with non-linear constraints and provided hessian
approximation. ";

%feature("docstring")  CasADi::IpoptSolver::checkNode "bool
CasADi::IpoptSolver::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::IpoptSolver::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::IpoptSolver::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::IpoptSolver::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::IpoptSolver::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::IpoptSolver::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::IpoptSolver::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::IpoptSolver::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::IpoptSolver::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::IpoptSolver::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::IpoptSolver::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::IpoptSolver::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::IpoptSolver::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::IpoptSolver::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::IpoptSolver::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::IpoptSolver::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::IpoptSolver::jacSparsity "CRSSparsity
& CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::IpoptSolver::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::IpoptSolver::input "const Matrix<
double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::IpoptSolver::input "Matrix< double > &
CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::IpoptSolver::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::IpoptSolver::output "Matrix< double >
& CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::IpoptSolver::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::IpoptSolver::fwdSeed "Matrix< double >
& CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::IpoptSolver::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::IpoptSolver::fwdSens "Matrix< double >
& CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::IpoptSolver::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::IpoptSolver::adjSeed "Matrix< double >
& CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::IpoptSolver::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::IpoptSolver::adjSens "Matrix< double >
& CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::IpoptSolver::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::IpoptSolver::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::IpoptSolver::getStats "const
Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::IpoptSolver::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::IpoptSolver::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::IpoptSolver::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::IpoptSolver::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::IpoptSolver::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::IpoptSolver::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::IpoptSolver::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::IpoptSolver::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::IpoptSolver::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::IpoptSolver::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::IpoptSolver::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::IpoptSolver::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::IpoptSolver::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::IpoptSolver::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::IpoptSolver::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::IpoptSolver::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1IpoptUserClass.xml
%feature("docstring") CasADi::IpoptUserClass "C++ includes:
ipopt_nlp.hpp ";

%feature("docstring")  CasADi::IpoptUserClass::IpoptUserClass "CasADi::IpoptUserClass::IpoptUserClass(IpoptInternal *ipoptInterface)
";

%feature("docstring")  CasADi::IpoptUserClass::~IpoptUserClass "CasADi::IpoptUserClass::~IpoptUserClass() ";

%feature("docstring")  CasADi::IpoptUserClass::get_nlp_info "bool
CasADi::IpoptUserClass::get_nlp_info(Index &n, Index &m, Index
&nnz_jac_g, Index &nnz_h_lag, IndexStyleEnum &index_style)

Method to return some info about the nlp ";

%feature("docstring")  CasADi::IpoptUserClass::get_bounds_info "bool
CasADi::IpoptUserClass::get_bounds_info(Index n, Number *x_l, Number
*x_u, Index m, Number *g_l, Number *g_u)

Method to return the bounds for my problem ";

%feature("docstring")  CasADi::IpoptUserClass::get_starting_point "bool CasADi::IpoptUserClass::get_starting_point(Index n, bool init_x,
Number *x, bool init_z, Number *z_L, Number *z_U, Index m, bool
init_lambda, Number *lambda)

Method to return the starting point for the algorithm ";

%feature("docstring")  CasADi::IpoptUserClass::eval_f "bool
CasADi::IpoptUserClass::eval_f(Index n, const Number *x, bool new_x,
Number &obj_value)

Method to return the objective value ";

%feature("docstring")  CasADi::IpoptUserClass::eval_grad_f "bool
CasADi::IpoptUserClass::eval_grad_f(Index n, const Number *x, bool
new_x, Number *grad_f)

Method to return the gradient of the objective ";

%feature("docstring")  CasADi::IpoptUserClass::eval_g "bool
CasADi::IpoptUserClass::eval_g(Index n, const Number *x, bool new_x,
Index m, Number *g)

Method to return the constraint residuals ";

%feature("docstring")  CasADi::IpoptUserClass::eval_jac_g "bool
CasADi::IpoptUserClass::eval_jac_g(Index n, const Number *x, bool
new_x, Index m, Index nele_jac, Index *iRow, Index *jCol, Number
*values)

Method to return: 1) The structure of the jacobian (if \"values\" is
NULL) 2) The values of the jacobian (if \"values\" is not NULL) ";

%feature("docstring")  CasADi::IpoptUserClass::eval_h "bool
CasADi::IpoptUserClass::eval_h(Index n, const Number *x, bool new_x,
Number obj_factor, Index m, const Number *lambda, bool new_lambda,
Index nele_hess, Index *iRow, Index *jCol, Number *values)

Method to return: 1) The structure of the hessian of the lagrangian
(if \"values\" is NULL) 2) The values of the hessian of the lagrangian
(if \"values\" is not NULL) ";

%feature("docstring")  CasADi::IpoptUserClass::finalize_solution "void CasADi::IpoptUserClass::finalize_solution(SolverReturn status,
Index n, const Number *x, const Number *z_L, const Number *z_U, Index
m, const Number *g, const Number *lambda, Number obj_value, const
IpoptData *ip_data, IpoptCalculatedQuantities *ip_cq)

This method is called when the algorithm is complete so the TNLP can
store/write the solution ";

%feature("docstring")
CasADi::IpoptUserClass::get_number_of_nonlinear_variables "Index
CasADi::IpoptUserClass::get_number_of_nonlinear_variables()

Specify the number of variables that appear in the Hessian ";

%feature("docstring")
CasADi::IpoptUserClass::get_list_of_nonlinear_variables "bool
CasADi::IpoptUserClass::get_list_of_nonlinear_variables(Index
num_nonlin_vars, Index *pos_nonlin_vars)

Specify which variables that appear in the Hessian ";


// File: classCasADi_1_1Jacobian.xml
%feature("docstring") CasADi::Jacobian "

Jacobian class.

Universal Jacobian class, calculates the Jacobian of a function based
on AD forward or adjoint.

Options:  \"finite_differences\" false  \"ad_mode\" \"forward\",
\"adjoint\" or \"default\", i.e. forward if n_<=m_, otherwise adjoint
\"sparse\" false

Any CasADi::FX can be used to take the Jacobian of.

If the iind'th input argument has shape (m,n) and the oind'th output
argument has shape (k,l), the output of this Jacobian will be of shape
(k*l) x (m*n) .

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"default\"

\"forward\", \"adjoint\" or \"default\" (default meaning checking
both)

CasADi::JacobianInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: jacobian.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Jacobian::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::Jacobian::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::Jacobian::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::Jacobian::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::Jacobian::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::Jacobian::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Jacobian::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::Jacobian::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::Jacobian::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::Jacobian::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::Jacobian::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::Jacobian::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::Jacobian::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::Jacobian::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::Jacobian::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::Jacobian::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::Jacobian::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Jacobian::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Jacobian::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Jacobian::dictionary "const Dictionary
& CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::Jacobian::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::Jacobian::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::Jacobian::Jacobian "CasADi::Jacobian::Jacobian()

Default constructor. ";

%feature("docstring")  CasADi::Jacobian::Jacobian "CasADi::Jacobian::Jacobian(const FX &fcn, int iind=0, int oind=0)

Create a Jacobian. ";

%feature("docstring")  CasADi::Jacobian::Jacobian "CasADi::Jacobian::Jacobian(const FX &fcn, const std::vector<
std::pair< int, int > > &jblocks)

Create a set of Jacobians (new formulation) ";

%feature("docstring")  CasADi::Jacobian::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::Jacobian::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::Jacobian::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::Jacobian::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::Jacobian::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::Jacobian::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::Jacobian::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::Jacobian::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::Jacobian::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Jacobian::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Jacobian::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::Jacobian::call "std::vector<DMatrix>
CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::Jacobian::call "std::vector<SXMatrix>
CasADi::FX::call(const std::vector< SXMatrix > &x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::Jacobian::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::Jacobian::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::Jacobian::jacSparsity "CRSSparsity &
CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Jacobian::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Jacobian::checkNode "bool
CasADi::FX::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::Jacobian::input "const Matrix< double
> & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Jacobian::input "Matrix< double > &
CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Jacobian::output "const Matrix< double
> & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Jacobian::output "Matrix< double > &
CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::Jacobian::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::Jacobian::fwdSeed "Matrix< double > &
CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Jacobian::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Jacobian::fwdSens "Matrix< double > &
CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Jacobian::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Jacobian::adjSeed "Matrix< double > &
CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Jacobian::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Jacobian::adjSens "Matrix< double > &
CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Jacobian::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::Jacobian::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::Jacobian::getStats "const Dictionary &
CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Jacobian::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::Jacobian::symbolicInput "std::vector<
MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Jacobian::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::Jacobian::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::Jacobian::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::Jacobian::get "const SharedObjectNode
* CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::Jacobian::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::Jacobian::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Jacobian::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::Jacobian::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Jacobian::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::Jacobian::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::Jacobian::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::Jacobian::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::Jacobian::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::Jacobian::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1JacobianInternal.xml
%feature("docstring") CasADi::JacobianInternal "

Internal node class for Jacobian.

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"default\"

\"forward\", \"adjoint\" or \"default\" (default meaning checking
both)

CasADi::JacobianInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: jacobian_internal.hpp ";

%feature("docstring")  CasADi::JacobianInternal::JacobianInternal "CasADi::JacobianInternal::JacobianInternal(const FX &fcn, const
std::vector< std::pair< int, int > > &jblocks)

New constructor (not yet working) ";

%feature("docstring")  CasADi::JacobianInternal::clone "JacobianInternal * CasADi::JacobianInternal::clone() const

Clone. ";

%feature("docstring")  CasADi::JacobianInternal::deepCopyMembers "void CasADi::JacobianInternal::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::JacobianInternal::~JacobianInternal "CasADi::JacobianInternal::~JacobianInternal()

Destructor. ";

%feature("docstring")  CasADi::JacobianInternal::evaluate "void
CasADi::JacobianInternal::evaluate(int nfdir, int nadir)

Evaluate the jacobian. ";

%feature("docstring")  CasADi::JacobianInternal::init "void
CasADi::JacobianInternal::init()

Initialize. ";

%feature("docstring")  CasADi::JacobianInternal::evaluate_switch "void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::JacobianInternal::jacobian "virtual FX
CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int >
> &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::JacobianInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::JacobianInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::JacobianInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::JacobianInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::JacobianInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::JacobianInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::JacobianInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::JacobianInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::JacobianInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::JacobianInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::JacobianInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::JacobianInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::JacobianInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::JacobianInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::JacobianInternal::input "const Matrix<
double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::JacobianInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::JacobianInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::JacobianInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::JacobianInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::JacobianInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::JacobianInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::JacobianInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::JacobianInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::JacobianInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::JacobianInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::JacobianInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::JacobianInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::JacobianInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::JacobianInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::JacobianInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::JacobianInternal::getStat "GenericType
CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::JacobianInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::JacobianInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::JacobianInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::JacobianInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::JacobianInternal::getFullJacobian "void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::JacobianInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::JacobianInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::JacobianInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::JacobianInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::JacobianInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::JacobianInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::JacobianInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::JacobianInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::JacobianInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::JacobianInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1JacobianReference.xml
%feature("docstring") CasADi::JacobianReference "

Maps non-zero elements.

Joel Andersson

C++ includes: jacobian_reference.hpp ";

%feature("docstring")  CasADi::JacobianReference::JacobianReference "CasADi::JacobianReference::JacobianReference(const MX &output, int
iind)

Default constructor. ";

%feature("docstring")  CasADi::JacobianReference::clone "JacobianReference * CasADi::JacobianReference::clone() const

Clone function. ";

%feature("docstring")  CasADi::JacobianReference::~JacobianReference "virtual CasADi::JacobianReference::~JacobianReference()

Destructor. ";

%feature("docstring")  CasADi::JacobianReference::evaluate "void
CasADi::JacobianReference::evaluate(const DMatrixPtrV &input,
DMatrixPtrV &output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV
&fwdSens, const DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::JacobianReference::evaluateSX "void
CasADi::JacobianReference::evaluateSX(const SXMatrixPtrV &input,
SXMatrixPtrV &output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV
&fwdSens, const SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::JacobianReference::evaluateMX "void
CasADi::JacobianReference::evaluateMX(const MXPtrV &input, MXPtrV
&output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::JacobianReference::propagateSparsity "void CasADi::JacobianReference::propagateSparsity(const DMatrixPtrV
&input, DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::JacobianReference::print "void
CasADi::JacobianReference::print(std::ostream &stream, const
std::vector< std::string > &args) const

Print. ";

%feature("docstring")  CasADi::JacobianReference::isJacobian "virtual
bool CasADi::JacobianReference::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::JacobianReference::getFunctionInput "virtual int CasADi::JacobianReference::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::JacobianReference::getFunctionOutput "virtual int CasADi::JacobianReference::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::JacobianReference::getFunction "FX &
CasADi::JacobianReference::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::JacobianReference::deepCopyMembers "void CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::JacobianReference::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::JacobianReference::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::JacobianReference::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::JacobianReference::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::JacobianReference::getName "const
string & CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::JacobianReference::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::JacobianReference::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::JacobianReference::isMapping "virtual
bool CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::JacobianReference::isEvaluation "virtual bool CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::JacobianReference::isOutputNode "virtual bool CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::JacobianReference::isMultipleOutput "virtual bool CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::JacobianReference::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::JacobianReference::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::JacobianReference::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::JacobianReference::hasDep "virtual
bool CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::JacobianReference::getNumOutputs "virtual int CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::JacobianReference::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::JacobianReference::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::JacobianReference::isNonLinear "virtual bool CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::JacobianReference::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::JacobianReference::setDependencies "void CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::JacobianReference::setDependencies "void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::JacobianReference::setDependencies "void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2,
const MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::JacobianReference::setDependencies "void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::JacobianReference::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::JacobianReference::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::JacobianReference::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::JacobianReference::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::JacobianReference::isOperation "virtual bool CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::JacobianReference::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::JacobianReference::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::JacobianReference::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::JacobianReference::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::JacobianReference::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::JacobianReference::eval "virtual
Matrix<double> CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::JacobianReference::eval "virtual
Matrix<SX> CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::JacobianReference::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::JacobianReference::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::JacobianReference::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::JacobianReference::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1Sundials_1_1KinsolInternal.xml
%feature("docstring") CasADi::Sundials::KinsolInternal "

Id

Type

Default

Description

Used in

abstol

OT_REAL

1e-6

Stopping criterion tolerance

CasADi::ImplicitFunctionInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

constraints

OT_INTEGERVECTOR

None

CasADi::Sundials::KinsolInternal

exact_jacobian

OT_BOOLEAN

true

CasADi::Sundials::KinsolInternal

f_scale

OT_REALVECTOR

None

CasADi::Sundials::KinsolInternal

iterative_solver

OT_STRING

\"gmres\"

CasADi::Sundials::KinsolInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

linear_solver

OT_STRING

\"dense\"

CasADi::Sundials::KinsolInternal

linear_solver_creator

OT_LINEARSOLVER

GenericType()

User-defined linear solver class

CasADi::Sundials::KinsolInternal

linear_solver_options

OT_DICTIONARY

GenericType()

Options to be passed to the linear solver

CasADi::Sundials::KinsolInternal

lower_bandwidth

OT_INTEGER

None

CasADi::Sundials::KinsolInternal

max_krylov

OT_INTEGER

0

CasADi::Sundials::KinsolInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::Sundials::KinsolInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

strategy

OT_STRING

\"none\"

Globalization strategy (\"none\" or \"linesearch\")

CasADi::Sundials::KinsolInternal

u_scale

OT_REALVECTOR

None

CasADi::Sundials::KinsolInternal

upper_bandwidth

OT_INTEGER

None

CasADi::Sundials::KinsolInternal

use_preconditioner

OT_BOOLEAN

false

precondition an iterative solver

CasADi::Sundials::KinsolInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

Id

Used in

eval_djac

CasADi::Sundials::KinsolInternal

eval_f

CasADi::Sundials::KinsolInternal List of available monitors

C++ includes: kinsol_internal.hpp ";

%feature("docstring")
CasADi::Sundials::KinsolInternal::KinsolInternal "CasADi::Sundials::KinsolInternal::KinsolInternal(const FX &f, int
nrhs)

Constructor. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::clone "KinsolInternal * CasADi::Sundials::KinsolInternal::clone() const

Clone. ";

%feature("docstring")
CasADi::Sundials::KinsolInternal::~KinsolInternal "CasADi::Sundials::KinsolInternal::~KinsolInternal()

Destructor. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::init "void
CasADi::Sundials::KinsolInternal::init()

Initialize stage. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::evaluate "void CasADi::Sundials::KinsolInternal::evaluate(int nfdir, int nadir)

Evaluate. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::jac "KinsolSolver CasADi::Sundials::KinsolInternal::jac(int iind=0, int
oind=0)

Generate a linear solver for the sensitivity equations. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::jac "KinsolSolver CasADi::Sundials::KinsolInternal::jac(const std::vector<
int > iind, int oind=0)

Generate a linear solver for the sensitivity equations. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::setJacobian "void CasADi::Sundials::KinsolInternal::setJacobian(const FX &jac)

Set Jacobian. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::getJacobian "FX CasADi::Sundials::KinsolInternal::getJacobian()

Get Jacobian. ";

%feature("docstring")
CasADi::Sundials::KinsolInternal::setLinearSolver "void
CasADi::Sundials::KinsolInternal::setLinearSolver(const LinearSolver
&linsol)

Set linear solver. ";

%feature("docstring")
CasADi::Sundials::KinsolInternal::getLinearSolver "LinearSolver
CasADi::Sundials::KinsolInternal::getLinearSolver()

Get linear solver. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::func "void
CasADi::Sundials::KinsolInternal::func(N_Vector u, N_Vector fval)

Residual. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::djac "void
CasADi::Sundials::KinsolInternal::djac(int N, N_Vector u, N_Vector fu,
DlsMat J, N_Vector tmp1, N_Vector tmp2) ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::bjac "void
CasADi::Sundials::KinsolInternal::bjac(int N, int mupper, int mlower,
N_Vector u, N_Vector fu, DlsMat J, N_Vector tmp1, N_Vector tmp2) ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::jtimes "void
CasADi::Sundials::KinsolInternal::jtimes(N_Vector v, N_Vector Jv,
N_Vector u, int *new_u) ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::psetup "void
CasADi::Sundials::KinsolInternal::psetup(N_Vector u, N_Vector uscale,
N_Vector fval, N_Vector fscale, N_Vector tmp1, N_Vector tmp2) ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::psolve "void
CasADi::Sundials::KinsolInternal::psolve(N_Vector u, N_Vector uscale,
N_Vector fval, N_Vector fscale, N_Vector v, N_Vector tmp) ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::lsetup "void
CasADi::Sundials::KinsolInternal::lsetup(KINMem kin_mem) ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::lsolve "void
CasADi::Sundials::KinsolInternal::lsolve(KINMem kin_mem, N_Vector x,
N_Vector b, double *res_norm) ";

%feature("docstring")
CasADi::Sundials::KinsolInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::jacobian "virtual FX CasADi::FXInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")
CasADi::Sundials::KinsolInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")
CasADi::Sundials::KinsolInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::inputStruct "const FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::outputStruct
"FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::outputStruct
"const FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::print "virtual void CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::Sundials::KinsolInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::getPartition
"void CasADi::FXInternal::getPartition(const std::vector< std::pair<
int, int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::verbose "bool CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::monitored "bool CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::input "Matrix< double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::output "Matrix< double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::output "const Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::fwdSeed "Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::fwdSeed "const Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int
dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::fwdSens "Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::fwdSens "const Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::adjSeed "Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::adjSeed "const Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int
dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::adjSens "Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::adjSens "const Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::setNumInputs
"void CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::setNumOutputs
"void CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::getNumInputs
"int CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::getNumOutputs
"int CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::getStats "const Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::Sundials::KinsolInternal::getJacSparsity "CRSSparsity
CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Sundials::KinsolInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::symbolicInput
"std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")
CasADi::Sundials::KinsolInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::setOption "void CasADi::OptionsFunctionalityNode::setOption(const std::string
&str, const GenericType &val)

set an option ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::setOption "void CasADi::OptionsFunctionalityNode::setOption(const Dictionary
&dict)

set a set of options ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::hasSetOption
"bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::printOptions
"void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::repr "virtual void CasADi::OptionsFunctionalityNode::repr(std::ostream
&stream) const

Print representation. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::copyOptions "void CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::dictionary "const Dictionary & CasADi::OptionsFunctionalityNode::dictionary()
const

Get the dictionary. ";

%feature("docstring")
CasADi::Sundials::KinsolInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Sundials::KinsolInternal::getCount "int CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1Sundials_1_1KinsolSolver.xml
%feature("docstring") CasADi::Sundials::KinsolSolver "

Kinsol solver class.

You can provide an initial guess by setting output(0).  A good initial
guess may be needed to avoid errors like \"The linear solver's setup
function failed in an unrecoverable manner.\"

The constraints option expects an integer entry for each variable u:

0 then no constraint is imposed on u.  1 then ui will be constrained
to be u >= 0.0.  1 then ui will be constrained to be ui >= 0.0.  2
then ui will be constrained to be ui > 0.0.  2 then ui will be
constrained to be ui < 0.0.

See:   ImplicitFunction for more information

Id

Type

Default

Description

Used in

abstol

OT_REAL

1e-6

Stopping criterion tolerance

CasADi::ImplicitFunctionInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

constraints

OT_INTEGERVECTOR

None

CasADi::Sundials::KinsolInternal

exact_jacobian

OT_BOOLEAN

true

CasADi::Sundials::KinsolInternal

f_scale

OT_REALVECTOR

None

CasADi::Sundials::KinsolInternal

iterative_solver

OT_STRING

\"gmres\"

CasADi::Sundials::KinsolInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

linear_solver

OT_STRING

\"dense\"

CasADi::Sundials::KinsolInternal

linear_solver_creator

OT_LINEARSOLVER

GenericType()

User-defined linear solver class

CasADi::Sundials::KinsolInternal

linear_solver_options

OT_DICTIONARY

GenericType()

Options to be passed to the linear solver

CasADi::Sundials::KinsolInternal

lower_bandwidth

OT_INTEGER

None

CasADi::Sundials::KinsolInternal

max_krylov

OT_INTEGER

0

CasADi::Sundials::KinsolInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

pretype

OT_STRING

\"none\"

\"none\", \"left\", \"right\", \"both\"

CasADi::Sundials::KinsolInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

strategy

OT_STRING

\"none\"

Globalization strategy (\"none\" or \"linesearch\")

CasADi::Sundials::KinsolInternal

u_scale

OT_REALVECTOR

None

CasADi::Sundials::KinsolInternal

upper_bandwidth

OT_INTEGER

None

CasADi::Sundials::KinsolInternal

use_preconditioner

OT_BOOLEAN

false

precondition an iterative solver

CasADi::Sundials::KinsolInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

Id

Used in

eval_djac

CasADi::Sundials::KinsolInternal

eval_f

CasADi::Sundials::KinsolInternal List of available monitors

C++ includes: kinsol_solver.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Sundials::KinsolSolver::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::setOutput "void CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::setFwdSeed "void CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::setFwdSens "void CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::setAdjSeed "void CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::setAdjSens "void CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Sundials::KinsolSolver::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::getOutput "void CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::getFwdSeed "void CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::getFwdSens "void CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::getAdjSeed "void CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::getAdjSens "void CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::Sundials::KinsolSolver::setOption "void CasADi::OptionsFunctionality::setOption(const std::string &str,
const GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::setOption "void CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::hasSetOption "bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::printOptions "void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::copyOptions "void CasADi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::dictionary "const Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::makeUnique "void CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::makeUnique "void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::KinsolSolver "CasADi::Sundials::KinsolSolver::KinsolSolver()

Default constructor. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::KinsolSolver "CasADi::Sundials::KinsolSolver::KinsolSolver(const FX &f, int nrhs=1)

Create an KINSOL instance.

Parameters:
-----------

f:   SXFunction mapping from (n+1) inputs to 1 output ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::checkNode "bool CasADi::Sundials::KinsolSolver::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::jac "KinsolSolver CasADi::Sundials::KinsolSolver::jac(int iind=0, int
oind=0)

Generate a linear solver for the sensitivity equations. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::setLinearSolver
"void CasADi::Sundials::KinsolSolver::setLinearSolver(const
LinearSolver &linsol)

Set linear solver. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::getLinearSolver
"LinearSolver CasADi::Sundials::KinsolSolver::getLinearSolver()

Get linear solver. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::setJacobian "void CasADi::Sundials::KinsolSolver::setJacobian(const FX &jac)

Set Jacobian. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::getJacobian "FX CasADi::Sundials::KinsolSolver::getJacobian()

Get Jacobian. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::getNumInputs "int CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::getNumOutputs "int CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::setNumInputs "void CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::setNumOutputs "void CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::evaluate_old "void CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Sundials::KinsolSolver::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::call "vector<
MX > CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::call "std::vector<MX> CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::jacSparsity "CRSSparsity & CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::setJacSparsity
"void CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int
oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::input "const
Matrix< double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::input "Matrix<
double > & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::output "const
Matrix< double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::output "Matrix< double > & CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::fwdSeed "const
Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::fwdSeed "Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::fwdSens "const
Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::fwdSens "Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::adjSeed "const
Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::adjSeed "Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::adjSens "const
Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::adjSens "Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::addMonitor "void CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::removeMonitor "void CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::getStats "const Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::getStat "GenericType CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::Sundials::KinsolSolver::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::clone "SharedObject CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::assignNode "void CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")
CasADi::Sundials::KinsolSolver::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")
CasADi::Sundials::KinsolSolver::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::Sundials::KinsolSolver::getDescription
"string CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classKINEMATICS_1_1KinVec.xml
%feature("docstring") KINEMATICS::KinVec "

Represent kinematical vectors.

What is a kinematic vector?

A kinematic vector is a - possibly time varying - object in
vectorspace that can exist irrespective of what reference frames
happen to be defined in this space. In other words, a vector has an
identity of its own and a given column matrix r=[r_x;r_y;r_z] (or
vector as it is often confusingly called) is merely a image of this
vector from one point of view (expressed or resolved or represented in
one particular frame).

In fact two types of vectors can be distinguished: position or
1-vectors and displacement or 0-vectors. For a 0-vector, only
orientation and length matter.

For a 1-vector, the anchor point of the vector is important part of
the vector's definition.

This class represents a kinematic vector by having a column matrix
representation and a reference frame as members.

Operators can work on KinVec objects with different reference frames.
The result is automatically computed in a common frame.

The really useful functions are found in the header documentation
(KinVec.hpp)

Joris Gillis

C++ includes: kinvec.hpp ";

%feature("docstring")  KINEMATICS::KinVec::KinVec "KINEMATICS::KinVec::KinVec() ";

%feature("docstring")  KINEMATICS::KinVec::KinVec "KINEMATICS::KinVec::KinVec(const KinVec &v) ";

%feature("docstring")  KINEMATICS::KinVec::KinVec "KINEMATICS::KinVec::KinVec(const SXMatrix &x, const SXMatrix &y, const
SXMatrix &z, bool type, const Frame &ref) ";

%feature("docstring")  KINEMATICS::KinVec::KinVec "KINEMATICS::KinVec::KinVec(const SXMatrix &xyz, bool type, const Frame
&ref) ";

%feature("docstring")  KINEMATICS::KinVec::KinVec "KINEMATICS::KinVec::KinVec(const SXMatrix &xyz, bool type, const Frame
&ref, const SXMatrix &J, const SXMatrix &q, const SXMatrix &dq, const
SXMatrix &ddq, int order) ";

%feature("docstring")  KINEMATICS::KinVec::KinVec "KINEMATICS::KinVec::KinVec(const SXMatrix &xyz, bool type, const Frame
&ref, const SXMatrix &J, const SXMatrix &c, const SXMatrix &q, const
SXMatrix &dq, const SXMatrix &ddq, int order) ";

%feature("docstring")  KINEMATICS::KinVec::KinVec "KINEMATICS::KinVec::KinVec(const SXMatrix &xyz, bool type, const Frame
&ref, const SXMatrix &q, const SXMatrix &dq, const SXMatrix &ddq, int
order) ";

%feature("docstring")  KINEMATICS::KinVec::getCoords "SXMatrix
KINEMATICS::KinVec::getCoords() const

Return the components of the KinVec as 3x1 expression.

3x1 Expression ";

%feature("docstring")  KINEMATICS::KinVec::getType "bool
KINEMATICS::KinVec::getType()

0 for velocity vectors, one for position vectors ";

%feature("docstring")  KINEMATICS::KinVec::getRef "Frame
KINEMATICS::KinVec::getRef() ";

%feature("docstring")  KINEMATICS::KinVec::getQ "const SXMatrix &
KINEMATICS::KinVec::getQ() const

Get the default time dependant symbols from the world frame. ";

%feature("docstring")  KINEMATICS::KinVec::getDQ "const SXMatrix &
KINEMATICS::KinVec::getDQ() const

Get the derivatives of the default time dependant symbols from the
world frame. ";

%feature("docstring")  KINEMATICS::KinVec::getDDQ "const SXMatrix &
KINEMATICS::KinVec::getDDQ() const

Get the second derivatives of the default time dependant symbols from
the world frame. ";

%feature("docstring")  KINEMATICS::KinVec::setDDQ "void
KINEMATICS::KinVec::setDDQ(const SXMatrix &ddq_)

returns the lowermost Frame in the hierarchy this Frame shares with
the other Frame ";

%feature("docstring")  KINEMATICS::KinVec::splitdep "void
KINEMATICS::KinVec::splitdep(const SXMatrix &x, const SXMatrix &dx,
KinVec &v1, KinVec &v2) ";

%feature("docstring")  KINEMATICS::KinVec::expressedIn "KinVec
KINEMATICS::KinVec::expressedIn(const Frame &f)

express the KinVec in another Frame ";

%feature("docstring")  KINEMATICS::KinVec::der "KinVec
KINEMATICS::KinVec::der()

component-wise time derivative ";

%feature("docstring")  KINEMATICS::KinVec::explicitize "SXMatrix
KINEMATICS::KinVec::explicitize(const SXMatrix &q, const SXMatrix
&ddq) const

Parameters:
-----------

ddq:  symbols for the second derivatives, to which is explicitized ";

%feature("docstring")  KINEMATICS::KinVec::explicitize "SXMatrix
KINEMATICS::KinVec::explicitize(const SXMatrix &qi) const ";

%feature("docstring")  KINEMATICS::KinVec::explicitize "SXMatrix
KINEMATICS::KinVec::explicitize(std::map< int, int > &di) const

Parameters:
-----------

ddq:  symbols for the second derivatives, to which is explicitized ";

%feature("docstring")  KINEMATICS::KinVec::explicitize "SXMatrix
KINEMATICS::KinVec::explicitize(std::vector< int > &di) const ";

%feature("docstring")  KINEMATICS::KinVec::explicitize "SXMatrix
KINEMATICS::KinVec::explicitize(std::map< int, int > &di, std::map<
int, int > &ri) const

Parameters:
-----------

di:  map which contains indices of ddq to which is explicitized

ri:  map which contains indices of the rows of the KinVec which are
taken into account

Documentation not finished

Will construct a system A*x+b from KinVec eg: vec:

ddqn=[0 0 0 0]; ";

%feature("docstring")  KINEMATICS::KinVec::explicitize "SXMatrix
KINEMATICS::KinVec::explicitize(std::vector< int > &di, std::vector<
int > &ri) const ";


// File: classCasADi_1_1KnitroInternal.xml
%feature("docstring") CasADi::KnitroInternal "

Name

Description

NLP_X_INIT

Decision variables initial guess.

NLP_LBX

Decision variables lower bound.

NLP_UBX

Decision variables upper bound.

NLP_LBG

Constraints lower bound.

NLP_UBG

Constraints upper bound.

NLP_LAMBDA_INIT

Lambda multipliers initial guess.

NLP_P

Static parameters on which the objective and constraints might depend.
Input scheme: CasADi::NLPInput (NLP_NUM_IN = 7) Name

Description

NLP_X_OPT

Decision variables for optimal solution.

NLP_COST

Objective/cost function for optimal solution.

NLP_LAMBDA_OPT

Lambda multipliers function for optimal solution.

NLP_LAMBDA_LBX

Lower bound multipliers for optimal solution When in warm start mode,
this output will be used as input

NLP_LAMBDA_UBX

Upper bound multipliers for optimal solution When in warm start mode,
this output will be used as input Output scheme: CasADi::NLPOutput
(NLP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

contype

OT_INTEGERVECTOR

None

CasADi::KnitroInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: knitro_internal.hpp ";

%feature("docstring")  CasADi::KnitroInternal::KnitroInternal "CasADi::KnitroInternal::KnitroInternal(const FX &F, const FX &G, const
FX &H, const FX &J, const FX &GF) ";

%feature("docstring")  CasADi::KnitroInternal::~KnitroInternal "CasADi::KnitroInternal::~KnitroInternal() ";

%feature("docstring")  CasADi::KnitroInternal::clone "virtual
KnitroInternal* CasADi::KnitroInternal::clone() const

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::KnitroInternal::init "void
CasADi::KnitroInternal::init()

Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but
before evaluating. If passed to another class (in the constructor),
this class should invoke this function when initialized. ";

%feature("docstring")  CasADi::KnitroInternal::evaluate "void
CasADi::KnitroInternal::evaluate(int nfdir, int nadir)

Evaluate. ";

%feature("docstring")  CasADi::KnitroInternal::evalfc "void
CasADi::KnitroInternal::evalfc(const double *x, double &obj, double
*c) ";

%feature("docstring")  CasADi::KnitroInternal::evalga "void
CasADi::KnitroInternal::evalga(const double *x, double *objGrad,
double *jac) ";

%feature("docstring")  CasADi::KnitroInternal::evalh "void
CasADi::KnitroInternal::evalh(const double *x, const double *lambda,
double *hessian) ";

%feature("docstring")  CasADi::KnitroInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::KnitroInternal::jacobian "virtual FX
CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int >
> &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::KnitroInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::KnitroInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::KnitroInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::KnitroInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::KnitroInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::KnitroInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::KnitroInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::KnitroInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")  CasADi::KnitroInternal::unidirectionalColoring
"CRSSparsity CasADi::FXInternal::unidirectionalColoring(const
CRSSparsity &A, const CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::KnitroInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::KnitroInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::KnitroInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::KnitroInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::KnitroInternal::input "Matrix< double
> & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::KnitroInternal::input "const Matrix<
double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::KnitroInternal::output "Matrix< double
> & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::KnitroInternal::output "const Matrix<
double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::KnitroInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::KnitroInternal::fwdSeed "const Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::KnitroInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::KnitroInternal::fwdSens "const Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::KnitroInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::KnitroInternal::adjSeed "const Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::KnitroInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::KnitroInternal::adjSens "const Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::KnitroInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::KnitroInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::KnitroInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::KnitroInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::KnitroInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::KnitroInternal::getStat "GenericType
CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::KnitroInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::KnitroInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::KnitroInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::KnitroInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::KnitroInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::KnitroInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::KnitroInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::KnitroInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::KnitroInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::KnitroInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::KnitroInternal::getOption "GenericType
CasADi::OptionsFunctionalityNode::getOption(const std::string &str)
const

get an option value ";

%feature("docstring")  CasADi::KnitroInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::KnitroInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::KnitroInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::KnitroInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::KnitroInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1KnitroSolver.xml
%feature("docstring") CasADi::KnitroSolver "

Name

Description

NLP_X_INIT

Decision variables initial guess.

NLP_LBX

Decision variables lower bound.

NLP_UBX

Decision variables upper bound.

NLP_LBG

Constraints lower bound.

NLP_UBG

Constraints upper bound.

NLP_LAMBDA_INIT

Lambda multipliers initial guess.

NLP_P

Static parameters on which the objective and constraints might depend.
Input scheme: CasADi::NLPInput (NLP_NUM_IN = 7) Name

Description

NLP_X_OPT

Decision variables for optimal solution.

NLP_COST

Objective/cost function for optimal solution.

NLP_LAMBDA_OPT

Lambda multipliers function for optimal solution.

NLP_LAMBDA_LBX

Lower bound multipliers for optimal solution When in warm start mode,
this output will be used as input

NLP_LAMBDA_UBX

Upper bound multipliers for optimal solution When in warm start mode,
this output will be used as input Output scheme: CasADi::NLPOutput
(NLP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

contype

OT_INTEGERVECTOR

None

CasADi::KnitroInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: knitro_solver.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::KnitroSolver::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::KnitroSolver::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::KnitroSolver::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::KnitroSolver::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::KnitroSolver::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::KnitroSolver::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::KnitroSolver::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::KnitroSolver::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::KnitroSolver::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::KnitroSolver::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::KnitroSolver::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::KnitroSolver::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::KnitroSolver::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::KnitroSolver::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::KnitroSolver::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::KnitroSolver::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::KnitroSolver::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::KnitroSolver::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::KnitroSolver::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::KnitroSolver::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::KnitroSolver::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::KnitroSolver::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::KnitroSolver::KnitroSolver "CasADi::KnitroSolver::KnitroSolver()

Default constructor. ";

%feature("docstring")  CasADi::KnitroSolver::KnitroSolver "CasADi::KnitroSolver::KnitroSolver(const FX &F, const FX &G=FX(),
const FX &H=FX(), const FX &J=FX(), const FX &GF=FX())

Constuct an NLP with non-linear constraints and provided hessian
approximation. ";

%feature("docstring")  CasADi::KnitroSolver::setIntParam "void
CasADi::KnitroSolver::setIntParam(const std::string &name, int val)

Set KNITRO integer parameters. ";

%feature("docstring")  CasADi::KnitroSolver::setDoubleParam "void
CasADi::KnitroSolver::setDoubleParam(const std::string &name, double
val)

Set KNITRO double parameters. ";

%feature("docstring")  CasADi::KnitroSolver::checkNode "bool
CasADi::KnitroSolver::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::KnitroSolver::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::KnitroSolver::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::KnitroSolver::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::KnitroSolver::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::KnitroSolver::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::KnitroSolver::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::KnitroSolver::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::KnitroSolver::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::KnitroSolver::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::KnitroSolver::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::KnitroSolver::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::KnitroSolver::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::KnitroSolver::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::KnitroSolver::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::KnitroSolver::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::KnitroSolver::jacSparsity "CRSSparsity
& CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::KnitroSolver::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::KnitroSolver::input "const Matrix<
double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::KnitroSolver::input "Matrix< double >
& CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::KnitroSolver::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::KnitroSolver::output "Matrix< double >
& CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::KnitroSolver::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::KnitroSolver::fwdSeed "Matrix< double
> & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::KnitroSolver::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::KnitroSolver::fwdSens "Matrix< double
> & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::KnitroSolver::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::KnitroSolver::adjSeed "Matrix< double
> & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::KnitroSolver::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::KnitroSolver::adjSens "Matrix< double
> & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::KnitroSolver::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::KnitroSolver::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::KnitroSolver::getStats "const
Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::KnitroSolver::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::KnitroSolver::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::KnitroSolver::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::KnitroSolver::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::KnitroSolver::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::KnitroSolver::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::KnitroSolver::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::KnitroSolver::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::KnitroSolver::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::KnitroSolver::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::KnitroSolver::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::KnitroSolver::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::KnitroSolver::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::KnitroSolver::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::KnitroSolver::getRepresentation "string CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::KnitroSolver::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1Interfaces_1_1LapackLUDense.xml
%feature("docstring") CasADi::Interfaces::LapackLUDense "

LU LinearSolver with Lapack Interface.

This class solves the linear system A.x=b by making an LU
factorization of A:  A = L.U, with L lower and U upper triangular

LapackLUDense is an CasADi::FX mapping from 2 inputs [ A (matrix),b
(vector)] to one output [x (vector)].

The usual procedure to use LapackLUDense is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

allow_equilibration_failure

OT_BOOLEAN

false

CasADi::Interfaces::LapackLUDenseInternal

equilibration

OT_BOOLEAN

true

CasADi::Interfaces::LapackLUDenseInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

trans

OT_BOOLEAN

false

CasADi::LinearSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: lapack_lu_dense.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Interfaces::LapackLUDense::setInput "void CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::setOutput "void CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::setFwdSeed "void CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::setFwdSens "void CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::setAdjSeed "void CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::setAdjSens "void CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Interfaces::LapackLUDense::getInput "void CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::getOutput "void CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::getFwdSeed "void CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::getFwdSens "void CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::getAdjSeed "void CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::getAdjSens "void CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::Interfaces::LapackLUDense::setOption "void CasADi::OptionsFunctionality::setOption(const std::string &str,
const GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::setOption "void CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::hasSetOption
"bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::printOptions
"void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::copyOptions
"void CasADi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::dictionary "const Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::makeUnique "void CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::makeUnique "void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")
CasADi::Interfaces::LapackLUDense::LapackLUDense "CasADi::Interfaces::LapackLUDense::LapackLUDense()

Default (empty) constructor. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDense::LapackLUDense "CasADi::Interfaces::LapackLUDense::LapackLUDense(const CRSSparsity
&sparsity)

Create a linear solver given a sparsity pattern. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::setSparsity
"void CasADi::LinearSolver::setSparsity(const CRSSparsity &sparsity)

Set sparsity (before initialization) ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::prepare "void CasADi::LinearSolver::prepare()

Factorize the matrix. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::solve "void
CasADi::LinearSolver::solve()

Solve the system of equations, internal vector. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::solve "void
CasADi::LinearSolver::solve(double *x, int nrhs=1, bool
transpose=false)

Solve the factorized system of equations. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::prepared "bool CasADi::LinearSolver::prepared() const

Check if prepared. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::checkNode "bool CasADi::LinearSolver::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::getNumInputs
"int CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDense::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::setNumInputs
"void CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")
CasADi::Interfaces::LapackLUDense::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::evaluate_old
"void CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::evaluate "void CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::jacobian "FX CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::jacobian "FX CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::call "vector< MX > CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::call "std::vector<MX> CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::jacSparsity
"CRSSparsity & CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDense::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::input "const Matrix< double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::input "Matrix< double > & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::output "const Matrix< double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::output "Matrix< double > & CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::fwdSeed "const Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::fwdSeed "Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::fwdSens "const Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::fwdSens "Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::adjSeed "const Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::adjSeed "Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::adjSens "const Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::adjSens "Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::addMonitor "void CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDense::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::getStats "const Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::getStat "GenericType CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")
CasADi::Interfaces::LapackLUDense::symbolicInput "std::vector< MX >
CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::clone "SharedObject CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::assignNode "void CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")
CasADi::Interfaces::LapackLUDense::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::getCount "int CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::isInit "bool CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::Interfaces::LapackLUDense::isNull "bool CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")
CasADi::Interfaces::LapackLUDense::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")
CasADi::Interfaces::LapackLUDense::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1Interfaces_1_1LapackLUDenseInternal.xml
%feature("docstring") CasADi::Interfaces::LapackLUDenseInternal "

Internal class.

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

allow_equilibration_failure

OT_BOOLEAN

false

CasADi::Interfaces::LapackLUDenseInternal

equilibration

OT_BOOLEAN

true

CasADi::Interfaces::LapackLUDenseInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

trans

OT_BOOLEAN

false

CasADi::LinearSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: lapack_lu_dense.hpp ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::LapackLUDenseInternal "CasADi::Interfaces::LapackLUDenseInternal::LapackLUDenseInternal(const
CRSSparsity &sparsity) ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::clone "LapackLUDenseInternal *
CasADi::Interfaces::LapackLUDenseInternal::clone() const

Make a deep copy of the instance. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::~LapackLUDenseInternal "CasADi::Interfaces::LapackLUDenseInternal::~LapackLUDenseInternal() ";

%feature("docstring")  CasADi::Interfaces::LapackLUDenseInternal::init
"void CasADi::Interfaces::LapackLUDenseInternal::init()

Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but
before evaluating. If passed to another class (in the constructor),
this class should invoke this function when initialized. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::prepare "void
CasADi::Interfaces::LapackLUDenseInternal::prepare() ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::solve "void
CasADi::Interfaces::LapackLUDenseInternal::solve(double *x, int nrhs,
bool transpose) ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::evaluate "void
CasADi::LinearSolverInternal::evaluate(int nfdir, int nadir)

Evaluate. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::solve "void
CasADi::LinearSolverInternal::solve() ";

%feature("docstring")  CasADi::Interfaces::LapackLUDenseInternal::nrow
"int CasADi::LinearSolverInternal::nrow() const ";

%feature("docstring")  CasADi::Interfaces::LapackLUDenseInternal::ncol
"int CasADi::LinearSolverInternal::ncol() const ";

%feature("docstring")  CasADi::Interfaces::LapackLUDenseInternal::nnz
"int CasADi::LinearSolverInternal::nnz() const ";

%feature("docstring")  CasADi::Interfaces::LapackLUDenseInternal::col
"const std::vector<int>& CasADi::LinearSolverInternal::col() const ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::rowind "const
std::vector<int>& CasADi::LinearSolverInternal::rowind() const ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::jacobian "virtual FX
CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int >
> &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::inputStruct "FunctionIO &
CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::outputStruct "FunctionIO &
CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::unidirectionalColoring "CRSSparsity CasADi::FXInternal::unidirectionalColoring(const
CRSSparsity &A, const CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::input "Matrix< double > &
CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::input "const Matrix<
double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::output "Matrix< double > &
CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::output "const Matrix<
double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::fwdSeed "Matrix< double >
& CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::fwdSeed "const Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::fwdSens "Matrix< double >
& CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::fwdSens "const Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::adjSeed "Matrix< double >
& CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::adjSeed "const Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::adjSens "Matrix< double >
& CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::adjSens "const Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::getStats "const Dictionary
& CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::getStat "GenericType
CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::jacSparsity "CRSSparsity &
CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::getOption "GenericType
CasADi::OptionsFunctionalityNode::getOption(const std::string &str)
const

get an option value ";

%feature("docstring")  CasADi::Interfaces::LapackLUDenseInternal::repr
"virtual void CasADi::OptionsFunctionalityNode::repr(std::ostream
&stream) const

Print representation. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")
CasADi::Interfaces::LapackLUDenseInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1Interfaces_1_1LapackQRDense.xml
%feature("docstring") CasADi::Interfaces::LapackQRDense "

QR LinearSolver with Lapack Interface.

This class solves the linear system A.x=b by making an QR
factorization of A:  A = Q.R, with Q orthogonal and R upper triangular

LapackQRDense is an CasADi::FX mapping from 2 inputs [ A (matrix),b
(vector)] to one output [x (vector)].

The usual procedure to use LapackQRDense is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

trans

OT_BOOLEAN

false

CasADi::LinearSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: lapack_qr_dense.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Interfaces::LapackQRDense::setInput "void CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::setOutput "void CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::setFwdSeed "void CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::setFwdSens "void CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::setAdjSeed "void CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::setAdjSens "void CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Interfaces::LapackQRDense::getInput "void CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::getOutput "void CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::getFwdSeed "void CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::getFwdSens "void CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::getAdjSeed "void CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::getAdjSens "void CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::Interfaces::LapackQRDense::setOption "void CasADi::OptionsFunctionality::setOption(const std::string &str,
const GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::setOption "void CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::hasSetOption
"bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::printOptions
"void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::copyOptions
"void CasADi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::dictionary "const Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::makeUnique "void CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::makeUnique "void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")
CasADi::Interfaces::LapackQRDense::LapackQRDense "CasADi::Interfaces::LapackQRDense::LapackQRDense()

Default (empty) constructor. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDense::LapackQRDense "CasADi::Interfaces::LapackQRDense::LapackQRDense(const CRSSparsity
&sparsity)

Create a linear solver given a sparsity pattern. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::setSparsity
"void CasADi::LinearSolver::setSparsity(const CRSSparsity &sparsity)

Set sparsity (before initialization) ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::prepare "void CasADi::LinearSolver::prepare()

Factorize the matrix. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::solve "void
CasADi::LinearSolver::solve()

Solve the system of equations, internal vector. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::solve "void
CasADi::LinearSolver::solve(double *x, int nrhs=1, bool
transpose=false)

Solve the factorized system of equations. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::prepared "bool CasADi::LinearSolver::prepared() const

Check if prepared. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::checkNode "bool CasADi::LinearSolver::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::getNumInputs
"int CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDense::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::setNumInputs
"void CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")
CasADi::Interfaces::LapackQRDense::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::evaluate_old
"void CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::evaluate "void CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::jacobian "FX CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::jacobian "FX CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::call "vector< MX > CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::call "std::vector<MX> CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::jacSparsity
"CRSSparsity & CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDense::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::input "const Matrix< double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::input "Matrix< double > & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::output "const Matrix< double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::output "Matrix< double > & CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::fwdSeed "const Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::fwdSeed "Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::fwdSens "const Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::fwdSens "Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::adjSeed "const Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::adjSeed "Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::adjSens "const Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::adjSens "Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::addMonitor "void CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDense::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::getStats "const Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::getStat "GenericType CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")
CasADi::Interfaces::LapackQRDense::symbolicInput "std::vector< MX >
CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::clone "SharedObject CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::assignNode "void CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")
CasADi::Interfaces::LapackQRDense::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::getCount "int CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::isInit "bool CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::Interfaces::LapackQRDense::isNull "bool CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")
CasADi::Interfaces::LapackQRDense::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")
CasADi::Interfaces::LapackQRDense::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1Interfaces_1_1LapackQRDenseInternal.xml
%feature("docstring") CasADi::Interfaces::LapackQRDenseInternal "

Internal class.

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

trans

OT_BOOLEAN

false

CasADi::LinearSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: lapack_qr_dense.hpp ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::LapackQRDenseInternal "CasADi::Interfaces::LapackQRDenseInternal::LapackQRDenseInternal(const
CRSSparsity &sparsity) ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::clone "LapackQRDenseInternal *
CasADi::Interfaces::LapackQRDenseInternal::clone() const

Make a deep copy of the instance. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::~LapackQRDenseInternal "CasADi::Interfaces::LapackQRDenseInternal::~LapackQRDenseInternal() ";

%feature("docstring")  CasADi::Interfaces::LapackQRDenseInternal::init
"void CasADi::Interfaces::LapackQRDenseInternal::init()

Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but
before evaluating. If passed to another class (in the constructor),
this class should invoke this function when initialized. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::prepare "void
CasADi::Interfaces::LapackQRDenseInternal::prepare() ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::solve "void
CasADi::Interfaces::LapackQRDenseInternal::solve(double *x, int nrhs,
bool transpose) ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::evaluate "void
CasADi::LinearSolverInternal::evaluate(int nfdir, int nadir)

Evaluate. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::solve "void
CasADi::LinearSolverInternal::solve() ";

%feature("docstring")  CasADi::Interfaces::LapackQRDenseInternal::nrow
"int CasADi::LinearSolverInternal::nrow() const ";

%feature("docstring")  CasADi::Interfaces::LapackQRDenseInternal::ncol
"int CasADi::LinearSolverInternal::ncol() const ";

%feature("docstring")  CasADi::Interfaces::LapackQRDenseInternal::nnz
"int CasADi::LinearSolverInternal::nnz() const ";

%feature("docstring")  CasADi::Interfaces::LapackQRDenseInternal::col
"const std::vector<int>& CasADi::LinearSolverInternal::col() const ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::rowind "const
std::vector<int>& CasADi::LinearSolverInternal::rowind() const ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::jacobian "virtual FX
CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int >
> &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::inputStruct "FunctionIO &
CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::outputStruct "FunctionIO &
CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::unidirectionalColoring "CRSSparsity CasADi::FXInternal::unidirectionalColoring(const
CRSSparsity &A, const CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::input "Matrix< double > &
CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::input "const Matrix<
double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::output "Matrix< double > &
CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::output "const Matrix<
double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::fwdSeed "Matrix< double >
& CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::fwdSeed "const Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::fwdSens "Matrix< double >
& CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::fwdSens "const Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::adjSeed "Matrix< double >
& CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::adjSeed "const Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::adjSens "Matrix< double >
& CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::adjSens "const Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::getStats "const Dictionary
& CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::getStat "GenericType
CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::jacSparsity "CRSSparsity &
CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::getOption "GenericType
CasADi::OptionsFunctionalityNode::getOption(const std::string &str)
const

get an option value ";

%feature("docstring")  CasADi::Interfaces::LapackQRDenseInternal::repr
"virtual void CasADi::OptionsFunctionalityNode::repr(std::ostream
&stream) const

Print representation. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")
CasADi::Interfaces::LapackQRDenseInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1Interfaces_1_1LiftoptInternal.xml
%feature("docstring") CasADi::Interfaces::LiftoptInternal "

Name

Description

NLP_X_INIT

Decision variables initial guess.

NLP_LBX

Decision variables lower bound.

NLP_UBX

Decision variables upper bound.

NLP_LBG

Constraints lower bound.

NLP_UBG

Constraints upper bound.

NLP_LAMBDA_INIT

Lambda multipliers initial guess.

NLP_P

Static parameters on which the objective and constraints might depend.
Input scheme: CasADi::NLPInput (NLP_NUM_IN = 7) Name

Description

NLP_X_OPT

Decision variables for optimal solution.

NLP_COST

Objective/cost function for optimal solution.

NLP_LAMBDA_OPT

Lambda multipliers function for optimal solution.

NLP_LAMBDA_LBX

Lower bound multipliers for optimal solution When in warm start mode,
this output will be used as input

NLP_LAMBDA_UBX

Upper bound multipliers for optimal solution When in warm start mode,
this output will be used as input Output scheme: CasADi::NLPOutput
(NLP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

lifted

OT_BOOLEAN

true

CasADi::Interfaces::LiftoptInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

optimizer

OT_STRING

\"sqp\"

CasADi::Interfaces::LiftoptInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: liftopt_internal.hpp ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::LiftoptInternal "CasADi::Interfaces::LiftoptInternal::LiftoptInternal(const MXFunction
&fcn) ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::~LiftoptInternal "CasADi::Interfaces::LiftoptInternal::~LiftoptInternal() ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::clone "virtual LiftoptInternal* CasADi::Interfaces::LiftoptInternal::clone()
const

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::init "void CasADi::Interfaces::LiftoptInternal::init()

Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but
before evaluating. If passed to another class (in the constructor),
this class should invoke this function when initialized. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::evaluate "void CasADi::Interfaces::LiftoptInternal::evaluate(int nfdir, int
nadir)

Evaluate. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::jacobian "virtual FX CasADi::FXInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::hessian "FX CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::inputStruct "FunctionIO &
CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::inputStruct "const FunctionIO &
CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::outputStruct "FunctionIO &
CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::outputStruct "const FunctionIO &
CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::print "virtual void CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::unidirectionalColoring "CRSSparsity CasADi::FXInternal::unidirectionalColoring(const
CRSSparsity &A, const CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::isInit "bool CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::verbose "bool CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::monitored
"bool CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::input "Matrix< double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::input "const Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::output "Matrix< double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::output "const Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::fwdSeed "Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::fwdSeed "const Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int
dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::fwdSens "Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::fwdSens "const Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::adjSeed "Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::adjSeed "const Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int
dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::adjSens "Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::adjSens "const Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::getStats "const Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::getJacSparsity "CRSSparsity
CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::jacSparsity "CRSSparsity &
CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::symbolicInput "std::vector< MX >
CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::setOption
"void CasADi::OptionsFunctionalityNode::setOption(const std::string
&str, const GenericType &val)

set an option ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::setOption
"void CasADi::OptionsFunctionalityNode::setOption(const Dictionary
&dict)

set a set of options ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::hasOption
"bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::getOption
"GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::repr "virtual void CasADi::OptionsFunctionalityNode::repr(std::ostream
&stream) const

Print representation. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::dictionary
"const Dictionary & CasADi::OptionsFunctionalityNode::dictionary()
const

Get the dictionary. ";

%feature("docstring")
CasADi::Interfaces::LiftoptInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Interfaces::LiftoptInternal::getCount "int CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1Interfaces_1_1LiftoptSolver.xml
%feature("docstring") CasADi::Interfaces::LiftoptSolver "

Name

Description

NLP_X_INIT

Decision variables initial guess.

NLP_LBX

Decision variables lower bound.

NLP_UBX

Decision variables upper bound.

NLP_LBG

Constraints lower bound.

NLP_UBG

Constraints upper bound.

NLP_LAMBDA_INIT

Lambda multipliers initial guess.

NLP_P

Static parameters on which the objective and constraints might depend.
Input scheme: CasADi::NLPInput (NLP_NUM_IN = 7) Name

Description

NLP_X_OPT

Decision variables for optimal solution.

NLP_COST

Objective/cost function for optimal solution.

NLP_LAMBDA_OPT

Lambda multipliers function for optimal solution.

NLP_LAMBDA_LBX

Lower bound multipliers for optimal solution When in warm start mode,
this output will be used as input

NLP_LAMBDA_UBX

Upper bound multipliers for optimal solution When in warm start mode,
this output will be used as input Output scheme: CasADi::NLPOutput
(NLP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

lifted

OT_BOOLEAN

true

CasADi::Interfaces::LiftoptInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

optimizer

OT_STRING

\"sqp\"

CasADi::Interfaces::LiftoptInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: liftopt_solver.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::setInput "void CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::setOutput "void CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::setFwdSeed "void CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::setFwdSens "void CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::setAdjSeed "void CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::setAdjSens "void CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::getInput "void CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::getOutput "void CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::getFwdSeed "void CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::getFwdSens "void CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::getAdjSeed "void CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::getAdjSens "void CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::setOption "void CasADi::OptionsFunctionality::setOption(const std::string &str,
const GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::setOption "void CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::hasSetOption
"bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::printOptions
"void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::copyOptions
"void CasADi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::dictionary "const Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::makeUnique "void CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::makeUnique "void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")
CasADi::Interfaces::LiftoptSolver::LiftoptSolver "CasADi::Interfaces::LiftoptSolver::LiftoptSolver()

Default constructor. ";

%feature("docstring")
CasADi::Interfaces::LiftoptSolver::LiftoptSolver "CasADi::Interfaces::LiftoptSolver::LiftoptSolver(const FX &F, const FX
&G)

Create an LIFTOPT instance (standard NLP interface) ";

%feature("docstring")
CasADi::Interfaces::LiftoptSolver::LiftoptSolver "CasADi::Interfaces::LiftoptSolver::LiftoptSolver(const MXFunction
&fcn)

Create an LIFTOPT instance. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::checkNode "bool CasADi::Interfaces::LiftoptSolver::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::nodeInit "std::vector< double > & CasADi::Interfaces::LiftoptSolver::nodeInit()

Node init? ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::nodeInit "const std::vector< double > &
CasADi::Interfaces::LiftoptSolver::nodeInit() const ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::getNumInputs
"int CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")
CasADi::Interfaces::LiftoptSolver::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::setNumInputs
"void CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")
CasADi::Interfaces::LiftoptSolver::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::evaluate_old
"void CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::evaluate "void CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::jacobian "FX CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::jacobian "FX CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::call "vector< MX > CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::call "std::vector<MX> CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::jacSparsity
"CRSSparsity & CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::LiftoptSolver::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::input "const Matrix< double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::input "Matrix< double > & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::output "const Matrix< double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::output "Matrix< double > & CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::fwdSeed "const Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::fwdSeed "Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::fwdSens "const Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::fwdSens "Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::adjSeed "const Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::adjSeed "Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::adjSens "const Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::adjSens "Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::addMonitor "void CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")
CasADi::Interfaces::LiftoptSolver::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::getStats "const Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::getStat "GenericType CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")
CasADi::Interfaces::LiftoptSolver::symbolicInput "std::vector< MX >
CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::clone "SharedObject CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::assignNode "void CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")
CasADi::Interfaces::LiftoptSolver::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::getCount "int CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::isInit "bool CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::Interfaces::LiftoptSolver::isNull "bool CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")
CasADi::Interfaces::LiftoptSolver::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")
CasADi::Interfaces::LiftoptSolver::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1LinearSolver.xml
%feature("docstring") CasADi::LinearSolver "

Abstract base class for the linear solver classes

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

trans

OT_BOOLEAN

false

CasADi::LinearSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: linear_solver.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::LinearSolver::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::LinearSolver::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::LinearSolver::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::LinearSolver::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::LinearSolver::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::LinearSolver::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::LinearSolver::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::LinearSolver::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::LinearSolver::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::LinearSolver::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::LinearSolver::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::LinearSolver::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::LinearSolver::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::LinearSolver::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::LinearSolver::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::LinearSolver::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::LinearSolver::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::LinearSolver::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::LinearSolver::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::LinearSolver::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::LinearSolver::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::LinearSolver::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::LinearSolver::setSparsity "void
CasADi::LinearSolver::setSparsity(const CRSSparsity &sparsity)

Set sparsity (before initialization) ";

%feature("docstring")  CasADi::LinearSolver::prepare "void
CasADi::LinearSolver::prepare()

Factorize the matrix. ";

%feature("docstring")  CasADi::LinearSolver::solve "void
CasADi::LinearSolver::solve()

Solve the system of equations, internal vector. ";

%feature("docstring")  CasADi::LinearSolver::solve "void
CasADi::LinearSolver::solve(double *x, int nrhs=1, bool
transpose=false)

Solve the factorized system of equations. ";

%feature("docstring")  CasADi::LinearSolver::prepared "bool
CasADi::LinearSolver::prepared() const

Check if prepared. ";

%feature("docstring")  CasADi::LinearSolver::checkNode "bool
CasADi::LinearSolver::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::LinearSolver::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::LinearSolver::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::LinearSolver::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::LinearSolver::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::LinearSolver::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::LinearSolver::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::LinearSolver::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::LinearSolver::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::LinearSolver::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::LinearSolver::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::LinearSolver::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::LinearSolver::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::LinearSolver::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::LinearSolver::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::LinearSolver::jacSparsity "CRSSparsity
& CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::LinearSolver::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::LinearSolver::input "const Matrix<
double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::LinearSolver::input "Matrix< double >
& CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::LinearSolver::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::LinearSolver::output "Matrix< double >
& CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::LinearSolver::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::LinearSolver::fwdSeed "Matrix< double
> & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::LinearSolver::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::LinearSolver::fwdSens "Matrix< double
> & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::LinearSolver::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::LinearSolver::adjSeed "Matrix< double
> & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::LinearSolver::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::LinearSolver::adjSens "Matrix< double
> & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::LinearSolver::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::LinearSolver::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::LinearSolver::getStats "const
Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::LinearSolver::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::LinearSolver::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::LinearSolver::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::LinearSolver::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::LinearSolver::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::LinearSolver::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::LinearSolver::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::LinearSolver::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::LinearSolver::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::LinearSolver::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::LinearSolver::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::LinearSolver::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::LinearSolver::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::LinearSolver::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::LinearSolver::getRepresentation "string CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::LinearSolver::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1LinearSolverInternal.xml
%feature("docstring") CasADi::LinearSolverInternal "

Internal class.

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

trans

OT_BOOLEAN

false

CasADi::LinearSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: linear_solver_internal.hpp ";

%feature("docstring")
CasADi::LinearSolverInternal::LinearSolverInternal "CasADi::LinearSolverInternal::LinearSolverInternal(const CRSSparsity
&sparsity) ";

%feature("docstring")
CasADi::LinearSolverInternal::~LinearSolverInternal "CasADi::LinearSolverInternal::~LinearSolverInternal()=0 ";

%feature("docstring")  CasADi::LinearSolverInternal::init "void
CasADi::LinearSolverInternal::init()

Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but
before evaluating. If passed to another class (in the constructor),
this class should invoke this function when initialized. ";

%feature("docstring")  CasADi::LinearSolverInternal::evaluate "void
CasADi::LinearSolverInternal::evaluate(int nfdir, int nadir)

Evaluate. ";

%feature("docstring")  CasADi::LinearSolverInternal::prepare "virtual
void CasADi::LinearSolverInternal::prepare()=0 ";

%feature("docstring")  CasADi::LinearSolverInternal::solve "void
CasADi::LinearSolverInternal::solve() ";

%feature("docstring")  CasADi::LinearSolverInternal::solve "virtual
void CasADi::LinearSolverInternal::solve(double *x, int nrhs, bool
transpose)=0 ";

%feature("docstring")  CasADi::LinearSolverInternal::nrow "int
CasADi::LinearSolverInternal::nrow() const ";

%feature("docstring")  CasADi::LinearSolverInternal::ncol "int
CasADi::LinearSolverInternal::ncol() const ";

%feature("docstring")  CasADi::LinearSolverInternal::nnz "int
CasADi::LinearSolverInternal::nnz() const ";

%feature("docstring")  CasADi::LinearSolverInternal::col "const
std::vector<int>& CasADi::LinearSolverInternal::col() const ";

%feature("docstring")  CasADi::LinearSolverInternal::rowind "const
std::vector<int>& CasADi::LinearSolverInternal::rowind() const ";

%feature("docstring")  CasADi::LinearSolverInternal::evaluate_switch "void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::LinearSolverInternal::jacobian "virtual FX CasADi::FXInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::LinearSolverInternal::jacobian_switch "FX CasADi::FXInternal::jacobian_switch(const std::vector< std::pair<
int, int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::LinearSolverInternal::numeric_jacobian
"FX CasADi::FXInternal::numeric_jacobian(const std::vector<
std::pair< int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::LinearSolverInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::LinearSolverInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::LinearSolverInternal::inputStruct "const FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::LinearSolverInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::LinearSolverInternal::outputStruct "const FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::LinearSolverInternal::print "virtual
void CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::LinearSolverInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::LinearSolverInternal::getPartition "void CasADi::FXInternal::getPartition(const std::vector< std::pair<
int, int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::LinearSolverInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::LinearSolverInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::LinearSolverInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::LinearSolverInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::LinearSolverInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::LinearSolverInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::LinearSolverInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::LinearSolverInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::LinearSolverInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::LinearSolverInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::LinearSolverInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::LinearSolverInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::LinearSolverInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::LinearSolverInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::LinearSolverInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::LinearSolverInternal::setNumInputs "void CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::LinearSolverInternal::setNumOutputs "void CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::LinearSolverInternal::getNumInputs "int CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::LinearSolverInternal::getNumOutputs "int CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::LinearSolverInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::LinearSolverInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::LinearSolverInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::LinearSolverInternal::setJacSparsity "void CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int
iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::LinearSolverInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::LinearSolverInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::LinearSolverInternal::getFullJacobian "void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::LinearSolverInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::LinearSolverInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::LinearSolverInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::LinearSolverInternal::hasSetOption "bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::LinearSolverInternal::printOptions "void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::LinearSolverInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::LinearSolverInternal::repr "virtual
void CasADi::OptionsFunctionalityNode::repr(std::ostream &stream)
const

Print representation. ";

%feature("docstring")  CasADi::LinearSolverInternal::copyOptions "void CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::LinearSolverInternal::dictionary "const Dictionary & CasADi::OptionsFunctionalityNode::dictionary()
const

Get the dictionary. ";

%feature("docstring")  CasADi::LinearSolverInternal::clone "virtual
SharedObjectNode* CasADi::SharedObjectNode::clone() const =0

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::LinearSolverInternal::deepCopyMembers "void CasADi::SharedObjectNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::LinearSolverInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1Mapping.xml
%feature("docstring") CasADi::Mapping "

Maps non-zero elements.

Joel Andersson

C++ includes: mapping.hpp ";

%feature("docstring")  CasADi::Mapping::Mapping "CasADi::Mapping::Mapping(const CRSSparsity &sp)

Constructor. ";

%feature("docstring")  CasADi::Mapping::clone "Mapping *
CasADi::Mapping::clone() const

Clone function. ";

%feature("docstring")  CasADi::Mapping::~Mapping "virtual
CasADi::Mapping::~Mapping()

Destructor. ";

%feature("docstring")  CasADi::Mapping::evaluate "void
CasADi::Mapping::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const
DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::Mapping::evaluateSX "void
CasADi::Mapping::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV &fwdSens, const
SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::Mapping::evaluateMX "void
CasADi::Mapping::evaluateMX(const MXPtrV &input, MXPtrV &output, const
MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV
&adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::Mapping::propagateSparsity "void
CasADi::Mapping::propagateSparsity(const DMatrixPtrV &input,
DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::Mapping::print "void
CasADi::Mapping::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::Mapping::isMapping "virtual bool
CasADi::Mapping::isMapping() const

Is a mapping matrix. ";

%feature("docstring")  CasADi::Mapping::addDependency "void
CasADi::Mapping::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::Mapping::addDependency "void
CasADi::Mapping::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency. ";

%feature("docstring")  CasADi::Mapping::addDependency "void
CasADi::Mapping::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency. ";

%feature("docstring")  CasADi::Mapping::isReady "bool
CasADi::Mapping::isReady() const

Check if the mapping is ready. ";

%feature("docstring")  CasADi::Mapping::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Mapping::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::Mapping::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::Mapping::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::Mapping::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::Mapping::getName "const string &
CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::Mapping::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::Mapping::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::Mapping::isEvaluation "virtual bool
CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::Mapping::isOutputNode "virtual bool
CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::Mapping::isMultipleOutput "virtual
bool CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::Mapping::isJacobian "virtual bool
CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::Mapping::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::Mapping::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::Mapping::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::Mapping::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::Mapping::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::Mapping::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::Mapping::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::Mapping::getNumOutputs "virtual int
CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::Mapping::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::Mapping::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::Mapping::isNonLinear "virtual bool
CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::Mapping::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::Mapping::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::Mapping::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::Mapping::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::Mapping::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::Mapping::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::Mapping::isOperation "virtual bool
CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::Mapping::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::Mapping::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::Mapping::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::Mapping::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::Mapping::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::Mapping::eval "virtual Matrix<double>
CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::Mapping::eval "virtual Matrix<SX>
CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::Mapping::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::Mapping::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Mapping::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::Mapping::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1Matrix.xml
%feature("docstring") CasADi::Matrix "

General sparse matrix class General sparse matrix class that is
designed with the idea that \"everything is a matrix\", that is, also
scalars and vectors.  This philosophy makes it easy to use and to
interface in particularily with Matlab and Python. .

The syntax tries to stay as close as possible to the ublas syntax when
it comes to vector/matrix operations.

Index starts with 0.  Index flatten happens as follows: (i,j) -> k =
j+i*size2()  Vectors are considered to be column vectors.

The storage format is a (modified) compressed row storage (CRS)
format. This way, a vector element can always be accessed in constant
time.

Matrix<T> is polymorphic with a std::vector<T> that contain all non-
identical-zero elements.  The sparsity can be accessed with
CRSSparsity& sparsity()

Joel Andersson

C++ includes: matrix.hpp ";

%feature("docstring")  CasADi::Matrix::empty "bool CasADi::Matrix< T
>::empty() const

Check type of matrix. ";

%feature("docstring")  CasADi::Matrix::scalar "bool CasADi::Matrix< T
>::scalar() const ";

%feature("docstring")  CasADi::Matrix::vector "bool CasADi::Matrix< T
>::vector() const ";

%feature("docstring")  CasADi::Matrix::dense "bool CasADi::Matrix< T
>::dense() const ";

%feature("docstring")  CasADi::Matrix::getSub "const Matrix< T >
CasADi::Matrix< T >::getSub(int i, int j) const

Get a submatrix. ";

%feature("docstring")  CasADi::Matrix::getSub "const Matrix<T>
CasADi::Matrix< T >::getSub(int i, const std::vector< int > &j) const
";

%feature("docstring")  CasADi::Matrix::getSub "const Matrix<T>
CasADi::Matrix< T >::getSub(const std::vector< int > &i, int j) const
";

%feature("docstring")  CasADi::Matrix::getSub "const Matrix< T >
CasADi::Matrix< T >::getSub(const std::vector< int > &i, const
std::vector< int > &j) const ";

%feature("docstring")  CasADi::Matrix::getSub "const Matrix<T>
CasADi::Matrix< T >::getSub(const Slice &i, const Slice &j) const ";

%feature("docstring")  CasADi::Matrix::setSub "void CasADi::Matrix< T
>::setSub(int i, int j, const Matrix< T > &m)

Set a submatrix. ";

%feature("docstring")  CasADi::Matrix::setSub "void CasADi::Matrix< T
>::setSub(int i, const std::vector< int > &j, const Matrix< T > &m) ";

%feature("docstring")  CasADi::Matrix::setSub "void CasADi::Matrix< T
>::setSub(const std::vector< int > &i, int j, const Matrix< T > &m) ";

%feature("docstring")  CasADi::Matrix::setSub "void CasADi::Matrix< T
>::setSub(const std::vector< int > &i, const std::vector< int > &j,
const Matrix< T > &m) ";

%feature("docstring")  CasADi::Matrix::setSub "void CasADi::Matrix< T
>::setSub(const Slice &i, const Slice &j, const Matrix< T > &m) ";

%feature("docstring")  CasADi::Matrix::getNZ "const Matrix< T >
CasADi::Matrix< T >::getNZ(int k) const

Get a set of nonzeros. ";

%feature("docstring")  CasADi::Matrix::getNZ "const Matrix< T >
CasADi::Matrix< T >::getNZ(const std::vector< int > &k) const ";

%feature("docstring")  CasADi::Matrix::getNZ "const Matrix<T>
CasADi::Matrix< T >::getNZ(const Slice &k) const ";

%feature("docstring")  CasADi::Matrix::getNZ "const Matrix< T >
CasADi::Matrix< T >::getNZ(const Matrix< int > &k) const ";

%feature("docstring")  CasADi::Matrix::setNZ "void CasADi::Matrix< T
>::setNZ(int k, const Matrix< T > &m)

Set a set of nonzeros. ";

%feature("docstring")  CasADi::Matrix::setNZ "void CasADi::Matrix< T
>::setNZ(const std::vector< int > &k, const Matrix< T > &m) ";

%feature("docstring")  CasADi::Matrix::setNZ "void CasADi::Matrix< T
>::setNZ(const Slice &k, const Matrix< T > &m) ";

%feature("docstring")  CasADi::Matrix::setNZ "void CasADi::Matrix< T
>::setNZ(const Matrix< int > &k, const Matrix< T > &m) ";

%feature("docstring")  CasADi::Matrix::indexed_one_based "const
Matrix<T> CasADi::Matrix< T >::indexed_one_based(int k) const

Indexing for interfaced languages get a non-zero ";

%feature("docstring")  CasADi::Matrix::indexed_zero_based "const
Matrix<T> CasADi::Matrix< T >::indexed_zero_based(int k) const ";

%feature("docstring")  CasADi::Matrix::indexed_one_based "const
Matrix<T> CasADi::Matrix< T >::indexed_one_based(const Matrix< int >
&k) const ";

%feature("docstring")  CasADi::Matrix::indexed_zero_based "const
Matrix<T> CasADi::Matrix< T >::indexed_zero_based(const Matrix< int >
&k) const ";

%feature("docstring")  CasADi::Matrix::indexed "const Matrix<T>
CasADi::Matrix< T >::indexed(const Slice &k) const ";

%feature("docstring")  CasADi::Matrix::indexed "const Matrix<T>
CasADi::Matrix< T >::indexed(const IndexList &k) const ";

%feature("docstring")  CasADi::Matrix::indexed_one_based "const
Matrix<T> CasADi::Matrix< T >::indexed_one_based(int i, int j) const

get a matrix element ";

%feature("docstring")  CasADi::Matrix::indexed_zero_based "const
Matrix<T> CasADi::Matrix< T >::indexed_zero_based(int i, int j) const
";

%feature("docstring")  CasADi::Matrix::indexed "const Matrix<T>
CasADi::Matrix< T >::indexed(const Slice &i, const Slice &j) const ";

%feature("docstring")  CasADi::Matrix::indexed "const Matrix<T>
CasADi::Matrix< T >::indexed(const IndexList &i, const IndexList &j)
const ";

%feature("docstring")  CasADi::Matrix::indexed_one_based_assignment "void CasADi::Matrix< T >::indexed_one_based_assignment(int k, const T
&m)

set a non-zero ";

%feature("docstring")  CasADi::Matrix::indexed_zero_based_assignment "void CasADi::Matrix< T >::indexed_zero_based_assignment(int k, const T
&m) ";

%feature("docstring")  CasADi::Matrix::indexed_assignment "void
CasADi::Matrix< T >::indexed_assignment(const Slice &k, const Matrix<
T > &m) ";

%feature("docstring")  CasADi::Matrix::indexed_one_based_assignment "void CasADi::Matrix< T >::indexed_one_based_assignment(const Matrix<
int > &k, const Matrix< T > &m) ";

%feature("docstring")  CasADi::Matrix::indexed_zero_based_assignment "void CasADi::Matrix< T >::indexed_zero_based_assignment(const Matrix<
int > &k, const Matrix< T > &m) ";

%feature("docstring")  CasADi::Matrix::indexed_assignment "void
CasADi::Matrix< T >::indexed_assignment(const IndexList &k, const
Matrix< T > &m) ";

%feature("docstring")  CasADi::Matrix::indexed_one_based_assignment "void CasADi::Matrix< T >::indexed_one_based_assignment(int i, int j,
const T &m)

set a matrix element ";

%feature("docstring")  CasADi::Matrix::indexed_zero_based_assignment "void CasADi::Matrix< T >::indexed_zero_based_assignment(int i, int j,
const T &m) ";

%feature("docstring")  CasADi::Matrix::indexed_assignment "void
CasADi::Matrix< T >::indexed_assignment(const Slice &i, const Slice
&j, const Matrix< T > &m) ";

%feature("docstring")  CasADi::Matrix::indexed_assignment "void
CasADi::Matrix< T >::indexed_assignment(const IndexList &i, const
IndexList &j, const Matrix< T > &m) ";

%feature("docstring")  CasADi::Matrix::binary "Matrix< T >
CasADi::Matrix< T >::binary(int op, const Matrix< T > &x, const
Matrix< T > &y)

Create nodes by their ID. ";

%feature("docstring")  CasADi::Matrix::unary "Matrix< T >
CasADi::Matrix< T >::unary(int op, const Matrix< T > &x) ";

%feature("docstring")  CasADi::Matrix::scalar_matrix "Matrix< T >
CasADi::Matrix< T >::scalar_matrix(int op, const Matrix< T > &x, const
Matrix< T > &y) ";

%feature("docstring")  CasADi::Matrix::matrix_scalar "Matrix< T >
CasADi::Matrix< T >::matrix_scalar(int op, const Matrix< T > &x, const
Matrix< T > &y) ";

%feature("docstring")  CasADi::Matrix::matrix_matrix "Matrix< T >
CasADi::Matrix< T >::matrix_matrix(int op, const Matrix< T > &x, const
Matrix< T > &y) ";

%feature("docstring")  CasADi::Matrix::__add__ "Matrix< T >
CasADi::Matrix< T >::__add__(const Matrix< T > &y) const

Elementwise operations -- Octave/Python naming. ";

%feature("docstring")  CasADi::Matrix::__sub__ "Matrix< T >
CasADi::Matrix< T >::__sub__(const Matrix< T > &y) const ";

%feature("docstring")  CasADi::Matrix::__mul__ "Matrix< T >
CasADi::Matrix< T >::__mul__(const Matrix< T > &y) const ";

%feature("docstring")  CasADi::Matrix::__div__ "Matrix< T >
CasADi::Matrix< T >::__div__(const Matrix< T > &y) const ";

%feature("docstring")  CasADi::Matrix::__pow__ "Matrix< T >
CasADi::Matrix< T >::__pow__(const Matrix< T > &y) const ";

%feature("docstring")  CasADi::Matrix::__constpow__ "Matrix< T >
CasADi::Matrix< T >::__constpow__(const Matrix< T > &y) const ";

%feature("docstring")  CasADi::Matrix::__mpower__ "Matrix< T >
CasADi::Matrix< T >::__mpower__(const Matrix< T > &y) const ";

%feature("docstring")  CasADi::Matrix::__mrdivide__ "Matrix< T >
CasADi::Matrix< T >::__mrdivide__(const Matrix< T > &y) const ";

%feature("docstring")  CasADi::Matrix::__mldivide__ "Matrix< T >
CasADi::Matrix< T >::__mldivide__(const Matrix< T > &y) const ";

%feature("docstring")  CasADi::Matrix::sin "Matrix< T >
CasADi::Matrix< T >::sin() const

Operations defined in the standard namespace for unambigous access and
Numpy compatibility. ";

%feature("docstring")  CasADi::Matrix::cos "Matrix< T >
CasADi::Matrix< T >::cos() const ";

%feature("docstring")  CasADi::Matrix::tan "Matrix< T >
CasADi::Matrix< T >::tan() const ";

%feature("docstring")  CasADi::Matrix::arcsin "Matrix< T >
CasADi::Matrix< T >::arcsin() const ";

%feature("docstring")  CasADi::Matrix::arccos "Matrix< T >
CasADi::Matrix< T >::arccos() const ";

%feature("docstring")  CasADi::Matrix::arctan "Matrix< T >
CasADi::Matrix< T >::arctan() const ";

%feature("docstring")  CasADi::Matrix::exp "Matrix< T >
CasADi::Matrix< T >::exp() const ";

%feature("docstring")  CasADi::Matrix::log "Matrix< T >
CasADi::Matrix< T >::log() const ";

%feature("docstring")  CasADi::Matrix::sqrt "Matrix< T >
CasADi::Matrix< T >::sqrt() const ";

%feature("docstring")  CasADi::Matrix::floor "Matrix< T >
CasADi::Matrix< T >::floor() const ";

%feature("docstring")  CasADi::Matrix::ceil "Matrix< T >
CasADi::Matrix< T >::ceil() const ";

%feature("docstring")  CasADi::Matrix::fabs "Matrix< T >
CasADi::Matrix< T >::fabs() const ";

%feature("docstring")  CasADi::Matrix::fmin "Matrix< T >
CasADi::Matrix< T >::fmin(const Matrix< T > &y) const ";

%feature("docstring")  CasADi::Matrix::fmax "Matrix< T >
CasADi::Matrix< T >::fmax(const Matrix< T > &y) const ";

%feature("docstring")  CasADi::Matrix::erf "Matrix< T >
CasADi::Matrix< T >::erf() const ";

%feature("docstring")  CasADi::Matrix::sinh "Matrix< T >
CasADi::Matrix< T >::sinh() const ";

%feature("docstring")  CasADi::Matrix::cosh "Matrix< T >
CasADi::Matrix< T >::cosh() const ";

%feature("docstring")  CasADi::Matrix::tanh "Matrix< T >
CasADi::Matrix< T >::tanh() const ";

%feature("docstring")  CasADi::Matrix::log10 "Matrix< T >
CasADi::Matrix< T >::log10() const ";

%feature("docstring")  CasADi::Matrix::printme "Matrix< T >
CasADi::Matrix< T >::printme(const Matrix< T > &y) const ";

%feature("docstring")  CasADi::Matrix::print "void CasADi::Matrix< T
>::print(std::ostream &stream=std::cout) const

Printing. ";

%feature("docstring")  CasADi::Matrix::repr "void CasADi::Matrix< T
>::repr(std::ostream &stream=std::cout) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Matrix::__repr__ "std::string
CasADi::Matrix< T >::__repr__() ";

%feature("docstring")  CasADi::Matrix::printScalar "void
CasADi::Matrix< T >::printScalar(std::ostream &stream=std::cout) const
";

%feature("docstring")  CasADi::Matrix::printVector "void
CasADi::Matrix< T >::printVector(std::ostream &stream=std::cout) const
";

%feature("docstring")  CasADi::Matrix::printMatrix "void
CasADi::Matrix< T >::printMatrix(std::ostream &stream=std::cout) const
";

%feature("docstring")  CasADi::Matrix::printSparse "void
CasADi::Matrix< T >::printSparse(std::ostream &stream=std::cout) const
";

%feature("docstring")  CasADi::Matrix::printDense "void
CasADi::Matrix< T >::printDense(std::ostream &stream=std::cout) const
";

%feature("docstring")  CasADi::Matrix::Matrix "CasADi::Matrix< T
>::Matrix()

constructors

empty 0-by-0 matrix constructor ";

%feature("docstring")  CasADi::Matrix::Matrix "CasADi::Matrix< T
>::Matrix(const Matrix< T > &m)

Copy constructor. ";

%feature("docstring")  CasADi::Matrix::Matrix "CasADi::Matrix< T
>::Matrix(int n, int m)

empty n-by-m matrix constructor ";

%feature("docstring")  CasADi::Matrix::Matrix "CasADi::Matrix< T
>::Matrix(int n, int m, const T &val)

dense n-by-m matrix filled with val constructor ";

%feature("docstring")  CasADi::Matrix::Matrix "CasADi::Matrix< T
>::Matrix(int n, int m, const std::vector< int > &col, const
std::vector< int > &rowind, const std::vector< T > &d=std::vector< T
>())

sparse n-by-m matrix filled with given sparsity ";

%feature("docstring")  CasADi::Matrix::Matrix "CasADi::Matrix< T
>::Matrix(const std::vector< std::vector< T > > &m)

dense matrix constructor with data given as vector of vectors ";

%feature("docstring")  CasADi::Matrix::Matrix "CasADi::Matrix< T
>::Matrix(const CRSSparsity &sparsity, const T &val=0)

sparse matrix with a given sparsity ";

%feature("docstring")  CasADi::Matrix::Matrix "CasADi::Matrix< T
>::Matrix(const CRSSparsity &sparsity, const std::vector< T > &d)

sparse matrix with a given sparsity and non-zero elements. ";

%feature("docstring")  CasADi::Matrix::sanityCheck "void
CasADi::Matrix< T >::sanityCheck(bool complete=false) const

Check if the dimensions and rowind,col vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as
possible result ";

%feature("docstring")  CasADi::Matrix::Matrix "CasADi::Matrix< T
>::Matrix(double val)

This constructor enables implicit type conversion from a numeric type.
";

%feature("docstring")  CasADi::Matrix::Matrix "CasADi::Matrix< T
>::Matrix(const std::vector< T > &x)

Construct from a vector.

Thanks to implicit conversion, you can pretend that Matrix(const SX&
x); exists. Note: above remark applies only to C++, not python or
octave interfaces ";

%feature("docstring")  CasADi::Matrix::Matrix "CasADi::Matrix< T
>::Matrix(const std::vector< T > &x, int n, int m)

Construct dense matrix from a vector with the elements in column major
ordering. ";

%feature("docstring")  CasADi::Matrix::toScalar "const T
CasADi::Matrix< T >::toScalar() const

Convert to scalar type. ";

%feature("docstring")  CasADi::Matrix::begin "iterator
CasADi::Matrix< T >::begin()

Get iterators to beginning and end. ";

%feature("docstring")  CasADi::Matrix::begin "const_iterator
CasADi::Matrix< T >::begin() const ";

%feature("docstring")  CasADi::Matrix::rbegin "reverse_iterator
CasADi::Matrix< T >::rbegin() ";

%feature("docstring")  CasADi::Matrix::rbegin "const_reverse_iterator
CasADi::Matrix< T >::rbegin() const ";

%feature("docstring")  CasADi::Matrix::end "iterator CasADi::Matrix<
T >::end() ";

%feature("docstring")  CasADi::Matrix::end "const_iterator
CasADi::Matrix< T >::end() const ";

%feature("docstring")  CasADi::Matrix::rend "reverse_iterator
CasADi::Matrix< T >::rend() ";

%feature("docstring")  CasADi::Matrix::rend "const_reverse_iterator
CasADi::Matrix< T >::rend() const ";

%feature("docstring")  CasADi::Matrix::front "reference
CasADi::Matrix< T >::front()

Get references to beginning and end. ";

%feature("docstring")  CasADi::Matrix::front "const_reference
CasADi::Matrix< T >::front() const ";

%feature("docstring")  CasADi::Matrix::back "reference
CasADi::Matrix< T >::back() ";

%feature("docstring")  CasADi::Matrix::back "const_reference
CasADi::Matrix< T >::back() const ";

%feature("docstring")  CasADi::Matrix::Matrix "CasADi::Matrix< T
>::Matrix(const Matrix< A > &x)

Create a matrix from a matrix with a different type of matrix entries
(assuming that the scalar conversion is valid) ";

%feature("docstring")  CasADi::Matrix::Matrix "CasADi::Matrix< T
>::Matrix(const std::vector< A > &x)

Create an expression from an stl vector. ";

%feature("docstring")  CasADi::Matrix::Matrix "CasADi::Matrix< T
>::Matrix(const std::vector< A > &x, int n, int m)

Create a non-vector expression from an stl vector. ";

%feature("docstring")  CasADi::Matrix::size "int CasADi::Matrix< T
>::size() const

ublas vector

get the number of non-zeros ";

%feature("docstring")  CasADi::Matrix::sizeL "int CasADi::Matrix< T
>::sizeL() const

get the number of non-zeros in the lower triangular half ";

%feature("docstring")  CasADi::Matrix::sizeU "int CasADi::Matrix< T
>::sizeU() const

get the number of non-zeros in the upper triangular half ";

%feature("docstring")  CasADi::Matrix::numel "int CasADi::Matrix< T
>::numel() const

get the number of elements ";

%feature("docstring")  CasADi::Matrix::size1 "int CasADi::Matrix< T
>::size1() const

get the first dimension ";

%feature("docstring")  CasADi::Matrix::size2 "int CasADi::Matrix< T
>::size2() const

get the second dimension ";

%feature("docstring")  CasADi::Matrix::at "const T& CasADi::Matrix< T
>::at(int k) const

Get a non-zero element. ";

%feature("docstring")  CasADi::Matrix::at "T& CasADi::Matrix< T
>::at(int k)

Access a non-zero element. ";

%feature("docstring")  CasADi::Matrix::elem "const T &
CasADi::Matrix< T >::elem(int i, int j=0) const

get an element ";

%feature("docstring")  CasADi::Matrix::elem "T & CasADi::Matrix< T
>::elem(int i, int j=0)

get a reference to an element ";

%feature("docstring")  CasADi::Matrix::getElement "const T
CasADi::Matrix< T >::getElement(int i, int j=0) const

get an element, do not allocate ";

%feature("docstring")  CasADi::Matrix::setZero "void CasADi::Matrix<
T >::setZero()

Set all elements to zero. ";

%feature("docstring")  CasADi::Matrix::setAll "void CasADi::Matrix< T
>::setAll(const T &val)

Set all elements to a value. ";

%feature("docstring")  CasADi::Matrix::makeDense "void
CasADi::Matrix< T >::makeDense(int n, int m, const T &val)

Make the matrix an dense n-by-m matrix. ";

%feature("docstring")  CasADi::Matrix::makeEmpty "void
CasADi::Matrix< T >::makeEmpty(int n, int m)

Make the matrix an empty n-by-m matrix. ";

%feature("docstring")  CasADi::Matrix::unary_old "Matrix< T >
CasADi::Matrix< T >::unary_old(T(*fcn)(const T &)) const

Unary function. ";

%feature("docstring")  CasADi::Matrix::binary_old "Matrix< T >
CasADi::Matrix< T >::binary_old(T(*fcn)(const T &, const T &), const
Matrix< T > &y) const ";

%feature("docstring")  CasADi::Matrix::unary_old "void
CasADi::Matrix< T >::unary_old(T(*fcn)(const T &), const Matrix< T >
&x) ";

%feature("docstring")  CasADi::Matrix::binary_old "void
CasADi::Matrix< T >::binary_old(T(*fcn)(const T &, const T &), const
Matrix< T > &x, const Matrix< T > &y) ";

%feature("docstring")  CasADi::Matrix::matrix_matrix_old "void
CasADi::Matrix< T >::matrix_matrix_old(T(*fcn)(const T &, const T &),
const Matrix< T > &x, const Matrix< T > &y) ";

%feature("docstring")  CasADi::Matrix::matrix_scalar_old "void
CasADi::Matrix< T >::matrix_scalar_old(T(*fcn)(const T &, const T &),
const Matrix< T > &x, const T &y) ";

%feature("docstring")  CasADi::Matrix::scalar_matrix_old "void
CasADi::Matrix< T >::scalar_matrix_old(T(*fcn)(const T &, const T &),
const T &x, const Matrix< T > &y) ";

%feature("docstring")  CasADi::Matrix::prod "Matrix< T >
CasADi::Matrix< T >::prod(const Matrix< T > &y) const

Matrix product. ";

%feature("docstring")  CasADi::Matrix::trans "Matrix< T >
CasADi::Matrix< T >::trans() const

Matrix transpose. ";

%feature("docstring")  CasADi::Matrix::dimString "std::string
CasADi::Matrix< T >::dimString() const

Get string representation of dimensions. The representation is (nrow x
ncol = numel | size) ";

%feature("docstring")  CasADi::Matrix::col "const std::vector< int >
& CasADi::Matrix< T >::col() const ";

%feature("docstring")  CasADi::Matrix::rowind "const std::vector< int
> & CasADi::Matrix< T >::rowind() const ";

%feature("docstring")  CasADi::Matrix::col "int CasADi::Matrix< T
>::col(int el) const ";

%feature("docstring")  CasADi::Matrix::rowind "int CasADi::Matrix< T
>::rowind(int row) const ";

%feature("docstring")  CasADi::Matrix::clear "void CasADi::Matrix< T
>::clear() ";

%feature("docstring")  CasADi::Matrix::resize "void CasADi::Matrix< T
>::resize(int n, int m) ";

%feature("docstring")  CasADi::Matrix::reserve "void CasADi::Matrix<
T >::reserve(int nnz) ";

%feature("docstring")  CasADi::Matrix::reserve "void CasADi::Matrix<
T >::reserve(int nnz, int nrow) ";

%feature("docstring")  CasADi::Matrix::erase "void CasADi::Matrix< T
>::erase(const std::vector< int > &ii, const std::vector< int > &jj)

Erase a submatrix Erase rows and/or columns of a matrix. ";

%feature("docstring")  CasADi::Matrix::enlarge "void CasADi::Matrix<
T >::enlarge(int nrow, int ncol, const std::vector< int > &ii, const
std::vector< int > &jj)

Enlarge matrix Make the matrix larger by inserting empty rows and
columns, keeping the existing non-zeros. ";

%feature("docstring")  CasADi::Matrix::data "std::vector< T > &
CasADi::Matrix< T >::data()

Access the non-zero elements. ";

%feature("docstring")  CasADi::Matrix::data "const std::vector< T > &
CasADi::Matrix< T >::data() const

Const access the non-zero elements. ";

%feature("docstring")  CasADi::Matrix::sparsity "const CRSSparsity&
CasADi::Matrix< T >::sparsity() const

Const access the sparsity - reference to data member. ";

%feature("docstring")  CasADi::Matrix::sparsityRef "CRSSparsity &
CasADi::Matrix< T >::sparsityRef()

Access the sparsity, make a copy if there are multiple references to
it. ";

%feature("docstring")  CasADi::Matrix::set "void CasADi::Matrix< T
>::set(T val, Sparsity sp=SPARSE)

Set the non-zero elements, scalar. ";

%feature("docstring")  CasADi::Matrix::get "void CasADi::Matrix< T
>::get(T &val, Sparsity sp=SPARSE) const

Get the non-zero elements, scalar. ";

%feature("docstring")  CasADi::Matrix::set "void CasADi::Matrix< T
>::set(const std::vector< T > &val, Sparsity sp=SPARSE)

Set the non-zero elements, vector. ";

%feature("docstring")  CasADi::Matrix::get "void CasADi::Matrix< T
>::get(std::vector< T > &val, Sparsity sp=SPARSE) const

Get the non-zero elements, vector. ";

%feature("docstring")  CasADi::Matrix::set "void CasADi::Matrix< T
>::set(const Matrix< T > &val, Sparsity sp=SPARSE)

Set the non-zero elements, Matrix. ";

%feature("docstring")  CasADi::Matrix::get "void CasADi::Matrix< T
>::get(Matrix< T > &val, Sparsity sp=SPARSE) const

Get the non-zero elements, Matrix. ";

%feature("docstring")  CasADi::Matrix::getArray "void CasADi::Matrix<
T >::getArray(T *val, int len, Sparsity sp=SPARSE) const

Get the non-zero elements, array. ";

%feature("docstring")  CasADi::Matrix::setArray "void CasADi::Matrix<
T >::setArray(const T *val, int len, Sparsity sp=SPARSE)

Set the non-zero elements, array. ";

%feature("docstring")  CasADi::Matrix::getArray "void CasADi::Matrix<
T >::getArray(T *val) const

Get the non-zero elements, array, sparse and correct length. ";

%feature("docstring")  CasADi::Matrix::setArray "void CasADi::Matrix<
T >::setArray(const T *val)

Set the non-zero elements, array, sparse and correct length. ";

%feature("docstring")  CasADi::Matrix::getStridedArray "void
CasADi::Matrix< T >::getStridedArray(T *val, int len, int stride1, int
stride2, Sparsity sp=SPARSE) const

Get the non-zero elements, strided array.

Set stride to zero for unstrided acces ";

%feature("docstring")  CasADi::Matrix::get "void CasADi::Matrix< T
>::get(T *val, Sparsity sp=SPARSE) const

Legacy - use getArray instead. ";

%feature("docstring")  CasADi::Matrix::set "void CasADi::Matrix< T
>::set(const T *val, Sparsity sp=SPARSE)

Legacy - use setArray instead. ";

%feature("docstring")  CasADi::Matrix::getBand "void CasADi::Matrix<
T >::getBand(int kl, int ku, int ldres, T *res) const

Save the result to the LAPACK banded format -- see LAPACK
documentation kl: The number of subdiagonals in res ku: The number of
superdiagonals in res ldres: The leading dimension in res res: The
number of superdiagonals. ";

%feature("docstring")  CasADi::Matrix::size "int CasADi::Matrix< T
>::size(Sparsity sp) const ";

%feature("docstring")  CasADi::Matrix::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::Matrix::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1MinusInfSXNode.xml
%feature("docstring") CasADi::MinusInfSXNode "

Represents a minus infinity SX.

Joel Andersson

C++ includes: constant_sx_node.hpp ";

%feature("docstring")  CasADi::MinusInfSXNode::isInteger "bool
CasADi::SXNode::isInteger() const ";

%feature("docstring")  CasADi::MinusInfSXNode::isSymbolic "bool
CasADi::SXNode::isSymbolic() const ";

%feature("docstring")  CasADi::MinusInfSXNode::hasDep "bool
CasADi::SXNode::hasDep() const ";

%feature("docstring")  CasADi::MinusInfSXNode::isZero "bool
CasADi::SXNode::isZero() const ";

%feature("docstring")  CasADi::MinusInfSXNode::isOne "bool
CasADi::SXNode::isOne() const ";

%feature("docstring")  CasADi::MinusInfSXNode::isMinusOne "bool
CasADi::SXNode::isMinusOne() const ";

%feature("docstring")  CasADi::MinusInfSXNode::isNan "bool
CasADi::SXNode::isNan() const ";

%feature("docstring")  CasADi::MinusInfSXNode::isInf "bool
CasADi::SXNode::isInf() const ";

%feature("docstring")  CasADi::MinusInfSXNode::getIntValue "int
CasADi::SXNode::getIntValue() const ";

%feature("docstring")  CasADi::MinusInfSXNode::MinusInfSXNode "CasADi::MinusInfSXNode::MinusInfSXNode() ";

%feature("docstring")  CasADi::MinusInfSXNode::~MinusInfSXNode "virtual CasADi::MinusInfSXNode::~MinusInfSXNode() ";

%feature("docstring")  CasADi::MinusInfSXNode::getValue "virtual
double CasADi::MinusInfSXNode::getValue() const

Get the value. ";

%feature("docstring")  CasADi::MinusInfSXNode::isMinusInf "virtual
bool CasADi::MinusInfSXNode::isMinusInf() const

Properties. ";

%feature("docstring")  CasADi::MinusInfSXNode::isConstant "virtual
bool CasADi::ConstantSXNode::isConstant() const

Properties. ";

%feature("docstring")  CasADi::MinusInfSXNode::print "void
CasADi::SXNode::print(std::ostream &stream) const

print ";

%feature("docstring")  CasADi::MinusInfSXNode::getName "const
std::string & CasADi::SXNode::getName() const ";

%feature("docstring")  CasADi::MinusInfSXNode::getOp "int
CasADi::SXNode::getOp() const

get the operation only for binary nodes ";

%feature("docstring")  CasADi::MinusInfSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SXNode &node) const

comparison ";

%feature("docstring")  CasADi::MinusInfSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SX &scalar) const

comparison ";

%feature("docstring")  CasADi::MinusInfSXNode::ndep "virtual int
CasADi::SXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::MinusInfSXNode::dep "const SX &
CasADi::SXNode::dep(int i) const

get the reference of a child ";

%feature("docstring")  CasADi::MinusInfSXNode::dep "SX &
CasADi::SXNode::dep(int i)

get the reference of a child ";

%feature("docstring")  CasADi::MinusInfSXNode::isSmooth "bool
CasADi::SXNode::isSmooth() const

Check if smooth. ";


// File: classCasADi_1_1MinusOneSXNode.xml
%feature("docstring") CasADi::MinusOneSXNode "

Represents a minus one SX.

Joel Andersson

C++ includes: constant_sx_node.hpp ";

%feature("docstring")  CasADi::MinusOneSXNode::getValue "virtual
double CasADi::MinusOneSXNode::getValue() const

Get the value. ";

%feature("docstring")  CasADi::MinusOneSXNode::getIntValue "virtual
int CasADi::MinusOneSXNode::getIntValue() const ";

%feature("docstring")  CasADi::MinusOneSXNode::isInteger "virtual
bool CasADi::MinusOneSXNode::isInteger() const

Properties. ";

%feature("docstring")  CasADi::MinusOneSXNode::isMinusOne "virtual
bool CasADi::MinusOneSXNode::isMinusOne() const ";

%feature("docstring")  CasADi::MinusOneSXNode::isSymbolic "bool
CasADi::SXNode::isSymbolic() const ";

%feature("docstring")  CasADi::MinusOneSXNode::hasDep "bool
CasADi::SXNode::hasDep() const ";

%feature("docstring")  CasADi::MinusOneSXNode::isZero "bool
CasADi::SXNode::isZero() const ";

%feature("docstring")  CasADi::MinusOneSXNode::isOne "bool
CasADi::SXNode::isOne() const ";

%feature("docstring")  CasADi::MinusOneSXNode::isNan "bool
CasADi::SXNode::isNan() const ";

%feature("docstring")  CasADi::MinusOneSXNode::isInf "bool
CasADi::SXNode::isInf() const ";

%feature("docstring")  CasADi::MinusOneSXNode::isMinusInf "bool
CasADi::SXNode::isMinusInf() const ";

%feature("docstring")  CasADi::MinusOneSXNode::MinusOneSXNode "CasADi::MinusOneSXNode::MinusOneSXNode() ";

%feature("docstring")  CasADi::MinusOneSXNode::~MinusOneSXNode "virtual CasADi::MinusOneSXNode::~MinusOneSXNode() ";

%feature("docstring")  CasADi::MinusOneSXNode::isConstant "virtual
bool CasADi::ConstantSXNode::isConstant() const

Properties. ";

%feature("docstring")  CasADi::MinusOneSXNode::print "void
CasADi::SXNode::print(std::ostream &stream) const

print ";

%feature("docstring")  CasADi::MinusOneSXNode::getName "const
std::string & CasADi::SXNode::getName() const ";

%feature("docstring")  CasADi::MinusOneSXNode::getOp "int
CasADi::SXNode::getOp() const

get the operation only for binary nodes ";

%feature("docstring")  CasADi::MinusOneSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SXNode &node) const

comparison ";

%feature("docstring")  CasADi::MinusOneSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SX &scalar) const

comparison ";

%feature("docstring")  CasADi::MinusOneSXNode::ndep "virtual int
CasADi::SXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::MinusOneSXNode::dep "const SX &
CasADi::SXNode::dep(int i) const

get the reference of a child ";

%feature("docstring")  CasADi::MinusOneSXNode::dep "SX &
CasADi::SXNode::dep(int i)

get the reference of a child ";

%feature("docstring")  CasADi::MinusOneSXNode::isSmooth "bool
CasADi::SXNode::isSmooth() const

Check if smooth. ";


// File: classKINEMATICS_1_1ModelSimulator.xml
%feature("docstring") KINEMATICS::ModelSimulator "C++ includes:
simulator.hpp ";

%feature("docstring")  KINEMATICS::ModelSimulator::ModelSimulator "ModelSimulator::ModelSimulator() ";

%feature("docstring")  KINEMATICS::ModelSimulator::~ModelSimulator "ModelSimulator::~ModelSimulator() ";

%feature("docstring")  KINEMATICS::ModelSimulator::evaluate "ublas::vector< double > ModelSimulator::evaluate(double t, const
ublas::vector< double > &q, const ublas::vector< double > &u) ";

%feature("docstring")  KINEMATICS::ModelSimulator::evaluatelin "ublas::vector< double > ModelSimulator::evaluatelin(double t, const
ublas::vector< double > &q) ";

%feature("docstring")  KINEMATICS::ModelSimulator::output "ublas::vector< double > ModelSimulator::output() ";

%feature("docstring")  KINEMATICS::ModelSimulator::integrateOnce "void ModelSimulator::integrateOnce(double dt) ";

%feature("docstring")  KINEMATICS::ModelSimulator::integrate "void
ModelSimulator::integrate(double dt) ";

%feature("docstring")  KINEMATICS::ModelSimulator::integratelin "void
ModelSimulator::integratelin(double dt) ";

%feature("docstring")  KINEMATICS::ModelSimulator::init "void
ModelSimulator::init(const ublas::vector< double > &q)

initialize the state ";

%feature("docstring")  KINEMATICS::ModelSimulator::setInput "void
ModelSimulator::setInput(ublas::vector< double > input) ";

%feature("docstring")  KINEMATICS::ModelSimulator::setdeltat "void
ModelSimulator::setdeltat(double t) ";

%feature("docstring")  KINEMATICS::ModelSimulator::linearize "void
ModelSimulator::linearize(double t, const ublas::vector< double > &q,
const ublas::vector< double > &u) ";

%feature("docstring")  KINEMATICS::ModelSimulator::initDumb "void
KINEMATICS::ModelSimulator::initDumb(int i, double ini_) ";

%feature("docstring")  KINEMATICS::ModelSimulator::outputDumb "double
KINEMATICS::ModelSimulator::outputDumb(int i) ";

%feature("docstring")  KINEMATICS::ModelSimulator::setInputDumb "void
KINEMATICS::ModelSimulator::setInputDumb(int i, double ini_) ";

%feature("docstring")  KINEMATICS::ModelSimulator::test "void
ModelSimulator::test() ";


// File: classCasADi_1_1MultipleOutput.xml
%feature("docstring") CasADi::MultipleOutput "

Joel Andersson

C++ includes: multiple_output.hpp ";

%feature("docstring")  CasADi::MultipleOutput::MultipleOutput "CasADi::MultipleOutput::MultipleOutput()

Constructor. ";

%feature("docstring")  CasADi::MultipleOutput::~MultipleOutput "CasADi::MultipleOutput::~MultipleOutput()

Destructor. ";

%feature("docstring")  CasADi::MultipleOutput::getNumOutputs "virtual
int CasADi::MultipleOutput::getNumOutputs() const =0

Number of outputs. ";

%feature("docstring")  CasADi::MultipleOutput::sparsity "virtual
const CRSSparsity& CasADi::MultipleOutput::sparsity(int oind)=0

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::MultipleOutput::isMultipleOutput "virtual bool CasADi::MultipleOutput::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::MultipleOutput::clone "virtual MXNode*
CasADi::MXNode::clone() const =0

Clone function. ";

%feature("docstring")  CasADi::MultipleOutput::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::MultipleOutput::print "virtual void
CasADi::MXNode::print(std::ostream &stream, const std::vector<
std::string > &args) const =0

Print expression. ";

%feature("docstring")  CasADi::MultipleOutput::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::MultipleOutput::evaluate "virtual void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const
DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)=0

Evaluate the function. ";

%feature("docstring")  CasADi::MultipleOutput::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::MultipleOutput::evaluateSX "virtual
void CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input,
SXMatrixPtrV &output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV
&fwdSens, const SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)=0

Evaluate symbolically ( SX) ";

%feature("docstring")  CasADi::MultipleOutput::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::MultipleOutput::evaluateMX "virtual
void CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output,
const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed,
MXPtrVV &adjSens, bool output_given)=0

Evaluate symbolically ( MX) ";

%feature("docstring")  CasADi::MultipleOutput::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::MultipleOutput::propagateSparsity "virtual void CasADi::MXNode::propagateSparsity(const DMatrixPtrV
&input, DMatrixPtrV &output)=0

Propagate sparsity. ";

%feature("docstring")  CasADi::MultipleOutput::getName "const string
& CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::MultipleOutput::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::MultipleOutput::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::MultipleOutput::isMapping "virtual
bool CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::MultipleOutput::isEvaluation "virtual
bool CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::MultipleOutput::isOutputNode "virtual
bool CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::MultipleOutput::isJacobian "virtual
bool CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::MultipleOutput::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::MultipleOutput::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::MultipleOutput::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::MultipleOutput::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::MultipleOutput::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::MultipleOutput::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::MultipleOutput::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::MultipleOutput::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::MultipleOutput::isNonLinear "virtual
bool CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::MultipleOutput::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::MultipleOutput::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::MultipleOutput::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::MultipleOutput::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::MultipleOutput::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::MultipleOutput::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::MultipleOutput::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::MultipleOutput::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::MultipleOutput::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::MultipleOutput::isOperation "virtual
bool CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::MultipleOutput::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::MultipleOutput::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::MultipleOutput::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::MultipleOutput::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::MultipleOutput::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::MultipleOutput::eval "virtual
Matrix<double> CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::MultipleOutput::eval "virtual
Matrix<SX> CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::MultipleOutput::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::MultipleOutput::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::MultipleOutput::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::MultipleOutput::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1OptimalControl_1_1MultipleShooting.xml
%feature("docstring") CasADi::OptimalControl::MultipleShooting "

Multiple Shooting.

ns: Number of shooting nodes: from option number_of_grid_points  nx:
Number of differential states: from ffcn.input(INTEGRATOR_X0).size()
nu: Number of controls: from ffcn.input(INTEGRATOR_P).size() - np  np:
Number of parameters: from option number_of_parameters  nh: Number of
point constraints: from cfcn.input(0).size()

MultipleShooting is an CasADi::FX mapping from CasADi::OCPInput to
CasADi::OCPOutput

Joel Andersson

Name

Description

OCP_X_OPT

Optimal state trajectory.

OCP_U_OPT

Optimal control trajectory.

OCP_XP_OPT

Optimal state derivative trajectory.

OCP_P_OPT

Optimal parameters. Input scheme: CasADi::OCPOutput (OCP_NUM_OUT = 4)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

final_time

OT_REAL

1.0

CasADi::OCPSolverInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

nlp_solver

OT_NLPSOLVER

GenericType()

An NLPSolver creator function

CasADi::OptimalControl::MultipleShootingInternal

nlp_solver_options

OT_DICTIONARY

GenericType()

Options to be passed to the NLP Solver

CasADi::OptimalControl::MultipleShootingInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

number_of_grid_points

OT_INTEGER

20

CasADi::OCPSolverInternal

number_of_parameters

OT_INTEGER

0

CasADi::OCPSolverInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

parallelization

OT_STRING

None

CasADi::OptimalControl::MultipleShootingInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: multiple_shooting.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::MultipleShooting "CasADi::OptimalControl::MultipleShooting::MultipleShooting()

Default constructor. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::MultipleShooting "CasADi::OptimalControl::MultipleShooting::MultipleShooting(const FX
&ffcn, const FX &mfcn, const FX &cfcn=FX(), const FX &rfcn=FX())

Create a multiple shooting OCP solver.

Parameters:
-----------

ffcn:  Discrete time dynamics, CasADi::FX mapping from
CasADi::IntegratorInput to CasADi::IntegratorOutput

mfcn:  Mayer term, mapping endstate (nx x 1) to cost (1 x 1)

cfcn:  Path constraints, CasADi::FX mapping from CasADi::DAEInput to
(nh x 1)

rfcn:  Initial value constraints ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getGuess "void
CasADi::OptimalControl::MultipleShooting::getGuess(std::vector< double
> &V_init) const

Get the variables. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getVariableBounds "void
CasADi::OptimalControl::MultipleShooting::getVariableBounds(std::vector<
double > &V_min, std::vector< double > &V_max) const

Get the variables. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getConstraintBounds "void
CasADi::OptimalControl::MultipleShooting::getConstraintBounds(std::vector<
double > &G_min, std::vector< double > &G_max) const

Get the constraints. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::setOptimalSolution "void
CasADi::OptimalControl::MultipleShooting::setOptimalSolution(const
std::vector< double > &V_opt)

Set the optimal solution. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::solve
"void CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::call
"vector< MX > CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::call
"std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix >
&x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::call
"std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::call
"std::vector<MX> CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::call
"std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::jacSparsity "CRSSparsity &
CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::checkNode "bool
CasADi::FX::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::input
"const Matrix< double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::input
"Matrix< double > & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::output "Matrix< double > &
CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::fwdSeed "Matrix< double > &
CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::fwdSens "Matrix< double > &
CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::adjSeed "Matrix< double > &
CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::adjSens "Matrix< double > &
CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getStats "const Dictionary
& CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::symbolicInput "std::vector<
MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::clone
"SharedObject CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::get "const SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::swap
"void CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::repr
"void CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::print
"void CasADi::SharedObject::print(std::ostream &stream=std::cout)
const

Print a destription of the object. ";

%feature("docstring")  CasADi::OptimalControl::MultipleShooting::init
"void CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")
CasADi::OptimalControl::MultipleShooting::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1OptimalControl_1_1MultipleShootingInternal.xml
%feature("docstring") CasADi::OptimalControl::MultipleShootingInternal
"

Name

Description

OCP_X_OPT

Optimal state trajectory.

OCP_U_OPT

Optimal control trajectory.

OCP_XP_OPT

Optimal state derivative trajectory.

OCP_P_OPT

Optimal parameters. Input scheme: CasADi::OCPOutput (OCP_NUM_OUT = 4)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

final_time

OT_REAL

1.0

CasADi::OCPSolverInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

nlp_solver

OT_NLPSOLVER

GenericType()

An NLPSolver creator function

CasADi::OptimalControl::MultipleShootingInternal

nlp_solver_options

OT_DICTIONARY

GenericType()

Options to be passed to the NLP Solver

CasADi::OptimalControl::MultipleShootingInternal

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

number_of_grid_points

OT_INTEGER

20

CasADi::OCPSolverInternal

number_of_parameters

OT_INTEGER

0

CasADi::OCPSolverInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

parallelization

OT_STRING

None

CasADi::OptimalControl::MultipleShootingInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: multiple_shooting_internal.hpp ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::MultipleShootingInternal
"CasADi::OptimalControl::MultipleShootingInternal::MultipleShootingInternal(const
FX &ffcn, const FX &mfcn, const FX &cfcn, const FX &rfcn) ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::clone "virtual
MultipleShootingInternal*
CasADi::OptimalControl::MultipleShootingInternal::clone() const

Make a deep copy of the instance. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::~MultipleShootingInternal
"CasADi::OptimalControl::MultipleShootingInternal::~MultipleShootingInternal()
";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::init "void
CasADi::OptimalControl::MultipleShootingInternal::init()

Initialize. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::evaluate "void
CasADi::OptimalControl::MultipleShootingInternal::evaluate(int nfdir,
int nadir)

Evaluate. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::getGuess "void
CasADi::OptimalControl::MultipleShootingInternal::getGuess(std::vector<
double > &V_init) const ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::getVariableBounds "void
CasADi::OptimalControl::MultipleShootingInternal::getVariableBounds(std::vector<
double > &V_min, std::vector< double > &V_max) const ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::getConstraintBounds
"void
CasADi::OptimalControl::MultipleShootingInternal::getConstraintBounds(std::vector<
double > &G_min, std::vector< double > &G_max) const ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::setOptimalSolution "void
CasADi::OptimalControl::MultipleShootingInternal::setOptimalSolution(const
std::vector< double > &V_opt) ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::evaluate_switch "void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::jacobian "virtual
FX CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int
> > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::numeric_jacobian "FX CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::unidirectionalColoring
"CRSSparsity CasADi::FXInternal::unidirectionalColoring(const
CRSSparsity &A, const CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::setJacSparsity "void CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int
iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::getFullJacobian "void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::deepCopyMembers "void CasADi::SharedObjectNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")
CasADi::OptimalControl::MultipleShootingInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1Multiplication.xml
%feature("docstring") CasADi::Multiplication "

An MX atomic for matrix-matrix product, note that the factor must be
provided transposed.

Joel Andersson

C++ includes: multiplication.hpp ";

%feature("docstring")  CasADi::Multiplication::Multiplication "CasADi::Multiplication::Multiplication(const MX &x, const MX &y_trans)

Constructor. ";

%feature("docstring")  CasADi::Multiplication::~Multiplication "virtual CasADi::Multiplication::~Multiplication()

Destructor. ";

%feature("docstring")  CasADi::Multiplication::clone "Multiplication
* CasADi::Multiplication::clone() const

Clone function. ";

%feature("docstring")  CasADi::Multiplication::print "void
CasADi::Multiplication::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::Multiplication::evaluate "void
CasADi::Multiplication::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const
DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::Multiplication::evaluateSX "void
CasADi::Multiplication::evaluateSX(const SXMatrixPtrV &input,
SXMatrixPtrV &output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV
&fwdSens, const SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::Multiplication::evaluateMX "void
CasADi::Multiplication::evaluateMX(const MXPtrV &input, MXPtrV
&output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::Multiplication::propagateSparsity "void CasADi::Multiplication::propagateSparsity(const DMatrixPtrV
&input, DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::Multiplication::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Multiplication::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::Multiplication::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::Multiplication::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::Multiplication::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::Multiplication::getName "const string
& CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::Multiplication::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::Multiplication::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::Multiplication::isMapping "virtual
bool CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::Multiplication::isEvaluation "virtual
bool CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::Multiplication::isOutputNode "virtual
bool CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::Multiplication::isMultipleOutput "virtual bool CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::Multiplication::isJacobian "virtual
bool CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::Multiplication::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::Multiplication::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::Multiplication::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::Multiplication::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::Multiplication::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::Multiplication::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::Multiplication::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::Multiplication::getNumOutputs "virtual
int CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::Multiplication::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::Multiplication::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::Multiplication::isNonLinear "virtual
bool CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::Multiplication::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::Multiplication::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::Multiplication::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::Multiplication::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::Multiplication::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::Multiplication::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::Multiplication::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::Multiplication::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::Multiplication::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::Multiplication::isOperation "virtual
bool CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::Multiplication::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::Multiplication::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::Multiplication::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::Multiplication::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::Multiplication::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::Multiplication::eval "virtual
Matrix<double> CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::Multiplication::eval "virtual
Matrix<SX> CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::Multiplication::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::Multiplication::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Multiplication::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::Multiplication::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1MuscodFunction.xml
%feature("docstring") CasADi::MuscodFunction "

CasADi to MUSCOD function interface.

Note: only one instance is allowed for each template instaniation of
this class

C++ includes: muscod_function.hpp ";

%feature("docstring")  CasADi::MuscodFunction::MuscodFunction "CasADi::MuscodFunction::MuscodFunction(const FX &f=FX())

Constructor (implicit typeconversion is allowed) ";

%feature("docstring")  CasADi::MuscodFunction::~MuscodFunction "CasADi::MuscodFunction::~MuscodFunction()

Destructor. ";

%feature("docstring")  CasADi::MuscodFunction::MuscodFunction "CasADi::MuscodFunction::MuscodFunction(const MuscodFunction &fcn)

Copy constructor. ";

%feature("docstring")  CasADi::MuscodFunction::getPtr "muscodFunctionPtr CasADi::MuscodFunction::getPtr()

Get a function pointer to the current instance. ";

%feature("docstring")  CasADi::MuscodFunction::fcn "void
CasADi::MuscodFunction::fcn(double *t, double *xd, double *xa, double
*u, double *p, double *rhs, double *rwh, long *iwh, long *info)

Internal functions. ";


// File: classCasADi_1_1MuscodInterface.xml
%feature("docstring") CasADi::MuscodInterface "

Id

Type

Default

Description

Used in

acc

OT_REAL

1e-6

accuracy of NLP solution

CasADi::MuscodInternal

backupfile

OT_STRING

\"restart.bin\"

CasADi::MuscodInternal

bflag

OT_INTEGER

-1

CasADi::MuscodInternal

cflag

OT_INTEGER

0

CasADi::MuscodInternal

datfile

OT_STRING

None

CasADi::MuscodInternal

eflag

OT_INTEGER

0

use two gradient evaluations per SQP iteration

CasADi::MuscodInternal

itol

OT_REAL

1e-7

initial integration tolerance

CasADi::MuscodInternal

levmar

OT_REAL

0.0

Levenberg Marquardt regularization of hessian

CasADi::MuscodInternal

logfile

OT_STRING

\"log.txt\"

CasADi::MuscodInternal

mf

OT_INTEGER

0

maximum # of successive ``fixed'' iterations

CasADi::MuscodInternal

mi

OT_INTEGER

100

maximum total # of SQP iterations

CasADi::MuscodInternal

name

OT_STRING

\"muscod_problem\"

CasADi::MuscodInternal

nhtopy

OT_INTEGER

0

# of homotopy steps

CasADi::MuscodInternal

ppath

OT_STRING

\"PAR\"

CasADi::MuscodInternal

resfile

OT_STRING

\"muscod_results.txt\"

CasADi::MuscodInternal

restartfile

OT_STRING

\"restart.bin\"

CasADi::MuscodInternal

rfac

OT_INTEGER

0.0

CasADi::MuscodInternal

sf

OT_INTEGER

0

index of first SQP iteration using fixed discretization

CasADi::MuscodInternal

sflag

OT_INTEGER

0

stop after each SQP iteration

CasADi::MuscodInternal

tol

OT_REAL

1e-7

integration tolerance

CasADi::MuscodInternal

wflag

OT_INTEGER

0

warm/cool start using final data of previous run

CasADi::MuscodInternal List of available options

C++ includes: muscod_interface.hpp ";

/*  Option Functionality  */

%feature("docstring")  CasADi::MuscodInterface::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::MuscodInterface::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::MuscodInterface::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::MuscodInterface::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::MuscodInterface::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::MuscodInterface::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::MuscodInterface::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::MuscodInterface::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::MuscodInterface::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::MuscodInterface::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::MuscodInterface::MuscodInterface "CasADi::MuscodInterface::MuscodInterface()

Default constructor. ";

%feature("docstring")  CasADi::MuscodInterface::MuscodInterface "CasADi::MuscodInterface::MuscodInterface(muscodSetupFcn setupFcn)

Create instance. ";

%feature("docstring")  CasADi::MuscodInterface::checkNode "virtual
bool CasADi::MuscodInterface::checkNode()() const

Make sure that the pointer points towards a valid object. ";

%feature("docstring")  CasADi::MuscodInterface::solve "void
CasADi::MuscodInterface::solve()

Solve the problem. ";

%feature("docstring")  CasADi::MuscodInterface::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::MuscodInterface::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::MuscodInterface::assignNodeNoCount "void CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::MuscodInterface::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::MuscodInterface::get "SharedObjectNode
* CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::MuscodInterface::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::MuscodInterface::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::MuscodInterface::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::MuscodInterface::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::MuscodInterface::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::MuscodInterface::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::MuscodInterface::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::MuscodInterface::getRepresentation "string CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::MuscodInterface::getDescription "string CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1MuscodInternal.xml
%feature("docstring") CasADi::MuscodInternal "

Id

Type

Default

Description

Used in

acc

OT_REAL

1e-6

accuracy of NLP solution

CasADi::MuscodInternal

backupfile

OT_STRING

\"restart.bin\"

CasADi::MuscodInternal

bflag

OT_INTEGER

-1

CasADi::MuscodInternal

cflag

OT_INTEGER

0

CasADi::MuscodInternal

datfile

OT_STRING

None

CasADi::MuscodInternal

eflag

OT_INTEGER

0

use two gradient evaluations per SQP iteration

CasADi::MuscodInternal

itol

OT_REAL

1e-7

initial integration tolerance

CasADi::MuscodInternal

levmar

OT_REAL

0.0

Levenberg Marquardt regularization of hessian

CasADi::MuscodInternal

logfile

OT_STRING

\"log.txt\"

CasADi::MuscodInternal

mf

OT_INTEGER

0

maximum # of successive ``fixed'' iterations

CasADi::MuscodInternal

mi

OT_INTEGER

100

maximum total # of SQP iterations

CasADi::MuscodInternal

name

OT_STRING

\"muscod_problem\"

CasADi::MuscodInternal

nhtopy

OT_INTEGER

0

# of homotopy steps

CasADi::MuscodInternal

ppath

OT_STRING

\"PAR\"

CasADi::MuscodInternal

resfile

OT_STRING

\"muscod_results.txt\"

CasADi::MuscodInternal

restartfile

OT_STRING

\"restart.bin\"

CasADi::MuscodInternal

rfac

OT_INTEGER

0.0

CasADi::MuscodInternal

sf

OT_INTEGER

0

index of first SQP iteration using fixed discretization

CasADi::MuscodInternal

sflag

OT_INTEGER

0

stop after each SQP iteration

CasADi::MuscodInternal

tol

OT_REAL

1e-7

integration tolerance

CasADi::MuscodInternal

wflag

OT_INTEGER

0

warm/cool start using final data of previous run

CasADi::MuscodInternal List of available options

C++ includes: muscod_internal.hpp ";

%feature("docstring")  CasADi::MuscodInternal::~MuscodInternal "CasADi::MuscodInternal::~MuscodInternal()

Destructor. ";

%feature("docstring")  CasADi::MuscodInternal::clone "virtual
MuscodInternal* CasADi::MuscodInternal::clone() const

Clone function. ";

%feature("docstring")  CasADi::MuscodInternal::solve "void
CasADi::MuscodInternal::solve()

Solve the problem. ";

%feature("docstring")  CasADi::MuscodInternal::print "void
CasADi::MuscodInternal::print(std::ostream &stream) const

Solve the problem. ";

%feature("docstring")  CasADi::MuscodInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::MuscodInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::MuscodInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::MuscodInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::MuscodInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::MuscodInternal::getOption "GenericType
CasADi::OptionsFunctionalityNode::getOption(const std::string &str)
const

get an option value ";

%feature("docstring")  CasADi::MuscodInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::MuscodInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::MuscodInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::MuscodInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::MuscodInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::MuscodInternal::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";


// File: classCasADi_1_1MX.xml
%feature("docstring") CasADi::MX "

MX - Matrix expression The MX class is used to build up trees made up
from MXNodes. It is a more general graph representation than the
scalar expression, SX, and much less efficient for small objects. On
the other hand, the class allows much more general operations than
does SX, in particular matrix valued operations and calls to arbitrary
differentiable functions.

The MX class is designed to have identical syntax with the Matrix<>
template class, and uses Matrix<double> as its internal representation
of the values at a node. By keeping the syntaxes identical, it is
possible to switch from one class to the other, as well as inlining MX
functions to SX functions.

Note that an operation is always \"lazy\", making a matrix
multiplication will create a matrix multiplication node, not perform
the actual multiplication.

Joel Andersson

C++ includes: mx.hpp ";

%feature("docstring")  CasADi::MX::indexed_one_based "const MX
CasADi::MX::indexed_one_based(int k) const

Indexing for interfaced languages.

get a non-zero ";

%feature("docstring")  CasADi::MX::indexed_zero_based "const MX
CasADi::MX::indexed_zero_based(int k) const ";

%feature("docstring")  CasADi::MX::indexed "const MX
CasADi::MX::indexed(const IndexList &k) const ";

%feature("docstring")  CasADi::MX::indexed "const MX
CasADi::MX::indexed(const Slice &k) const ";

%feature("docstring")  CasADi::MX::indexed_one_based "const MX
CasADi::MX::indexed_one_based(int i, int j) const

get a matrix element ";

%feature("docstring")  CasADi::MX::indexed_zero_based "const MX
CasADi::MX::indexed_zero_based(int i, int j) const ";

%feature("docstring")  CasADi::MX::indexed "const MX
CasADi::MX::indexed(const IndexList &i, const IndexList &j) const ";

%feature("docstring")  CasADi::MX::indexed "const MX
CasADi::MX::indexed(const Slice &i, const Slice &j) const ";

%feature("docstring")  CasADi::MX::indexed_one_based_assignment "void
CasADi::MX::indexed_one_based_assignment(int k, const MX &m)

set a non-zero ";

%feature("docstring")  CasADi::MX::indexed_zero_based_assignment "void CasADi::MX::indexed_zero_based_assignment(int k, const MX &m) ";

%feature("docstring")  CasADi::MX::indexed_assignment "void
CasADi::MX::indexed_assignment(const IndexList &k, const MX &m) ";

%feature("docstring")  CasADi::MX::indexed_assignment "void
CasADi::MX::indexed_assignment(const Slice &k, const MX &m) ";

%feature("docstring")  CasADi::MX::indexed_one_based_assignment "void
CasADi::MX::indexed_one_based_assignment(int i, int j, const MX &m)

set a matrix element ";

%feature("docstring")  CasADi::MX::indexed_zero_based_assignment "void CasADi::MX::indexed_zero_based_assignment(int i, int j, const MX
&m) ";

%feature("docstring")  CasADi::MX::indexed_assignment "void
CasADi::MX::indexed_assignment(const IndexList &i, const IndexList &j,
const MX &m) ";

%feature("docstring")  CasADi::MX::indexed_assignment "void
CasADi::MX::indexed_assignment(const Slice &i, const Slice &j, const
MX &m) ";

%feature("docstring")  CasADi::MX::binary "MX CasADi::MX::binary(int
op, const MX &x, const MX &y)

Create nodes by their ID. ";

%feature("docstring")  CasADi::MX::unary "MX CasADi::MX::unary(int
op, const MX &x) ";

%feature("docstring")  CasADi::MX::scalar_matrix "MX
CasADi::MX::scalar_matrix(int op, const MX &x, const MX &y) ";

%feature("docstring")  CasADi::MX::matrix_scalar "MX
CasADi::MX::matrix_scalar(int op, const MX &x, const MX &y) ";

%feature("docstring")  CasADi::MX::matrix_matrix "MX
CasADi::MX::matrix_matrix(int op, const MX &x, const MX &y) ";

%feature("docstring")  CasADi::MX::zeros "MX CasADi::MX::zeros(int
nrow, int ncol=1)

Matrix of all zeros. ";

%feature("docstring")  CasADi::MX::zeros "MX CasADi::MX::zeros(const
CRSSparsity &sparsity) ";

%feature("docstring")  CasADi::MX::zeros "MX CasADi::MX::zeros(const
std::pair< int, int > &nm) ";

%feature("docstring")  CasADi::MX::ones "MX CasADi::MX::ones(int
nrow, int ncol=1)

Matrix of all ones. ";

%feature("docstring")  CasADi::MX::ones "MX CasADi::MX::ones(const
std::pair< int, int > &nm) ";

%feature("docstring")  CasADi::MX::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::MX::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::MX::MX "CasADi::MX::MX()

Default constructor. ";

%feature("docstring")  CasADi::MX::MX "CasADi::MX::MX(const
std::string &name, int n=1, int m=1)

Construct a symbolic matrix (matrix variable) ";

%feature("docstring")  CasADi::MX::MX "CasADi::MX::MX(const
std::string &name, const std::pair< int, int > &nm)

Construct a symbolic matrix (matrix variable) ";

%feature("docstring")  CasADi::MX::MX "CasADi::MX::MX(const
std::string &name, const CRSSparsity &sp)

Construct a symbolic matrix (matrix variable) ";

%feature("docstring")  CasADi::MX::MX "CasADi::MX::MX(const
CRSSparsity &sp, const MX &val)

Construct MX with a given sparsity. ";

%feature("docstring")  CasADi::MX::MX "CasADi::MX::MX(double x)

Create scalar constant (also implicit type conversion) ";

%feature("docstring")  CasADi::MX::MX "CasADi::MX::MX(const MX &x)

Copy constructor. ";

%feature("docstring")  CasADi::MX::MX "CasADi::MX::MX(const
std::vector< double > &x)

Create vector constant (also implicit type conversion) ";

%feature("docstring")  CasADi::MX::MX "CasADi::MX::MX(const Matrix<
double > &x)

Create sparse matrix constant (also implicit type conversion) ";

%feature("docstring")  CasADi::MX::MX "CasADi::MX::MX(int nrow, int
ncol)

Matrix with all zeros. ";

%feature("docstring")  CasADi::MX::MX "CasADi::MX::MX(int nrow, int
ncol, const MX &val)

Dense matrix filled with value val. ";

%feature("docstring")  CasADi::MX::~MX "CasADi::MX::~MX()

Destructor. ";

%feature("docstring")  CasADi::MX::at "const MX CasADi::MX::at(int k)
const

Get a non-zero element, with bounds checking. ";

%feature("docstring")  CasADi::MX::at "NonZeros< MX, int >
CasADi::MX::at(int k)

Access a non-zero element, with bounds checking.

Access a non-zero element. ";

%feature("docstring")  CasADi::MX::size "int CasADi::MX::size() const

Get the number of (structural) non-zero elements. ";

%feature("docstring")  CasADi::MX::numel "int CasADi::MX::numel()
const

Get the number of elements. ";

%feature("docstring")  CasADi::MX::size1 "int CasADi::MX::size1()
const

get the first dimension (i.e. n for a n-by-m matrix) ";

%feature("docstring")  CasADi::MX::size2 "int CasADi::MX::size2()
const

get the first dimension (i.e. m for a n-by-m matrix) ";

%feature("docstring")  CasADi::MX::sparsity "const CRSSparsity &
CasADi::MX::sparsity() const

Get the sparsity pattern. ";

%feature("docstring")  CasADi::MX::sparsityRef "CRSSparsity &
CasADi::MX::sparsityRef()

Access the sparsity, make a copy if there are multiple references to
it. ";

%feature("docstring")  CasADi::MX::erase "void
CasADi::MX::erase(const std::vector< int > &ii, const std::vector< int
> &jj)

Erase a submatrix. ";

%feature("docstring")  CasADi::MX::enlarge "void
CasADi::MX::enlarge(int nrow, int ncol, const std::vector< int > &ii,
const std::vector< int > &jj)

Enlarge matrix Make the matrix larger by inserting empty rows and
columns, keeping the existing non-zeros. ";

%feature("docstring")  CasADi::MX::empty "bool CasADi::MX::empty()
const

Check if the matrix expression is empty. ";

%feature("docstring")  CasADi::MX::dense "bool CasADi::MX::dense()
const

Check if the matrix expression is dense. ";

%feature("docstring")  CasADi::MX::jac "MX CasADi::MX::jac(int
iind=0)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::MX::getSub "const MX
CasADi::MX::getSub(int i, int j) const ";

%feature("docstring")  CasADi::MX::getSub "const MX
CasADi::MX::getSub(int i, const std::vector< int > &j) const ";

%feature("docstring")  CasADi::MX::getSub "const MX
CasADi::MX::getSub(const std::vector< int > &i, int j) const ";

%feature("docstring")  CasADi::MX::getSub "const MX
CasADi::MX::getSub(const std::vector< int > &i, const std::vector< int
> &j) const ";

%feature("docstring")  CasADi::MX::setSub "void
CasADi::MX::setSub(int i, int j, const MX &el) ";

%feature("docstring")  CasADi::MX::setSub "void
CasADi::MX::setSub(int i, const std::vector< int > &j, const MX &el)
";

%feature("docstring")  CasADi::MX::setSub "void
CasADi::MX::setSub(const std::vector< int > &i, int j, const MX &el)
";

%feature("docstring")  CasADi::MX::setSub "void
CasADi::MX::setSub(const std::vector< int > &i, const std::vector< int
> &j, const MX &el) ";

%feature("docstring")  CasADi::MX::getNZ "MX CasADi::MX::getNZ(int k)
const ";

%feature("docstring")  CasADi::MX::getNZ "MX CasADi::MX::getNZ(const
std::vector< int > &k) const ";

%feature("docstring")  CasADi::MX::setNZ "void CasADi::MX::setNZ(int
k, const MX &el) ";

%feature("docstring")  CasADi::MX::setNZ "void
CasADi::MX::setNZ(const std::vector< int > &k, const MX &el) ";

%feature("docstring")  CasADi::MX::eval "Matrix<double>
CasADi::MX::eval(const std::vector< Matrix< double > > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::MX::eval "Matrix<SX>
CasADi::MX::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::MX::eval "MX CasADi::MX::eval(const
std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::MX::dimString "std::string
CasADi::MX::dimString() const

Get string representation of dimensions. The representation is (nrow x
ncol = numel | size) ";

%feature("docstring")  CasADi::MX::__add__ "MX
CasADi::MX::__add__(const MX &b) const ";

%feature("docstring")  CasADi::MX::__sub__ "MX
CasADi::MX::__sub__(const MX &b) const ";

%feature("docstring")  CasADi::MX::__mul__ "MX
CasADi::MX::__mul__(const MX &b) const ";

%feature("docstring")  CasADi::MX::__div__ "MX
CasADi::MX::__div__(const MX &b) const ";

%feature("docstring")  CasADi::MX::__pow__ "MX
CasADi::MX::__pow__(const MX &b) const ";

%feature("docstring")  CasADi::MX::__constpow__ "MX
CasADi::MX::__constpow__(const MX &b) const ";

%feature("docstring")  CasADi::MX::__mrdivide__ "MX
CasADi::MX::__mrdivide__(const MX &b) const ";

%feature("docstring")  CasADi::MX::__mldivide__ "MX
CasADi::MX::__mldivide__(const MX &b) const ";

%feature("docstring")  CasADi::MX::__mpower__ "MX
CasADi::MX::__mpower__(const MX &b) const ";

%feature("docstring")  CasADi::MX::prod "MX CasADi::MX::prod(const MX
&y) const ";

%feature("docstring")  CasADi::MX::inner_prod "MX
CasADi::MX::inner_prod(const MX &y) const ";

%feature("docstring")  CasADi::MX::outer_prod "MX
CasADi::MX::outer_prod(const MX &y) const ";

%feature("docstring")  CasADi::MX::constpow "MX
CasADi::MX::constpow(const MX &y) const ";

%feature("docstring")  CasADi::MX::fmin "MX CasADi::MX::fmin(const MX
&y) const ";

%feature("docstring")  CasADi::MX::fmax "MX CasADi::MX::fmax(const MX
&y) const ";

%feature("docstring")  CasADi::MX::printme "MX
CasADi::MX::printme(const MX &y) const ";

%feature("docstring")  CasADi::MX::exp "MX CasADi::MX::exp() const ";

%feature("docstring")  CasADi::MX::log "MX CasADi::MX::log() const ";

%feature("docstring")  CasADi::MX::log10 "MX CasADi::MX::log10()
const ";

%feature("docstring")  CasADi::MX::sqrt "MX CasADi::MX::sqrt() const
";

%feature("docstring")  CasADi::MX::sin "MX CasADi::MX::sin() const ";

%feature("docstring")  CasADi::MX::cos "MX CasADi::MX::cos() const ";

%feature("docstring")  CasADi::MX::tan "MX CasADi::MX::tan() const ";

%feature("docstring")  CasADi::MX::arcsin "MX CasADi::MX::arcsin()
const ";

%feature("docstring")  CasADi::MX::arccos "MX CasADi::MX::arccos()
const ";

%feature("docstring")  CasADi::MX::arctan "MX CasADi::MX::arctan()
const ";

%feature("docstring")  CasADi::MX::floor "MX CasADi::MX::floor()
const ";

%feature("docstring")  CasADi::MX::ceil "MX CasADi::MX::ceil() const
";

%feature("docstring")  CasADi::MX::erf "MX CasADi::MX::erf() const ";

%feature("docstring")  CasADi::MX::sinh "MX CasADi::MX::sinh() const
";

%feature("docstring")  CasADi::MX::cosh "MX CasADi::MX::cosh() const
";

%feature("docstring")  CasADi::MX::tanh "MX CasADi::MX::tanh() const
";

%feature("docstring")  CasADi::MX::mapping "const Matrix< int > &
CasADi::MX::mapping()

Returns the IMatrix that represents the mapping of a Mapping node. ";

%feature("docstring")  CasADi::MX::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::MX::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::MX::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::MX::get "const SharedObjectNode *
CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::MX::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::MX::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::MX::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::MX::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::MX::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::MX::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::MX::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::MX::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::MX::checkNode "bool
CasADi::SharedObject::checkNode() const

Assert that the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::MX::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::MX::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: structCasADi_1_1MXAlgEl.xml
%feature("docstring") CasADi::MXAlgEl "

An elemenent of the algorithm, namely an MX node.

C++ includes: mx_function.hpp ";


// File: classCasADi_1_1MXConstant.xml
%feature("docstring") CasADi::MXConstant "

Represents an MX that is only composed of a constant.

Joel Andersson  A regular user is not supposed to work with this Node
class. This user can call MX(double) directly, or even rely on
implicit typecasting. See:   zeros , ones

C++ includes: mx_constant.hpp ";

%feature("docstring")  CasADi::MXConstant::MXConstant "CasADi::MXConstant::MXConstant(const Matrix< double > &x)

Constructor. ";

%feature("docstring")  CasADi::MXConstant::clone "MXConstant *
CasADi::MXConstant::clone() const

Clone function. ";

%feature("docstring")  CasADi::MXConstant::print "void
CasADi::MXConstant::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::MXConstant::evaluate "void
CasADi::MXConstant::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const
DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::MXConstant::evaluateSX "void
CasADi::MXConstant::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV &fwdSens, const
SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::MXConstant::evaluateMX "void
CasADi::MXConstant::evaluateMX(const MXPtrV &input, MXPtrV &output,
const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed,
MXPtrVV &adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::MXConstant::propagateSparsity "void
CasADi::MXConstant::propagateSparsity(const DMatrixPtrV &input,
DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::MXConstant::isConstant "bool
CasADi::MXConstant::isConstant() const

Indicate that the node is constant. ";

%feature("docstring")  CasADi::MXConstant::eval "virtual MX
CasADi::MXConstant::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::MXConstant::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::MXConstant::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::MXConstant::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::MXConstant::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::MXConstant::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::MXConstant::getName "const string &
CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::MXConstant::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::MXConstant::isMapping "virtual bool
CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::MXConstant::isEvaluation "virtual bool
CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::MXConstant::isOutputNode "virtual bool
CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::MXConstant::isMultipleOutput "virtual
bool CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::MXConstant::isJacobian "virtual bool
CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::MXConstant::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::MXConstant::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::MXConstant::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::MXConstant::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::MXConstant::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::MXConstant::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::MXConstant::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::MXConstant::getNumOutputs "virtual int
CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::MXConstant::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::MXConstant::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::MXConstant::isNonLinear "virtual bool
CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::MXConstant::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::MXConstant::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::MXConstant::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::MXConstant::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::MXConstant::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::MXConstant::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::MXConstant::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::MXConstant::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::MXConstant::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::MXConstant::isOperation "virtual bool
CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::MXConstant::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::MXConstant::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::MXConstant::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::MXConstant::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::MXConstant::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::MXConstant::eval "virtual
Matrix<double> CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::MXConstant::eval "virtual Matrix<SX>
CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::MXConstant::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::MXConstant::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::MXConstant::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1MXFunction.xml
%feature("docstring") CasADi::MXFunction "

General function mapping from/to MX.

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

topological_sorting

OT_STRING

\"breadth-first\"

Topological sorting algorithm: \"depth-first\" or \"breadth-first\"
search

CasADi::XFunctionInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: mx_function.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::MXFunction::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::MXFunction::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::MXFunction::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::MXFunction::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::MXFunction::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::MXFunction::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::MXFunction::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::MXFunction::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::MXFunction::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::MXFunction::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::MXFunction::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::MXFunction::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::MXFunction::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::MXFunction::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::MXFunction::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::MXFunction::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::MXFunction::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::MXFunction::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::MXFunction::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::MXFunction::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::MXFunction::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::MXFunction::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::MXFunction::MXFunction "CasADi::MXFunction::MXFunction()

Ddefault constructor. ";

%feature("docstring")  CasADi::MXFunction::MXFunction "CasADi::MXFunction::MXFunction(const MX &input, const MX &output)

Single input, single output. ";

%feature("docstring")  CasADi::MXFunction::MXFunction "CasADi::MXFunction::MXFunction(const MX &input, const std::vector< MX
> &output)

Single input, multiple output. ";

%feature("docstring")  CasADi::MXFunction::MXFunction "CasADi::MXFunction::MXFunction(const std::vector< MX > &input, const
MX &output)

Multiple input, single output. ";

%feature("docstring")  CasADi::MXFunction::MXFunction "CasADi::MXFunction::MXFunction(const std::vector< MX > &input, const
std::vector< MX > &output)

Multiple input, multiple output. ";

%feature("docstring")  CasADi::MXFunction::inputMX "const MX
CasADi::MXFunction::inputMX(int iind=0) const

get function input argument ";

%feature("docstring")  CasADi::MXFunction::outputMX "const MX
CasADi::MXFunction::outputMX(int oind=0) const

get function output argument ";

%feature("docstring")  CasADi::MXFunction::algorithm "const
std::vector< MXAlgEl > & CasADi::MXFunction::algorithm() const

Access the algorithm. ";

%feature("docstring")  CasADi::MXFunction::countNodes "int
CasADi::MXFunction::countNodes() const

Number of nodes in the algorithm. ";

%feature("docstring")  CasADi::MXFunction::setLiftingFunction "void
CasADi::MXFunction::setLiftingFunction(LiftingFunction liftfun, void
*user_data=0)

Set the lifting function. ";

%feature("docstring")  CasADi::MXFunction::checkNode "bool
CasADi::MXFunction::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::MXFunction::jac "std::vector< MX >
CasADi::MXFunction::jac(int iind=0)

Jacobian via source code transformation. ";

%feature("docstring")  CasADi::MXFunction::grad "std::vector< MX >
CasADi::MXFunction::grad(int oind=0)

Gradient via source code transformation. ";

%feature("docstring")  CasADi::MXFunction::expand "SXFunction
CasADi::MXFunction::expand(const std::vector< SXMatrix >
&inputv=std::vector< SXMatrix >())

Expand the matrix valued graph into a scalar valued graph. ";

%feature("docstring")  CasADi::MXFunction::eval "std::vector<SXMatrix> CasADi::XFunction::eval(const std::vector<
SXMatrix > &arg)

evaluate symbolically ";

%feature("docstring")  CasADi::MXFunction::eval "std::vector<
std::vector<SX> > CasADi::XFunction::eval(const std::vector<
std::vector< SX > > &arg)

evaluate symbolically (pass and get non-zero entries) ";

%feature("docstring")  CasADi::MXFunction::eval "SXMatrix
CasADi::XFunction::eval(const SXMatrix &arg)

evaluate symbolically, single input, single output ";

%feature("docstring")  CasADi::MXFunction::eval "std::vector<SX>
CasADi::XFunction::eval(const std::vector< SX > &arg)

evaluate symbolically, single input, single output (pass and get non-
zero entries) ";

%feature("docstring")  CasADi::MXFunction::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::MXFunction::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::MXFunction::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::MXFunction::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::MXFunction::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::MXFunction::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::MXFunction::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::MXFunction::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::MXFunction::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::MXFunction::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::MXFunction::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::MXFunction::call "std::vector<DMatrix>
CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::MXFunction::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::MXFunction::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::MXFunction::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::MXFunction::jacSparsity "CRSSparsity &
CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::MXFunction::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::MXFunction::input "const Matrix<
double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::MXFunction::input "Matrix< double > &
CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::MXFunction::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::MXFunction::output "Matrix< double > &
CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::MXFunction::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::MXFunction::fwdSeed "Matrix< double >
& CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::MXFunction::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::MXFunction::fwdSens "Matrix< double >
& CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::MXFunction::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::MXFunction::adjSeed "Matrix< double >
& CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::MXFunction::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::MXFunction::adjSens "Matrix< double >
& CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::MXFunction::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::MXFunction::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::MXFunction::getStats "const Dictionary
& CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::MXFunction::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::MXFunction::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::MXFunction::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::MXFunction::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::MXFunction::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::MXFunction::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::MXFunction::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::MXFunction::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::MXFunction::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::MXFunction::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::MXFunction::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::MXFunction::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::MXFunction::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::MXFunction::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::MXFunction::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::MXFunction::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1MXFunctionInternal.xml
%feature("docstring") CasADi::MXFunctionInternal "

Internal node class for MXFunction.

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

topological_sorting

OT_STRING

\"breadth-first\"

Topological sorting algorithm: \"depth-first\" or \"breadth-first\"
search

CasADi::XFunctionInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: mx_function_internal.hpp ";

%feature("docstring")  CasADi::MXFunctionInternal::MXFunctionInternal
"CasADi::MXFunctionInternal::MXFunctionInternal(const std::vector< MX
> &input, const std::vector< MX > &output)

Multiple input, multiple output constructor, only to be accessed from
MXFunction, therefore protected. ";

%feature("docstring")  CasADi::MXFunctionInternal::clone "MXFunctionInternal * CasADi::MXFunctionInternal::clone() const

Make a deep copy. ";

%feature("docstring")  CasADi::MXFunctionInternal::deepCopyMembers "void CasADi::MXFunctionInternal::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::MXFunctionInternal::~MXFunctionInternal
"CasADi::MXFunctionInternal::~MXFunctionInternal()

Destructor. ";

%feature("docstring")  CasADi::MXFunctionInternal::evaluate "void
CasADi::MXFunctionInternal::evaluate(int nfdir, int nadir)

Evaluate the algorithm. ";

%feature("docstring")  CasADi::MXFunctionInternal::print "virtual
void CasADi::MXFunctionInternal::print(std::ostream &stream) const

Print description. ";

%feature("docstring")  CasADi::MXFunctionInternal::init "void
CasADi::MXFunctionInternal::init()

Initialize. ";

%feature("docstring")  CasADi::MXFunctionInternal::setLiftingFunction
"void CasADi::MXFunctionInternal::setLiftingFunction(LiftingFunction
liftfun, void *user_data)

Set the lifting function. ";

%feature("docstring")  CasADi::MXFunctionInternal::jac "std::vector<
MX > CasADi::MXFunctionInternal::jac(int iind)

Jacobian via source code transformation (identity matrix seed in a
particular direction) ";

%feature("docstring")  CasADi::MXFunctionInternal::jacobian "FX
CasADi::MXFunctionInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Jacobian via source code transformation. ";

%feature("docstring")  CasADi::MXFunctionInternal::grad "std::vector<
MX > CasADi::MXFunctionInternal::grad(int oind)

Gradient via source code transformation (identity matrix seed in a
particular direction) ";

%feature("docstring")  CasADi::MXFunctionInternal::adFwd "std::vector< std::vector< MX > >
CasADi::MXFunctionInternal::adFwd(const std::vector< std::vector< MX >
> &fseed)

Forward mode AD using source code transformation. ";

%feature("docstring")  CasADi::MXFunctionInternal::adAdj "std::vector< std::vector< MX > >
CasADi::MXFunctionInternal::adAdj(const std::vector< std::vector< MX >
> &aseed)

Adjoint mode AD using source code transformation. ";

%feature("docstring")  CasADi::MXFunctionInternal::hessian "FX
CasADi::MXFunctionInternal::hessian(int iind, int oind)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::MXFunctionInternal::evaluateSX "void
CasADi::MXFunctionInternal::evaluateSX(const std::vector< Matrix< SX >
> &input_s, std::vector< Matrix< SX > > &output_s, bool
eliminate_constants=false)

evaluate symbolically, inlining ";

%feature("docstring")  CasADi::MXFunctionInternal::expand "SXFunction
CasADi::MXFunctionInternal::expand(const std::vector< SXMatrix >
&inputv)

Expand the matrix valued graph into a scalar valued graph. ";

%feature("docstring")  CasADi::MXFunctionInternal::getJacSparsity "CRSSparsity CasADi::MXFunctionInternal::getJacSparsity(int iind, int
oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::MXFunctionInternal::updatePointers "void CasADi::MXFunctionInternal::updatePointers(const AlgEl &el, int
nfwd, int nadj) ";

%feature("docstring")  CasADi::MXFunctionInternal::evaluate_switch "void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::MXFunctionInternal::jacobian_switch "FX CasADi::FXInternal::jacobian_switch(const std::vector< std::pair<
int, int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::MXFunctionInternal::numeric_jacobian "FX CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::MXFunctionInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::MXFunctionInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::MXFunctionInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::MXFunctionInternal::outputStruct "const FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")
CasADi::MXFunctionInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::MXFunctionInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::MXFunctionInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::MXFunctionInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::MXFunctionInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::MXFunctionInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::MXFunctionInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::MXFunctionInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::MXFunctionInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::MXFunctionInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::MXFunctionInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::MXFunctionInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::MXFunctionInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::MXFunctionInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::MXFunctionInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::MXFunctionInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::MXFunctionInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::MXFunctionInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::MXFunctionInternal::setNumOutputs "void CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::MXFunctionInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::MXFunctionInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::MXFunctionInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::MXFunctionInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::MXFunctionInternal::setJacSparsity "void CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int
iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::MXFunctionInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::MXFunctionInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::MXFunctionInternal::getFullJacobian "void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::MXFunctionInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::MXFunctionInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::MXFunctionInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::MXFunctionInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::MXFunctionInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::MXFunctionInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::MXFunctionInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::MXFunctionInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::MXFunctionInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::MXFunctionInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1MXNode.xml
%feature("docstring") CasADi::MXNode "

Node class for MX objects.

Joel Andersson

C++ includes: mx_node.hpp ";

%feature("docstring")  CasADi::MXNode::MXNode "CasADi::MXNode::MXNode()

Constructor. ";

%feature("docstring")  CasADi::MXNode::~MXNode "CasADi::MXNode::~MXNode()=0

Destructor. ";

%feature("docstring")  CasADi::MXNode::clone "virtual MXNode*
CasADi::MXNode::clone() const =0

Clone function. ";

%feature("docstring")  CasADi::MXNode::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::MXNode::print "virtual void
CasADi::MXNode::print(std::ostream &stream, const std::vector<
std::string > &args) const =0

Print expression. ";

%feature("docstring")  CasADi::MXNode::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::MXNode::evaluate "virtual void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const
DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)=0

Evaluate the function. ";

%feature("docstring")  CasADi::MXNode::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::MXNode::evaluateSX "virtual void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV &fwdSens, const
SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)=0

Evaluate symbolically ( SX) ";

%feature("docstring")  CasADi::MXNode::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::MXNode::evaluateMX "virtual void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const
MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV
&adjSens, bool output_given)=0

Evaluate symbolically ( MX) ";

%feature("docstring")  CasADi::MXNode::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::MXNode::propagateSparsity "virtual
void CasADi::MXNode::propagateSparsity(const DMatrixPtrV &input,
DMatrixPtrV &output)=0

Propagate sparsity. ";

%feature("docstring")  CasADi::MXNode::getName "const string &
CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::MXNode::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::MXNode::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::MXNode::isMapping "virtual bool
CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::MXNode::isEvaluation "virtual bool
CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::MXNode::isOutputNode "virtual bool
CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::MXNode::isMultipleOutput "virtual bool
CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::MXNode::isJacobian "virtual bool
CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::MXNode::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::MXNode::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::MXNode::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::MXNode::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::MXNode::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::MXNode::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::MXNode::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::MXNode::getNumOutputs "virtual int
CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::MXNode::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::MXNode::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::MXNode::isNonLinear "virtual bool
CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::MXNode::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::MXNode::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::MXNode::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::MXNode::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::MXNode::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::MXNode::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::MXNode::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::MXNode::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::MXNode::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::MXNode::isOperation "virtual bool
CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::MXNode::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::MXNode::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::MXNode::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::MXNode::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::MXNode::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::MXNode::eval "virtual Matrix<double>
CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::MXNode::eval "virtual Matrix<SX>
CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::MXNode::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::MXNode::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::MXNode::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::MXNode::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1NanSXNode.xml
%feature("docstring") CasADi::NanSXNode "

Represents a not-a-number SX.

Joel Andersson

C++ includes: constant_sx_node.hpp ";

%feature("docstring")  CasADi::NanSXNode::isInteger "bool
CasADi::SXNode::isInteger() const ";

%feature("docstring")  CasADi::NanSXNode::isSymbolic "bool
CasADi::SXNode::isSymbolic() const ";

%feature("docstring")  CasADi::NanSXNode::hasDep "bool
CasADi::SXNode::hasDep() const ";

%feature("docstring")  CasADi::NanSXNode::isZero "bool
CasADi::SXNode::isZero() const ";

%feature("docstring")  CasADi::NanSXNode::isOne "bool
CasADi::SXNode::isOne() const ";

%feature("docstring")  CasADi::NanSXNode::isMinusOne "bool
CasADi::SXNode::isMinusOne() const ";

%feature("docstring")  CasADi::NanSXNode::isInf "bool
CasADi::SXNode::isInf() const ";

%feature("docstring")  CasADi::NanSXNode::isMinusInf "bool
CasADi::SXNode::isMinusInf() const ";

%feature("docstring")  CasADi::NanSXNode::getIntValue "int
CasADi::SXNode::getIntValue() const ";

%feature("docstring")  CasADi::NanSXNode::NanSXNode "CasADi::NanSXNode::NanSXNode() ";

%feature("docstring")  CasADi::NanSXNode::~NanSXNode "virtual
CasADi::NanSXNode::~NanSXNode() ";

%feature("docstring")  CasADi::NanSXNode::getValue "virtual double
CasADi::NanSXNode::getValue() const

Get the value. ";

%feature("docstring")  CasADi::NanSXNode::isNan "virtual bool
CasADi::NanSXNode::isNan() const

Properties. ";

%feature("docstring")  CasADi::NanSXNode::isConstant "virtual bool
CasADi::ConstantSXNode::isConstant() const

Properties. ";

%feature("docstring")  CasADi::NanSXNode::print "void
CasADi::SXNode::print(std::ostream &stream) const

print ";

%feature("docstring")  CasADi::NanSXNode::getName "const std::string
& CasADi::SXNode::getName() const ";

%feature("docstring")  CasADi::NanSXNode::getOp "int
CasADi::SXNode::getOp() const

get the operation only for binary nodes ";

%feature("docstring")  CasADi::NanSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SXNode &node) const

comparison ";

%feature("docstring")  CasADi::NanSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SX &scalar) const

comparison ";

%feature("docstring")  CasADi::NanSXNode::ndep "virtual int
CasADi::SXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::NanSXNode::dep "const SX &
CasADi::SXNode::dep(int i) const

get the reference of a child ";

%feature("docstring")  CasADi::NanSXNode::dep "SX &
CasADi::SXNode::dep(int i)

get the reference of a child ";

%feature("docstring")  CasADi::NanSXNode::isSmooth "bool
CasADi::SXNode::isSmooth() const

Check if smooth. ";


// File: classCasADi_1_1NLPSolver.xml
%feature("docstring") CasADi::NLPSolver "

NLPSolver.

NLPSolver is an CasADi::FX mappinf from CasADi::NLPInput to
CasADi::NLPOutput

Joel Andersson

Name

Description

NLP_X_INIT

Decision variables initial guess.

NLP_LBX

Decision variables lower bound.

NLP_UBX

Decision variables upper bound.

NLP_LBG

Constraints lower bound.

NLP_UBG

Constraints upper bound.

NLP_LAMBDA_INIT

Lambda multipliers initial guess.

NLP_P

Static parameters on which the objective and constraints might depend.
Input scheme: CasADi::NLPInput (NLP_NUM_IN = 7) Name

Description

NLP_X_OPT

Decision variables for optimal solution.

NLP_COST

Objective/cost function for optimal solution.

NLP_LAMBDA_OPT

Lambda multipliers function for optimal solution.

NLP_LAMBDA_LBX

Lower bound multipliers for optimal solution When in warm start mode,
this output will be used as input

NLP_LAMBDA_UBX

Upper bound multipliers for optimal solution When in warm start mode,
this output will be used as input Output scheme: CasADi::NLPOutput
(NLP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: nlp_solver.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::NLPSolver::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::NLPSolver::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::NLPSolver::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::NLPSolver::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::NLPSolver::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::NLPSolver::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::NLPSolver::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::NLPSolver::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::NLPSolver::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::NLPSolver::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::NLPSolver::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::NLPSolver::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::NLPSolver::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::NLPSolver::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::NLPSolver::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::NLPSolver::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::NLPSolver::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::NLPSolver::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::NLPSolver::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::NLPSolver::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::NLPSolver::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::NLPSolver::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::NLPSolver::NLPSolver "home jg programs
casadi git casadi fx nlp_solver cpp home jg programs casadi git casadi
fx nlp_solver cpp CasADi::NLPSolver::NLPSolver()

Default constructor. ";

%feature("docstring")  CasADi::NLPSolver::checkNode "bool
CasADi::NLPSolver::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::NLPSolver::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::NLPSolver::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::NLPSolver::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::NLPSolver::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::NLPSolver::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::NLPSolver::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::NLPSolver::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::NLPSolver::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::NLPSolver::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::NLPSolver::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::NLPSolver::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::NLPSolver::call "std::vector<DMatrix>
CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::NLPSolver::call "std::vector<SXMatrix>
CasADi::FX::call(const std::vector< SXMatrix > &x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::NLPSolver::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::NLPSolver::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::NLPSolver::jacSparsity "CRSSparsity &
CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::NLPSolver::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::NLPSolver::input "const Matrix< double
> & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::NLPSolver::input "Matrix< double > &
CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::NLPSolver::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::NLPSolver::output "Matrix< double > &
CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::NLPSolver::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::NLPSolver::fwdSeed "Matrix< double > &
CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::NLPSolver::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::NLPSolver::fwdSens "Matrix< double > &
CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::NLPSolver::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::NLPSolver::adjSeed "Matrix< double > &
CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::NLPSolver::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::NLPSolver::adjSens "Matrix< double > &
CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::NLPSolver::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::NLPSolver::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::NLPSolver::getStats "const Dictionary
& CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::NLPSolver::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::NLPSolver::symbolicInput "std::vector<
MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::NLPSolver::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::NLPSolver::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::NLPSolver::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::NLPSolver::get "const SharedObjectNode
* CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::NLPSolver::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::NLPSolver::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::NLPSolver::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::NLPSolver::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::NLPSolver::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::NLPSolver::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::NLPSolver::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::NLPSolver::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::NLPSolver::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::NLPSolver::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1NLPSolverInternal.xml
%feature("docstring") CasADi::NLPSolverInternal "

NLP solver storage class.

Joel Andersson

Name

Description

NLP_X_INIT

Decision variables initial guess.

NLP_LBX

Decision variables lower bound.

NLP_UBX

Decision variables upper bound.

NLP_LBG

Constraints lower bound.

NLP_UBG

Constraints upper bound.

NLP_LAMBDA_INIT

Lambda multipliers initial guess.

NLP_P

Static parameters on which the objective and constraints might depend.
Input scheme: CasADi::NLPInput (NLP_NUM_IN = 7) Name

Description

NLP_X_OPT

Decision variables for optimal solution.

NLP_COST

Objective/cost function for optimal solution.

NLP_LAMBDA_OPT

Lambda multipliers function for optimal solution.

NLP_LAMBDA_LBX

Lower bound multipliers for optimal solution When in warm start mode,
this output will be used as input

NLP_LAMBDA_UBX

Upper bound multipliers for optimal solution When in warm start mode,
this output will be used as input Output scheme: CasADi::NLPOutput
(NLP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: nlp_solver_internal.hpp ";

%feature("docstring")  CasADi::NLPSolverInternal::NLPSolverInternal "CasADi::NLPSolverInternal::NLPSolverInternal() ";

%feature("docstring")  CasADi::NLPSolverInternal::~NLPSolverInternal "CasADi::NLPSolverInternal::~NLPSolverInternal()=0 ";

%feature("docstring")  CasADi::NLPSolverInternal::init "void
CasADi::NLPSolverInternal::init()

Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but
before evaluating. If passed to another class (in the constructor),
this class should invoke this function when initialized. ";

%feature("docstring")  CasADi::NLPSolverInternal::evaluate_switch "void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::NLPSolverInternal::evaluate "virtual
void CasADi::FXInternal::evaluate(int nfdir, int nadir)=0

Evaluate. ";

%feature("docstring")  CasADi::NLPSolverInternal::jacobian "virtual
FX CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int
> > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::NLPSolverInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::NLPSolverInternal::numeric_jacobian "FX CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::NLPSolverInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::NLPSolverInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::NLPSolverInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::NLPSolverInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::NLPSolverInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::NLPSolverInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::NLPSolverInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::NLPSolverInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::NLPSolverInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::NLPSolverInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::NLPSolverInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::NLPSolverInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::NLPSolverInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::NLPSolverInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::NLPSolverInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::NLPSolverInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::NLPSolverInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::NLPSolverInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::NLPSolverInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::NLPSolverInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::NLPSolverInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::NLPSolverInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::NLPSolverInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::NLPSolverInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::NLPSolverInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::NLPSolverInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::NLPSolverInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::NLPSolverInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::NLPSolverInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::NLPSolverInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::NLPSolverInternal::setJacSparsity "void CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int
iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::NLPSolverInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::NLPSolverInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::NLPSolverInternal::getFullJacobian "void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::NLPSolverInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::NLPSolverInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::NLPSolverInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::NLPSolverInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::NLPSolverInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::NLPSolverInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::NLPSolverInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::NLPSolverInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::NLPSolverInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::NLPSolverInternal::clone "virtual
SharedObjectNode* CasADi::SharedObjectNode::clone() const =0

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::NLPSolverInternal::deepCopyMembers "void CasADi::SharedObjectNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::NLPSolverInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1NonZeros.xml
%feature("docstring") CasADi::NonZeros "

Access to a set of nonzeros.

NonZeros class for Matrix NonZeros is the return type for operator[]
of the Matrix class, it allows access to the value as well as changing
the parent object Joel Andersson

C++ includes: nonzeros.hpp ";

%feature("docstring")  CasADi::NonZeros::NonZeros "CasADi::NonZeros<
M, K >::NonZeros(M &mat, const K &k)

Constructor. ";


// File: classCasADi_1_1NonzerosNonzerosOp.xml
%feature("docstring") CasADi::NonzerosNonzerosOp "

A matrix-matrix binary operation with matching nonzeros.

C++ includes: binary_op.hpp ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::NonzerosNonzerosOp
"CasADi::NonzerosNonzerosOp::NonzerosNonzerosOp(Operation op, const
MX &x, const MX &y)

Constructor. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::~NonzerosNonzerosOp
"virtual CasADi::NonzerosNonzerosOp::~NonzerosNonzerosOp()

Destructor. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::clone "virtual
NonzerosNonzerosOp* CasADi::NonzerosNonzerosOp::clone() const

Clone function. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::evaluate "void
CasADi::NonzerosNonzerosOp::evaluate(const DMatrixPtrV &input,
DMatrixPtrV &output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV
&fwdSens, const DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::evaluateSX "void
CasADi::NonzerosNonzerosOp::evaluateSX(const SXMatrixPtrV &input,
SXMatrixPtrV &output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV
&fwdSens, const SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::propagateSparsity "void CasADi::NonzerosNonzerosOp::propagateSparsity(const DMatrixPtrV
&input, DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::evaluateGen "void
CasADi::NonzerosNonzerosOp::evaluateGen(const MatV &input, MatV
&output, const MatVV &fwdSeed, MatVV &fwdSens, const MatVV &adjSeed,
MatVV &adjSens)

Evaluate the function (template) ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::print "void
CasADi::BinaryOp::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::isOperation "virtual bool CasADi::BinaryOp::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::evaluateMX "void
CasADi::BinaryOp::evaluateMX(const MXPtrV &input, MXPtrV &output,
const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed,
MXPtrVV &adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::deepCopyMembers "void CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::getName "const
string & CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::isMapping "virtual
bool CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::isEvaluation "virtual bool CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::isOutputNode "virtual bool CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::isMultipleOutput "virtual bool CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::isJacobian "virtual bool CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::getFunctionInput "int CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::getFunctionOutput "int CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::hasDep "virtual
bool CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::getNumOutputs "virtual int CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::isNonLinear "virtual bool CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::setDependencies "void CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::setDependencies "void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::setDependencies "void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2,
const MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::setDependencies "void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::addDependency "void CasADi::MXNode::addDependency(int depind, const std::vector< int
> &nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::addDependency "void CasADi::MXNode::addDependency(const MX &d, const std::vector< int
> &nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::addDependency "void CasADi::MXNode::addDependency(const MX &d, const std::vector< int
> &nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::eval "virtual
Matrix<double> CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::eval "virtual
Matrix<SX> CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::NonzerosNonzerosOp::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1NonzerosScalarOp.xml
%feature("docstring") CasADi::NonzerosScalarOp "

A matrix-scalar binary operation where one loops only over nonzeros of
the matrix.

C++ includes: binary_op.hpp ";

%feature("docstring")  CasADi::NonzerosScalarOp::NonzerosScalarOp "CasADi::NonzerosScalarOp::NonzerosScalarOp(Operation op, const MX &x,
const MX &y)

Constructor. ";

%feature("docstring")  CasADi::NonzerosScalarOp::~NonzerosScalarOp "virtual CasADi::NonzerosScalarOp::~NonzerosScalarOp()

Destructor. ";

%feature("docstring")  CasADi::NonzerosScalarOp::clone "virtual
NonzerosScalarOp* CasADi::NonzerosScalarOp::clone() const

Clone function. ";

%feature("docstring")  CasADi::NonzerosScalarOp::evaluate "void
CasADi::NonzerosScalarOp::evaluate(const DMatrixPtrV &input,
DMatrixPtrV &output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV
&fwdSens, const DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::NonzerosScalarOp::evaluateSX "void
CasADi::NonzerosScalarOp::evaluateSX(const SXMatrixPtrV &input,
SXMatrixPtrV &output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV
&fwdSens, const SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::NonzerosScalarOp::propagateSparsity "void CasADi::NonzerosScalarOp::propagateSparsity(const DMatrixPtrV
&input, DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::NonzerosScalarOp::evaluateGen "void
CasADi::NonzerosScalarOp::evaluateGen(const MatV &input, MatV &output,
const MatVV &fwdSeed, MatVV &fwdSens, const MatVV &adjSeed, MatVV
&adjSens)

Evaluate the function (template) ";

%feature("docstring")  CasADi::NonzerosScalarOp::print "void
CasADi::BinaryOp::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::NonzerosScalarOp::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::NonzerosScalarOp::isOperation "virtual
bool CasADi::BinaryOp::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::NonzerosScalarOp::evaluateMX "void
CasADi::BinaryOp::evaluateMX(const MXPtrV &input, MXPtrV &output,
const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed,
MXPtrVV &adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::NonzerosScalarOp::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::NonzerosScalarOp::deepCopyMembers "void CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::NonzerosScalarOp::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::NonzerosScalarOp::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::NonzerosScalarOp::getName "const
string & CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::NonzerosScalarOp::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::NonzerosScalarOp::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::NonzerosScalarOp::isMapping "virtual
bool CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::NonzerosScalarOp::isEvaluation "virtual bool CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::NonzerosScalarOp::isOutputNode "virtual bool CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::NonzerosScalarOp::isMultipleOutput "virtual bool CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::NonzerosScalarOp::isJacobian "virtual
bool CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::NonzerosScalarOp::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::NonzerosScalarOp::getFunctionInput "int CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::NonzerosScalarOp::getFunctionOutput "int CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::NonzerosScalarOp::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::NonzerosScalarOp::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::NonzerosScalarOp::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::NonzerosScalarOp::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::NonzerosScalarOp::getNumOutputs "virtual int CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::NonzerosScalarOp::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::NonzerosScalarOp::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::NonzerosScalarOp::isNonLinear "virtual
bool CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::NonzerosScalarOp::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::NonzerosScalarOp::setDependencies "void CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::NonzerosScalarOp::setDependencies "void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::NonzerosScalarOp::setDependencies "void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2,
const MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::NonzerosScalarOp::setDependencies "void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::NonzerosScalarOp::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::NonzerosScalarOp::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::NonzerosScalarOp::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::NonzerosScalarOp::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::NonzerosScalarOp::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::NonzerosScalarOp::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::NonzerosScalarOp::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::NonzerosScalarOp::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::NonzerosScalarOp::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::NonzerosScalarOp::eval "virtual
Matrix<double> CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::NonzerosScalarOp::eval "virtual
Matrix<SX> CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::NonzerosScalarOp::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::NonzerosScalarOp::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::NonzerosScalarOp::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::NonzerosScalarOp::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1Norm.xml
%feature("docstring") CasADi::Norm "

Matrix and vector norms This base class and the derived classes
represent matrix and vector norms that are intended to be used when
formulating convex optimization problems. Note that they are not
intended to be evaluated numerically or differentiated, instead the
idea is that they should be eliminated from the computational graph
during a reformulation (cf. CVX software).

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring")  CasADi::Norm::Norm "CasADi::Norm::Norm(const
MX &x)

Constructor. ";

%feature("docstring")  CasADi::Norm::evaluate "void
CasADi::Norm::evaluate(const DMatrixPtrV &input, DMatrixPtrV &output,
const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const DMatrixPtrVV
&adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::Norm::evaluateSX "void
CasADi::Norm::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV &fwdSens, const
SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::Norm::evaluateMX "void
CasADi::Norm::evaluateMX(const MXPtrV &input, MXPtrV &output, const
MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV
&adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::Norm::propagateSparsity "void
CasADi::Norm::propagateSparsity(const DMatrixPtrV &input, DMatrixPtrV
&output)

Propagate sparsity. ";

%feature("docstring")  CasADi::Norm::clone "virtual MXNode*
CasADi::MXNode::clone() const =0

Clone function. ";

%feature("docstring")  CasADi::Norm::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Norm::print "virtual void
CasADi::MXNode::print(std::ostream &stream, const std::vector<
std::string > &args) const =0

Print expression. ";

%feature("docstring")  CasADi::Norm::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::Norm::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::Norm::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::Norm::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::Norm::getName "const string &
CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::Norm::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::Norm::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::Norm::isMapping "virtual bool
CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::Norm::isEvaluation "virtual bool
CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::Norm::isOutputNode "virtual bool
CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::Norm::isMultipleOutput "virtual bool
CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::Norm::isJacobian "virtual bool
CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::Norm::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::Norm::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::Norm::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::Norm::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::Norm::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::Norm::ndep "int CasADi::MXNode::ndep()
const

Number of dependencies. ";

%feature("docstring")  CasADi::Norm::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::Norm::getNumOutputs "virtual int
CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::Norm::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::Norm::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::Norm::isNonLinear "virtual bool
CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::Norm::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::Norm::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::Norm::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::Norm::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::Norm::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::Norm::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::Norm::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::Norm::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::Norm::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::Norm::isOperation "virtual bool
CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::Norm::jac "MX CasADi::MXNode::jac(int
iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::Norm::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::Norm::size "int CasADi::MXNode::size()
const

Get size. ";

%feature("docstring")  CasADi::Norm::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::Norm::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::Norm::eval "virtual Matrix<double>
CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::Norm::eval "virtual Matrix<SX>
CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::Norm::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::Norm::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Norm::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::Norm::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1Norm1.xml
%feature("docstring") CasADi::Norm1 "

1-norm

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring")  CasADi::Norm1::Norm1 "CasADi::Norm1::Norm1(const MX &x)

Constructor. ";

%feature("docstring")  CasADi::Norm1::~Norm1 "virtual
CasADi::Norm1::~Norm1()

Destructor. ";

%feature("docstring")  CasADi::Norm1::clone "Norm1 *
CasADi::Norm1::clone() const

Clone function. ";

%feature("docstring")  CasADi::Norm1::print "void
CasADi::Norm1::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::Norm1::evaluate "void
CasADi::Norm::evaluate(const DMatrixPtrV &input, DMatrixPtrV &output,
const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const DMatrixPtrVV
&adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::Norm1::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::Norm1::evaluateSX "void
CasADi::Norm::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV &fwdSens, const
SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::Norm1::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::Norm1::evaluateMX "void
CasADi::Norm::evaluateMX(const MXPtrV &input, MXPtrV &output, const
MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV
&adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::Norm1::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::Norm1::propagateSparsity "void
CasADi::Norm::propagateSparsity(const DMatrixPtrV &input, DMatrixPtrV
&output)

Propagate sparsity. ";

%feature("docstring")  CasADi::Norm1::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Norm1::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::Norm1::getName "const string &
CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::Norm1::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::Norm1::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::Norm1::isMapping "virtual bool
CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::Norm1::isEvaluation "virtual bool
CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::Norm1::isOutputNode "virtual bool
CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::Norm1::isMultipleOutput "virtual bool
CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::Norm1::isJacobian "virtual bool
CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::Norm1::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::Norm1::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::Norm1::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::Norm1::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::Norm1::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::Norm1::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::Norm1::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::Norm1::getNumOutputs "virtual int
CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::Norm1::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::Norm1::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::Norm1::isNonLinear "virtual bool
CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::Norm1::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::Norm1::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::Norm1::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::Norm1::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::Norm1::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::Norm1::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::Norm1::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::Norm1::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::Norm1::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::Norm1::isOperation "virtual bool
CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::Norm1::jac "MX CasADi::MXNode::jac(int
iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::Norm1::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::Norm1::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::Norm1::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::Norm1::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::Norm1::eval "virtual Matrix<double>
CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::Norm1::eval "virtual Matrix<SX>
CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::Norm1::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::Norm1::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Norm1::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::Norm1::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1Norm2.xml
%feature("docstring") CasADi::Norm2 "

Represents a 2-norm.

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring")  CasADi::Norm2::Norm2 "CasADi::Norm2::Norm2(const MX &x)

Constructor. ";

%feature("docstring")  CasADi::Norm2::~Norm2 "virtual
CasADi::Norm2::~Norm2()

Destructor. ";

%feature("docstring")  CasADi::Norm2::clone "Norm2 *
CasADi::Norm2::clone() const

Clone function. ";

%feature("docstring")  CasADi::Norm2::print "void
CasADi::Norm2::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::Norm2::evaluate "void
CasADi::Norm::evaluate(const DMatrixPtrV &input, DMatrixPtrV &output,
const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const DMatrixPtrVV
&adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::Norm2::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::Norm2::evaluateSX "void
CasADi::Norm::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV &fwdSens, const
SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::Norm2::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::Norm2::evaluateMX "void
CasADi::Norm::evaluateMX(const MXPtrV &input, MXPtrV &output, const
MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV
&adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::Norm2::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::Norm2::propagateSparsity "void
CasADi::Norm::propagateSparsity(const DMatrixPtrV &input, DMatrixPtrV
&output)

Propagate sparsity. ";

%feature("docstring")  CasADi::Norm2::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Norm2::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::Norm2::getName "const string &
CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::Norm2::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::Norm2::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::Norm2::isMapping "virtual bool
CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::Norm2::isEvaluation "virtual bool
CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::Norm2::isOutputNode "virtual bool
CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::Norm2::isMultipleOutput "virtual bool
CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::Norm2::isJacobian "virtual bool
CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::Norm2::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::Norm2::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::Norm2::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::Norm2::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::Norm2::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::Norm2::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::Norm2::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::Norm2::getNumOutputs "virtual int
CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::Norm2::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::Norm2::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::Norm2::isNonLinear "virtual bool
CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::Norm2::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::Norm2::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::Norm2::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::Norm2::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::Norm2::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::Norm2::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::Norm2::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::Norm2::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::Norm2::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::Norm2::isOperation "virtual bool
CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::Norm2::jac "MX CasADi::MXNode::jac(int
iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::Norm2::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::Norm2::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::Norm2::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::Norm2::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::Norm2::eval "virtual Matrix<double>
CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::Norm2::eval "virtual Matrix<SX>
CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::Norm2::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::Norm2::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Norm2::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::Norm2::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1NormF.xml
%feature("docstring") CasADi::NormF "

Represents a Frobenius norm.

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring")  CasADi::NormF::NormF "CasADi::NormF::NormF(const MX &x)

Constructor. ";

%feature("docstring")  CasADi::NormF::~NormF "virtual
CasADi::NormF::~NormF()

Destructor. ";

%feature("docstring")  CasADi::NormF::clone "NormF *
CasADi::NormF::clone() const

Clone function. ";

%feature("docstring")  CasADi::NormF::print "void
CasADi::NormF::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::NormF::evaluate "void
CasADi::Norm::evaluate(const DMatrixPtrV &input, DMatrixPtrV &output,
const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const DMatrixPtrVV
&adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::NormF::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::NormF::evaluateSX "void
CasADi::Norm::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV &fwdSens, const
SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::NormF::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::NormF::evaluateMX "void
CasADi::Norm::evaluateMX(const MXPtrV &input, MXPtrV &output, const
MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV
&adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::NormF::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::NormF::propagateSparsity "void
CasADi::Norm::propagateSparsity(const DMatrixPtrV &input, DMatrixPtrV
&output)

Propagate sparsity. ";

%feature("docstring")  CasADi::NormF::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::NormF::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::NormF::getName "const string &
CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::NormF::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::NormF::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::NormF::isMapping "virtual bool
CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::NormF::isEvaluation "virtual bool
CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::NormF::isOutputNode "virtual bool
CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::NormF::isMultipleOutput "virtual bool
CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::NormF::isJacobian "virtual bool
CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::NormF::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::NormF::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::NormF::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::NormF::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::NormF::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::NormF::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::NormF::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::NormF::getNumOutputs "virtual int
CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::NormF::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::NormF::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::NormF::isNonLinear "virtual bool
CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::NormF::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::NormF::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::NormF::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::NormF::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::NormF::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::NormF::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::NormF::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::NormF::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::NormF::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::NormF::isOperation "virtual bool
CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::NormF::jac "MX CasADi::MXNode::jac(int
iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::NormF::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::NormF::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::NormF::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::NormF::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::NormF::eval "virtual Matrix<double>
CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::NormF::eval "virtual Matrix<SX>
CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::NormF::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::NormF::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::NormF::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::NormF::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1NormInf.xml
%feature("docstring") CasADi::NormInf "

Represents an infinity-norm operation on a MX.

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring")  CasADi::NormInf::NormInf "CasADi::NormInf::NormInf(const MX &x)

Constructor. ";

%feature("docstring")  CasADi::NormInf::~NormInf "virtual
CasADi::NormInf::~NormInf()

Destructor. ";

%feature("docstring")  CasADi::NormInf::clone "NormInf *
CasADi::NormInf::clone() const

Clone function. ";

%feature("docstring")  CasADi::NormInf::print "void
CasADi::NormInf::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::NormInf::evaluate "void
CasADi::Norm::evaluate(const DMatrixPtrV &input, DMatrixPtrV &output,
const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const DMatrixPtrVV
&adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::NormInf::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::NormInf::evaluateSX "void
CasADi::Norm::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV &fwdSens, const
SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::NormInf::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::NormInf::evaluateMX "void
CasADi::Norm::evaluateMX(const MXPtrV &input, MXPtrV &output, const
MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV
&adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::NormInf::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::NormInf::propagateSparsity "void
CasADi::Norm::propagateSparsity(const DMatrixPtrV &input, DMatrixPtrV
&output)

Propagate sparsity. ";

%feature("docstring")  CasADi::NormInf::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::NormInf::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::NormInf::getName "const string &
CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::NormInf::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::NormInf::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::NormInf::isMapping "virtual bool
CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::NormInf::isEvaluation "virtual bool
CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::NormInf::isOutputNode "virtual bool
CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::NormInf::isMultipleOutput "virtual
bool CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::NormInf::isJacobian "virtual bool
CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::NormInf::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::NormInf::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::NormInf::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::NormInf::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::NormInf::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::NormInf::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::NormInf::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::NormInf::getNumOutputs "virtual int
CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::NormInf::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::NormInf::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::NormInf::isNonLinear "virtual bool
CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::NormInf::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::NormInf::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::NormInf::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::NormInf::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::NormInf::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::NormInf::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::NormInf::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::NormInf::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::NormInf::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::NormInf::isOperation "virtual bool
CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::NormInf::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::NormInf::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::NormInf::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::NormInf::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::NormInf::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::NormInf::eval "virtual Matrix<double>
CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::NormInf::eval "virtual Matrix<SX>
CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::NormInf::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::NormInf::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::NormInf::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::NormInf::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classstd_1_1numeric__limits_3_01CasADi_1_1SX_01_4.xml
%feature("docstring") std::numeric_limits< CasADi::SX > " C++
includes: sx.hpp ";


// File: classCasADi_1_1OptimalControl_1_1OCP.xml
%feature("docstring") CasADi::OptimalControl::OCP "

Symbolic, object oriented representation of an optimal control problem
( OCP)

C++ includes: optimica_ocp.hpp ";

%feature("docstring")  CasADi::OptimalControl::OCP::OCP "CasADi::OptimalControl::OCP::OCP()

OCP. ";

%feature("docstring")  CasADi::OptimalControl::OCP::repr "virtual
void CasADi::OptimalControl::OCP::repr(std::ostream &stream=std::cout)
const

Print a representation of the object. ";

%feature("docstring")  CasADi::OptimalControl::OCP::print "virtual
void CasADi::OptimalControl::OCP::print(std::ostream
&stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::OptimalControl::OCP::sortType "void
CasADi::OptimalControl::OCP::sortType()

Sort variables according to type. ";

%feature("docstring")  CasADi::OptimalControl::OCP::eliminateDependent
"void CasADi::OptimalControl::OCP::eliminateDependent()

Eliminate dependent equations. ";

%feature("docstring")  CasADi::OptimalControl::OCP::sortBLT "void
CasADi::OptimalControl::OCP::sortBLT(bool with_x=false)

Sort the variables and equations according to BLT, with or without
including the differentiated states in the dependency graph. ";

%feature("docstring")  CasADi::OptimalControl::OCP::makeExplicit "void CasADi::OptimalControl::OCP::makeExplicit()

Symbolically solve for xdot and z. ";

%feature("docstring")  CasADi::OptimalControl::OCP::makeSemiExplicit "void CasADi::OptimalControl::OCP::makeSemiExplicit()

Replace all state derivatives by algebraic variables with the same
name. ";

%feature("docstring")
CasADi::OptimalControl::OCP::addExplicitEquation "void
CasADi::OptimalControl::OCP::addExplicitEquation(const Matrix< SX >
&var, const Matrix< SX > &bind_eq, bool to_front=false)

Add a binding equation. ";

%feature("docstring")  CasADi::OptimalControl::OCP::scaleVariables "void CasADi::OptimalControl::OCP::scaleVariables()

Scale the variables. ";

%feature("docstring")  CasADi::OptimalControl::OCP::scaleEquations "void CasADi::OptimalControl::OCP::scaleEquations()

Scale the implicit equations. ";

%feature("docstring")  CasADi::OptimalControl::OCP::createFunctions "void CasADi::OptimalControl::OCP::createFunctions(bool
create_dae=true, bool create_ode=true, bool create_quad=true)

Create the implicit/explict ODE functions and quadrature state
functions. ";

%feature("docstring")  CasADi::OptimalControl::OCP::makeAlgebraic "void CasADi::OptimalControl::OCP::makeAlgebraic(const Variable &v)

Make a differential state algebraic by replacing its time derivative
by 0. ";

%feature("docstring")  CasADi::OptimalControl::OCP::findConsistentIC "void CasADi::OptimalControl::OCP::findConsistentIC()

Update the initial values for the dependent variables. ";

%feature("docstring")  CasADi::OptimalControl::OCP::getStartTime "double CasADi::OptimalControl::OCP::getStartTime() const ";

%feature("docstring")  CasADi::OptimalControl::OCP::getFinalTime "double CasADi::OptimalControl::OCP::getFinalTime() const ";

%feature("docstring")  CasADi::OptimalControl::OCP::getExplicit "SX
CasADi::OptimalControl::OCP::getExplicit(const SX &v) const

Get the explicit expression for a variable. ";

%feature("docstring")  CasADi::OptimalControl::OCP::getRepresentation
"string CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::OptimalControl::OCP::getDescription "string CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1OCPSolver.xml
%feature("docstring") CasADi::OCPSolver "

Base class for OCP solvers.

Joel Andersson

Name

Description

OCP_X_OPT

Optimal state trajectory.

OCP_U_OPT

Optimal control trajectory.

OCP_XP_OPT

Optimal state derivative trajectory.

OCP_P_OPT

Optimal parameters. Input scheme: CasADi::OCPOutput (OCP_NUM_OUT = 4)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

final_time

OT_REAL

1.0

CasADi::OCPSolverInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

number_of_grid_points

OT_INTEGER

20

CasADi::OCPSolverInternal

number_of_parameters

OT_INTEGER

0

CasADi::OCPSolverInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: ocp_solver.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::OCPSolver::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::OCPSolver::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::OCPSolver::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::OCPSolver::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::OCPSolver::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::OCPSolver::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::OCPSolver::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::OCPSolver::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::OCPSolver::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::OCPSolver::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::OCPSolver::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::OCPSolver::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::OCPSolver::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::OCPSolver::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::OCPSolver::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::OCPSolver::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::OCPSolver::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::OCPSolver::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::OCPSolver::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::OCPSolver::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::OCPSolver::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::OCPSolver::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::OCPSolver::OCPSolver "CasADi::OCPSolver::OCPSolver()

Default constructor. ";

%feature("docstring")  CasADi::OCPSolver::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::OCPSolver::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::OCPSolver::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::OCPSolver::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::OCPSolver::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::OCPSolver::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::OCPSolver::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::OCPSolver::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::OCPSolver::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::OCPSolver::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::OCPSolver::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::OCPSolver::call "std::vector<DMatrix>
CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::OCPSolver::call "std::vector<SXMatrix>
CasADi::FX::call(const std::vector< SXMatrix > &x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::OCPSolver::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::OCPSolver::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::OCPSolver::jacSparsity "CRSSparsity &
CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::OCPSolver::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::OCPSolver::checkNode "bool
CasADi::FX::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::OCPSolver::input "const Matrix< double
> & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::OCPSolver::input "Matrix< double > &
CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::OCPSolver::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::OCPSolver::output "Matrix< double > &
CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::OCPSolver::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::OCPSolver::fwdSeed "Matrix< double > &
CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::OCPSolver::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::OCPSolver::fwdSens "Matrix< double > &
CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::OCPSolver::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::OCPSolver::adjSeed "Matrix< double > &
CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::OCPSolver::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::OCPSolver::adjSens "Matrix< double > &
CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::OCPSolver::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::OCPSolver::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::OCPSolver::getStats "const Dictionary
& CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::OCPSolver::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::OCPSolver::symbolicInput "std::vector<
MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::OCPSolver::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::OCPSolver::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::OCPSolver::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::OCPSolver::get "const SharedObjectNode
* CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::OCPSolver::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::OCPSolver::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::OCPSolver::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::OCPSolver::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::OCPSolver::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::OCPSolver::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::OCPSolver::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::OCPSolver::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::OCPSolver::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::OCPSolver::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1OCPSolverInternal.xml
%feature("docstring") CasADi::OCPSolverInternal "

Internal node class for OCPSolver.

Joel Andersson

Name

Description

OCP_X_OPT

Optimal state trajectory.

OCP_U_OPT

Optimal control trajectory.

OCP_XP_OPT

Optimal state derivative trajectory.

OCP_P_OPT

Optimal parameters. Input scheme: CasADi::OCPOutput (OCP_NUM_OUT = 4)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

final_time

OT_REAL

1.0

CasADi::OCPSolverInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

number_of_grid_points

OT_INTEGER

20

CasADi::OCPSolverInternal

number_of_parameters

OT_INTEGER

0

CasADi::OCPSolverInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: ocp_solver_internal.hpp ";

%feature("docstring")  CasADi::OCPSolverInternal::OCPSolverInternal "CasADi::OCPSolverInternal::OCPSolverInternal(const FX &ffcn, const FX
&mfcn, const FX &cfcn, const FX &rfcn)

Constructor.

Parameters:
-----------

ffcn:  Discrete time dynamics

mfcn:  Mayer term

cfcn:  Path constraints

rfcn:  Initial value constraints

The signatures (number and order of inputs/outputs) of these functions
are not restricted at this stage.

Only ffcn has a general requirement for input interface: {
INTEGRATOR_X0 , INTEGRATOR_P, INTEGRATOR_Z0 } from
CasADi::IntegratorInput

For example:

When using the ACADO interface, all functions should have the same
input interface: CasADi::ACADO_FCN_Input  When using MultipleShooting,
mfcn_ is a single input -> single output mapping ";

%feature("docstring")  CasADi::OCPSolverInternal::~OCPSolverInternal "CasADi::OCPSolverInternal::~OCPSolverInternal()

Destructor. ";

%feature("docstring")  CasADi::OCPSolverInternal::init "void
CasADi::OCPSolverInternal::init()

Initialize. ";

%feature("docstring")  CasADi::OCPSolverInternal::evaluate_switch "void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::OCPSolverInternal::evaluate "virtual
void CasADi::FXInternal::evaluate(int nfdir, int nadir)=0

Evaluate. ";

%feature("docstring")  CasADi::OCPSolverInternal::jacobian "virtual
FX CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int
> > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::OCPSolverInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::OCPSolverInternal::numeric_jacobian "FX CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::OCPSolverInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::OCPSolverInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::OCPSolverInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::OCPSolverInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::OCPSolverInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::OCPSolverInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::OCPSolverInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::OCPSolverInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::OCPSolverInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::OCPSolverInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::OCPSolverInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::OCPSolverInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::OCPSolverInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::OCPSolverInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::OCPSolverInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::OCPSolverInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::OCPSolverInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::OCPSolverInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::OCPSolverInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::OCPSolverInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::OCPSolverInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::OCPSolverInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::OCPSolverInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::OCPSolverInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::OCPSolverInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::OCPSolverInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::OCPSolverInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::OCPSolverInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::OCPSolverInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::OCPSolverInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::OCPSolverInternal::setJacSparsity "void CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int
iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::OCPSolverInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::OCPSolverInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::OCPSolverInternal::getFullJacobian "void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::OCPSolverInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::OCPSolverInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::OCPSolverInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::OCPSolverInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::OCPSolverInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::OCPSolverInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::OCPSolverInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::OCPSolverInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::OCPSolverInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::OCPSolverInternal::clone "virtual
SharedObjectNode* CasADi::SharedObjectNode::clone() const =0

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::OCPSolverInternal::deepCopyMembers "void CasADi::SharedObjectNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::OCPSolverInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1OneSXNode.xml
%feature("docstring") CasADi::OneSXNode "

Represents a one SX.

Joel Andersson

C++ includes: constant_sx_node.hpp ";

%feature("docstring")  CasADi::OneSXNode::isSymbolic "bool
CasADi::SXNode::isSymbolic() const ";

%feature("docstring")  CasADi::OneSXNode::hasDep "bool
CasADi::SXNode::hasDep() const ";

%feature("docstring")  CasADi::OneSXNode::isZero "bool
CasADi::SXNode::isZero() const ";

%feature("docstring")  CasADi::OneSXNode::isMinusOne "bool
CasADi::SXNode::isMinusOne() const ";

%feature("docstring")  CasADi::OneSXNode::isNan "bool
CasADi::SXNode::isNan() const ";

%feature("docstring")  CasADi::OneSXNode::isInf "bool
CasADi::SXNode::isInf() const ";

%feature("docstring")  CasADi::OneSXNode::isMinusInf "bool
CasADi::SXNode::isMinusInf() const ";

%feature("docstring")  CasADi::OneSXNode::OneSXNode "CasADi::OneSXNode::OneSXNode() ";

%feature("docstring")  CasADi::OneSXNode::~OneSXNode "virtual
CasADi::OneSXNode::~OneSXNode() ";

%feature("docstring")  CasADi::OneSXNode::getValue "virtual double
CasADi::OneSXNode::getValue() const

Get the value. ";

%feature("docstring")  CasADi::OneSXNode::getIntValue "virtual int
CasADi::OneSXNode::getIntValue() const ";

%feature("docstring")  CasADi::OneSXNode::isInteger "virtual bool
CasADi::OneSXNode::isInteger() const

Properties. ";

%feature("docstring")  CasADi::OneSXNode::isOne "virtual bool
CasADi::OneSXNode::isOne() const ";

%feature("docstring")  CasADi::OneSXNode::isConstant "virtual bool
CasADi::ConstantSXNode::isConstant() const

Properties. ";

%feature("docstring")  CasADi::OneSXNode::print "void
CasADi::SXNode::print(std::ostream &stream) const

print ";

%feature("docstring")  CasADi::OneSXNode::getName "const std::string
& CasADi::SXNode::getName() const ";

%feature("docstring")  CasADi::OneSXNode::getOp "int
CasADi::SXNode::getOp() const

get the operation only for binary nodes ";

%feature("docstring")  CasADi::OneSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SXNode &node) const

comparison ";

%feature("docstring")  CasADi::OneSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SX &scalar) const

comparison ";

%feature("docstring")  CasADi::OneSXNode::ndep "virtual int
CasADi::SXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::OneSXNode::dep "const SX &
CasADi::SXNode::dep(int i) const

get the reference of a child ";

%feature("docstring")  CasADi::OneSXNode::dep "SX &
CasADi::SXNode::dep(int i)

get the reference of a child ";

%feature("docstring")  CasADi::OneSXNode::isSmooth "bool
CasADi::SXNode::isSmooth() const

Check if smooth. ";


// File: classCasADi_1_1Interfaces_1_1OOQPInternal.xml
%feature("docstring") CasADi::Interfaces::OOQPInternal "

Name

Description

QP_H

The square matrix H: sparse, (nx x nx). Only the lower triangular part
is actually used. The matrix is assumed to be symmetrical.

QP_G

The column vector G: dense, (nx x 1)

QP_A

The matrix A: sparse, (nc x nx) - product with x must be dense.

QP_LBA

dense, (nc x 1)

QP_UBA

dense, (nc x 1)

QP_LBX

dense, (nx x 1)

QP_UBX

dense, (nx x 1)

QP_X_INIT

dense, (nx x 1)

QP_LAMBDA_INIT

Input scheme: CasADi::QPInput (QP_NUM_IN = 9) Name

Description

QP_X_OPT

The optimal value of x as calculated with evaluate()

QP_COST

The value of the cost function as calculated with evaluate()

QP_LAMBDA_OPT

QP_LAMBDA_LBX

QP_LAMBDA_UBX

Output scheme: CasADi::QPOutput (QP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

artol

OT_REAL

1e-8

tolerance as provided with setArTol to OOQP

CasADi::Interfaces::OOQPInternal

convex

OT_BOOLEAN

false

Specify true if you can guarantee that H will always be positive
definite

CasADi::QPSolverInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

mutol

OT_REAL

1e-8

tolerance as provided with setMuTol to OOQP

CasADi::Interfaces::OOQPInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

print_level

OT_INTEGER

0

Print level. OOQP listends to print_level 0, 10 and 100

CasADi::Interfaces::OOQPInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

trans

OT_BOOLEAN

false

CasADi::QPSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: ooqp_internal.hpp ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::OOQPInternal
"CasADi::Interfaces::OOQPInternal::OOQPInternal()

Constructor. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::clone "OOQPInternal * CasADi::Interfaces::OOQPInternal::clone() const

Clone. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::OOQPInternal
"CasADi::Interfaces::OOQPInternal::OOQPInternal(const CRSSparsity &H,
const CRSSparsity &G, const CRSSparsity &A)

Create a new Solver. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::~OOQPInternal
"CasADi::Interfaces::OOQPInternal::~OOQPInternal()

Destructor. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::init "void
CasADi::Interfaces::OOQPInternal::init()

Initialize. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::allocate "void CasADi::Interfaces::OOQPInternal::allocate()

Allocate Because constraints after initialization, we cannot allocate
a Solver during init. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::evaluate "void CasADi::Interfaces::OOQPInternal::evaluate(int nfdir, int nadir)

Evaluate. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::solve "void
CasADi::QPSolverInternal::solve() ";

%feature("docstring")
CasADi::Interfaces::OOQPInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::jacobian "virtual FX CasADi::FXInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")
CasADi::Interfaces::OOQPInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")
CasADi::Interfaces::OOQPInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::inputStruct "const FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::outputStruct
"FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::outputStruct
"const FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::print "virtual void CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::Interfaces::OOQPInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::getPartition
"void CasADi::FXInternal::getPartition(const std::vector< std::pair<
int, int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::verbose "bool CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::monitored "bool CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::input "Matrix< double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::output "Matrix< double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::output "const Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::fwdSeed "Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::fwdSeed "const Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int
dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::fwdSens "Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::fwdSens "const Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::adjSeed "Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::adjSeed "const Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int
dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::adjSens "Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::adjSens "const Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::setNumInputs
"void CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::setNumOutputs
"void CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::getNumInputs
"int CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::getNumOutputs
"int CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::getStats "const Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::Interfaces::OOQPInternal::getJacSparsity "CRSSparsity
CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::OOQPInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::symbolicInput
"std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")
CasADi::Interfaces::OOQPInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::setOption "void CasADi::OptionsFunctionalityNode::setOption(const std::string
&str, const GenericType &val)

set an option ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::setOption "void CasADi::OptionsFunctionalityNode::setOption(const Dictionary
&dict)

set a set of options ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::hasSetOption
"bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::printOptions
"void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::repr "virtual void CasADi::OptionsFunctionalityNode::repr(std::ostream
&stream) const

Print representation. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::copyOptions "void CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::dictionary "const Dictionary & CasADi::OptionsFunctionalityNode::dictionary()
const

Get the dictionary. ";

%feature("docstring")
CasADi::Interfaces::OOQPInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Interfaces::OOQPInternal::getCount "int CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1Interfaces_1_1OOQPSolver.xml
%feature("docstring") CasADi::Interfaces::OOQPSolver "

OOQP Solver for quadratic programming:

min x'Hx + G'x

subject to LBA <= Ax <= UBA LBX <= x <= UBX

nx: number of decision variables (x) nc: number of constraints (A)

The current implementation assumes that OOQP is configured with the
MA27 sparse linear solver.

NOTE: when doing multiple calls to evaluate(), check if you need to
reInit();

Name

Description

QP_H

The square matrix H: sparse, (nx x nx). Only the lower triangular part
is actually used. The matrix is assumed to be symmetrical.

QP_G

The column vector G: dense, (nx x 1)

QP_A

The matrix A: sparse, (nc x nx) - product with x must be dense.

QP_LBA

dense, (nc x 1)

QP_UBA

dense, (nc x 1)

QP_LBX

dense, (nx x 1)

QP_UBX

dense, (nx x 1)

QP_X_INIT

dense, (nx x 1)

QP_LAMBDA_INIT

Input scheme: CasADi::QPInput (QP_NUM_IN = 9) Name

Description

QP_X_OPT

The optimal value of x as calculated with evaluate()

QP_COST

The value of the cost function as calculated with evaluate()

QP_LAMBDA_OPT

QP_LAMBDA_LBX

QP_LAMBDA_UBX

Output scheme: CasADi::QPOutput (QP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

artol

OT_REAL

1e-8

tolerance as provided with setArTol to OOQP

CasADi::Interfaces::OOQPInternal

convex

OT_BOOLEAN

false

Specify true if you can guarantee that H will always be positive
definite

CasADi::QPSolverInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

mutol

OT_REAL

1e-8

tolerance as provided with setMuTol to OOQP

CasADi::Interfaces::OOQPInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

print_level

OT_INTEGER

0

Print level. OOQP listends to print_level 0, 10 and 100

CasADi::Interfaces::OOQPInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

trans

OT_BOOLEAN

false

CasADi::QPSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: ooqp_solver.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Interfaces::OOQPSolver::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::setOutput "void CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::setFwdSeed "void CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::setFwdSens "void CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::setAdjSeed "void CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::setAdjSens "void CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Interfaces::OOQPSolver::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::getOutput "void CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::getFwdSeed "void CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::getFwdSens "void CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::getAdjSeed "void CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::getAdjSens "void CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::Interfaces::OOQPSolver::setOption "void CasADi::OptionsFunctionality::setOption(const std::string &str,
const GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::setOption "void CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::hasSetOption "bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::printOptions "void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::copyOptions "void CasADi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::dictionary "const Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::makeUnique "void CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::makeUnique "void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::OOQPSolver "CasADi::Interfaces::OOQPSolver::OOQPSolver()

Default constructor. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::OOQPSolver "CasADi::Interfaces::OOQPSolver::OOQPSolver(const CRSSparsity &H, const
CRSSparsity &G, const CRSSparsity &A) ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::checkNode "bool CasADi::Interfaces::OOQPSolver::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::reInit "void
CasADi::Interfaces::OOQPSolver::reInit()

Reinitialize the problem This method needs to be called before
evaluate() whenever the nature of any constraint has changed. This
occurs when: Any of LBA, UBA, LBX, UBX changes to/from (+-)infinity

An entry of LBA becomes equal/unequal to UBA: this indicates that an
inequality becomes an equality or visa versa. .

You do not need to call this method before doing the very first
evaluate() run ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::getNumInputs "int CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::getNumOutputs "int CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::setNumInputs "void CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::setNumOutputs "void CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::evaluate_old "void CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::call "vector<
MX > CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::call "std::vector<MX> CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::jacSparsity "CRSSparsity & CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::setJacSparsity
"void CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int
oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::input "const
Matrix< double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::input "Matrix<
double > & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::output "const
Matrix< double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::output "Matrix< double > & CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::fwdSeed "const
Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::fwdSeed "Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::fwdSens "const
Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::fwdSens "Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::adjSeed "const
Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::adjSeed "Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::adjSens "const
Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::adjSens "Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::addMonitor "void CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::removeMonitor "void CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::getStats "const Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::getStat "GenericType CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::clone "SharedObject CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::assignNode "void CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")
CasADi::Interfaces::OOQPSolver::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")
CasADi::Interfaces::OOQPSolver::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::Interfaces::OOQPSolver::getDescription
"string CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1OptionsFunctionality.xml
%feature("docstring") CasADi::OptionsFunctionality "

Prvides options setting/getting functionality Gives a derived class
the ability to set and retrieve options in a convenient way. It also
contains error checking, making sure that the option exists and that
the value type is correct.

A derived class should add option names, types and default values to
the corresponding vectors.

Joel Andersson

Id

Type

Default

Description

Used in

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode List of available options

C++ includes: options_functionality.hpp ";

/*  Option Functionality  */

%feature("docstring")  CasADi::OptionsFunctionality::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::OptionsFunctionality::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::OptionsFunctionality::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::OptionsFunctionality::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::OptionsFunctionality::hasSetOption "bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::OptionsFunctionality::printOptions "void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::OptionsFunctionality::copyOptions "void CasADi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::OptionsFunctionality::dictionary "const Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::OptionsFunctionality::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::OptionsFunctionality::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")
CasADi::OptionsFunctionality::OptionsFunctionality "CasADi::OptionsFunctionality::OptionsFunctionality()

Default constructor. ";

%feature("docstring")
CasADi::OptionsFunctionality::~OptionsFunctionality "CasADi::OptionsFunctionality::~OptionsFunctionality()

Destructor. ";

%feature("docstring")  CasADi::OptionsFunctionality::checkNode "bool
CasADi::OptionsFunctionality::checkNode() const

Assert that the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::OptionsFunctionality::clone "SharedObject CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::OptionsFunctionality::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::OptionsFunctionality::assignNodeNoCount
"void CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::OptionsFunctionality::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::OptionsFunctionality::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::OptionsFunctionality::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::OptionsFunctionality::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::OptionsFunctionality::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::OptionsFunctionality::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::OptionsFunctionality::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::OptionsFunctionality::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::OptionsFunctionality::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::OptionsFunctionality::getRepresentation
"string CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::OptionsFunctionality::getDescription "string CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1OptionsFunctionalityNode.xml
%feature("docstring") CasADi::OptionsFunctionalityNode "

Internal class.

Joel Andersson

Id

Type

Default

Description

Used in

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode List of available options

C++ includes: options_functionality.hpp ";

%feature("docstring")
CasADi::OptionsFunctionalityNode::OptionsFunctionalityNode "CasADi::OptionsFunctionalityNode::OptionsFunctionalityNode()

Constructor, destructor. ";

%feature("docstring")
CasADi::OptionsFunctionalityNode::~OptionsFunctionalityNode "CasADi::OptionsFunctionalityNode::~OptionsFunctionalityNode() ";

%feature("docstring")  CasADi::OptionsFunctionalityNode::setOption "void CasADi::OptionsFunctionalityNode::setOption(const std::string
&str, const GenericType &val)

set an option ";

%feature("docstring")  CasADi::OptionsFunctionalityNode::setOption "void CasADi::OptionsFunctionalityNode::setOption(const Dictionary
&dict)

set a set of options ";

%feature("docstring")  CasADi::OptionsFunctionalityNode::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::OptionsFunctionalityNode::hasSetOption
"bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::OptionsFunctionalityNode::printOptions
"void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::OptionsFunctionalityNode::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::OptionsFunctionalityNode::print "virtual void CasADi::OptionsFunctionalityNode::print(std::ostream
&stream) const =0

Print description. ";

%feature("docstring")  CasADi::OptionsFunctionalityNode::repr "virtual void CasADi::OptionsFunctionalityNode::repr(std::ostream
&stream) const

Print representation. ";

%feature("docstring")  CasADi::OptionsFunctionalityNode::copyOptions "void CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::OptionsFunctionalityNode::dictionary "const Dictionary & CasADi::OptionsFunctionalityNode::dictionary()
const

Get the dictionary. ";

%feature("docstring")  CasADi::OptionsFunctionalityNode::clone "virtual SharedObjectNode* CasADi::SharedObjectNode::clone() const =0

Make a deep copy of the instance. ";

%feature("docstring")
CasADi::OptionsFunctionalityNode::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::OptionsFunctionalityNode::getCount "int CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::OptionsFunctionalityNode::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";


// File: classCasADi_1_1OutputNode.xml
%feature("docstring") CasADi::OutputNode "C++ includes:
multiple_output.hpp ";

%feature("docstring")  CasADi::OutputNode::OutputNode "CasADi::OutputNode::OutputNode(const MX &parent, int oind)

Constructor. ";

%feature("docstring")  CasADi::OutputNode::~OutputNode "CasADi::OutputNode::~OutputNode()

Destructor. ";

%feature("docstring")  CasADi::OutputNode::clone "virtual OutputNode*
CasADi::OutputNode::clone() const

Clone function. ";

%feature("docstring")  CasADi::OutputNode::evaluate "void
CasADi::OutputNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const
DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::OutputNode::evaluateSX "void
CasADi::OutputNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV &fwdSens, const
SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::OutputNode::evaluateMX "void
CasADi::OutputNode::evaluateMX(const MXPtrV &input, MXPtrV &output,
const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed,
MXPtrVV &adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::OutputNode::propagateSparsity "void
CasADi::OutputNode::propagateSparsity(const DMatrixPtrV &input,
DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::OutputNode::print "void
CasADi::OutputNode::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::OutputNode::isNonLinear "virtual bool
CasADi::OutputNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::OutputNode::isOutputNode "virtual bool
CasADi::OutputNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::OutputNode::getFunctionInput "virtual
int CasADi::OutputNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::OutputNode::getFunctionOutput "virtual
int CasADi::OutputNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::OutputNode::jac "MX
CasADi::OutputNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::OutputNode::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::OutputNode::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::OutputNode::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::OutputNode::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::OutputNode::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::OutputNode::getName "const string &
CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::OutputNode::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::OutputNode::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::OutputNode::isMapping "virtual bool
CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::OutputNode::isEvaluation "virtual bool
CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::OutputNode::isMultipleOutput "virtual
bool CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::OutputNode::isJacobian "virtual bool
CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::OutputNode::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::OutputNode::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::OutputNode::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::OutputNode::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::OutputNode::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::OutputNode::getNumOutputs "virtual int
CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::OutputNode::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::OutputNode::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::OutputNode::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::OutputNode::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::OutputNode::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::OutputNode::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::OutputNode::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::OutputNode::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::OutputNode::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::OutputNode::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::OutputNode::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::OutputNode::isOperation "virtual bool
CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::OutputNode::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::OutputNode::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::OutputNode::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::OutputNode::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::OutputNode::eval "virtual
Matrix<double> CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::OutputNode::eval "virtual Matrix<SX>
CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::OutputNode::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::OutputNode::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::OutputNode::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::OutputNode::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1Parallelizer.xml
%feature("docstring") CasADi::Parallelizer "

Parallelizer execution of functions.

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

parallelization

OT_STRING

\"serial\"

serial, openmp or mpi

CasADi::ParallelizerInternal

save_corrected_input

OT_BOOLEAN

false

CasADi::ParallelizerInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: parallelizer.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Parallelizer::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::Parallelizer::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::Parallelizer::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::Parallelizer::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::Parallelizer::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::Parallelizer::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Parallelizer::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::Parallelizer::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::Parallelizer::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::Parallelizer::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::Parallelizer::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::Parallelizer::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::Parallelizer::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::Parallelizer::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::Parallelizer::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::Parallelizer::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::Parallelizer::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Parallelizer::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Parallelizer::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Parallelizer::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::Parallelizer::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::Parallelizer::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::Parallelizer::Parallelizer "CasADi::Parallelizer::Parallelizer()

Default constructor. ";

%feature("docstring")  CasADi::Parallelizer::Parallelizer "CasADi::Parallelizer::Parallelizer(const std::vector< FX > &funcs)

Create a Parallelizer. ";

%feature("docstring")  CasADi::Parallelizer::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::Parallelizer::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::Parallelizer::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::Parallelizer::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::Parallelizer::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::Parallelizer::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::Parallelizer::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::Parallelizer::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::Parallelizer::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Parallelizer::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Parallelizer::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::Parallelizer::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::Parallelizer::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::Parallelizer::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::Parallelizer::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::Parallelizer::jacSparsity "CRSSparsity
& CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Parallelizer::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Parallelizer::checkNode "bool
CasADi::FX::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::Parallelizer::input "const Matrix<
double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Parallelizer::input "Matrix< double >
& CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Parallelizer::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Parallelizer::output "Matrix< double >
& CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::Parallelizer::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::Parallelizer::fwdSeed "Matrix< double
> & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Parallelizer::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Parallelizer::fwdSens "Matrix< double
> & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Parallelizer::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Parallelizer::adjSeed "Matrix< double
> & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Parallelizer::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Parallelizer::adjSens "Matrix< double
> & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Parallelizer::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::Parallelizer::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::Parallelizer::getStats "const
Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Parallelizer::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::Parallelizer::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Parallelizer::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::Parallelizer::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::Parallelizer::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::Parallelizer::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::Parallelizer::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::Parallelizer::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Parallelizer::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::Parallelizer::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Parallelizer::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::Parallelizer::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::Parallelizer::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::Parallelizer::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::Parallelizer::getRepresentation "string CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::Parallelizer::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1ParallelizerInternal.xml
%feature("docstring") CasADi::ParallelizerInternal "

Internal node class for Parallelizer.

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

parallelization

OT_STRING

\"serial\"

serial, openmp or mpi

CasADi::ParallelizerInternal

save_corrected_input

OT_BOOLEAN

false

CasADi::ParallelizerInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: parallelizer_internal.hpp ";

%feature("docstring")  CasADi::ParallelizerInternal::clone "virtual
ParallelizerInternal* CasADi::ParallelizerInternal::clone() const

clone ";

%feature("docstring")
CasADi::ParallelizerInternal::~ParallelizerInternal "CasADi::ParallelizerInternal::~ParallelizerInternal()

Destructor. ";

%feature("docstring")  CasADi::ParallelizerInternal::evaluate "void
CasADi::ParallelizerInternal::evaluate(int nfdir, int nadir)

Evaluate the all the tasks. ";

%feature("docstring")  CasADi::ParallelizerInternal::evaluateTask "void CasADi::ParallelizerInternal::evaluateTask(int task, int nfdir,
int nadir)

Evaluate a single task. ";

%feature("docstring")  CasADi::ParallelizerInternal::jacobian "virtual FX CasADi::ParallelizerInternal::jacobian(const std::vector<
std::pair< int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::ParallelizerInternal::init "void
CasADi::ParallelizerInternal::init()

Initialize. ";

%feature("docstring")  CasADi::ParallelizerInternal::getJacSparsity "CRSSparsity CasADi::ParallelizerInternal::getJacSparsity(int iind, int
oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::ParallelizerInternal::deepCopyMembers "void CasADi::ParallelizerInternal::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::ParallelizerInternal::evaluate_switch "void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::ParallelizerInternal::jacobian_switch "FX CasADi::FXInternal::jacobian_switch(const std::vector< std::pair<
int, int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::ParallelizerInternal::numeric_jacobian
"FX CasADi::FXInternal::numeric_jacobian(const std::vector<
std::pair< int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::ParallelizerInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::ParallelizerInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::ParallelizerInternal::inputStruct "const FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::ParallelizerInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::ParallelizerInternal::outputStruct "const FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::ParallelizerInternal::print "virtual
void CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::ParallelizerInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::ParallelizerInternal::getPartition "void CasADi::FXInternal::getPartition(const std::vector< std::pair<
int, int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::ParallelizerInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::ParallelizerInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::ParallelizerInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::ParallelizerInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::ParallelizerInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::ParallelizerInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::ParallelizerInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::ParallelizerInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::ParallelizerInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::ParallelizerInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::ParallelizerInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::ParallelizerInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::ParallelizerInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::ParallelizerInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::ParallelizerInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::ParallelizerInternal::setNumInputs "void CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::ParallelizerInternal::setNumOutputs "void CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::ParallelizerInternal::getNumInputs "int CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::ParallelizerInternal::getNumOutputs "int CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::ParallelizerInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::ParallelizerInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::ParallelizerInternal::setJacSparsity "void CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int
iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::ParallelizerInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::ParallelizerInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::ParallelizerInternal::getFullJacobian "void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::ParallelizerInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::ParallelizerInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::ParallelizerInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::ParallelizerInternal::hasSetOption "bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::ParallelizerInternal::printOptions "void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::ParallelizerInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::ParallelizerInternal::repr "virtual
void CasADi::OptionsFunctionalityNode::repr(std::ostream &stream)
const

Print representation. ";

%feature("docstring")  CasADi::ParallelizerInternal::copyOptions "void CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::ParallelizerInternal::dictionary "const Dictionary & CasADi::OptionsFunctionalityNode::dictionary()
const

Get the dictionary. ";

%feature("docstring")  CasADi::ParallelizerInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1PrintableObject.xml
%feature("docstring") CasADi::PrintableObject "

Base class for objects that have a natural string representation.

Joel Andersson

C++ includes: printable_object.hpp ";

%feature("docstring")  CasADi::PrintableObject::print "void
CasADi::PrintableObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::PrintableObject::repr "void
CasADi::PrintableObject::repr(std::ostream &stream=std::cout) const

Print a representation of the object. ";

%feature("docstring")  CasADi::PrintableObject::getRepresentation "string CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::PrintableObject::getDescription "string CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1Interfaces_1_1QPOasesInternal.xml
%feature("docstring") CasADi::Interfaces::QPOasesInternal "

Internal class for QPOasesSolver.

Name

Description

QP_H

The square matrix H: sparse, (nx x nx). Only the lower triangular part
is actually used. The matrix is assumed to be symmetrical.

QP_G

The column vector G: dense, (nx x 1)

QP_A

The matrix A: sparse, (nc x nx) - product with x must be dense.

QP_LBA

dense, (nc x 1)

QP_UBA

dense, (nc x 1)

QP_LBX

dense, (nx x 1)

QP_UBX

dense, (nx x 1)

QP_X_INIT

dense, (nx x 1)

QP_LAMBDA_INIT

Input scheme: CasADi::QPInput (QP_NUM_IN = 9) Name

Description

QP_X_OPT

The optimal value of x as calculated with evaluate()

QP_COST

The value of the cost function as calculated with evaluate()

QP_LAMBDA_OPT

QP_LAMBDA_LBX

QP_LAMBDA_UBX

Output scheme: CasADi::QPOutput (QP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

CPUtime

OT_REAL

0

The maximum allowed CPU time in seconds for the whole initialisation
(and the actually required one on output). Set to zero to disable.

CasADi::Interfaces::QPOasesInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

convex

OT_BOOLEAN

false

Specify true if you can guarantee that H will always be positive
definite

CasADi::QPSolverInternal

hotstart

OT_BOOLEAN

false

Set to true if you need to solve several QP's in a row that are
similar

CasADi::Interfaces::QPOasesInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

nWSR

OT_INTEGER

-1

The maximum number of working set recalculations to be performed
during the initial homotopy. Default (-1) leads to 5(nx + nc)

CasADi::Interfaces::QPOasesInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

trans

OT_BOOLEAN

false

CasADi::QPSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: qpoases_internal.hpp ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::QPOasesInternal "CasADi::Interfaces::QPOasesInternal::QPOasesInternal()

Constructor. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::clone "QPOasesInternal * CasADi::Interfaces::QPOasesInternal::clone() const

Clone. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::QPOasesInternal "CasADi::Interfaces::QPOasesInternal::QPOasesInternal(const CRSSparsity
&H, const CRSSparsity &G, const CRSSparsity &A)

Create a new Solver. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::~QPOasesInternal "CasADi::Interfaces::QPOasesInternal::~QPOasesInternal()

Destructor. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::init "void CasADi::Interfaces::QPOasesInternal::init()

Initialize. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::evaluate "void CasADi::Interfaces::QPOasesInternal::evaluate(int nfdir, int
nadir)

Evaluate. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::solve "void CasADi::QPSolverInternal::solve() ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::jacobian "virtual FX CasADi::FXInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::hessian "FX CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::inputStruct "FunctionIO &
CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::inputStruct "const FunctionIO &
CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::outputStruct "FunctionIO &
CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::outputStruct "const FunctionIO &
CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::print "virtual void CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::unidirectionalColoring "CRSSparsity CasADi::FXInternal::unidirectionalColoring(const
CRSSparsity &A, const CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::isInit "bool CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::verbose "bool CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::monitored
"bool CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::input "Matrix< double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::input "const Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::output "Matrix< double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::output "const Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::fwdSeed "Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::fwdSeed "const Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int
dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::fwdSens "Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::fwdSens "const Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::adjSeed "Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::adjSeed "const Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int
dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::adjSens "Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::adjSens "const Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int
dir=0) const

Const access forward sensitivity. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::getStats "const Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::getJacSparsity "CRSSparsity
CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::jacSparsity "CRSSparsity &
CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::symbolicInput "std::vector< MX >
CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::setOption
"void CasADi::OptionsFunctionalityNode::setOption(const std::string
&str, const GenericType &val)

set an option ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::setOption
"void CasADi::OptionsFunctionalityNode::setOption(const Dictionary
&dict)

set a set of options ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::hasOption
"bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::getOption
"GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::repr "virtual void CasADi::OptionsFunctionalityNode::repr(std::ostream
&stream) const

Print representation. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::dictionary
"const Dictionary & CasADi::OptionsFunctionalityNode::dictionary()
const

Get the dictionary. ";

%feature("docstring")
CasADi::Interfaces::QPOasesInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::Interfaces::QPOasesInternal::getCount "int CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1Interfaces_1_1QPOasesSolver.xml
%feature("docstring") CasADi::Interfaces::QPOasesSolver "

QPOases Solver for quadratic programming.

min x'Hx + G'x

subject to LBA <= Ax <= UBA LBX <= x <= UBX

nx: number of decision variables (x) nc: number of constraints (A)

Name

Description

QP_H

The square matrix H: sparse, (nx x nx). Only the lower triangular part
is actually used. The matrix is assumed to be symmetrical.

QP_G

The column vector G: dense, (nx x 1)

QP_A

The matrix A: sparse, (nc x nx) - product with x must be dense.

QP_LBA

dense, (nc x 1)

QP_UBA

dense, (nc x 1)

QP_LBX

dense, (nx x 1)

QP_UBX

dense, (nx x 1)

QP_X_INIT

dense, (nx x 1)

QP_LAMBDA_INIT

Input scheme: CasADi::QPInput (QP_NUM_IN = 9) Name

Description

QP_X_OPT

The optimal value of x as calculated with evaluate()

QP_COST

The value of the cost function as calculated with evaluate()

QP_LAMBDA_OPT

QP_LAMBDA_LBX

QP_LAMBDA_UBX

Output scheme: CasADi::QPOutput (QP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

CPUtime

OT_REAL

0

The maximum allowed CPU time in seconds for the whole initialisation
(and the actually required one on output). Set to zero to disable.

CasADi::Interfaces::QPOasesInternal

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

convex

OT_BOOLEAN

false

Specify true if you can guarantee that H will always be positive
definite

CasADi::QPSolverInternal

hotstart

OT_BOOLEAN

false

Set to true if you need to solve several QP's in a row that are
similar

CasADi::Interfaces::QPOasesInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

nWSR

OT_INTEGER

-1

The maximum number of working set recalculations to be performed
during the initial homotopy. Default (-1) leads to 5(nx + nc)

CasADi::Interfaces::QPOasesInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

trans

OT_BOOLEAN

false

CasADi::QPSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: qpoases_solver.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::setInput "void CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::setOutput "void CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::setFwdSeed "void CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::setFwdSens "void CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::setAdjSeed "void CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::setAdjSens "void CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::getInput "void CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::getOutput "void CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::getFwdSeed "void CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::getFwdSens "void CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::getAdjSeed "void CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::getAdjSens "void CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::setOption "void CasADi::OptionsFunctionality::setOption(const std::string &str,
const GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::setOption "void CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::getOption "GenericType CasADi::OptionsFunctionality::getOption(const std::string
&str) const

get an option value ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::hasOption "bool CasADi::OptionsFunctionality::hasOption(const std::string &str)
const

check if there is an option str ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::hasSetOption
"bool CasADi::OptionsFunctionality::hasSetOption(const std::string
&str) const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::printOptions
"void CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::copyOptions
"void CasADi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::dictionary "const Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::makeUnique "void CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::makeUnique "void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")
CasADi::Interfaces::QPOasesSolver::QPOasesSolver "CasADi::Interfaces::QPOasesSolver::QPOasesSolver()

Default constructor. ";

%feature("docstring")
CasADi::Interfaces::QPOasesSolver::QPOasesSolver "CasADi::Interfaces::QPOasesSolver::QPOasesSolver(const CRSSparsity &H,
const CRSSparsity &G, const CRSSparsity &A) ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::checkNode "bool CasADi::Interfaces::QPOasesSolver::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::getNumInputs
"int CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")
CasADi::Interfaces::QPOasesSolver::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::setNumInputs
"void CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")
CasADi::Interfaces::QPOasesSolver::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::evaluate_old
"void CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::evaluate "void CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::jacobian "FX CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::jacobian "FX CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::call "vector< MX > CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::call "std::vector<DMatrix> CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::call "std::vector<MX> CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::jacSparsity
"CRSSparsity & CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")
CasADi::Interfaces::QPOasesSolver::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::input "const Matrix< double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::input "Matrix< double > & CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::output "const Matrix< double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::output "Matrix< double > & CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::fwdSeed "const Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::fwdSeed "Matrix< double > & CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::fwdSens "const Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::fwdSens "Matrix< double > & CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::adjSeed "const Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::adjSeed "Matrix< double > & CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::adjSens "const Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::adjSens "Matrix< double > & CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::addMonitor "void CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")
CasADi::Interfaces::QPOasesSolver::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::getStats "const Dictionary & CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::getStat "GenericType CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")
CasADi::Interfaces::QPOasesSolver::symbolicInput "std::vector< MX >
CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::clone "SharedObject CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::assignNode "void CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")
CasADi::Interfaces::QPOasesSolver::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::getCount "int CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::isInit "bool CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::Interfaces::QPOasesSolver::isNull "bool CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")
CasADi::Interfaces::QPOasesSolver::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")
CasADi::Interfaces::QPOasesSolver::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1QPSolver.xml
%feature("docstring") CasADi::QPSolver "

QPSolver.

Input arguments of an QP Solver CasADi::QPInput:
QP_X_INIT,QP_LBX,QP_UBX,QP_LBG,QP_UBG,QP_LAMBDA_INIT  Output arguments
of an QP Solver CasADi::QPOutput:
QP_X_OPT,QP_COST,QP_LAMBDA_OPT,QP_LAMBDA_LBX,QP_LAMBDA_UBX

Joel Andersson

Name

Description

QP_H

The square matrix H: sparse, (nx x nx). Only the lower triangular part
is actually used. The matrix is assumed to be symmetrical.

QP_G

The column vector G: dense, (nx x 1)

QP_A

The matrix A: sparse, (nc x nx) - product with x must be dense.

QP_LBA

dense, (nc x 1)

QP_UBA

dense, (nc x 1)

QP_LBX

dense, (nx x 1)

QP_UBX

dense, (nx x 1)

QP_X_INIT

dense, (nx x 1)

QP_LAMBDA_INIT

Input scheme: CasADi::QPInput (QP_NUM_IN = 9) Name

Description

QP_X_OPT

The optimal value of x as calculated with evaluate()

QP_COST

The value of the cost function as calculated with evaluate()

QP_LAMBDA_OPT

QP_LAMBDA_LBX

QP_LAMBDA_UBX

Output scheme: CasADi::QPOutput (QP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

convex

OT_BOOLEAN

false

Specify true if you can guarantee that H will always be positive
definite

CasADi::QPSolverInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

trans

OT_BOOLEAN

false

CasADi::QPSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: qp_solver.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::QPSolver::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::QPSolver::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::QPSolver::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::QPSolver::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::QPSolver::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::QPSolver::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::QPSolver::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::QPSolver::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::QPSolver::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::QPSolver::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::QPSolver::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::QPSolver::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::QPSolver::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::QPSolver::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::QPSolver::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::QPSolver::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::QPSolver::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::QPSolver::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::QPSolver::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::QPSolver::dictionary "const Dictionary
& CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::QPSolver::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::QPSolver::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::QPSolver::QPSolver "CasADi::QPSolver::QPSolver()

Default constructor. ";

%feature("docstring")  CasADi::QPSolver::QPSolver "CasADi::QPSolver::QPSolver(const CRSSparsity &H, const CRSSparsity &G,
const CRSSparsity &A)

Constructor with sparsity patterns. ";

%feature("docstring")  CasADi::QPSolver::checkNode "bool
CasADi::QPSolver::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::QPSolver::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::QPSolver::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::QPSolver::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::QPSolver::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::QPSolver::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::QPSolver::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::QPSolver::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::QPSolver::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::QPSolver::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::QPSolver::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::QPSolver::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::QPSolver::call "std::vector<DMatrix>
CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::QPSolver::call "std::vector<SXMatrix>
CasADi::FX::call(const std::vector< SXMatrix > &x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::QPSolver::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::QPSolver::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::QPSolver::jacSparsity "CRSSparsity &
CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::QPSolver::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::QPSolver::input "const Matrix< double
> & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::QPSolver::input "Matrix< double > &
CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::QPSolver::output "const Matrix< double
> & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::QPSolver::output "Matrix< double > &
CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::QPSolver::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::QPSolver::fwdSeed "Matrix< double > &
CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::QPSolver::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::QPSolver::fwdSens "Matrix< double > &
CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::QPSolver::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::QPSolver::adjSeed "Matrix< double > &
CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::QPSolver::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::QPSolver::adjSens "Matrix< double > &
CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::QPSolver::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::QPSolver::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::QPSolver::getStats "const Dictionary &
CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::QPSolver::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::QPSolver::symbolicInput "std::vector<
MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::QPSolver::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::QPSolver::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::QPSolver::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::QPSolver::get "const SharedObjectNode
* CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::QPSolver::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::QPSolver::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::QPSolver::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::QPSolver::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::QPSolver::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::QPSolver::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::QPSolver::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::QPSolver::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::QPSolver::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::QPSolver::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1QPSolverInternal.xml
%feature("docstring") CasADi::QPSolverInternal "

Internal class.

Name

Description

QP_H

The square matrix H: sparse, (nx x nx). Only the lower triangular part
is actually used. The matrix is assumed to be symmetrical.

QP_G

The column vector G: dense, (nx x 1)

QP_A

The matrix A: sparse, (nc x nx) - product with x must be dense.

QP_LBA

dense, (nc x 1)

QP_UBA

dense, (nc x 1)

QP_LBX

dense, (nx x 1)

QP_UBX

dense, (nx x 1)

QP_X_INIT

dense, (nx x 1)

QP_LAMBDA_INIT

Input scheme: CasADi::QPInput (QP_NUM_IN = 9) Name

Description

QP_X_OPT

The optimal value of x as calculated with evaluate()

QP_COST

The value of the cost function as calculated with evaluate()

QP_LAMBDA_OPT

QP_LAMBDA_LBX

QP_LAMBDA_UBX

Output scheme: CasADi::QPOutput (QP_NUM_OUT = 5)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

convex

OT_BOOLEAN

false

Specify true if you can guarantee that H will always be positive
definite

CasADi::QPSolverInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

trans

OT_BOOLEAN

false

CasADi::QPSolverInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: qp_solver_internal.hpp ";

%feature("docstring")  CasADi::QPSolverInternal::QPSolverInternal "CasADi::QPSolverInternal::QPSolverInternal() ";

%feature("docstring")  CasADi::QPSolverInternal::QPSolverInternal "CasADi::QPSolverInternal::QPSolverInternal(const CRSSparsity &H, const
CRSSparsity &G, const CRSSparsity &A) ";

%feature("docstring")  CasADi::QPSolverInternal::~QPSolverInternal "CasADi::QPSolverInternal::~QPSolverInternal()=0 ";

%feature("docstring")  CasADi::QPSolverInternal::init "void
CasADi::QPSolverInternal::init()

Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but
before evaluating. If passed to another class (in the constructor),
this class should invoke this function when initialized. ";

%feature("docstring")  CasADi::QPSolverInternal::evaluate "void
CasADi::QPSolverInternal::evaluate(int nfdir, int nadir)

Evaluate. ";

%feature("docstring")  CasADi::QPSolverInternal::solve "void
CasADi::QPSolverInternal::solve() ";

%feature("docstring")  CasADi::QPSolverInternal::evaluate_switch "void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::QPSolverInternal::jacobian "virtual FX
CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int >
> &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::QPSolverInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::QPSolverInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::QPSolverInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::QPSolverInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::QPSolverInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::QPSolverInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::QPSolverInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::QPSolverInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::QPSolverInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::QPSolverInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::QPSolverInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::QPSolverInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::QPSolverInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::QPSolverInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::QPSolverInternal::input "const Matrix<
double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::QPSolverInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::QPSolverInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::QPSolverInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::QPSolverInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::QPSolverInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::QPSolverInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::QPSolverInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::QPSolverInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::QPSolverInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::QPSolverInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::QPSolverInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::QPSolverInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::QPSolverInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::QPSolverInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::QPSolverInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::QPSolverInternal::getStat "GenericType
CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::QPSolverInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::QPSolverInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::QPSolverInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::QPSolverInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::QPSolverInternal::getFullJacobian "void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::QPSolverInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::QPSolverInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::QPSolverInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::QPSolverInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::QPSolverInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::QPSolverInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::QPSolverInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::QPSolverInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::QPSolverInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::QPSolverInternal::clone "virtual
SharedObjectNode* CasADi::SharedObjectNode::clone() const =0

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::QPSolverInternal::deepCopyMembers "void CasADi::SharedObjectNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::QPSolverInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1RealtypeSXNode.xml
%feature("docstring") CasADi::RealtypeSXNode "

DERIVED CLASSES.

Represents a constant real SX Joel Andersson

C++ includes: constant_sx_node.hpp ";

%feature("docstring")  CasADi::RealtypeSXNode::getValue "virtual
double CasADi::RealtypeSXNode::getValue() const

Get the value. ";

%feature("docstring")  CasADi::RealtypeSXNode::getIntValue "virtual
int CasADi::RealtypeSXNode::getIntValue() const ";

%feature("docstring")  CasADi::RealtypeSXNode::isInteger "bool
CasADi::SXNode::isInteger() const ";

%feature("docstring")  CasADi::RealtypeSXNode::isSymbolic "bool
CasADi::SXNode::isSymbolic() const ";

%feature("docstring")  CasADi::RealtypeSXNode::hasDep "bool
CasADi::SXNode::hasDep() const ";

%feature("docstring")  CasADi::RealtypeSXNode::isZero "bool
CasADi::SXNode::isZero() const ";

%feature("docstring")  CasADi::RealtypeSXNode::isOne "bool
CasADi::SXNode::isOne() const ";

%feature("docstring")  CasADi::RealtypeSXNode::isMinusOne "bool
CasADi::SXNode::isMinusOne() const ";

%feature("docstring")  CasADi::RealtypeSXNode::isNan "bool
CasADi::SXNode::isNan() const ";

%feature("docstring")  CasADi::RealtypeSXNode::isInf "bool
CasADi::SXNode::isInf() const ";

%feature("docstring")  CasADi::RealtypeSXNode::isMinusInf "bool
CasADi::SXNode::isMinusInf() const ";

%feature("docstring")  CasADi::RealtypeSXNode::~RealtypeSXNode "virtual CasADi::RealtypeSXNode::~RealtypeSXNode() ";

%feature("docstring")  CasADi::RealtypeSXNode::RealtypeSXNode "CasADi::RealtypeSXNode::RealtypeSXNode(double value) ";

%feature("docstring")  CasADi::RealtypeSXNode::isConstant "virtual
bool CasADi::ConstantSXNode::isConstant() const

Properties. ";

%feature("docstring")  CasADi::RealtypeSXNode::print "void
CasADi::SXNode::print(std::ostream &stream) const

print ";

%feature("docstring")  CasADi::RealtypeSXNode::getName "const
std::string & CasADi::SXNode::getName() const ";

%feature("docstring")  CasADi::RealtypeSXNode::getOp "int
CasADi::SXNode::getOp() const

get the operation only for binary nodes ";

%feature("docstring")  CasADi::RealtypeSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SXNode &node) const

comparison ";

%feature("docstring")  CasADi::RealtypeSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SX &scalar) const

comparison ";

%feature("docstring")  CasADi::RealtypeSXNode::ndep "virtual int
CasADi::SXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::RealtypeSXNode::dep "const SX &
CasADi::SXNode::dep(int i) const

get the reference of a child ";

%feature("docstring")  CasADi::RealtypeSXNode::dep "SX &
CasADi::SXNode::dep(int i)

get the reference of a child ";

%feature("docstring")  CasADi::RealtypeSXNode::isSmooth "bool
CasADi::SXNode::isSmooth() const

Check if smooth. ";


// File: structCasADi_1_1ResEntry.xml
%feature("docstring") CasADi::ResEntry "

Structure to hold the information about an entry

C++ includes: muscod_aux.hpp ";


// File: classCasADi_1_1ScalarNonzerosOp.xml
%feature("docstring") CasADi::ScalarNonzerosOp "

A scalar-matrix binary operation where one loops only over nonzeros of
the matrix.

C++ includes: binary_op.hpp ";

%feature("docstring")  CasADi::ScalarNonzerosOp::ScalarNonzerosOp "CasADi::ScalarNonzerosOp::ScalarNonzerosOp(Operation op, const MX &x,
const MX &y)

Constructor. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::~ScalarNonzerosOp "virtual CasADi::ScalarNonzerosOp::~ScalarNonzerosOp()

Destructor. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::clone "virtual
ScalarNonzerosOp* CasADi::ScalarNonzerosOp::clone() const

Clone function. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::evaluate "void
CasADi::ScalarNonzerosOp::evaluate(const DMatrixPtrV &input,
DMatrixPtrV &output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV
&fwdSens, const DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::evaluateSX "void
CasADi::ScalarNonzerosOp::evaluateSX(const SXMatrixPtrV &input,
SXMatrixPtrV &output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV
&fwdSens, const SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::ScalarNonzerosOp::propagateSparsity "void CasADi::ScalarNonzerosOp::propagateSparsity(const DMatrixPtrV
&input, DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::evaluateGen "void
CasADi::ScalarNonzerosOp::evaluateGen(const MatV &input, MatV &output,
const MatVV &fwdSeed, MatVV &fwdSens, const MatVV &adjSeed, MatVV
&adjSens)

Evaluate the function (template) ";

%feature("docstring")  CasADi::ScalarNonzerosOp::print "void
CasADi::BinaryOp::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::isOperation "virtual
bool CasADi::BinaryOp::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::evaluateMX "void
CasADi::BinaryOp::evaluateMX(const MXPtrV &input, MXPtrV &output,
const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed,
MXPtrVV &adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::ScalarNonzerosOp::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::deepCopyMembers "void CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::getName "const
string & CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::isMapping "virtual
bool CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::isEvaluation "virtual bool CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::isOutputNode "virtual bool CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::isMultipleOutput "virtual bool CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::isJacobian "virtual
bool CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::getFunctionInput "int CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::getFunctionOutput "int CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::ScalarNonzerosOp::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::ScalarNonzerosOp::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::getNumOutputs "virtual int CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::isNonLinear "virtual
bool CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::setDependencies "void CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::setDependencies "void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::setDependencies "void CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2,
const MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::setDependencies "void CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::ScalarNonzerosOp::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::ScalarNonzerosOp::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::ScalarNonzerosOp::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::eval "virtual
Matrix<double> CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::eval "virtual
Matrix<SX> CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::ScalarNonzerosOp::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::ScalarNonzerosOp::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::ScalarNonzerosOp::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1SharedObject.xml
%feature("docstring") CasADi::SharedObject "

SharedObject implements a reference counting framework simular for
effient and easily-maintained memory management.

To use the class, both the SharedObject class (the public class), and
the SharedObjectNode class (the internal class) must be inherited
from. It can be done in two different files and together with memory
management, this approach provides a clear destinction of which
methods of the class are to be considered \"public\", i.e. methods for
public use that can be considered to remain over time with small
changes, and the internal memory.

When interfacing a software, which typically includes including some
header file, this is best done only in the file where the internal
class is defined, to avoid polluting the global namespace and other
side effects.

The default constructor always means creating a null pointer to an
internal class only. To allocate an internal class (this works only
when the internal class isn't abstract), use the constructor with
arguments.

The copy constructor and the assignment operator perform shallow
copies only, to make a deep copy you must use the clone method
explictly. This will give a shared pointer instance.

In an inheritance hierarchy, you can cast down automatically, e.g. (
SXFunction is a child class of FX): SXFunction derived(...); FX base =
derived;

To cast up, use the shared_cast template function, which works
analogously to dynamic_cast, static_cast, const_cast etc, e.g.:
SXFunction derived(...); FX base = derived; SXFunction
derived_from_base = shared_cast<SXFunction>(base);

A failed shared_cast will result in a null pointer (cf. dynamic_cast)

Joel Andersson

C++ includes: shared_object.hpp ";

%feature("docstring")  CasADi::SharedObject::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::SharedObject::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::SharedObject::SharedObject "CasADi::SharedObject::SharedObject()

Default constructor. ";

%feature("docstring")  CasADi::SharedObject::SharedObject "CasADi::SharedObject::SharedObject(const SharedObject &ref)

Copy constructor (shallow copy) ";

%feature("docstring")  CasADi::SharedObject::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::SharedObject::~SharedObject "CasADi::SharedObject::~SharedObject()

Destructor. ";

%feature("docstring")  CasADi::SharedObject::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::SharedObject::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::SharedObject::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::SharedObject::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::SharedObject::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::SharedObject::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::SharedObject::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::SharedObject::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::SharedObject::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::SharedObject::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::SharedObject::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::SharedObject::checkNode "bool
CasADi::SharedObject::checkNode() const

Assert that the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::SharedObject::getRepresentation "string CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::SharedObject::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1SharedObjectNode.xml
%feature("docstring") CasADi::SharedObjectNode "

Internal class for the reference counting framework, see comments on
the public class.

C++ includes: shared_object.hpp ";

%feature("docstring")  CasADi::SharedObjectNode::SharedObjectNode "CasADi::SharedObjectNode::SharedObjectNode()

Default constructor. ";

%feature("docstring")  CasADi::SharedObjectNode::SharedObjectNode "CasADi::SharedObjectNode::SharedObjectNode(const SharedObjectNode
&node)

Copy constructor. ";

%feature("docstring")  CasADi::SharedObjectNode::~SharedObjectNode "CasADi::SharedObjectNode::~SharedObjectNode()=0

Destructor. ";

%feature("docstring")  CasADi::SharedObjectNode::clone "virtual
SharedObjectNode* CasADi::SharedObjectNode::clone() const =0

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::SharedObjectNode::deepCopyMembers "void CasADi::SharedObjectNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::SharedObjectNode::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::SharedObjectNode::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::SharedObjectNode::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::SharedObjectNode::print "void
CasADi::SharedObjectNode::print(std::ostream &stream) const

Print a destription of the object. ";


// File: classCasADi_1_1Simulator.xml
%feature("docstring") CasADi::Simulator "

Integrator class An \"simulator\" integrates an IVP, stopping at a
(fixed) number of grid points and evaluates a set of output functions
at these points. The internal stepsizes of the integrator need not
coincide with the gridpoints.

Simulator is an CasADi::FX mapping from CasADi::IntegratorInput to n.
\\\\

The output function needs to be a mapping from CasADi::DAEInput to n.
The default output has n=1 and the output is the (flattened)
differential state for each time step.

Joel Andersson

Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Input scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: simulator.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Simulator::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::Simulator::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::Simulator::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::Simulator::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::Simulator::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::Simulator::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::Simulator::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::Simulator::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::Simulator::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::Simulator::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::Simulator::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::Simulator::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::Simulator::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::Simulator::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::Simulator::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::Simulator::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::Simulator::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::Simulator::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::Simulator::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::Simulator::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::Simulator::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::Simulator::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::Simulator::Simulator "CasADi::Simulator::Simulator()

Default constructor. ";

%feature("docstring")  CasADi::Simulator::Simulator "CasADi::Simulator::Simulator(const Integrator &integrator, const FX
&output_fcn, const std::vector< double > &grid)

Constructor. ";

%feature("docstring")  CasADi::Simulator::Simulator "CasADi::Simulator::Simulator(const Integrator &integrator, const
std::vector< double > &grid)

Output function equal to the state. ";

%feature("docstring")  CasADi::Simulator::checkNode "bool
CasADi::Simulator::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::Simulator::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::Simulator::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::Simulator::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::Simulator::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::Simulator::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::Simulator::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::Simulator::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::Simulator::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::Simulator::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::Simulator::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::Simulator::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::Simulator::call "std::vector<DMatrix>
CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::Simulator::call "std::vector<SXMatrix>
CasADi::FX::call(const std::vector< SXMatrix > &x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::Simulator::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::Simulator::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::Simulator::jacSparsity "CRSSparsity &
CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Simulator::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::Simulator::input "const Matrix< double
> & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Simulator::input "Matrix< double > &
CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::Simulator::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::Simulator::output "Matrix< double > &
CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::Simulator::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::Simulator::fwdSeed "Matrix< double > &
CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::Simulator::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Simulator::fwdSens "Matrix< double > &
CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Simulator::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::Simulator::adjSeed "Matrix< double > &
CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::Simulator::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::Simulator::adjSens "Matrix< double > &
CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::Simulator::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::Simulator::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::Simulator::getStats "const Dictionary
& CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::Simulator::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::Simulator::symbolicInput "std::vector<
MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::Simulator::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::Simulator::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::Simulator::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::Simulator::get "const SharedObjectNode
* CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::Simulator::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::Simulator::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::Simulator::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::Simulator::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::Simulator::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::Simulator::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::Simulator::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::Simulator::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::Simulator::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::Simulator::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1SimulatorInternal.xml
%feature("docstring") CasADi::SimulatorInternal "

Simulator data storage classs.

Joel Andersson

Name

Description

INTEGRATOR_X0

Differential or algebraic state at t0 (dimension nx-by-1)

INTEGRATOR_P

Parameters p (dimension np-by-1)

INTEGRATOR_XP0

State derivative at t0 (dimension nx-by-1) This input may be changed
during an IDASIntegrator::evaluate() Input scheme:
CasADi::IntegratorInput (INTEGRATOR_NUM_IN = 3)

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: simulator_internal.hpp ";

%feature("docstring")  CasADi::SimulatorInternal::SimulatorInternal "CasADi::SimulatorInternal::SimulatorInternal(const Integrator
&integrator, const FX &output_fcn, const std::vector< double > &grid)

Constructor. ";

%feature("docstring")  CasADi::SimulatorInternal::~SimulatorInternal "CasADi::SimulatorInternal::~SimulatorInternal()

Destructor. ";

%feature("docstring")  CasADi::SimulatorInternal::clone "virtual
SimulatorInternal* CasADi::SimulatorInternal::clone() const

Clone. ";

%feature("docstring")  CasADi::SimulatorInternal::init "void
CasADi::SimulatorInternal::init()

initialize ";

%feature("docstring")  CasADi::SimulatorInternal::evaluate "void
CasADi::SimulatorInternal::evaluate(int nfdir, int nadir)

Integrate. ";

%feature("docstring")  CasADi::SimulatorInternal::evaluate_switch "void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::SimulatorInternal::jacobian "virtual
FX CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int
> > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::SimulatorInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::SimulatorInternal::numeric_jacobian "FX CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::SimulatorInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::SimulatorInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::SimulatorInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::SimulatorInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::SimulatorInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::SimulatorInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::SimulatorInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::SimulatorInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::SimulatorInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::SimulatorInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::SimulatorInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::SimulatorInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::SimulatorInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::SimulatorInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::SimulatorInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::SimulatorInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::SimulatorInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::SimulatorInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::SimulatorInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::SimulatorInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::SimulatorInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::SimulatorInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::SimulatorInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::SimulatorInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::SimulatorInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::SimulatorInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::SimulatorInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::SimulatorInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::SimulatorInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::SimulatorInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::SimulatorInternal::setJacSparsity "void CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int
iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::SimulatorInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::SimulatorInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::SimulatorInternal::getFullJacobian "void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::SimulatorInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::SimulatorInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::SimulatorInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::SimulatorInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::SimulatorInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::SimulatorInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::SimulatorInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::SimulatorInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::SimulatorInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::SimulatorInternal::deepCopyMembers "void CasADi::SharedObjectNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::SimulatorInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1Slice.xml
%feature("docstring") CasADi::Slice "

Class representing a slice

C++ includes: slice.hpp ";

%feature("docstring")  CasADi::Slice::Slice "CasADi::Slice::Slice()

Defailt constructor - all elements. ";

%feature("docstring")  CasADi::Slice::Slice "CasADi::Slice::Slice(int
i)

A single element. ";

%feature("docstring")  CasADi::Slice::Slice "CasADi::Slice::Slice(int
start, int stop, int step=1)

A slice. ";

%feature("docstring")  CasADi::Slice::getAll "std::vector< int >
CasADi::Slice::getAll(int len) const

Get a vector of indices. ";


// File: classCasADi_1_1SparseSparseOp.xml
%feature("docstring") CasADi::SparseSparseOp "

A sparse matrix-matrix binary operation.

C++ includes: binary_op.hpp ";

%feature("docstring")  CasADi::SparseSparseOp::SparseSparseOp "CasADi::SparseSparseOp::SparseSparseOp(Operation op, const MX &x,
const MX &y)

Constructor. ";

%feature("docstring")  CasADi::SparseSparseOp::~SparseSparseOp "virtual CasADi::SparseSparseOp::~SparseSparseOp()

Destructor. ";

%feature("docstring")  CasADi::SparseSparseOp::clone "virtual
SparseSparseOp* CasADi::SparseSparseOp::clone() const

Clone function. ";

%feature("docstring")  CasADi::SparseSparseOp::evaluate "void
CasADi::SparseSparseOp::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const
DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::SparseSparseOp::evaluateSX "void
CasADi::SparseSparseOp::evaluateSX(const SXMatrixPtrV &input,
SXMatrixPtrV &output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV
&fwdSens, const SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::SparseSparseOp::propagateSparsity "void CasADi::SparseSparseOp::propagateSparsity(const DMatrixPtrV
&input, DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::SparseSparseOp::print "void
CasADi::BinaryOp::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::SparseSparseOp::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::SparseSparseOp::isOperation "virtual
bool CasADi::BinaryOp::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::SparseSparseOp::evaluateMX "void
CasADi::BinaryOp::evaluateMX(const MXPtrV &input, MXPtrV &output,
const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed,
MXPtrVV &adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::SparseSparseOp::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::SparseSparseOp::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::SparseSparseOp::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::SparseSparseOp::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::SparseSparseOp::getName "const string
& CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::SparseSparseOp::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::SparseSparseOp::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::SparseSparseOp::isMapping "virtual
bool CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::SparseSparseOp::isEvaluation "virtual
bool CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::SparseSparseOp::isOutputNode "virtual
bool CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::SparseSparseOp::isMultipleOutput "virtual bool CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::SparseSparseOp::isJacobian "virtual
bool CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::SparseSparseOp::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::SparseSparseOp::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::SparseSparseOp::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::SparseSparseOp::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::SparseSparseOp::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::SparseSparseOp::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::SparseSparseOp::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::SparseSparseOp::getNumOutputs "virtual
int CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::SparseSparseOp::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::SparseSparseOp::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::SparseSparseOp::isNonLinear "virtual
bool CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::SparseSparseOp::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::SparseSparseOp::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::SparseSparseOp::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::SparseSparseOp::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::SparseSparseOp::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::SparseSparseOp::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::SparseSparseOp::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::SparseSparseOp::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::SparseSparseOp::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::SparseSparseOp::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::SparseSparseOp::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::SparseSparseOp::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::SparseSparseOp::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::SparseSparseOp::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::SparseSparseOp::eval "virtual
Matrix<double> CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::SparseSparseOp::eval "virtual
Matrix<SX> CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::SparseSparseOp::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::SparseSparseOp::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::SparseSparseOp::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::SparseSparseOp::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1OptimalControl_1_1StrArg.xml
%feature("docstring") CasADi::OptimalControl::StrArg "C++ includes:
xml_arg.hpp ";

%feature("docstring")  CasADi::OptimalControl::StrArg::StrArg "CasADi::OptimalControl::StrArg::StrArg(const std::string &str) ";


// File: classCasADi_1_1SubMatrix.xml
%feature("docstring") CasADi::SubMatrix "

submatrix

SubMatrix class for Matrix SubMatrix is the return type for operator()
of the Matrix class, it allows access to the value as well as changing
the parent object Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring")  CasADi::SubMatrix::SubMatrix "CasADi::SubMatrix< M, I, J >::SubMatrix(M &mat, const I &i, const J
&j)

Constructor. ";


// File: classCasADi_1_1SuperLU.xml
%feature("docstring") CasADi::SuperLU "

LU LinearSolver with SuperLU Interface.

This class solves the linear system A.x=b by making an LU
factorization of A:  A = L.U, with L lower and U upper triangular

SuperLU is an CasADi::FX mapping from 2 inputs [ A (matrix),b
(vector)] to one output [x (vector)].

The usual procedure to use SuperLU is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

colperm

OT_STRING

\"colamd\"

Specifies how to permute the columns of the matrix for sparsity
preservation.

CasADi::SuperLUInternal

conditionnumber

OT_BOOLEAN

false

CasADi::SuperLUInternal

diagpivotthresh

OT_REAL

1.0

CasADi::SuperLUInternal

equil

OT_BOOLEAN

true

Specifies whether to equilibrate the system (scale As rows and
columns to have unit norm).

CasADi::SuperLUInternal

iterrefine

OT_STRING

\"norefine\"

CasADi::SuperLUInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

pivotgrowth

OT_BOOLEAN

false

CasADi::SuperLUInternal

printstat

OT_BOOLEAN

true

CasADi::SuperLUInternal

rowperm

OT_STRING

\"largediag\"

CasADi::SuperLUInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

symmetricmode

OT_BOOLEAN

false

CasADi::SuperLUInternal

trans

OT_BOOLEAN

false

CasADi::LinearSolverInternal

user_work

OT_BOOLEAN

false

keep work in memory

CasADi::SuperLUInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: superlu.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::SuperLU::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::SuperLU::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::SuperLU::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::SuperLU::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::SuperLU::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::SuperLU::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::SuperLU::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::SuperLU::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::SuperLU::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::SuperLU::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::SuperLU::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::SuperLU::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::SuperLU::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::SuperLU::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::SuperLU::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::SuperLU::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::SuperLU::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::SuperLU::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::SuperLU::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::SuperLU::dictionary "const Dictionary
& CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::SuperLU::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::SuperLU::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::SuperLU::SuperLU "CasADi::SuperLU::SuperLU()

Default (empty) constructor. ";

%feature("docstring")  CasADi::SuperLU::SuperLU "CasADi::SuperLU::SuperLU(const CRSSparsity &sparsity, int nrhs=1)

Create a linear solver given a sparsity pattern. ";

%feature("docstring")  CasADi::SuperLU::setSparsity "void
CasADi::LinearSolver::setSparsity(const CRSSparsity &sparsity)

Set sparsity (before initialization) ";

%feature("docstring")  CasADi::SuperLU::prepare "void
CasADi::LinearSolver::prepare()

Factorize the matrix. ";

%feature("docstring")  CasADi::SuperLU::solve "void
CasADi::LinearSolver::solve()

Solve the system of equations, internal vector. ";

%feature("docstring")  CasADi::SuperLU::solve "void
CasADi::LinearSolver::solve(double *x, int nrhs=1, bool
transpose=false)

Solve the factorized system of equations. ";

%feature("docstring")  CasADi::SuperLU::prepared "bool
CasADi::LinearSolver::prepared() const

Check if prepared. ";

%feature("docstring")  CasADi::SuperLU::checkNode "bool
CasADi::LinearSolver::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::SuperLU::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::SuperLU::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::SuperLU::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::SuperLU::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::SuperLU::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::SuperLU::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::SuperLU::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::SuperLU::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::SuperLU::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::SuperLU::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::SuperLU::call "std::vector<DMatrix>
CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::SuperLU::call "std::vector<SXMatrix>
CasADi::FX::call(const std::vector< SXMatrix > &x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::SuperLU::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::SuperLU::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::SuperLU::jacSparsity "CRSSparsity &
CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::SuperLU::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::SuperLU::input "const Matrix< double >
& CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::SuperLU::input "Matrix< double > &
CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::SuperLU::output "const Matrix< double
> & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::SuperLU::output "Matrix< double > &
CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::SuperLU::fwdSeed "const Matrix< double
> & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::SuperLU::fwdSeed "Matrix< double > &
CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::SuperLU::fwdSens "const Matrix< double
> & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::SuperLU::fwdSens "Matrix< double > &
CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::SuperLU::adjSeed "const Matrix< double
> & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::SuperLU::adjSeed "Matrix< double > &
CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::SuperLU::adjSens "const Matrix< double
> & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::SuperLU::adjSens "Matrix< double > &
CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::SuperLU::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::SuperLU::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::SuperLU::getStats "const Dictionary &
CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::SuperLU::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::SuperLU::symbolicInput "std::vector<
MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::SuperLU::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::SuperLU::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::SuperLU::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::SuperLU::get "const SharedObjectNode *
CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::SuperLU::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::SuperLU::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::SuperLU::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::SuperLU::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::SuperLU::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::SuperLU::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::SuperLU::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::SuperLU::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::SuperLU::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::SuperLU::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1SuperLUInternal.xml
%feature("docstring") CasADi::SuperLUInternal "

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

colperm

OT_STRING

\"colamd\"

Specifies how to permute the columns of the matrix for sparsity
preservation.

CasADi::SuperLUInternal

conditionnumber

OT_BOOLEAN

false

CasADi::SuperLUInternal

diagpivotthresh

OT_REAL

1.0

CasADi::SuperLUInternal

equil

OT_BOOLEAN

true

Specifies whether to equilibrate the system (scale As rows and
columns to have unit norm).

CasADi::SuperLUInternal

iterrefine

OT_STRING

\"norefine\"

CasADi::SuperLUInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

pivotgrowth

OT_BOOLEAN

false

CasADi::SuperLUInternal

printstat

OT_BOOLEAN

true

CasADi::SuperLUInternal

rowperm

OT_STRING

\"largediag\"

CasADi::SuperLUInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

symmetricmode

OT_BOOLEAN

false

CasADi::SuperLUInternal

trans

OT_BOOLEAN

false

CasADi::LinearSolverInternal

user_work

OT_BOOLEAN

false

keep work in memory

CasADi::SuperLUInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: superlu_internal.hpp ";

%feature("docstring")  CasADi::SuperLUInternal::SuperLUInternal "CasADi::SuperLUInternal::SuperLUInternal(const CRSSparsity &sparsity,
int nrhs) ";

%feature("docstring")  CasADi::SuperLUInternal::SuperLUInternal "CasADi::SuperLUInternal::SuperLUInternal(const SuperLUInternal
&linsol) ";

%feature("docstring")  CasADi::SuperLUInternal::~SuperLUInternal "CasADi::SuperLUInternal::~SuperLUInternal() ";

%feature("docstring")  CasADi::SuperLUInternal::init "void
CasADi::SuperLUInternal::init()

Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but
before evaluating. If passed to another class (in the constructor),
this class should invoke this function when initialized. ";

%feature("docstring")  CasADi::SuperLUInternal::prepare "void
CasADi::SuperLUInternal::prepare() ";

%feature("docstring")  CasADi::SuperLUInternal::solve "void
CasADi::SuperLUInternal::solve(double *x, int nrhs, bool transpose) ";

%feature("docstring")  CasADi::SuperLUInternal::clone "SuperLUInternal * CasADi::SuperLUInternal::clone() const

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::SuperLUInternal::evaluate "void
CasADi::LinearSolverInternal::evaluate(int nfdir, int nadir)

Evaluate. ";

%feature("docstring")  CasADi::SuperLUInternal::solve "void
CasADi::LinearSolverInternal::solve() ";

%feature("docstring")  CasADi::SuperLUInternal::nrow "int
CasADi::LinearSolverInternal::nrow() const ";

%feature("docstring")  CasADi::SuperLUInternal::ncol "int
CasADi::LinearSolverInternal::ncol() const ";

%feature("docstring")  CasADi::SuperLUInternal::nnz "int
CasADi::LinearSolverInternal::nnz() const ";

%feature("docstring")  CasADi::SuperLUInternal::col "const
std::vector<int>& CasADi::LinearSolverInternal::col() const ";

%feature("docstring")  CasADi::SuperLUInternal::rowind "const
std::vector<int>& CasADi::LinearSolverInternal::rowind() const ";

%feature("docstring")  CasADi::SuperLUInternal::evaluate_switch "void
CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::SuperLUInternal::jacobian "virtual FX
CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int >
> &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::SuperLUInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::SuperLUInternal::numeric_jacobian "FX
CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::SuperLUInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::SuperLUInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::SuperLUInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::SuperLUInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::SuperLUInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::SuperLUInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")  CasADi::SuperLUInternal::unidirectionalColoring
"CRSSparsity CasADi::FXInternal::unidirectionalColoring(const
CRSSparsity &A, const CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::SuperLUInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::SuperLUInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::SuperLUInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::SuperLUInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::SuperLUInternal::input "Matrix< double
> & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::SuperLUInternal::input "const Matrix<
double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::SuperLUInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::SuperLUInternal::output "const Matrix<
double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::SuperLUInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::SuperLUInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::SuperLUInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::SuperLUInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::SuperLUInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::SuperLUInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::SuperLUInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::SuperLUInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::SuperLUInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::SuperLUInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::SuperLUInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::SuperLUInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::SuperLUInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::SuperLUInternal::getStat "GenericType
CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::SuperLUInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::SuperLUInternal::setJacSparsity "void
CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int iind,
int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::SuperLUInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::SuperLUInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::SuperLUInternal::getFullJacobian "void
CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::SuperLUInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::SuperLUInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::SuperLUInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::SuperLUInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::SuperLUInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::SuperLUInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::SuperLUInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::SuperLUInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::SuperLUInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::SuperLUInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::SuperLUInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1SX.xml
%feature("docstring") CasADi::SX "

The basic scalar symbolic class of CasADi.

Joel Andersson

C++ includes: sx.hpp ";

%feature("docstring")  CasADi::SX::SX "CasADi::SX::SX()

Constructors.

Default constructor (not-a-number)

Object is initialised as not-a-number. ";

%feature("docstring")  CasADi::SX::SX "CasADi::SX::SX(double val)

Numerical constant constructor.

Parameters:
-----------

val:  Numerical value ";

%feature("docstring")  CasADi::SX::SX "CasADi::SX::SX(const Matrix<
SX > &m)

Type conversion from Matrix.

Parameters:
-----------

Matrix<SX>:  object

Convert a 1-by-1 Matrix<SX> to an SX ";

%feature("docstring")  CasADi::SX::SX "CasADi::SX::SX(const
std::string &name)

Symbolic constructor.

Parameters:
-----------

name:  Name of the symbol

This is the name that wil be used by the \"operator<<\" and
\"toSTring\" methods. The name is not used as identifier; you may
construct distinct SX objects with non-unique names. ";

%feature("docstring")  CasADi::SX::SX "CasADi::SX::SX(const char
name[])

Symbolic constructor.

Parameters:
-----------

Name:  of the symbol

This is the name that wil be used by the \"operator<<\" and
\"toSTring\" methods. The name is not used as identifier; you may
construct distinct SX objects with non-unique names. ";

%feature("docstring")  CasADi::SX::SX "CasADi::SX::SX(SXNode *node)
";

%feature("docstring")  CasADi::SX::SX "CasADi::SX::SX(const SX
&scalar)

Copy constructor. ";

%feature("docstring")  CasADi::SX::~SX "CasADi::SX::~SX()

Destructor. ";

%feature("docstring")  CasADi::SX::print "void
CasADi::SX::print(std::ostream &stream, long &remaining_calls) const

print to stream, limited ";

%feature("docstring")  CasADi::SX::toString "string
CasADi::SX::toString() const

string representation (SWIG workaround) ";

%feature("docstring")  CasADi::SX::get "SXNode *const
CasADi::SX::get() const

Get a pointer to the node. ";

%feature("docstring")  CasADi::SX::isConstant "bool
CasADi::SX::isConstant() const ";

%feature("docstring")  CasADi::SX::isInteger "bool
CasADi::SX::isInteger() const ";

%feature("docstring")  CasADi::SX::isSymbolic "bool
CasADi::SX::isSymbolic() const ";

%feature("docstring")  CasADi::SX::isBinary "bool
CasADi::SX::isBinary() const ";

%feature("docstring")  CasADi::SX::isZero "bool CasADi::SX::isZero()
const ";

%feature("docstring")  CasADi::SX::isOne "bool CasADi::SX::isOne()
const ";

%feature("docstring")  CasADi::SX::isMinusOne "bool
CasADi::SX::isMinusOne() const ";

%feature("docstring")  CasADi::SX::isNan "bool CasADi::SX::isNan()
const ";

%feature("docstring")  CasADi::SX::isInf "bool CasADi::SX::isInf()
const ";

%feature("docstring")  CasADi::SX::isMinusInf "bool
CasADi::SX::isMinusInf() const ";

%feature("docstring")  CasADi::SX::getName "const std::string &
CasADi::SX::getName() const ";

%feature("docstring")  CasADi::SX::getOp "int CasADi::SX::getOp()
const ";

%feature("docstring")  CasADi::SX::isEqual "bool
CasADi::SX::isEqual(const SX &scalar) const ";

%feature("docstring")  CasADi::SX::getValue "double
CasADi::SX::getValue() const ";

%feature("docstring")  CasADi::SX::getIntValue "int
CasADi::SX::getIntValue() const ";

%feature("docstring")  CasADi::SX::getDep "SX CasADi::SX::getDep(int
ch=0) const ";

%feature("docstring")  CasADi::SX::__add__ "SX
CasADi::SX::__add__(const SX &b) const ";

%feature("docstring")  CasADi::SX::__sub__ "SX
CasADi::SX::__sub__(const SX &b) const ";

%feature("docstring")  CasADi::SX::__mul__ "SX
CasADi::SX::__mul__(const SX &b) const ";

%feature("docstring")  CasADi::SX::__div__ "SX
CasADi::SX::__div__(const SX &b) const ";

%feature("docstring")  CasADi::SX::__pow__ "SX
CasADi::SX::__pow__(const SX &b) const ";

%feature("docstring")  CasADi::SX::__constpow__ "SX
CasADi::SX::__constpow__(const SX &b) const ";

%feature("docstring")  CasADi::SX::prod "SX CasADi::SX::prod(const SX
&b) const ";

%feature("docstring")  CasADi::SX::__mldivide__ "SX
CasADi::SX::__mldivide__(const SX &b) const ";

%feature("docstring")  CasADi::SX::__mrdivide__ "SX
CasADi::SX::__mrdivide__(const SX &b) const ";

%feature("docstring")  CasADi::SX::__mpower__ "SX
CasADi::SX::__mpower__(const SX &b) const ";

%feature("docstring")  CasADi::SX::trans "SX CasADi::SX::trans()
const ";

%feature("docstring")  CasADi::SX::exp "SX CasADi::SX::exp() const

The following functions serves two purposes: Numpy compatibility and
to allow unambigous access. ";

%feature("docstring")  CasADi::SX::log "SX CasADi::SX::log() const ";

%feature("docstring")  CasADi::SX::sqrt "SX CasADi::SX::sqrt() const
";

%feature("docstring")  CasADi::SX::sin "SX CasADi::SX::sin() const ";

%feature("docstring")  CasADi::SX::cos "SX CasADi::SX::cos() const ";

%feature("docstring")  CasADi::SX::tan "SX CasADi::SX::tan() const ";

%feature("docstring")  CasADi::SX::arcsin "SX CasADi::SX::arcsin()
const ";

%feature("docstring")  CasADi::SX::arccos "SX CasADi::SX::arccos()
const ";

%feature("docstring")  CasADi::SX::arctan "SX CasADi::SX::arctan()
const ";

%feature("docstring")  CasADi::SX::floor "SX CasADi::SX::floor()
const ";

%feature("docstring")  CasADi::SX::ceil "SX CasADi::SX::ceil() const
";

%feature("docstring")  CasADi::SX::erf "SX CasADi::SX::erf() const ";

%feature("docstring")  CasADi::SX::fabs "SX CasADi::SX::fabs() const
";

%feature("docstring")  CasADi::SX::add "SX CasADi::SX::add(const SX
&y) const ";

%feature("docstring")  CasADi::SX::sub "SX CasADi::SX::sub(const SX
&y) const ";

%feature("docstring")  CasADi::SX::mul "SX CasADi::SX::mul(const SX
&y) const ";

%feature("docstring")  CasADi::SX::div "SX CasADi::SX::div(const SX
&y) const ";

%feature("docstring")  CasADi::SX::fmin "SX CasADi::SX::fmin(const SX
&b) const ";

%feature("docstring")  CasADi::SX::fmax "SX CasADi::SX::fmax(const SX
&b) const ";

%feature("docstring")  CasADi::SX::inv "SX CasADi::SX::inv() const ";

%feature("docstring")  CasADi::SX::constpow "SX
CasADi::SX::constpow(const SX &n) const ";

%feature("docstring")  CasADi::SX::sinh "SX CasADi::SX::sinh() const
";

%feature("docstring")  CasADi::SX::cosh "SX CasADi::SX::cosh() const
";

%feature("docstring")  CasADi::SX::tanh "SX CasADi::SX::tanh() const
";

%feature("docstring")  CasADi::SX::log10 "SX CasADi::SX::log10()
const ";

%feature("docstring")  CasADi::SX::printme "SX
CasADi::SX::printme(const SX &b) const ";

%feature("docstring")  CasADi::SX::getTemp "int CasADi::SX::getTemp()
const ";

%feature("docstring")  CasADi::SX::setTemp "void
CasADi::SX::setTemp(int t) ";


// File: structCasADi_1_1SXAlgEl.xml
%feature("docstring") CasADi::SXAlgEl "

An elemenent of the algorithm, namely a binary operation.

C++ includes: sx_function.hpp ";


// File: classCasADi_1_1SXFunction.xml
%feature("docstring") CasADi::SXFunction "

Dynamically created function that can be expanded into a series of
scalar operations.

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

live_variables

OT_BOOLEAN

false

Reuse variables in the work vector

CasADi::SXFunctionInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

topological_sorting

OT_STRING

\"breadth-first\"

Topological sorting algorithm: \"depth-first\" or \"breadth-first\"
search

CasADi::XFunctionInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: sx_function.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::SXFunction::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::SXFunction::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::SXFunction::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::SXFunction::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::SXFunction::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::SXFunction::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::SXFunction::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::SXFunction::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::SXFunction::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::SXFunction::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::SXFunction::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::SXFunction::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::SXFunction::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::SXFunction::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::SXFunction::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::SXFunction::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::SXFunction::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::SXFunction::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::SXFunction::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::SXFunction::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::SXFunction::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::SXFunction::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::SXFunction::SXFunction "CasADi::SXFunction::SXFunction()

Default constructor. ";

%feature("docstring")  CasADi::SXFunction::SXFunction "CasADi::SXFunction::SXFunction(const MXFunction &f)

Expand an MXFunction. ";

%feature("docstring")  CasADi::SXFunction::SXFunction "CasADi::SXFunction::SXFunction(const std::vector< SXMatrix > &arg,
const std::vector< SXMatrix > &res)

Multiple (matrix valued) input, multiple (matrix valued) output. ";

%feature("docstring")  CasADi::SXFunction::SXFunction "CasADi::SXFunction::SXFunction(const std::vector< std::vector< SX > >
&arg, const std::vector< std::vector< SX > > &res)

Multiple (vector valued) input, multiple (vector valued) output. ";

%feature("docstring")  CasADi::SXFunction::SXFunction "CasADi::SXFunction::SXFunction(const SXMatrix &arg, const SXMatrix
&res)

Single (scalar/matrix/vector valued) input, single
(scalar/matrix/vector valued) output. ";

%feature("docstring")  CasADi::SXFunction::SXFunction "CasADi::SXFunction::SXFunction(const std::vector< std::vector< SX > >
&arg, const SXMatrix &res)

Multiple (vector valued) input, single (scalar/vector/matrix valued)
output. ";

%feature("docstring")  CasADi::SXFunction::SXFunction "CasADi::SXFunction::SXFunction(const std::vector< SXMatrix > &arg,
const SXMatrix &res)

Multiple (matrix valued) input, single (scalar/vector/matrix valued)
output. ";

%feature("docstring")  CasADi::SXFunction::jacobian "SXFunction
CasADi::SXFunction::jacobian(int iind=0, int oind=0)

Calculate the jacobian of output oind with respect to input iind.

This is just the result of CasADi::SXFunction::jac, wrapped in an
SXFunction.

See:   CasADi::Jacobian for an AD approach ";

%feature("docstring")  CasADi::SXFunction::hessian "SXFunction
CasADi::SXFunction::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::SXFunction::jac "SXMatrix
CasADi::SXFunction::jac(int iind=0, int oind=0)

Jacobian via source code transformation.

See:   CasADi::Jacobian for an AD approach ";

%feature("docstring")  CasADi::SXFunction::grad "SXMatrix
CasADi::SXFunction::grad(int iind=0, int oind=0)

Gradient via source code transformation. ";

%feature("docstring")  CasADi::SXFunction::hess "SXMatrix
CasADi::SXFunction::hess(int iind=0, int oind=0)

Hessian (forward over adjoint) via source code transformation. ";

%feature("docstring")  CasADi::SXFunction::jac "std::vector<Matrix<SX> > CasADi::SXFunction::jac(const std::vector<
std::pair< int, int > > &jblocks)

Calculate the expression for the jacobian of a number of function
outputs with respect to a number of function inputs, optionally
include the function outputs. ";

%feature("docstring")  CasADi::SXFunction::checkNode "bool
CasADi::SXFunction::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::SXFunction::inputSX "const SXMatrix &
CasADi::SXFunction::inputSX(int ind=0) const

get function input ";

%feature("docstring")  CasADi::SXFunction::outputSX "const SXMatrix &
CasADi::SXFunction::outputSX(int ind=0) const

get function output ";

%feature("docstring")  CasADi::SXFunction::generateCode "void
CasADi::SXFunction::generateCode(const std::string &filename)

Generate C code for the function. ";

%feature("docstring")  CasADi::SXFunction::algorithm "const vector<
SXAlgEl > & CasADi::SXFunction::algorithm() const

Access the algorithm. ";

%feature("docstring")  CasADi::SXFunction::countNodes "int
CasADi::SXFunction::countNodes() const

Number of nodes in the algorithm. ";

%feature("docstring")  CasADi::SXFunction::clearSymbolic "void
CasADi::SXFunction::clearSymbolic()

Clear the function from its symbolic representation, to free up
memory, no symbolic evaluations are possible after this. ";

%feature("docstring")  CasADi::SXFunction::eval "std::vector<SXMatrix> CasADi::XFunction::eval(const std::vector<
SXMatrix > &arg)

evaluate symbolically ";

%feature("docstring")  CasADi::SXFunction::eval "std::vector<
std::vector<SX> > CasADi::XFunction::eval(const std::vector<
std::vector< SX > > &arg)

evaluate symbolically (pass and get non-zero entries) ";

%feature("docstring")  CasADi::SXFunction::eval "SXMatrix
CasADi::XFunction::eval(const SXMatrix &arg)

evaluate symbolically, single input, single output ";

%feature("docstring")  CasADi::SXFunction::eval "std::vector<SX>
CasADi::XFunction::eval(const std::vector< SX > &arg)

evaluate symbolically, single input, single output (pass and get non-
zero entries) ";

%feature("docstring")  CasADi::SXFunction::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::SXFunction::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::SXFunction::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::SXFunction::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::SXFunction::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::SXFunction::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::SXFunction::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::SXFunction::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::SXFunction::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::SXFunction::call "std::vector<DMatrix>
CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::SXFunction::call "std::vector<SXMatrix> CasADi::FX::call(const std::vector< SXMatrix >
&x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::SXFunction::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::SXFunction::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::SXFunction::jacSparsity "CRSSparsity &
CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::SXFunction::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::SXFunction::input "const Matrix<
double > & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::SXFunction::input "Matrix< double > &
CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::SXFunction::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::SXFunction::output "Matrix< double > &
CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::SXFunction::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::SXFunction::fwdSeed "Matrix< double >
& CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::SXFunction::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::SXFunction::fwdSens "Matrix< double >
& CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::SXFunction::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::SXFunction::adjSeed "Matrix< double >
& CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::SXFunction::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::SXFunction::adjSens "Matrix< double >
& CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::SXFunction::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::SXFunction::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::SXFunction::getStats "const Dictionary
& CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::SXFunction::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::SXFunction::symbolicInput "std::vector< MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::SXFunction::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::SXFunction::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::SXFunction::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::SXFunction::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::SXFunction::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::SXFunction::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::SXFunction::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::SXFunction::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::SXFunction::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::SXFunction::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::SXFunction::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::SXFunction::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::SXFunction::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::SXFunction::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1SXFunctionInternal.xml
%feature("docstring") CasADi::SXFunctionInternal "

Internal node class for SXFunction A regular user should never work
with any Node class. Use SXFunction directly.

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

live_variables

OT_BOOLEAN

false

Reuse variables in the work vector

CasADi::SXFunctionInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

topological_sorting

OT_STRING

\"breadth-first\"

Topological sorting algorithm: \"depth-first\" or \"breadth-first\"
search

CasADi::XFunctionInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: sx_function_internal.hpp ";

%feature("docstring")  CasADi::SXFunctionInternal::clone "SXFunctionInternal * CasADi::SXFunctionInternal::clone() const

Make a deep copy. ";

%feature("docstring")  CasADi::SXFunctionInternal::~SXFunctionInternal
"CasADi::SXFunctionInternal::~SXFunctionInternal()

Destructor. ";

%feature("docstring")  CasADi::SXFunctionInternal::evaluate "void
CasADi::SXFunctionInternal::evaluate(int nfdir, int nadir)

Evaluate the function with partial derivatives up to order ord. ";

%feature("docstring")  CasADi::SXFunctionInternal::evaluateSX "virtual void CasADi::SXFunctionInternal::evaluateSX(const std::vector<
Matrix< SX > > &input_s, std::vector< Matrix< SX > > &output_s, bool
eliminate_constants=false)

evaluate symbolically ";

%feature("docstring")  CasADi::SXFunctionInternal::isSmooth "bool
CasADi::SXFunctionInternal::isSmooth() const

Check if smooth. ";

%feature("docstring")  CasADi::SXFunctionInternal::print "virtual
void CasADi::SXFunctionInternal::print(std::ostream &stream) const

Print the algorithm. ";

%feature("docstring")  CasADi::SXFunctionInternal::jacobian "FX
CasADi::SXFunctionInternal::jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::SXFunctionInternal::hessian "FX
CasADi::SXFunctionInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::SXFunctionInternal::jac "virtual
std::vector<Matrix<SX> > CasADi::SXFunctionInternal::jac(const
std::vector< std::pair< int, int > > &jblocks)

Calculate the expression for the jacobian of a number of function
outputs with respect to a number of function inputs, optionally
include the function outputs. ";

%feature("docstring")  CasADi::SXFunctionInternal::init "void
CasADi::SXFunctionInternal::init()

Initialize. ";

%feature("docstring")  CasADi::SXFunctionInternal::printOperation "void CasADi::SXFunctionInternal::printOperation(std::ostream &stream,
int i) const

Print operation i to a stream. ";

%feature("docstring")  CasADi::SXFunctionInternal::generateCode "void
CasADi::SXFunctionInternal::generateCode(const std::string &filename)

Print to a c file. ";

%feature("docstring")  CasADi::SXFunctionInternal::clearSymbolic "void CasADi::SXFunctionInternal::clearSymbolic()

Clear the function from its symbolic representation, to free up
memory, no symbolic evaluations are possible after this. ";

%feature("docstring")  CasADi::SXFunctionInternal::getJacSparsity "CRSSparsity CasADi::SXFunctionInternal::getJacSparsity(int iind, int
oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::SXFunctionInternal::evaluate_switch "void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::SXFunctionInternal::jacobian_switch "FX CasADi::FXInternal::jacobian_switch(const std::vector< std::pair<
int, int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::SXFunctionInternal::numeric_jacobian "FX CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::SXFunctionInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::SXFunctionInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::SXFunctionInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::SXFunctionInternal::outputStruct "const FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")
CasADi::SXFunctionInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::SXFunctionInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::SXFunctionInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::SXFunctionInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::SXFunctionInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::SXFunctionInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::SXFunctionInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::SXFunctionInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::SXFunctionInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::SXFunctionInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::SXFunctionInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::SXFunctionInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::SXFunctionInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::SXFunctionInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::SXFunctionInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::SXFunctionInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::SXFunctionInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::SXFunctionInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::SXFunctionInternal::setNumOutputs "void CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::SXFunctionInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::SXFunctionInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::SXFunctionInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::SXFunctionInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::SXFunctionInternal::setJacSparsity "void CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int
iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::SXFunctionInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::SXFunctionInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::SXFunctionInternal::getFullJacobian "void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::SXFunctionInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::SXFunctionInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::SXFunctionInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::SXFunctionInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::SXFunctionInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::SXFunctionInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::SXFunctionInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::SXFunctionInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::SXFunctionInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::SXFunctionInternal::deepCopyMembers "void CasADi::SharedObjectNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::SXFunctionInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1SXNode.xml
%feature("docstring") CasADi::SXNode "

Interal node class for SX.

Joel Andersson

C++ includes: sx_node.hpp ";

%feature("docstring")  CasADi::SXNode::isConstant "bool
CasADi::SXNode::isConstant() const

check properties of a node ";

%feature("docstring")  CasADi::SXNode::isInteger "bool
CasADi::SXNode::isInteger() const ";

%feature("docstring")  CasADi::SXNode::isSymbolic "bool
CasADi::SXNode::isSymbolic() const ";

%feature("docstring")  CasADi::SXNode::hasDep "bool
CasADi::SXNode::hasDep() const ";

%feature("docstring")  CasADi::SXNode::isZero "bool
CasADi::SXNode::isZero() const ";

%feature("docstring")  CasADi::SXNode::isOne "bool
CasADi::SXNode::isOne() const ";

%feature("docstring")  CasADi::SXNode::isMinusOne "bool
CasADi::SXNode::isMinusOne() const ";

%feature("docstring")  CasADi::SXNode::isNan "bool
CasADi::SXNode::isNan() const ";

%feature("docstring")  CasADi::SXNode::isInf "bool
CasADi::SXNode::isInf() const ";

%feature("docstring")  CasADi::SXNode::isMinusInf "bool
CasADi::SXNode::isMinusInf() const ";

%feature("docstring")  CasADi::SXNode::getValue "double
CasADi::SXNode::getValue() const

Get value of a constant node. ";

%feature("docstring")  CasADi::SXNode::getIntValue "int
CasADi::SXNode::getIntValue() const ";

%feature("docstring")  CasADi::SXNode::SXNode "CasADi::SXNode::SXNode()

constructor ";

%feature("docstring")  CasADi::SXNode::~SXNode "CasADi::SXNode::~SXNode()

destructor ";

%feature("docstring")  CasADi::SXNode::getName "const std::string &
CasADi::SXNode::getName() const ";

%feature("docstring")  CasADi::SXNode::getOp "int
CasADi::SXNode::getOp() const

get the operation only for binary nodes ";

%feature("docstring")  CasADi::SXNode::isEqual "bool
CasADi::SXNode::isEqual(const SXNode &node) const

comparison ";

%feature("docstring")  CasADi::SXNode::isEqual "bool
CasADi::SXNode::isEqual(const SX &scalar) const

comparison ";

%feature("docstring")  CasADi::SXNode::ndep "virtual int
CasADi::SXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::SXNode::dep "const SX &
CasADi::SXNode::dep(int i) const

get the reference of a child ";

%feature("docstring")  CasADi::SXNode::dep "SX &
CasADi::SXNode::dep(int i)

get the reference of a child ";

%feature("docstring")  CasADi::SXNode::isSmooth "bool
CasADi::SXNode::isSmooth() const

Check if smooth. ";

%feature("docstring")  CasADi::SXNode::print "void
CasADi::SXNode::print(std::ostream &stream) const

print ";

%feature("docstring")  CasADi::SXNode::print "virtual void
CasADi::SXNode::print(std::ostream &stream, long &remaining_calls)
const =0

print ";


// File: classCasADi_1_1SymbolicMatrix.xml
%feature("docstring") CasADi::SymbolicMatrix "

Represents a symbolic MX.

Joel Andersson

C++ includes: symbolic_mx_node.hpp ";

%feature("docstring")  CasADi::SymbolicMatrix::SymbolicMatrix "CasADi::SymbolicMatrix::SymbolicMatrix(const std::string &name, int
n=1, int m=1)

Constructors. ";

%feature("docstring")  CasADi::SymbolicMatrix::SymbolicMatrix "CasADi::SymbolicMatrix::SymbolicMatrix(const std::string &name, const
CRSSparsity &sp)

Constructors. ";

%feature("docstring")  CasADi::SymbolicMatrix::clone "SymbolicMatrix
* CasADi::SymbolicMatrix::clone() const

Clone function. ";

%feature("docstring")  CasADi::SymbolicMatrix::print "void
CasADi::SymbolicMatrix::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::SymbolicMatrix::evaluate "void
CasADi::SymbolicMatrix::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const
DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::SymbolicMatrix::evaluateSX "void
CasADi::SymbolicMatrix::evaluateSX(const SXMatrixPtrV &input,
SXMatrixPtrV &output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV
&fwdSens, const SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::SymbolicMatrix::evaluateMX "void
CasADi::SymbolicMatrix::evaluateMX(const MXPtrV &input, MXPtrV
&output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::SymbolicMatrix::propagateSparsity "void CasADi::SymbolicMatrix::propagateSparsity(const DMatrixPtrV
&input, DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::SymbolicMatrix::isSymbolic "bool
CasADi::SymbolicMatrix::isSymbolic() const

Is symbolic. ";

%feature("docstring")  CasADi::SymbolicMatrix::getName "const
std::string & CasADi::SymbolicMatrix::getName() const

Get the name. ";

%feature("docstring")  CasADi::SymbolicMatrix::eval "virtual MX
CasADi::SymbolicMatrix::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::SymbolicMatrix::partial "std::vector<
MX > CasADi::SymbolicMatrix::partial(const std::vector< MX > &x)

Partial derivatives. ";

%feature("docstring")  CasADi::SymbolicMatrix::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::SymbolicMatrix::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::SymbolicMatrix::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::SymbolicMatrix::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::SymbolicMatrix::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::SymbolicMatrix::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::SymbolicMatrix::isMapping "virtual
bool CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::SymbolicMatrix::isEvaluation "virtual
bool CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::SymbolicMatrix::isOutputNode "virtual
bool CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::SymbolicMatrix::isMultipleOutput "virtual bool CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::SymbolicMatrix::isJacobian "virtual
bool CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::SymbolicMatrix::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::SymbolicMatrix::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::SymbolicMatrix::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::SymbolicMatrix::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::SymbolicMatrix::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::SymbolicMatrix::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::SymbolicMatrix::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::SymbolicMatrix::getNumOutputs "virtual
int CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::SymbolicMatrix::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::SymbolicMatrix::sparsity "const
CRSSparsity & CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::SymbolicMatrix::isNonLinear "virtual
bool CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::SymbolicMatrix::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::SymbolicMatrix::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::SymbolicMatrix::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::SymbolicMatrix::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::SymbolicMatrix::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::SymbolicMatrix::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::SymbolicMatrix::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::SymbolicMatrix::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::SymbolicMatrix::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::SymbolicMatrix::isOperation "virtual
bool CasADi::MXNode::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::SymbolicMatrix::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::SymbolicMatrix::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::SymbolicMatrix::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::SymbolicMatrix::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::SymbolicMatrix::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::SymbolicMatrix::eval "virtual
Matrix<double> CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::SymbolicMatrix::eval "virtual
Matrix<SX> CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::SymbolicMatrix::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::SymbolicMatrix::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::SymbolicMatrix::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1SymbolicSXNode.xml
%feature("docstring") CasADi::SymbolicSXNode "

Represents a scalar symbolic expression.

Joel Andersson

C++ includes: symbolic_sx_node.hpp ";

%feature("docstring")  CasADi::SymbolicSXNode::isConstant "bool
CasADi::SXNode::isConstant() const

check properties of a node ";

%feature("docstring")  CasADi::SymbolicSXNode::isInteger "bool
CasADi::SXNode::isInteger() const ";

%feature("docstring")  CasADi::SymbolicSXNode::hasDep "bool
CasADi::SXNode::hasDep() const ";

%feature("docstring")  CasADi::SymbolicSXNode::isZero "bool
CasADi::SXNode::isZero() const ";

%feature("docstring")  CasADi::SymbolicSXNode::isOne "bool
CasADi::SXNode::isOne() const ";

%feature("docstring")  CasADi::SymbolicSXNode::isMinusOne "bool
CasADi::SXNode::isMinusOne() const ";

%feature("docstring")  CasADi::SymbolicSXNode::isNan "bool
CasADi::SXNode::isNan() const ";

%feature("docstring")  CasADi::SymbolicSXNode::isInf "bool
CasADi::SXNode::isInf() const ";

%feature("docstring")  CasADi::SymbolicSXNode::isMinusInf "bool
CasADi::SXNode::isMinusInf() const ";

%feature("docstring")  CasADi::SymbolicSXNode::getValue "double
CasADi::SXNode::getValue() const

Get value of a constant node. ";

%feature("docstring")  CasADi::SymbolicSXNode::getIntValue "int
CasADi::SXNode::getIntValue() const ";

%feature("docstring")  CasADi::SymbolicSXNode::SymbolicSXNode "CasADi::SymbolicSXNode::SymbolicSXNode(const std::string &name) ";

%feature("docstring")  CasADi::SymbolicSXNode::~SymbolicSXNode "virtual CasADi::SymbolicSXNode::~SymbolicSXNode() ";

%feature("docstring")  CasADi::SymbolicSXNode::isSymbolic "virtual
bool CasADi::SymbolicSXNode::isSymbolic() const ";

%feature("docstring")  CasADi::SymbolicSXNode::getName "virtual const
std::string& CasADi::SymbolicSXNode::getName() const ";

%feature("docstring")  CasADi::SymbolicSXNode::getOp "int
CasADi::SXNode::getOp() const

get the operation only for binary nodes ";

%feature("docstring")  CasADi::SymbolicSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SXNode &node) const

comparison ";

%feature("docstring")  CasADi::SymbolicSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SX &scalar) const

comparison ";

%feature("docstring")  CasADi::SymbolicSXNode::ndep "virtual int
CasADi::SXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::SymbolicSXNode::dep "const SX &
CasADi::SXNode::dep(int i) const

get the reference of a child ";

%feature("docstring")  CasADi::SymbolicSXNode::dep "SX &
CasADi::SXNode::dep(int i)

get the reference of a child ";

%feature("docstring")  CasADi::SymbolicSXNode::isSmooth "bool
CasADi::SXNode::isSmooth() const

Check if smooth. ";

%feature("docstring")  CasADi::SymbolicSXNode::print "void
CasADi::SXNode::print(std::ostream &stream) const

print ";


// File: classCasADi_1_1UnaryOp.xml
%feature("docstring") CasADi::UnaryOp "

Represents a general unary operation on an MX.

Joel Andersson

C++ includes: unary_op.hpp ";

%feature("docstring")  CasADi::UnaryOp::UnaryOp "CasADi::UnaryOp::UnaryOp(Operation op, MX x)

Constructor. ";

%feature("docstring")  CasADi::UnaryOp::~UnaryOp "virtual
CasADi::UnaryOp::~UnaryOp()

Destructor. ";

%feature("docstring")  CasADi::UnaryOp::clone "UnaryOp *
CasADi::UnaryOp::clone() const

Clone function. ";

%feature("docstring")  CasADi::UnaryOp::print "void
CasADi::UnaryOp::print(std::ostream &stream, const std::vector<
std::string > &args) const

Print. ";

%feature("docstring")  CasADi::UnaryOp::evaluate "void
CasADi::UnaryOp::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output, const DMatrixPtrVV &fwdSeed, DMatrixPtrVV &fwdSens, const
DMatrixPtrVV &adjSeed, DMatrixPtrVV &adjSens)

Evaluate the function numerically. ";

%feature("docstring")  CasADi::UnaryOp::evaluateSX "void
CasADi::UnaryOp::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output, const SXMatrixPtrVV &fwdSeed, SXMatrixPtrVV &fwdSens, const
SXMatrixPtrVV &adjSeed, SXMatrixPtrVV &adjSens)

Evaluate the function symbolically ( SX) ";

%feature("docstring")  CasADi::UnaryOp::evaluateMX "void
CasADi::UnaryOp::evaluateMX(const MXPtrV &input, MXPtrV &output, const
MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV
&adjSens, bool output_given)

Evaluate the function symbolically ( MX) ";

%feature("docstring")  CasADi::UnaryOp::propagateSparsity "void
CasADi::UnaryOp::propagateSparsity(const DMatrixPtrV &input,
DMatrixPtrV &output)

Propagate sparsity. ";

%feature("docstring")  CasADi::UnaryOp::isOperation "virtual bool
CasADi::UnaryOp::isOperation(int op) const

Is it a certain operation. ";

%feature("docstring")  CasADi::UnaryOp::deepCopyMembers "void
CasADi::MXNode::deepCopyMembers(std::map< SharedObjectNode *,
SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::UnaryOp::print "void
CasADi::MXNode::print(std::ostream &stream) const

Print expression. ";

%feature("docstring")  CasADi::UnaryOp::evaluate "void
CasADi::MXNode::evaluate(const DMatrixPtrV &input, DMatrixPtrV
&output)

Evaluate the function, no derivatives. ";

%feature("docstring")  CasADi::UnaryOp::evaluateSX "void
CasADi::MXNode::evaluateSX(const SXMatrixPtrV &input, SXMatrixPtrV
&output)

Evaluate symbolically ( SX), no derivatives. ";

%feature("docstring")  CasADi::UnaryOp::evaluateMX "void
CasADi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)

Evaluate symbolically ( MX), no derivatives. ";

%feature("docstring")  CasADi::UnaryOp::getName "const string &
CasADi::MXNode::getName() const

Get the name. ";

%feature("docstring")  CasADi::UnaryOp::isSymbolic "bool
CasADi::MXNode::isSymbolic() const

Check if symbolic. ";

%feature("docstring")  CasADi::UnaryOp::isConstant "bool
CasADi::MXNode::isConstant() const

Check if constant. ";

%feature("docstring")  CasADi::UnaryOp::isMapping "virtual bool
CasADi::MXNode::isMapping() const

Check if mapping. ";

%feature("docstring")  CasADi::UnaryOp::isEvaluation "virtual bool
CasADi::MXNode::isEvaluation() const

Check if evaluation. ";

%feature("docstring")  CasADi::UnaryOp::isOutputNode "virtual bool
CasADi::MXNode::isOutputNode() const

Check if evaluation output. ";

%feature("docstring")  CasADi::UnaryOp::isMultipleOutput "virtual
bool CasADi::MXNode::isMultipleOutput() const

Check if a multiple output node. ";

%feature("docstring")  CasADi::UnaryOp::isJacobian "virtual bool
CasADi::MXNode::isJacobian() const

Check if jacobian reference. ";

%feature("docstring")  CasADi::UnaryOp::getFunction "FX &
CasADi::MXNode::getFunction()

Get function reference. ";

%feature("docstring")  CasADi::UnaryOp::getFunctionInput "int
CasADi::MXNode::getFunctionInput() const

Get function input. ";

%feature("docstring")  CasADi::UnaryOp::getFunctionOutput "int
CasADi::MXNode::getFunctionOutput() const

Get function output. ";

%feature("docstring")  CasADi::UnaryOp::dep "const MX &
CasADi::MXNode::dep(int ind=0) const

dependencies - functions that have to be evaluated before this one ";

%feature("docstring")  CasADi::UnaryOp::dep "MX &
CasADi::MXNode::dep(int ind=0) ";

%feature("docstring")  CasADi::UnaryOp::ndep "int
CasADi::MXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::UnaryOp::hasDep "virtual bool
CasADi::MXNode::hasDep() const

Does the node depend on other nodes. ";

%feature("docstring")  CasADi::UnaryOp::getNumOutputs "virtual int
CasADi::MXNode::getNumOutputs() const

Number of outputs. ";

%feature("docstring")  CasADi::UnaryOp::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity() const

Get the sparsity. ";

%feature("docstring")  CasADi::UnaryOp::sparsity "const CRSSparsity &
CasADi::MXNode::sparsity(int oind)

Get the sparsity of output oind. ";

%feature("docstring")  CasADi::UnaryOp::isNonLinear "virtual bool
CasADi::MXNode::isNonLinear()

Is the node nonlinear. ";

%feature("docstring")  CasADi::UnaryOp::setSparsity "void
CasADi::MXNode::setSparsity(const CRSSparsity &sparsity)

Set the sparsity. ";

%feature("docstring")  CasADi::UnaryOp::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep)

Set unary dependency. ";

%feature("docstring")  CasADi::UnaryOp::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2)

Set binary dependencies. ";

%feature("docstring")  CasADi::UnaryOp::setDependencies "void
CasADi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const
MX &dep3)

Set ternary dependencies. ";

%feature("docstring")  CasADi::UnaryOp::setDependencies "void
CasADi::MXNode::setDependencies(const std::vector< MX > &dep)

Set multiple dependencies. ";

%feature("docstring")  CasADi::UnaryOp::addDependency "int
CasADi::MXNode::addDependency(const MX &dep)

Add a dependency. ";

%feature("docstring")  CasADi::UnaryOp::addDependency "void
CasADi::MXNode::addDependency(int depind, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (index given) ";

%feature("docstring")  CasADi::UnaryOp::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d, const std::vector< int > &nz)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::UnaryOp::addDependency "void
CasADi::MXNode::addDependency(const MX &d, const std::vector< int >
&nz_d)

Add a dependency (mapping matrix) ";

%feature("docstring")  CasADi::UnaryOp::jac "MX
CasADi::MXNode::jac(int iind)

Get the jacobian of an function evaluation with respect to the iind-th
argument. ";

%feature("docstring")  CasADi::UnaryOp::numel "int
CasADi::MXNode::numel() const

Number of elements. ";

%feature("docstring")  CasADi::UnaryOp::size "int
CasADi::MXNode::size() const

Get size. ";

%feature("docstring")  CasADi::UnaryOp::size1 "int
CasADi::MXNode::size1() const

Get size. ";

%feature("docstring")  CasADi::UnaryOp::size2 "int
CasADi::MXNode::size2() const

Get size. ";

%feature("docstring")  CasADi::UnaryOp::eval "virtual Matrix<double>
CasADi::MXNode::eval(const std::vector< DMatrix > &x)

Numeric evaluation. ";

%feature("docstring")  CasADi::UnaryOp::eval "virtual Matrix<SX>
CasADi::MXNode::eval(const std::vector< Matrix< SX > > &x)

Symbolic evaluation (scalar graph) ";

%feature("docstring")  CasADi::UnaryOp::eval "virtual MX
CasADi::MXNode::eval(const std::vector< MX > &x)

Symbolic evaluation (matrix graph) ";

%feature("docstring")  CasADi::UnaryOp::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::UnaryOp::init "void
CasADi::SharedObjectNode::init()

Initialize the object. ";

%feature("docstring")  CasADi::UnaryOp::repr "void
CasADi::SharedObjectNode::repr(std::ostream &stream) const

Print a representation of the object. ";


// File: classCasADi_1_1UnaryOperation.xml
%feature("docstring") CasADi::UnaryOperation "C++ includes:
casadi_math.hpp ";


// File: classCasADi_1_1UnaryOperation_3_01ACOS_01_4.xml
%feature("docstring") CasADi::UnaryOperation< ACOS > "

Arcus cosine.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< ACOS
>::printRoutinesUnary " CasADi::UnaryOperation< ACOS
>::printRoutinesUnary(\"acos(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01ASIN_01_4.xml
%feature("docstring") CasADi::UnaryOperation< ASIN > "

Arcus sine.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< ASIN
>::printRoutinesUnary " CasADi::UnaryOperation< ASIN
>::printRoutinesUnary(\"asin(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01ATAN_01_4.xml
%feature("docstring") CasADi::UnaryOperation< ATAN > "

Arcus tangent.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< ATAN
>::printRoutinesUnary " CasADi::UnaryOperation< ATAN
>::printRoutinesUnary(\"atan(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01CEIL_01_4.xml
%feature("docstring") CasADi::UnaryOperation< CEIL > "

Ceil function.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< CEIL
>::printRoutinesUnary " CasADi::UnaryOperation< CEIL
>::printRoutinesUnary(\"ceil(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01COS_01_4.xml
%feature("docstring") CasADi::UnaryOperation< COS > "

Cosine.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< COS
>::printRoutinesUnary " CasADi::UnaryOperation< COS
>::printRoutinesUnary(\"cos(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01COSH_01_4.xml
%feature("docstring") CasADi::UnaryOperation< COSH > "

Hyperbolic cosine.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< COSH
>::printRoutinesUnary " CasADi::UnaryOperation< COSH
>::printRoutinesUnary(\"cosh(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01ERF_01_4.xml
%feature("docstring") CasADi::UnaryOperation< ERF > "

Error function.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< ERF
>::printRoutinesUnary " CasADi::UnaryOperation< ERF
>::printRoutinesUnary(\"erf(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01EXP_01_4.xml
%feature("docstring") CasADi::UnaryOperation< EXP > "

Natural exponent.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< EXP
>::printRoutinesUnary " CasADi::UnaryOperation< EXP
>::printRoutinesUnary(\"exp(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01FLOOR_01_4.xml
%feature("docstring") CasADi::UnaryOperation< FLOOR > "

Floor function.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< FLOOR
>::printRoutinesUnary " CasADi::UnaryOperation< FLOOR
>::printRoutinesUnary(\"floor(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01INV_01_4.xml
%feature("docstring") CasADi::UnaryOperation< INV > "

Elementwise inverse.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< INV
>::printRoutinesUnary " CasADi::UnaryOperation< INV
>::printRoutinesUnary(\"(1/\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01LOG_01_4.xml
%feature("docstring") CasADi::UnaryOperation< LOG > "

Natural logarithm.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< LOG
>::printRoutinesUnary " CasADi::UnaryOperation< LOG
>::printRoutinesUnary(\"log(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01NEG_01_4.xml
%feature("docstring") CasADi::UnaryOperation< NEG > "

Negation.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< NEG
>::printRoutinesUnary " CasADi::UnaryOperation< NEG
>::printRoutinesUnary(\"(-\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01SIN_01_4.xml
%feature("docstring") CasADi::UnaryOperation< SIN > "

Sine.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< SIN
>::printRoutinesUnary " CasADi::UnaryOperation< SIN
>::printRoutinesUnary(\"sin(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01SINH_01_4.xml
%feature("docstring") CasADi::UnaryOperation< SINH > "

Hyperbolic sine.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< SINH
>::printRoutinesUnary " CasADi::UnaryOperation< SINH
>::printRoutinesUnary(\"sinh(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01SQRT_01_4.xml
%feature("docstring") CasADi::UnaryOperation< SQRT > "

Square root.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< SQRT
>::printRoutinesUnary " CasADi::UnaryOperation< SQRT
>::printRoutinesUnary(\"sqrt(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01STEP_01_4.xml
%feature("docstring") CasADi::UnaryOperation< STEP > "

Step function.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< STEP
>::printRoutinesUnary " CasADi::UnaryOperation< STEP
>::printRoutinesUnary(\"(\",\">=0)\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01TAN_01_4.xml
%feature("docstring") CasADi::UnaryOperation< TAN > "

Tangent.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< TAN
>::printRoutinesUnary " CasADi::UnaryOperation< TAN
>::printRoutinesUnary(\"tan(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1UnaryOperation_3_01TANH_01_4.xml
%feature("docstring") CasADi::UnaryOperation< TANH > "

Hyperbolic tangent.

C++ includes: casadi_math.hpp ";

%feature("docstring")  CasADi::UnaryOperation< TANH
>::printRoutinesUnary " CasADi::UnaryOperation< TANH
>::printRoutinesUnary(\"tanh(\",\")\") static bool f0_is_zero() ";


// File: classCasADi_1_1OptimalControl_1_1Variable.xml
%feature("docstring") CasADi::OptimalControl::Variable "C++ includes:
variable.hpp ";

%feature("docstring")  CasADi::OptimalControl::Variable::makeUnique "void CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::OptimalControl::Variable::makeUnique "void CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::OptimalControl::Variable::Variable "CasADi::OptimalControl::Variable::Variable()

Default (empty) constructor. ";

%feature("docstring")  CasADi::OptimalControl::Variable::Variable "CasADi::OptimalControl::Variable::Variable(const std::string &name,
bool create_expression=true)

Create a new variable. ";

%feature("docstring")  CasADi::OptimalControl::Variable::~Variable "CasADi::OptimalControl::Variable::~Variable()

Destructor. ";

%feature("docstring")  CasADi::OptimalControl::Variable::var "SX
CasADi::OptimalControl::Variable::var() const

Get the variable expression. ";

%feature("docstring")  CasADi::OptimalControl::Variable::der "SX
CasADi::OptimalControl::Variable::der(bool allocate=false) const

Get differential expression (never allocate) ";

%feature("docstring")  CasADi::OptimalControl::Variable::der "SX
CasADi::OptimalControl::Variable::der(bool allocate=false)

Get differential expression (allocate if necessary) ";

%feature("docstring")  CasADi::OptimalControl::Variable::highest "SX
CasADi::OptimalControl::Variable::highest() const

Get the highest order derivative (i.e. der() or var()) ";

%feature("docstring")  CasADi::OptimalControl::Variable::atTime "SX
CasADi::OptimalControl::Variable::atTime(double t, bool
allocate=false) const

Timed variable (never allocate) ";

%feature("docstring")  CasADi::OptimalControl::Variable::atTime "SX
CasADi::OptimalControl::Variable::atTime(double t, bool
allocate=false)

Timed variable (allocate if necessary) ";

%feature("docstring")  CasADi::OptimalControl::Variable::index "int
CasADi::OptimalControl::Variable::index() const

Get the variable index. ";

%feature("docstring")  CasADi::OptimalControl::Variable::getName "const string & CasADi::OptimalControl::Variable::getName() const

Get variable name. ";

%feature("docstring")  CasADi::OptimalControl::Variable::setName "void CasADi::OptimalControl::Variable::setName(const std::string
&name)

Set variable name. ";

%feature("docstring")
CasADi::OptimalControl::Variable::getVariability "Variability
CasADi::OptimalControl::Variable::getVariability() const

Get the variability (see Fritzon) ";

%feature("docstring")
CasADi::OptimalControl::Variable::setVariability "void
CasADi::OptimalControl::Variable::setVariability(Variability
variability)

Set the variability (see Fritzon) ";

%feature("docstring")  CasADi::OptimalControl::Variable::getCausality
"Causality CasADi::OptimalControl::Variable::getCausality() const

Get the causality (see Fritzon) ";

%feature("docstring")  CasADi::OptimalControl::Variable::setCausality
"void CasADi::OptimalControl::Variable::setCausality(Causality
causality)

Set the causality (see Fritzon) ";

%feature("docstring")  CasADi::OptimalControl::Variable::getAlias "Alias CasADi::OptimalControl::Variable::getAlias() const

Check if the variable is an alias variable. ";

%feature("docstring")  CasADi::OptimalControl::Variable::setAlias "void CasADi::OptimalControl::Variable::setAlias(Alias alias)

Set if the variable is an alias variable. ";

%feature("docstring")
CasADi::OptimalControl::Variable::getDescription "const string &
CasADi::OptimalControl::Variable::getDescription() const

Get the description. ";

%feature("docstring")
CasADi::OptimalControl::Variable::setDescription "void
CasADi::OptimalControl::Variable::setDescription(const std::string
&description)

Set the description. ";

%feature("docstring")
CasADi::OptimalControl::Variable::getValueReference "int
CasADi::OptimalControl::Variable::getValueReference() const

Get the variable reference (XML) ";

%feature("docstring")
CasADi::OptimalControl::Variable::setValueReference "void
CasADi::OptimalControl::Variable::setValueReference(int
valueReference)

Set the variable reference (XML) ";

%feature("docstring")  CasADi::OptimalControl::Variable::getMin "double CasADi::OptimalControl::Variable::getMin() const

Get the lower bound. ";

%feature("docstring")  CasADi::OptimalControl::Variable::setMin "void
CasADi::OptimalControl::Variable::setMin(double min)

Set the lower bound. ";

%feature("docstring")  CasADi::OptimalControl::Variable::getMax "double CasADi::OptimalControl::Variable::getMax() const

Get the upper bound. ";

%feature("docstring")  CasADi::OptimalControl::Variable::setMax "void
CasADi::OptimalControl::Variable::setMax(double max)

Set the upper bound. ";

%feature("docstring")  CasADi::OptimalControl::Variable::getNominal "double CasADi::OptimalControl::Variable::getNominal() const

Get the nominal value of the variable. ";

%feature("docstring")  CasADi::OptimalControl::Variable::setNominal "void CasADi::OptimalControl::Variable::setNominal(double nominal)

Set the nominal value of the variable. ";

%feature("docstring")  CasADi::OptimalControl::Variable::getStart "double CasADi::OptimalControl::Variable::getStart() const

Get the value at time 0. ";

%feature("docstring")
CasADi::OptimalControl::Variable::getDerivativeStart "double
CasADi::OptimalControl::Variable::getDerivativeStart() const

Get the derivative at time 0. ";

%feature("docstring")  CasADi::OptimalControl::Variable::setStart "void CasADi::OptimalControl::Variable::setStart(double start)

Set the value at time 0. ";

%feature("docstring")
CasADi::OptimalControl::Variable::setDerivativeStart "void
CasADi::OptimalControl::Variable::setDerivativeStart(double start)

Set the derivative at time 0. ";

%feature("docstring")  CasADi::OptimalControl::Variable::getUnit "const string & CasADi::OptimalControl::Variable::getUnit() const

Get the unit. ";

%feature("docstring")  CasADi::OptimalControl::Variable::setUnit "void CasADi::OptimalControl::Variable::setUnit(const std::string
&unit)

Set the unit. ";

%feature("docstring")
CasADi::OptimalControl::Variable::getDisplayUnit "const string &
CasADi::OptimalControl::Variable::getDisplayUnit() const

Get the display unit. ";

%feature("docstring")
CasADi::OptimalControl::Variable::setDisplayUnit "void
CasADi::OptimalControl::Variable::setDisplayUnit(const std::string
&displayUnit)

Set the display unit. ";

%feature("docstring")  CasADi::OptimalControl::Variable::setExpression
"void CasADi::OptimalControl::Variable::setExpression(const SX &sx)

Set the expression. ";

%feature("docstring")  CasADi::OptimalControl::Variable::setDerivative
"void CasADi::OptimalControl::Variable::setDerivative(const SX &dx)

Set the derivative expression. ";

%feature("docstring")  CasADi::OptimalControl::Variable::setIndex "void CasADi::OptimalControl::Variable::setIndex(int ind)

Set the variable index. ";

%feature("docstring")
CasADi::OptimalControl::Variable::isDifferential "bool
CasADi::OptimalControl::Variable::isDifferential() const

Is differential? ";

%feature("docstring")  CasADi::OptimalControl::Variable::getFree "bool CasADi::OptimalControl::Variable::getFree() const

Get the the free attribute. ";

%feature("docstring")  CasADi::OptimalControl::Variable::setFree "void CasADi::OptimalControl::Variable::setFree(bool free)

Set the the free attribute. ";

%feature("docstring")  CasADi::OptimalControl::Variable::checkNode "bool CasADi::OptimalControl::Variable::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::OptimalControl::Variable::clone "SharedObject CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::OptimalControl::Variable::assignNode "void CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")
CasADi::OptimalControl::Variable::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::OptimalControl::Variable::get "const
SharedObjectNode * CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::OptimalControl::Variable::get "SharedObjectNode * CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::OptimalControl::Variable::getCount "int CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::OptimalControl::Variable::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::OptimalControl::Variable::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::OptimalControl::Variable::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::OptimalControl::Variable::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::OptimalControl::Variable::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::OptimalControl::Variable::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")
CasADi::OptimalControl::Variable::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";


// File: classCasADi_1_1OptimalControl_1_1VariableInternal.xml
%feature("docstring") CasADi::OptimalControl::VariableInternal "

Internal node class.

C++ includes: variable_internal.hpp ";

%feature("docstring")
CasADi::OptimalControl::VariableInternal::VariableInternal "CasADi::OptimalControl::VariableInternal::VariableInternal(const
std::string &name) ";

%feature("docstring")
CasADi::OptimalControl::VariableInternal::~VariableInternal "CasADi::OptimalControl::VariableInternal::~VariableInternal() ";

%feature("docstring")  CasADi::OptimalControl::VariableInternal::clone
"virtual VariableInternal*
CasADi::OptimalControl::VariableInternal::clone() const

Make a deep copy of the instance. ";

%feature("docstring")
CasADi::OptimalControl::VariableInternal::getName "const string &
CasADi::OptimalControl::VariableInternal::getName() const ";

%feature("docstring")  CasADi::OptimalControl::VariableInternal::var "SX CasADi::OptimalControl::VariableInternal::var() const ";

%feature("docstring")  CasADi::OptimalControl::VariableInternal::der "SX CasADi::OptimalControl::VariableInternal::der(bool allocate) const
";

%feature("docstring")  CasADi::OptimalControl::VariableInternal::der "SX CasADi::OptimalControl::VariableInternal::der(bool allocate) ";

%feature("docstring")
CasADi::OptimalControl::VariableInternal::atTime "SX
CasADi::OptimalControl::VariableInternal::atTime(double t, bool
allocate) const ";

%feature("docstring")
CasADi::OptimalControl::VariableInternal::atTime "SX
CasADi::OptimalControl::VariableInternal::atTime(double t, bool
allocate) ";

%feature("docstring")  CasADi::OptimalControl::VariableInternal::repr
"virtual void
CasADi::OptimalControl::VariableInternal::repr(std::ostream &stream)
const

Print a representation of the object. ";

%feature("docstring")  CasADi::OptimalControl::VariableInternal::print
"virtual void
CasADi::OptimalControl::VariableInternal::print(std::ostream &stream)
const

Print a destription of the object. ";

%feature("docstring")
CasADi::OptimalControl::VariableInternal::deepCopyMembers "void
CasADi::SharedObjectNode::deepCopyMembers(std::map< SharedObjectNode
*, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")
CasADi::OptimalControl::VariableInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::OptimalControl::VariableInternal::init
"void CasADi::SharedObjectNode::init()

Initialize the object. ";


// File: classCasADi_1_1OptimalControl_1_1VariableTree.xml
%feature("docstring") CasADi::OptimalControl::VariableTree "

Tree structure for storing variables.

C++ includes: optimica_ocp.hpp ";

%feature("docstring")  CasADi::OptimalControl::VariableTree::subByName
"VariableTree & CasADi::OptimalControl::VariableTree::subByName(const
std::string &name, bool allocate=false)

Access a sub-collection by name. ";

%feature("docstring")
CasADi::OptimalControl::VariableTree::subByIndex "VariableTree &
CasADi::OptimalControl::VariableTree::subByIndex(int ind, bool
allocate=false)

Access a sub-collection by index. ";

%feature("docstring")  CasADi::OptimalControl::VariableTree::getAll "void CasADi::OptimalControl::VariableTree::getAll(std::vector<
Variable > &v) const

Get all variables.

Add variables

Add variable, if any ";

%feature("docstring")  CasADi::OptimalControl::VariableTree::getNames
"std::vector< std::string >
CasADi::OptimalControl::VariableTree::getNames() const

Get all names. ";

%feature("docstring")  CasADi::OptimalControl::VariableTree::print "void CasADi::OptimalControl::VariableTree::print(std::ostream &stream,
int indent=0) const

Print node. ";


// File: classCasADi_1_1XFunction.xml
%feature("docstring") CasADi::XFunction "

Dynamically created function that can be expanded into a series of
scalar operations. Base class for XFunction and MXFunction.

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

topological_sorting

OT_STRING

\"breadth-first\"

Topological sorting algorithm: \"depth-first\" or \"breadth-first\"
search

CasADi::XFunctionInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: x_function.hpp ";

/*  Setters  */

/* Set an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::XFunction::setInput "void
CasADi::FX::setInput(T val, int ind=0) const

Reads in the input argument from val. ";

%feature("docstring")  CasADi::XFunction::setOutput "void
CasADi::FX::setOutput(T val, int ind=0) const

Reads in the output argument from val. ";

%feature("docstring")  CasADi::XFunction::setFwdSeed "void
CasADi::FX::setFwdSeed(T val, int ind=0, int dir=0) const

Reads in the forward seed from val. ";

%feature("docstring")  CasADi::XFunction::setFwdSens "void
CasADi::FX::setFwdSens(T val, int ind=0, int dir=0) const

Reads in the forward sensitivity from val. ";

%feature("docstring")  CasADi::XFunction::setAdjSeed "void
CasADi::FX::setAdjSeed(T val, int ind=0, int dir=0) const

Reads in the adjoint seed from val. ";

%feature("docstring")  CasADi::XFunction::setAdjSens "void
CasADi::FX::setAdjSens(T val, int ind=0, int dir=0) const

Reads in the adjoint sensitivity from val. ";

/*  Getters  */

/* A group of accessor for numerical data that operate on preallocated
data.  get an input, output, forward seed/sensitivity or adjoint
seed/sensitivity  T can be double&, double*, std::vector<double>&,
Matrix<double> &  Assumes a properly allocated val.

*/

%feature("docstring")  CasADi::XFunction::getInput "void
CasADi::FX::getInput(T val, int ind=0) const

Writes out the input argument into val. ";

%feature("docstring")  CasADi::XFunction::getOutput "void
CasADi::FX::getOutput(T val, int ind=0) const

Writes out the output argument into val. ";

%feature("docstring")  CasADi::XFunction::getFwdSeed "void
CasADi::FX::getFwdSeed(T val, int ind=0, int dir=0) const

Writes out the forward seed into val. ";

%feature("docstring")  CasADi::XFunction::getFwdSens "void
CasADi::FX::getFwdSens(T val, int ind=0, int dir=0) const

Writes out the forward sensitivity into val. ";

%feature("docstring")  CasADi::XFunction::getAdjSeed "void
CasADi::FX::getAdjSeed(T val, int ind=0, int dir=0) const

Writes out the adjoint seed into val. ";

%feature("docstring")  CasADi::XFunction::getAdjSens "void
CasADi::FX::getAdjSens(T val, int ind=0, int dir=0) const

Writes out the adjoint sensitivity into val. ";

/*  Option Functionality  */

%feature("docstring")  CasADi::XFunction::setOption "void
CasADi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val)

set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54) ";

%feature("docstring")  CasADi::XFunction::setOption "void
CasADi::OptionsFunctionality::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::XFunction::getOption "GenericType
CasADi::OptionsFunctionality::getOption(const std::string &str) const

get an option value ";

%feature("docstring")  CasADi::XFunction::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::XFunction::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::XFunction::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::XFunction::copyOptions "void
CasADi::OptionsFunctionality::copyOptions(const OptionsFunctionality
&obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::XFunction::dictionary "const
Dictionary & CasADi::OptionsFunctionality::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::XFunction::makeUnique "void
CasADi::SharedObject::makeUnique(bool clone_members=true)

If there are other references to the object, then make a deep copy of
it and point to this new object. ";

%feature("docstring")  CasADi::XFunction::makeUnique "void
CasADi::SharedObject::makeUnique(std::map< SharedObjectNode *,
SharedObject > &already_copied, bool clone_members=true) ";

%feature("docstring")  CasADi::XFunction::XFunction "CasADi::XFunction::XFunction()

Default constructor. ";

%feature("docstring")  CasADi::XFunction::checkNode "bool
CasADi::XFunction::checkNode() const

Check if the node is pointing to the right type of object. ";

%feature("docstring")  CasADi::XFunction::eval "std::vector<SXMatrix>
CasADi::XFunction::eval(const std::vector< SXMatrix > &arg)

evaluate symbolically ";

%feature("docstring")  CasADi::XFunction::eval "std::vector<
std::vector<SX> > CasADi::XFunction::eval(const std::vector<
std::vector< SX > > &arg)

evaluate symbolically (pass and get non-zero entries) ";

%feature("docstring")  CasADi::XFunction::eval "SXMatrix
CasADi::XFunction::eval(const SXMatrix &arg)

evaluate symbolically, single input, single output ";

%feature("docstring")  CasADi::XFunction::eval "std::vector<SX>
CasADi::XFunction::eval(const std::vector< SX > &arg)

evaluate symbolically, single input, single output (pass and get non-
zero entries) ";

%feature("docstring")  CasADi::XFunction::getNumInputs "int
CasADi::FX::getNumInputs() const

Get number of inputs. ";

%feature("docstring")  CasADi::XFunction::getNumOutputs "int
CasADi::FX::getNumOutputs() const

Get number of outputs. ";

%feature("docstring")  CasADi::XFunction::setNumInputs "void
CasADi::FX::setNumInputs(int num_in)

Set number of inputs (normally invoked internally) ";

%feature("docstring")  CasADi::XFunction::setNumOutputs "void
CasADi::FX::setNumOutputs(int num_out)

Set number of outputs (normally invoked internally) ";

%feature("docstring")  CasADi::XFunction::evaluate_old "void
CasADi::FX::evaluate_old(int fsens_order=0, int asens_order=0)

Evaluate (old style) ";

%feature("docstring")  CasADi::XFunction::evaluate "void
CasADi::FX::evaluate(int nfdir=0, int nadir=0)

Evaluate. ";

%feature("docstring")  CasADi::XFunction::solve "void
CasADi::FX::solve()

the same as evaluate(0,0) ";

%feature("docstring")  CasADi::XFunction::jacobian "FX
CasADi::FX::jacobian(int iind=0, int oind=0)

Calculate jacobian of output oind with respect to input iind.

This method calls the method jacobian on the internal twin of this
class. The default behaviour for FX is to use CasADi::Jacobian, which
takes an AD approach. ";

%feature("docstring")  CasADi::XFunction::jacobian "FX
CasADi::FX::jacobian(const std::vector< std::pair< int, int > >
&jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::XFunction::hessian "FX
CasADi::FX::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::XFunction::call "vector< MX >
CasADi::FX::call(const MX &x)

Create a function call (evaluation mx node), single input. ";

%feature("docstring")  CasADi::XFunction::call "std::vector<DMatrix>
CasADi::FX::call(const std::vector< DMatrix > &x)

Evaluate numerically (shorthand) ";

%feature("docstring")  CasADi::XFunction::call "std::vector<SXMatrix>
CasADi::FX::call(const std::vector< SXMatrix > &x)

Evaluate symbolically (scalar graph) ";

%feature("docstring")  CasADi::XFunction::call "std::vector<MX>
CasADi::FX::call(const std::vector< MX > &x)

Evaluate symbolically (matrix graph) ";

%feature("docstring")  CasADi::XFunction::call "std::vector<std::vector<MX> > CasADi::FX::call(const std::vector<
std::vector< MX > > &x, const Dictionary &paropt=Dictionary())

Evaluate symbolically in parallel (matrix graph) paropt: Set of
options to be passed to the Parallelizer. ";

%feature("docstring")  CasADi::XFunction::jacSparsity "CRSSparsity &
CasADi::FX::jacSparsity(int iind=0, int oind=0)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::XFunction::setJacSparsity "void
CasADi::FX::setJacSparsity(const CRSSparsity &sp, int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::XFunction::input "const Matrix< double
> & CasADi::FX::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::XFunction::input "Matrix< double > &
CasADi::FX::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::XFunction::output "const Matrix<
double > & CasADi::FX::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::XFunction::output "Matrix< double > &
CasADi::FX::output(int oind=0)

Access output argument Note that copies in Python are shallow by
default and fx.output() gives a reference/pointer to an internal data
structure. So if you want save fx.output(), you need to make a deep
copy using for example DMatrix(fx.output()). ";

%feature("docstring")  CasADi::XFunction::fwdSeed "const Matrix<
double > & CasADi::FX::fwdSeed(int iind=0, int dir=0) const

Const access forward seed. ";

%feature("docstring")  CasADi::XFunction::fwdSeed "Matrix< double > &
CasADi::FX::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::XFunction::fwdSens "const Matrix<
double > & CasADi::FX::fwdSens(int oind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::XFunction::fwdSens "Matrix< double > &
CasADi::FX::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::XFunction::adjSeed "const Matrix<
double > & CasADi::FX::adjSeed(int oind=0, int dir=0) const

Const access adjoint seed. ";

%feature("docstring")  CasADi::XFunction::adjSeed "Matrix< double > &
CasADi::FX::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::XFunction::adjSens "const Matrix<
double > & CasADi::FX::adjSens(int iind=0, int dir=0) const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::XFunction::adjSens "Matrix< double > &
CasADi::FX::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::XFunction::addMonitor "void
CasADi::FX::addMonitor(const std::string &mon)

Add modules to be monitored. ";

%feature("docstring")  CasADi::XFunction::removeMonitor "void
CasADi::FX::removeMonitor(const std::string &mon)

Remove modules to be monitored. ";

%feature("docstring")  CasADi::XFunction::getStats "const Dictionary
& CasADi::FX::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::XFunction::getStat "GenericType
CasADi::FX::getStat(const std::string &name) const

Get a single statistic obtained at the end of the last evaluate call.
";

%feature("docstring")  CasADi::XFunction::symbolicInput "std::vector<
MX > CasADi::FX::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::XFunction::clone "SharedObject
CasADi::SharedObject::clone() const

Deep copy. ";

%feature("docstring")  CasADi::XFunction::assignNode "void
CasADi::SharedObject::assignNode(SharedObjectNode *node)

Assign the node to a node class pointer (or null) ";

%feature("docstring")  CasADi::XFunction::assignNodeNoCount "void
CasADi::SharedObject::assignNodeNoCount(SharedObjectNode *node)

Assign the node to a node class pointer without reference counting:
inproper use will cause memory leaks! ";

%feature("docstring")  CasADi::XFunction::get "const SharedObjectNode
* CasADi::SharedObject::get() const

Get a const pointer to the node. ";

%feature("docstring")  CasADi::XFunction::get "SharedObjectNode *
CasADi::SharedObject::get()

Get a pointer to the node. ";

%feature("docstring")  CasADi::XFunction::getCount "int
CasADi::SharedObject::getCount() const

Get the reference count. ";

%feature("docstring")  CasADi::XFunction::swap "void
CasADi::SharedObject::swap(SharedObject &other)

Swap content with another instance. ";

%feature("docstring")  CasADi::XFunction::repr "void
CasADi::SharedObject::repr(std::ostream &stream) const

Print a representation of the object. ";

%feature("docstring")  CasADi::XFunction::print "void
CasADi::SharedObject::print(std::ostream &stream=std::cout) const

Print a destription of the object. ";

%feature("docstring")  CasADi::XFunction::init "void
CasADi::SharedObject::init()

Initialize the object: more documentation in the node class (
SharedObjectNode and derived classes) ";

%feature("docstring")  CasADi::XFunction::isInit "bool
CasADi::SharedObject::isInit() const

Is initialized? ";

%feature("docstring")  CasADi::XFunction::isNull "bool
CasADi::SharedObject::isNull() const

Is a null pointer? ";

%feature("docstring")  CasADi::XFunction::getRepresentation "string
CasADi::PrintableObject::getRepresentation() const

Return a string with a representation (for SWIG) ";

%feature("docstring")  CasADi::XFunction::getDescription "string
CasADi::PrintableObject::getDescription() const

Return a string with a destription (for SWIG) ";


// File: classCasADi_1_1XFunctionInternal.xml
%feature("docstring") CasADi::XFunctionInternal "

Internal node class for XFunction.

Joel Andersson

Id

Type

Default

Description

Used in

ad_mode

OT_STRING

\"automatic\"

How to calculate the Jacobians: \"forward\" (only forward mode)
\"reverse\" (only adjoint mode) or \"automatic\" (a heuristic decides
which is more appropriate)

CasADi::FXInternal

jac_for_sens

OT_BOOLEAN

false

Create the a Jacobian function and use this to calculate forward
sensitivities

CasADi::FXInternal

jacobian_generator

OT_JACOBIANGENERATOR

GenericType()

Function pointer that returns a Jacobian function given a set of
desired Jacobian blocks, overrides internal routines

CasADi::FXInternal

name

OT_STRING

\"unnamed_shared_object\"

name of the object

CasADi::OptionsFunctionalityNode

number_of_adj_dir

OT_INTEGER

1

number of adjoint derivatives to be calculated simultanously

CasADi::FXInternal

number_of_fwd_dir

OT_INTEGER

1

number of forward derivatives to be calculated simultanously

CasADi::FXInternal

numeric_hessian

OT_BOOLEAN

false

Calculate Hessians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

numeric_jacobian

OT_BOOLEAN

false

Calculate Jacobians numerically (using directional derivatives) rather
than with the built-in method

CasADi::FXInternal

sparse

OT_BOOLEAN

true

function is sparse

CasADi::FXInternal

sparsity_generator

OT_SPARSITYGENERATOR

GenericType()

Function that provides sparsity for a given input output block,
overrides internal routines

CasADi::FXInternal

store_jacobians

OT_BOOLEAN

false

keep references to generated Jacobians in order to avoid generating
identical Jacobians multiple times

CasADi::FXInternal

topological_sorting

OT_STRING

\"breadth-first\"

Topological sorting algorithm: \"depth-first\" or \"breadth-first\"
search

CasADi::XFunctionInternal

verbose

OT_BOOLEAN

false

verbose evaluation -- for debugging

CasADi::FXInternal List of available options

C++ includes: x_function_internal.hpp ";

%feature("docstring")  CasADi::XFunctionInternal::XFunctionInternal "CasADi::XFunctionInternal::XFunctionInternal()

Constructor. ";

%feature("docstring")  CasADi::XFunctionInternal::~XFunctionInternal "CasADi::XFunctionInternal::~XFunctionInternal()

Destructor. ";

%feature("docstring")  CasADi::XFunctionInternal::evaluateSX "virtual
void CasADi::XFunctionInternal::evaluateSX(const std::vector< Matrix<
SX > > &input_s, std::vector< Matrix< SX > > &output_s, bool
eliminate_constants=false)=0

evaluate symbolically ";

%feature("docstring")  CasADi::XFunctionInternal::evaluate_switch "void CasADi::FXInternal::evaluate_switch(int nfdir, int nadir)

Evaluate switch. ";

%feature("docstring")  CasADi::XFunctionInternal::evaluate "virtual
void CasADi::FXInternal::evaluate(int nfdir, int nadir)=0

Evaluate. ";

%feature("docstring")  CasADi::XFunctionInternal::init "void
CasADi::FXInternal::init()

Initialize and make the object ready for setting arguments and
evaluation. This method is typically called after setting options but
before evaluating. If passed to another class (in the constructor),
this class should invoke this function when initialized. ";

%feature("docstring")  CasADi::XFunctionInternal::jacobian "virtual
FX CasADi::FXInternal::jacobian(const std::vector< std::pair< int, int
> > &jblocks)

Calculate the jacobian of a number of function outputs with respect to
a number of function inputs, optionally include the function outputs.
";

%feature("docstring")  CasADi::XFunctionInternal::jacobian_switch "FX
CasADi::FXInternal::jacobian_switch(const std::vector< std::pair< int,
int > > &jblocks)

Switch between numeric and symbolic jacobian. ";

%feature("docstring")  CasADi::XFunctionInternal::numeric_jacobian "FX CasADi::FXInternal::numeric_jacobian(const std::vector< std::pair<
int, int > > &jblocks)

Numeric Jacobian. ";

%feature("docstring")  CasADi::XFunctionInternal::hessian "FX
CasADi::FXInternal::hessian(int iind=0, int oind=0)

Hessian of output oind with respect to input iind. ";

%feature("docstring")  CasADi::XFunctionInternal::inputStruct "FunctionIO & CasADi::FXInternal::inputStruct(int i=0)

Access an input. ";

%feature("docstring")  CasADi::XFunctionInternal::inputStruct "const
FunctionIO & CasADi::FXInternal::inputStruct(int i=0) const

Const access an input. ";

%feature("docstring")  CasADi::XFunctionInternal::outputStruct "FunctionIO & CasADi::FXInternal::outputStruct(int i=0)

Access an output. ";

%feature("docstring")  CasADi::XFunctionInternal::outputStruct "const
FunctionIO & CasADi::FXInternal::outputStruct(int i=0) const

Const access an output. ";

%feature("docstring")  CasADi::XFunctionInternal::print "virtual void
CasADi::FXInternal::print(std::ostream &stream) const

Print. ";

%feature("docstring")
CasADi::XFunctionInternal::unidirectionalColoring "CRSSparsity
CasADi::FXInternal::unidirectionalColoring(const CRSSparsity &A, const
CRSSparsity &AT)

Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) ";

%feature("docstring")  CasADi::XFunctionInternal::getPartition "void
CasADi::FXInternal::getPartition(const std::vector< std::pair< int,
int > > &blocks, std::vector< CRSSparsity > &D1, std::vector<
CRSSparsity > &D2)

Get the unidirectional or bidirectional partition. ";

%feature("docstring")  CasADi::XFunctionInternal::isInit "bool
CasADi::FXInternal::isInit() const

Assert that the function has been initialized. ";

%feature("docstring")  CasADi::XFunctionInternal::verbose "bool
CasADi::FXInternal::verbose() const

Verbose mode? ";

%feature("docstring")  CasADi::XFunctionInternal::monitored "bool
CasADi::FXInternal::monitored(const std::string &mod) const

Is function fcn being monitored. ";

%feature("docstring")  CasADi::XFunctionInternal::input "Matrix<
double > & CasADi::FXInternal::input(int iind=0)

Access input argument. ";

%feature("docstring")  CasADi::XFunctionInternal::input "const
Matrix< double > & CasADi::FXInternal::input(int iind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::XFunctionInternal::output "Matrix<
double > & CasADi::FXInternal::output(int oind=0)

Access input argument. ";

%feature("docstring")  CasADi::XFunctionInternal::output "const
Matrix< double > & CasADi::FXInternal::output(int oind=0) const

Const access input argument. ";

%feature("docstring")  CasADi::XFunctionInternal::fwdSeed "Matrix<
double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)

Access forward seed. ";

%feature("docstring")  CasADi::XFunctionInternal::fwdSeed "const
Matrix< double > & CasADi::FXInternal::fwdSeed(int iind=0, int dir=0)
const

Const access forward seed. ";

%feature("docstring")  CasADi::XFunctionInternal::fwdSens "Matrix<
double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::XFunctionInternal::fwdSens "const
Matrix< double > & CasADi::FXInternal::fwdSens(int oind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::XFunctionInternal::adjSeed "Matrix<
double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)

Access adjoint seed. ";

%feature("docstring")  CasADi::XFunctionInternal::adjSeed "const
Matrix< double > & CasADi::FXInternal::adjSeed(int oind=0, int dir=0)
const

Const access adjoint seed. ";

%feature("docstring")  CasADi::XFunctionInternal::adjSens "Matrix<
double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)

Access forward sensitivity. ";

%feature("docstring")  CasADi::XFunctionInternal::adjSens "const
Matrix< double > & CasADi::FXInternal::adjSens(int iind=0, int dir=0)
const

Const access forward sensitivity. ";

%feature("docstring")  CasADi::XFunctionInternal::setNumInputs "void
CasADi::FXInternal::setNumInputs(int num_in)

Set the number of function inputs. ";

%feature("docstring")  CasADi::XFunctionInternal::setNumOutputs "void
CasADi::FXInternal::setNumOutputs(int num_out)

Set the number of function outputs. ";

%feature("docstring")  CasADi::XFunctionInternal::getNumInputs "int
CasADi::FXInternal::getNumInputs() const

Get the number of function inputs. ";

%feature("docstring")  CasADi::XFunctionInternal::getNumOutputs "int
CasADi::FXInternal::getNumOutputs() const

Get the number of function outputs. ";

%feature("docstring")  CasADi::XFunctionInternal::getStats "const
Dictionary & CasADi::FXInternal::getStats() const

Get all statistics obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::XFunctionInternal::getStat "GenericType CasADi::FXInternal::getStat(const std::string &name) const

Get single statistic obtained at the end of the last evaluate call. ";

%feature("docstring")  CasADi::XFunctionInternal::getJacSparsity "CRSSparsity CasADi::FXInternal::getJacSparsity(int iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::XFunctionInternal::setJacSparsity "void CasADi::FXInternal::setJacSparsity(const CRSSparsity &sp, int
iind, int oind)

Generate the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::XFunctionInternal::jacSparsity "CRSSparsity & CasADi::FXInternal::jacSparsity(int iind, int oind)

Get, if necessary generate, the sparsity of a Jacobian block. ";

%feature("docstring")  CasADi::XFunctionInternal::symbolicInput "std::vector< MX > CasADi::FXInternal::symbolicInput() const

Get a vector of symbolic variables with the same dimensions as the
inputs. ";

%feature("docstring")  CasADi::XFunctionInternal::getFullJacobian "void CasADi::FXInternal::getFullJacobian()

Get the Jacobian of all outputs with respect to all inputs. ";

%feature("docstring")  CasADi::XFunctionInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const std::string &str,
const GenericType &val)

set an option ";

%feature("docstring")  CasADi::XFunctionInternal::setOption "void
CasADi::OptionsFunctionalityNode::setOption(const Dictionary &dict)

set a set of options ";

%feature("docstring")  CasADi::XFunctionInternal::hasOption "bool
CasADi::OptionsFunctionality::hasOption(const std::string &str) const

check if there is an option str ";

%feature("docstring")  CasADi::XFunctionInternal::hasSetOption "bool
CasADi::OptionsFunctionality::hasSetOption(const std::string &str)
const

check if the user has there is an option str ";

%feature("docstring")  CasADi::XFunctionInternal::printOptions "void
CasADi::OptionsFunctionality::printOptions(std::ostream
&stream=std::cout) const

Print options to a stream. ";

%feature("docstring")  CasADi::XFunctionInternal::getOption "GenericType CasADi::OptionsFunctionalityNode::getOption(const
std::string &str) const

get an option value ";

%feature("docstring")  CasADi::XFunctionInternal::repr "virtual void
CasADi::OptionsFunctionalityNode::repr(std::ostream &stream) const

Print representation. ";

%feature("docstring")  CasADi::XFunctionInternal::copyOptions "void
CasADi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj)

Copy all options from another object. ";

%feature("docstring")  CasADi::XFunctionInternal::dictionary "const
Dictionary & CasADi::OptionsFunctionalityNode::dictionary() const

Get the dictionary. ";

%feature("docstring")  CasADi::XFunctionInternal::clone "virtual
SharedObjectNode* CasADi::SharedObjectNode::clone() const =0

Make a deep copy of the instance. ";

%feature("docstring")  CasADi::XFunctionInternal::deepCopyMembers "void CasADi::SharedObjectNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied)

Deep copy data members. ";

%feature("docstring")  CasADi::XFunctionInternal::getCount "int
CasADi::SharedObjectNode::getCount() const

Get the reference count. ";


// File: classCasADi_1_1OptimalControl_1_1XMLNode.xml
%feature("docstring") CasADi::OptimalControl::XMLNode "C++ includes:
xml_node.hpp ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::XMLNode "CasADi::OptimalControl::XMLNode::XMLNode() ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::XMLNode "CasADi::OptimalControl::XMLNode::XMLNode(const std::string &name) ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::~XMLNode "CasADi::OptimalControl::XMLNode::~XMLNode() ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::setAttribute "void CasADi::OptimalControl::XMLNode::setAttribute(const std::string
&attribute_name, const std::string &attribute)

Add an attribute. ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::addChild "void CasADi::OptimalControl::XMLNode::addChild(XMLNode *child)

Add a child. ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::attribute "StrArg CasADi::OptimalControl::XMLNode::attribute(const std::string
&attribute_name) const

Get an attribute by its name. ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::hasChild "bool CasADi::OptimalControl::XMLNode::hasChild(const std::string
&childname) const

Check if a child is present. ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::hasAttribute "bool CasADi::OptimalControl::XMLNode::hasAttribute(const std::string
&attribute_name) const

Check if an attribute is present. ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::size "int
CasADi::OptimalControl::XMLNode::size() const

Get the number of children. ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::getName "const string & CasADi::OptimalControl::XMLNode::getName() const

Get the name of the node. ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::setName "void
CasADi::OptimalControl::XMLNode::setName(const std::string &name)

Set the name of the node. ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::checkName "bool CasADi::OptimalControl::XMLNode::checkName(const std::string
&str) const

check if the name is equal to something ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::getText "StrArg CasADi::OptimalControl::XMLNode::getText() const

Get the value of the text field. ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::addAttributes
"void CasADi::OptimalControl::XMLNode::addAttributes(TiXmlElement
*el) ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::addNode "void
CasADi::OptimalControl::XMLNode::addNode(TiXmlNode *node) ";

%feature("docstring")  CasADi::OptimalControl::XMLNode::dump "void
CasADi::OptimalControl::XMLNode::dump(std::ostream &stream, int
indent=0) const ";


// File: classCasADi_1_1ZeroSXNode.xml
%feature("docstring") CasADi::ZeroSXNode "

Represents a zero SX.

Joel Andersson

C++ includes: constant_sx_node.hpp ";

%feature("docstring")  CasADi::ZeroSXNode::getValue "virtual double
CasADi::ZeroSXNode::getValue() const

Get the value. ";

%feature("docstring")  CasADi::ZeroSXNode::getIntValue "virtual int
CasADi::ZeroSXNode::getIntValue() const ";

%feature("docstring")  CasADi::ZeroSXNode::isInteger "virtual bool
CasADi::ZeroSXNode::isInteger() const

Properties. ";

%feature("docstring")  CasADi::ZeroSXNode::isZero "virtual bool
CasADi::ZeroSXNode::isZero() const ";

%feature("docstring")  CasADi::ZeroSXNode::isSymbolic "bool
CasADi::SXNode::isSymbolic() const ";

%feature("docstring")  CasADi::ZeroSXNode::hasDep "bool
CasADi::SXNode::hasDep() const ";

%feature("docstring")  CasADi::ZeroSXNode::isOne "bool
CasADi::SXNode::isOne() const ";

%feature("docstring")  CasADi::ZeroSXNode::isMinusOne "bool
CasADi::SXNode::isMinusOne() const ";

%feature("docstring")  CasADi::ZeroSXNode::isNan "bool
CasADi::SXNode::isNan() const ";

%feature("docstring")  CasADi::ZeroSXNode::isInf "bool
CasADi::SXNode::isInf() const ";

%feature("docstring")  CasADi::ZeroSXNode::isMinusInf "bool
CasADi::SXNode::isMinusInf() const ";

%feature("docstring")  CasADi::ZeroSXNode::~ZeroSXNode "virtual
CasADi::ZeroSXNode::~ZeroSXNode() ";

%feature("docstring")  CasADi::ZeroSXNode::ZeroSXNode "CasADi::ZeroSXNode::ZeroSXNode() ";

%feature("docstring")  CasADi::ZeroSXNode::isConstant "virtual bool
CasADi::ConstantSXNode::isConstant() const

Properties. ";

%feature("docstring")  CasADi::ZeroSXNode::print "void
CasADi::SXNode::print(std::ostream &stream) const

print ";

%feature("docstring")  CasADi::ZeroSXNode::getName "const std::string
& CasADi::SXNode::getName() const ";

%feature("docstring")  CasADi::ZeroSXNode::getOp "int
CasADi::SXNode::getOp() const

get the operation only for binary nodes ";

%feature("docstring")  CasADi::ZeroSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SXNode &node) const

comparison ";

%feature("docstring")  CasADi::ZeroSXNode::isEqual "bool
CasADi::SXNode::isEqual(const SX &scalar) const

comparison ";

%feature("docstring")  CasADi::ZeroSXNode::ndep "virtual int
CasADi::SXNode::ndep() const

Number of dependencies. ";

%feature("docstring")  CasADi::ZeroSXNode::dep "const SX &
CasADi::SXNode::dep(int i) const

get the reference of a child ";

%feature("docstring")  CasADi::ZeroSXNode::dep "SX &
CasADi::SXNode::dep(int i)

get the reference of a child ";

%feature("docstring")  CasADi::ZeroSXNode::isSmooth "bool
CasADi::SXNode::isSmooth() const

Check if smooth. ";


// File: namespaceACADO.xml


// File: namespaceboost_1_1numeric.xml


// File: namespaceCasADi.xml
%feature("docstring")  CasADi::GSL::ptrVec "std::vector<T*>
CasADi::ptrVec(std::vector< T > &v)

Convenience function, convert vectors to vectors of pointers. ";

%feature("docstring")  CasADi::GSL::ptrVec "const std::vector<T*>
CasADi::ptrVec(const std::vector< T > &v) ";

%feature("docstring")  CasADi::GSL::ptrVec "std::vector<std::vector<T*> > CasADi::ptrVec(std::vector< std::vector<
T > > &v) ";

%feature("docstring")  CasADi::GSL::ptrVec "const
std::vector<std::vector<T*> > CasADi::ptrVec(const std::vector<
std::vector< T > > &v) ";

%feature("docstring")  CasADi::GSL::deepcopy "A
CasADi::deepcopy(const A &a)

Make a deep copy of an object (Note: default is a shallow copy!) ";

%feature("docstring")  CasADi::GSL::deepcopy "A
CasADi::deepcopy(const A &a, std::map< SharedObjectNode *,
SharedObject > &already_copied) ";

%feature("docstring")  CasADi::GSL::deepcopy "std::vector<A>
CasADi::deepcopy(const std::vector< A > &a, std::map< SharedObjectNode
*, SharedObject > &already_copied) ";

%feature("docstring")  CasADi::GSL::gradient "Matrix< SX >
CasADi::gradient(const Matrix< SX > &ex, const Matrix< SX > &arg) ";

%feature("docstring")  CasADi::GSL::jacobian "Matrix< SX >
CasADi::jacobian(const Matrix< SX > &ex, const Matrix< SX > &arg)

Calculate jacobian via source code transformation.

Uses CasADi::SXFunction::jac ";

%feature("docstring")  CasADi::GSL::hessian "void
CasADi::hessian(const Matrix< SX > &ex, const Matrix< SX > &arg,
Matrix< SX > &H, Matrix< SX > &g) ";

%feature("docstring")  CasADi::GSL::hessian "Matrix< SX >
CasADi::hessian(const Matrix< SX > &ex, const Matrix< SX > &arg) ";

%feature("docstring")  CasADi::GSL::timesTwo "T
CasADi::timesTwo(const T &x) ";

%feature("docstring")  CasADi::GSL::square "T CasADi::square(const T
&x) ";

%feature("docstring")  CasADi::GSL::populatePrintFun "CasADi::populatePrintFun(getPrintFun, print, typename casadi_math< T
>::printFunT) populatePrintFun(getPrintPreFun ";

%feature("docstring")  CasADi::GSL::populatePrintFun "casadi_math<T>::printCompFunT casadi_math<T>::printCompFunT
CasADi::populatePrintFun(getNdeps, ndeps(), int) template< typename T
> std ";

%feature("docstring")  CasADi::GSL::getptr "double*
CasADi::getptr(Matrix< double > &x) ";

%feature("docstring")  CasADi::GSL::range "std::vector< int >
CasADi::range(int start, int stop, int step=1, int
len=std::numeric_limits< int >::max())

Python's range function. ";

%feature("docstring")  CasADi::GSL::range "std::vector< int >
CasADi::range(int stop)

Python's range function, start = 0. ";

%feature("docstring")  CasADi::GSL::trans "Matrix< T >
CasADi::trans(const Matrix< T > &x)

Transpose of a matrix. ";

%feature("docstring")  CasADi::GSL::prod "Matrix< T >
CasADi::prod(const Matrix< T > &x, const Matrix< T > &y)

Matrix product of two matrices - not available in Python since prod in
numpy means elementwise multiplication. ";

%feature("docstring")  CasADi::GSL::dot "Matrix< T >
CasADi::dot(const Matrix< T > &x, const Matrix< T > &y)

Product of two matrices - Python naming. ";

%feature("docstring")  CasADi::GSL::append "void
CasADi::append(Matrix< T > &expr, const Matrix< T > &add) ";

%feature("docstring")  CasADi::GSL::isConstant "bool
CasADi::isConstant(const Matrix< T > &ex)

check if the matrix has certain properties ";

%feature("docstring")  CasADi::GSL::isDense "bool
CasADi::isDense(const Matrix< T > &ex) ";

%feature("docstring")  CasADi::GSL::isEmpty "bool
CasADi::isEmpty(const Matrix< T > &ex) ";

%feature("docstring")  CasADi::GSL::isInteger "bool
CasADi::isInteger(const Matrix< T > &ex) ";

%feature("docstring")  CasADi::GSL::isScalar "bool
CasADi::isScalar(const Matrix< T > &ex) ";

%feature("docstring")  CasADi::GSL::isVector "bool
CasADi::isVector(const Matrix< T > &ex) ";

%feature("docstring")  CasADi::GSL::isTril "bool CasADi::isTril(const
Matrix< T > &A)

Check if a matrix is lower triangular (complexity ~ A.size1()) ";

%feature("docstring")  CasADi::GSL::isTriu "bool CasADi::isTriu(const
Matrix< T > &A)

Check if a matrix is upper triangular (complexity ~ A.size1()) ";

%feature("docstring")  CasADi::GSL::det "T CasADi::det(const Matrix<
T > &a) ";

%feature("docstring")  CasADi::GSL::getMinor "T
CasADi::getMinor(const Matrix< T > &x, int i, int j) ";

%feature("docstring")  CasADi::GSL::cofactor "T
CasADi::cofactor(const Matrix< T > &x, int i, int j) ";

%feature("docstring")  CasADi::GSL::adj "Matrix< T >
CasADi::adj(const Matrix< T > &a) ";

%feature("docstring")  CasADi::GSL::inv "Matrix< T >
CasADi::inv(const Matrix< T > &a) ";

%feature("docstring")  CasADi::GSL::reshape "Matrix< T >
CasADi::reshape(const Matrix< T > &a, int n, int m) ";

%feature("docstring")  CasADi::GSL::reshape "Matrix< T >
CasADi::reshape(const Matrix< T > &a, const std::vector< int > sz) ";

%feature("docstring")  CasADi::GSL::reshape "Matrix< T >
CasADi::reshape(const Matrix< T > &a, const CRSSparsity &sp) ";

%feature("docstring")  CasADi::GSL::trace "T CasADi::trace(const
Matrix< T > &a) ";

%feature("docstring")  CasADi::GSL::vec "Matrix< T >
CasADi::vec(const Matrix< T > &a)

make a vector Reshapes/flattens the Matrix<T> such that the shape
becomes (expr.numel(),1). Columns are stacked on top of each other. ";

%feature("docstring")  CasADi::GSL::vertcat "Matrix< T >
CasADi::vertcat(const std::vector< Matrix< T > > &v) ";

%feature("docstring")  CasADi::GSL::horzcat "Matrix< T >
CasADi::horzcat(const std::vector< Matrix< T > > &v) ";

%feature("docstring")  CasADi::GSL::vertcat "Matrix< T >
CasADi::vertcat(const Matrix< T > &x, const Matrix< T > &y) ";

%feature("docstring")  CasADi::GSL::horzcat "Matrix< T >
CasADi::horzcat(const Matrix< T > &x, const Matrix< T > &y) ";

%feature("docstring")  CasADi::GSL::inner_prod "Matrix< T >
CasADi::inner_prod(const Matrix< T > &x, const Matrix< T > &y)

Inner product of two vectors Equals.

with x and y vectors ";

%feature("docstring")  CasADi::GSL::outer_prod "Matrix< T >
CasADi::outer_prod(const Matrix< T > &x, const Matrix< T > &y)

Outer product of two vectors Equals.

with x and y vectors ";

%feature("docstring")  CasADi::GSL::qr "void CasADi::qr(const Matrix<
T > &A, Matrix< T > &Q, Matrix< T > &R)

QR factorization using the modified Gram-Schmidt algorithm More stable
than the classical Gram-Schmidt, but may break down if the columns of
A are nearly linearly dependent See J. Demmel: Applied Numerical
Linear Algebra (algorithm 3.1.) ";

%feature("docstring")  CasADi::GSL::qr "std::vector< Matrix< T > >
CasADi::qr(const Matrix< T > &A) ";

%feature("docstring")  CasADi::GSL::solve "Matrix< T >
CasADi::solve(const Matrix< T > &A, const Matrix< T > &b)

Solve a system of equations: A*x = b. ";

%feature("docstring")  CasADi::GSL::linspace "Matrix< T >
CasADi::linspace(const Matrix< T > &a, const Matrix< T > &b, int
nsteps)

Matlab's linspace function. ";

%feature("docstring")  CasADi::GSL::isZero "bool CasADi::isZero(const
Matrix< T > &ex) ";

%feature("docstring")  CasADi::GSL::isOne "bool CasADi::isOne(const
Matrix< T > &ex) ";

%feature("docstring")  CasADi::GSL::isMinusOne "bool
CasADi::isMinusOne(const Matrix< T > &ex) ";

%feature("docstring")  CasADi::GSL::isIdentity "bool
CasADi::isIdentity(const Matrix< T > &ex) ";

%feature("docstring")  CasADi::GSL::nnz "int CasADi::nnz(const
Matrix< T > &ex) ";

%feature("docstring")  CasADi::GSL::nnz_sym "int
CasADi::nnz_sym(const Matrix< T > &ex) ";

%feature("docstring")  CasADi::GSL::isEqual "bool
CasADi::isEqual(const Matrix< T > &ex1, const Matrix< T > &ex2) ";

%feature("docstring")  CasADi::GSL::norm_1 "Matrix< T >
CasADi::norm_1(const Matrix< T > &x)

Make the vector 1-norm of an Matrix<T> ";

%feature("docstring")  CasADi::GSL::norm_2 "Matrix< T >
CasADi::norm_2(const Matrix< T > &x)

Make the vector 2-norm (Frobenius Norm) of an Matrix<T> ";

%feature("docstring")  CasADi::GSL::norm_22 "Matrix<T>
CasADi::norm_22(const Matrix< T > &x)

Make the vector 2-norm (Frobenius Norm) squared of an Matrix<T> ";

%feature("docstring")  CasADi::GSL::sum_all "T CasADi::sum_all(const
Matrix< T > &x)

Return summation of all elements. ";

%feature("docstring")  CasADi::GSL::sum "Matrix< T >
CasADi::sum(const Matrix< T > &x, int axis=0)

Return summation of elements along specific axis.

Parameters:
-----------

axis:  either 0 or 1 ";

%feature("docstring")  CasADi::GSL::repmat "Matrix< T >
CasADi::repmat(const Matrix< T > &A, int n, int m)

Repeat matrix A n times vertically and m times horizontally. ";

%feature("docstring")  CasADi::GSL::eye "Matrix<T> CasADi::eye(int n)

create an n-by-n identity matrix ";

%feature("docstring")  CasADi::GSL::ones "Matrix<T> CasADi::ones(int
n, int m=1)

create a matrix with all ones ";

%feature("docstring")  CasADi::GSL::zeros "Matrix<T>
CasADi::zeros(int n, int m=1)

create a matrix with all zeros ";

%feature("docstring")  CasADi::GSL::polyval "Matrix< T >
CasADi::polyval(const Matrix< T > &p, const Matrix< T > &x)

Evaluate a polynomial with coefficeints p in x. ";

%feature("docstring")  CasADi::GSL::diag "Matrix< T >
CasADi::diag(const Matrix< T > &A)

Get the diagonal of a matrix or construct a diagonal When the input is
square, the diagonal elements are returned. If the input is vector-
like, a diagonal matrix is constructed with it. ";

%feature("docstring")  CasADi::GSL::getSparseTriplet "void
CasADi::getSparseTriplet(const Matrix< T > &A, std::vector< int >
&row, std::vector< int > &col)

Get the sparsity in sparse triplet format. ";

%feature("docstring")  CasADi::GSL::getSparseTriplet "std::vector<
std::vector< int > > CasADi::getSparseTriplet(const Matrix< T > &A)

Get the sparsity in sparse triplet format - Python style: [row,col] =
getSparseTriplet(A) ";

%feature("docstring")  CasADi::GSL::unite "Matrix< T >
CasADi::unite(const Matrix< T > &A, const Matrix< T > &B)

Unite two matrices no overlapping sparsity. ";

%feature("docstring")  CasADi::GSL::makeDense "void
CasADi::makeDense(Matrix< T > &A)

Make a matrix dense. ";

%feature("docstring")  CasADi::GSL::addMultiple "void
CasADi::addMultiple(const Matrix< T > &A, const std::vector< T > &v,
std::vector< T > &res, bool trans_A=false)

same as: res += prod(A,v) ";

%feature("docstring")  CasADi::GSL::sp_dense "CRSSparsity
CasADi::sp_dense(int n, int m=1)

Create a dense rectangular sparsity pattern. ";

%feature("docstring")  CasADi::GSL::sp_sparse "CRSSparsity
CasADi::sp_sparse(int n, int m=1)

Create a sparse rectangular sparsity pattern. ";

%feature("docstring")  CasADi::GSL::sp_tril "CRSSparsity
CasADi::sp_tril(int n)

Create an upper triangular square sparsity pattern. ";

%feature("docstring")  CasADi::GSL::sp_diag "CRSSparsity
CasADi::sp_diag(int n)

Create diagonal square sparsity pattern. ";

%feature("docstring")  CasADi::GSL::sp_band "CRSSparsity
CasADi::sp_band(int n, int p)

Create a single band in a square sparsity pattern.

sp_band(n,0) is equivalent to sp_diag(n)  sp_band(n,-1) has a band
below the diagonal

Parameters:
-----------

p:  indicate ";

%feature("docstring")  CasADi::GSL::sp_banded "CRSSparsity
CasADi::sp_banded(int n, int p)

Create banded square sparsity pattern.

sp_band(n,0) is equivalent to sp_diag(n)  sp_band(n,1) is tri-diagonal
matrix ";

%feature("docstring")  CasADi::GSL::sp_rowcol "CRSSparsity
CasADi::sp_rowcol(std::vector< int > row, std::vector< int > col, int
nrow, int ncol)

Construct a block sparsity pattern from (row,col) vectors. ";

%feature("docstring")  CasADi::GSL::sp_NZ "CRSSparsity
CasADi::sp_NZ(std::vector< int > row, std::vector< int > col, int
nrow, int ncol, bool monotone=false)

Construct a sparsity pattern from (row,col) vectors.

row and column must be of same length.

If you can guarantee that row is montone, pass the extra argument as
true. ";

%feature("docstring")  CasADi::GSL::getNZDense "std::vector< int >
CasADi::getNZDense(const CRSSparsity &sp)

Get the indices of all non-zero elements as they would appear in a
Dense matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5
structural non-zeros.

k = getNZDense(A) A[k] will contain the elements of A that are non-
zero in B ";

%feature("docstring")  CasADi::GSL::reshape "CRSSparsity
CasADi::reshape(const CRSSparsity &a, int n, int m) ";

%feature("docstring")  CasADi::GSL::vec "CRSSparsity
CasADi::vec(const CRSSparsity &a) ";

%feature("docstring")  CasADi::GSL::lowerSparsity "CRSSparsity
CasADi::lowerSparsity(const CRSSparsity &a)

Return the lower part of the sparsity pattern. ";

%feature("docstring")  CasADi::GSL::lowerNZ "std::vector< int >
CasADi::lowerNZ(const CRSSparsity &a)

Return the non-zero entries that make up the lower part of the
provided matrix. ";

%feature("docstring")  CasADi::GSL::sp_triplet "CRSSparsity
CasADi::sp_triplet(int n, int m, const std::vector< int > &row, const
std::vector< int > &col, std::vector< int > &mapping)

Create a sparsity pattern given the nonzeros in sparse triplet form.
";

%feature("docstring")  CasADi::GSL::sp_triplet "CRSSparsity
CasADi::sp_triplet(int n, int m, const std::vector< int > &row, const
std::vector< int > &col)

Create a sparsity pattern given the nonzeros in sparse triplet form
(no nonzero mapping) ";

%feature("docstring")  CasADi::GSL::vertcat "MX CasADi::vertcat(const
vector< MX > &comp) ";

%feature("docstring")  CasADi::GSL::horzcat "MX CasADi::horzcat(const
vector< MX > &comp) ";

%feature("docstring")  CasADi::GSL::vertcat "MX CasADi::vertcat(const
MX &a, const MX &b)

concatenate vertically, two matrices ";

%feature("docstring")  CasADi::GSL::horzcat "MX CasADi::horzcat(const
MX &a, const MX &b)

concatenate horizontally, two matrices ";

%feature("docstring")  CasADi::GSL::veccat "MX CasADi::veccat(const
vector< MX > &comp) ";

%feature("docstring")  CasADi::GSL::applymap "vector<MX>
CasADi::applymap(MX(*f)(const MX &), const vector< MX > &comp) ";

%feature("docstring")  CasADi::GSL::applymap "void
CasADi::applymap(void(*f)(MX &), vector< MX > &comp) ";

%feature("docstring")  CasADi::GSL::norm_2 "MX CasADi::norm_2(const
MX &x)

Take the 2-norm of a MX Internally represented by Norm2. ";

%feature("docstring")  CasADi::GSL::norm_1 "MX CasADi::norm_1(const
MX &x)

Take the 1-norm of a MX Internally represented by Norm1. ";

%feature("docstring")  CasADi::GSL::norm_inf "MX
CasADi::norm_inf(const MX &x)

Take the infinity-norm of a MX Internally represented by NormInf. ";

%feature("docstring")  CasADi::GSL::prod "MX CasADi::prod(const MX
&x, const MX &y)

Take the matrix product of 2 MX objects. ";

%feature("docstring")  CasADi::GSL::isZero "bool CasADi::isZero(const
MX &ex)

check if zero ";

%feature("docstring")  CasADi::GSL::isOne "bool CasADi::isOne(const
MX &ex)

check if zero ";

%feature("docstring")  CasADi::GSL::isMinusOne "bool
CasADi::isMinusOne(const MX &ex)

check if zero ";

%feature("docstring")  CasADi::GSL::isIdentity "bool
CasADi::isIdentity(const MX &ex)

check if identity ";

%feature("docstring")  CasADi::GSL::inner_prod "MX
CasADi::inner_prod(const MX &x, const MX &y)

Take the inner product of two vectors Equals.

with x and y vectors ";

%feature("docstring")  CasADi::GSL::outer_prod "MX
CasADi::outer_prod(const MX &x, const MX &y)

Take the outer product of two vectors Equals.

with x and y vectors ";

%feature("docstring")  CasADi::GSL::simplifyMapping "void
CasADi::simplifyMapping(MX &ex)

Simplify a mapping, if possible. ";

%feature("docstring")  CasADi::GSL::trans "MX CasADi::trans(const MX
&x)

Take the transpose of a MX Internally represented by Transpose. ";

%feature("docstring")  CasADi::GSL::reshape "MX CasADi::reshape(const
MX &x, const std::vector< int > sz)

Returns a reshaped version of the MX, dimensions as a vector. ";

%feature("docstring")  CasADi::GSL::reshape "MX CasADi::reshape(const
MX &x, int n, int m)

Returns a reshaped version of the MX. ";

%feature("docstring")  CasADi::GSL::reshape "MX CasADi::reshape(const
MX &x, const CRSSparsity &sp)

Reshape the MX. ";

%feature("docstring")  CasADi::GSL::vec "MX CasADi::vec(const MX &x)

Returns a flattened version of the MX Flattening is a cheap (non-
copying) operation Same as reshape(x, x.numel(),1) ";

%feature("docstring")  CasADi::GSL::vecNZ "MX CasADi::vecNZ(const MX
&x)

Returns a flattened version of the MX, preserving only nonzeros. ";

%feature("docstring")  CasADi::GSL::if_else_zero "MX
CasADi::if_else_zero(const MX &cond, const MX &if_true)

Conditional evaluation cond ? if_true : 0. ";

%feature("docstring")  CasADi::GSL::if_else "MX CasADi::if_else(const
MX &cond, const MX &if_true, const MX &if_false)

Branching on MX nodes Ternary operator, \"cond ? if_true : if_false\".
";

%feature("docstring")  CasADi::GSL::unite "MX CasADi::unite(const MX
&A, const MX &B)

Unite two matrices no overlapping sparsity. ";

%feature("docstring")  CasADi::GSL::isSymbolic "bool
CasADi::isSymbolic(const MX &ex)

check if symbolic ";

%feature("docstring")  CasADi::GSL::trace "MX CasADi::trace(const MX
&A) ";

%feature("docstring")  CasADi::GSL::repmat "MX CasADi::repmat(const
MX &A, int n, int m)

Repeat matrix A n times vertically and m times horizontally. ";

%feature("docstring")  CasADi::GSL::lift "MX CasADi::lift(const MX
&x)

create a clipped view into a matrix Create a sparse matrix from a
dense matrix A, with sparsity pattern sp

MX clip(const MX& A, const CRSSparsity& sp) { Join the sparsity
patterns std::vector<int> mapping; CRSSparsity sp =
A.sparsity().patternIntersection(sp,mapping);

Split up the mapping std::vector<int> nzA,nzB;

Copy sparsity for(int k=0; k<mapping.size(); ++k){ if(mapping[k]<0){
nzA.push_back(k); } else if(mapping[k]>0){ nzB.push_back(k); } else {
throw CasadiException(\"Pattern intersection not empty\"); } }

Create mapping MX ret; ret.assignNode(new Mapping(sp));
ret->addDependency(A,range(nzA.size()),nzA);
ret->addDependency(B,range(nzB.size()),nzB); return ret;

}

Lift a node ";

%feature("docstring")  CasADi::GSL::densify "MX CasADi::densify(const
MX &x)

Make the matrix dense. ";

%feature("docstring")  CasADi::GSL::makeDense "void
CasADi::makeDense(MX &x)

Make the matrix dense. ";

%feature("docstring")  CasADi::GSL::createParent "MX
CasADi::createParent(std::vector< MX > &deps)

Create a parent MX on which all given MX's will depend.

In some sense, this function is the inverse of

Parameters:
-----------

deps:  Must all be symbolic matrices. ";

%feature("docstring")  CasADi::GSL::createParent "std::pair< MX,
std::vector< MX > > CasADi::createParent(const std::vector<
CRSSparsity > &deps)

Create a parent MX on which a bunch of MX's (sizes given as argument)
will depend. ";

%feature("docstring")  CasADi::GSL::createParent "std::pair< MX,
std::vector< MX > > CasADi::createParent(const std::vector< MX >
&deps)

Create a parent MX on which a bunch of MX's (sizes given as argument)
will depend. ";

%feature("docstring")  CasADi::GSL::diag "MX CasADi::diag(const MX
&x)

Get the diagonal of a matrix or construct a diagonal.

When the input is square, the diagonal elements are returned. If the
input is vector-like, a diagonal matrix is constructed with it. ";

%feature("docstring")  CasADi::GSL::countNodes "int
CasADi::countNodes(const MX &A)

Count number of nodes ";

%feature("docstring")  CasADi::GSL::sum "MX CasADi::sum(const MX &x,
int axis=0)

Return summation of elements along specific axis.

Parameters:
-----------

axis:  either 0 or 1 ";

%feature("docstring")  CasADi::GSL::polyval "MX CasADi::polyval(const
MX &p, const MX &x)

Evaluate a polynomial with coefficeints p in x. ";

%feature("docstring")  CasADi::GSL::isVector "bool
CasADi::isVector(const MX &ex)

check if vector ";

%feature("docstring")  CasADi::GSL::isDense "bool
CasADi::isDense(const MX &ex)

check if vector ";

%feature("docstring")  CasADi::GSL::vertcat "MX CasADi::vertcat(const
std::vector< MX > &comp)

concatenate vertically ";

%feature("docstring")  CasADi::GSL::horzcat "MX CasADi::horzcat(const
std::vector< MX > &comp)

concatenate horizontally ";

%feature("docstring")  CasADi::GSL::veccat "MX CasADi::veccat(const
std::vector< MX > &comp)

concatenate vertically while vectorizing all arguments with getNZ ";

%feature("docstring")  CasADi::GSL::applymap "std::vector<MX>
CasADi::applymap(MX(*f)(const MX &), const std::vector< MX > &)

Apply a function f to each element in a vector ";

%feature("docstring")  CasADi::GSL::applymap "void
CasADi::applymap(void(*f)(MX &), std::vector< MX > &)

Apply a function f to each element in a vector ";

%feature("docstring")  CasADi::GSL::shared_cast "B
CasADi::shared_cast(SharedObject &A)

Typecast a shared object to a base class to a shared object to a
derived class, cf. dynamic_cast.

Get a pointer to the node

Create a return object

Assign node of B and return

Null pointer if not pointing towards the right type of object ";

%feature("docstring")  CasADi::GSL::shared_cast "const B
CasADi::shared_cast(const SharedObject &A)

Typecast a shared object to a base class to a shared object to a
derived class, cf. dynamic_cast (const) ";

%feature("docstring")  CasADi::GSL::get_bvec_t "bvec_t *
CasADi::get_bvec_t(std::vector< double > &v)

Get an pointer of sets of booleans from a double vector. ";

%feature("docstring")  CasADi::GSL::get_bvec_t "const bvec_t *
CasADi::get_bvec_t(const std::vector< double > &v)

Get an pointer of sets of booleans from a double vector. ";

%feature("docstring")  CasADi::GSL::repr "void CasADi::repr(const
std::vector< T > &v, std::ostream &stream=std::cout)

Print representation. ";

%feature("docstring")  CasADi::GSL::print "void CasADi::print(const
std::vector< T > &v, std::ostream &stream=std::cout)

Print description. ";

%feature("docstring")  CasADi::GSL::getRepresentation "std::string
CasADi::getRepresentation(const std::vector< T > &v)

Print representation to string. ";

%feature("docstring")  CasADi::GSL::getDescription "std::string
CasADi::getDescription(const std::vector< T > &v)

Print description to string. ";

%feature("docstring")  CasADi::GSL::write_matlab "void
CasADi::write_matlab(std::ostream &stream, const std::vector< T > &v)

Print vector, matlab style. ";

%feature("docstring")  CasADi::GSL::write_matlab "void
CasADi::write_matlab(std::ostream &stream, const std::vector<
std::vector< T > > &v)

Print matrix, matlab style. ";

%feature("docstring")  CasADi::GSL::read_matlab "void
CasADi::read_matlab(std::istream &stream, std::vector< T > &v)

Read vector, matlab style. ";

%feature("docstring")  CasADi::GSL::read_matlab "void
CasADi::read_matlab(std::ifstream &file, std::vector< std::vector< T >
> &v)

Read matrix, matlab style. ";

%feature("docstring")  CasADi::GSL::linspace "void
CasADi::linspace(std::vector< T > &v, const F &first, const L &last)

Matlab's linspace. ";

%feature("docstring")  CasADi::GSL::sign "SX CasADi::sign(const SX
&x) ";

%feature("docstring")  CasADi::GSL::if_else "SX CasADi::if_else(const
SX &cond, const SX &if_true, const SX &if_false) ";

%feature("docstring")  CasADi::GSL::gauss_quadrature "Matrix< SX >
CasADi::gauss_quadrature(Matrix< SX > f, const Matrix< SX > &x, const
Matrix< SX > &a, const Matrix< SX > &b, int order=5, const Matrix< SX
> &w=Matrix< SX >())

Integrate f from a to b using Gaussian quadrature with n points. ";

%feature("docstring")  CasADi::GSL::pw_const "Matrix< SX >
CasADi::pw_const(const Matrix< SX > &t, const Matrix< SX > &tval,
const Matrix< SX > &val)

Create a piecewise constant function Create a piecewise constant
function with n=val.size() intervals.

Inputs:

Parameters:
-----------

t:  a scalar variable (e.g. time)

tval:  vector with the discrete values of t at the interval
transitions (length n-1)

val:  vector with the value of the function for each interval (length
n) ";

%feature("docstring")  CasADi::GSL::pw_lin "Matrix< SX >
CasADi::pw_lin(const SX &t, const Matrix< SX > &tval, const Matrix< SX
> &val)

t a scalar variable (e.g. time)

Create a piecewise linear function Create a piecewise linear function:

Inputs: tval vector with the the discrete values of t (monotonically
increasing) val vector with the corresponding function values (same
length as tval) ";

%feature("docstring")  CasADi::GSL::if_else "Matrix< SX >
CasADi::if_else(const Matrix< SX > &cond, const Matrix< SX > &if_true,
const Matrix< SX > &if_false) ";

%feature("docstring")  CasADi::GSL::onesSX "Matrix< SX >
CasADi::onesSX(int n, int m=1)

create a matrix with all ones ";

%feature("docstring")  CasADi::GSL::zerosSX "Matrix< SX >
CasADi::zerosSX(int n, int m=1)

create a matrix with all zeros ";

%feature("docstring")  CasADi::GSL::infSX "Matrix< SX >
CasADi::infSX(int n=1, int m=1)

create a matrix with all infinities ";

%feature("docstring")  CasADi::GSL::eyeSX "Matrix< SX >
CasADi::eyeSX(int n)

create an n-by-n identity matrix ";

%feature("docstring")  CasADi::GSL::heaviside "Matrix< SX >
CasADi::heaviside(const Matrix< SX > &x)

Heaviside function.

\\\\[ \\\\begin{cases} H(x) = 0 & x<0 \\\\\\\\ H(x) = 1/2 & x=0
\\\\\\\\ H(x) = 1 & x>0 \\\\\\\\ \\\\end{cases} \\\\] ";

%feature("docstring")  CasADi::GSL::ramp "Matrix< SX >
CasADi::ramp(const Matrix< SX > &x)

ramp function

\\\\[ \\\\begin{cases} R(x) = 0 & x <= 1 \\\\\\\\ R(x) = x & x > 1
\\\\\\\\ \\\\end{cases} \\\\]

Also called: slope function ";

%feature("docstring")  CasADi::GSL::rectangle "Matrix< SX >
CasADi::rectangle(const Matrix< SX > &x)

rectangle function

\\\\[ \\\\begin{cases} \\\\Pi(x) = 1 & |x| < 1/2 \\\\\\\\ \\\\Pi(x) =
1/2 & |x| = 1/2 \\\\\\\\ \\\\Pi(x) = 0 & |x| > 1/2 \\\\\\\\
\\\\end{cases} \\\\]

Also called: gate function, block function, band function, pulse
function, window function ";

%feature("docstring")  CasADi::GSL::triangle "Matrix< SX >
CasADi::triangle(const Matrix< SX > &x)

triangle function

\\\\[ \\\\begin{cases} \\\\Lambda(x) = 0 & |x| >= 1 \\\\\\\\
\\\\Lambda(x) = 1-|x| & |x| < 1 \\\\end{cases} \\\\] ";

%feature("docstring")  CasADi::GSL::sign "Matrix< SX >
CasADi::sign(const Matrix< SX > &x)

sign function

\\\\[ \\\\begin{cases} \\\\mathrm{sign}(x) = -1 & x<0 \\\\\\\\
\\\\mathrm{sign}(x) = 0 & x=0 \\\\\\\\ \\\\mathrm{sign}(x) = 1 & x>0
\\\\\\\\ \\\\end{cases} \\\\]

Also called: signum ";

%feature("docstring")  CasADi::GSL::contains "bool
CasADi::contains(const Matrix< SX > &list, const SX &e) ";

%feature("docstring")  CasADi::GSL::simplify "void
CasADi::simplify(Matrix< SX > &ex)

Simplify an expression. ";

%feature("docstring")  CasADi::GSL::compress "void
CasADi::compress(Matrix< SX > &ex, int level=5)

remove identical calculations ";

%feature("docstring")  CasADi::GSL::substitute "Matrix< SX >
CasADi::substitute(const Matrix< SX > &ex, const Matrix< SX > &var,
const Matrix< SX > &expr)

substitute variable var with expression expr ";

%feature("docstring")  CasADi::GSL::spy "Matrix< SX >
CasADi::spy(const Matrix< SX > &A)

Get the sparsity pattern of a matrix. ";

%feature("docstring")  CasADi::GSL::dependsOn "bool
CasADi::dependsOn(const Matrix< SX > &f, const Matrix< SX > &arg)

Check dependency: very inefficient algorithm. ";

%feature("docstring")  CasADi::GSL::isSmooth "bool
CasADi::isSmooth(const Matrix< SX > &ex)

check if smooth ";

%feature("docstring")  CasADi::GSL::isSymbolic "bool
CasADi::isSymbolic(const Matrix< SX > &ex)

check if symbolic (Dense)

Sparse matrices invariable return false ";

%feature("docstring")  CasADi::GSL::isSymbolicSparse "bool
CasADi::isSymbolicSparse(const Matrix< SX > &ex)

check if symbolic

Sparse matrices can return true if all non-zero elements are symbolic
";

%feature("docstring")  CasADi::GSL::getValue "double
CasADi::getValue(const Matrix< SX > &ex, int i=0, int j=0)

Obtain the values of a constant expression. ";

%feature("docstring")  CasADi::GSL::getIntValue "int
CasADi::getIntValue(const Matrix< SX > &ex, int i, int j) ";

%feature("docstring")  CasADi::GSL::getValue "void
CasADi::getValue(const Matrix< SX > &ex, double *res) ";

%feature("docstring")  CasADi::GSL::getIntValue "void
CasADi::getIntValue(const Matrix< SX > &ex, int *res) ";

%feature("docstring")  CasADi::GSL::getName "const std::string &
CasADi::getName(const Matrix< SX > &ex) ";

%feature("docstring")  CasADi::GSL::expand "void CasADi::expand(const
Matrix< SX > &ex, Matrix< SX > &weights, Matrix< SX > &terms)

Expand the expression as a weighted sum (with constant weights) ";

%feature("docstring")  CasADi::GSL::simplify "void
CasADi::simplify(SX &ex)

Simplify the expression: formulates the expression as and eliminates
terms. ";

%feature("docstring")  CasADi::GSL::fill "void CasADi::fill(Matrix<
SX > &mat, const SX &val)

Fill the matrix with the value val, make empty sparse if zero. ";

%feature("docstring")  CasADi::GSL::make_symbolic "void
CasADi::make_symbolic(SX &v, const std::string &name)

Make a vector/matrix of symbolic variables - dimension 0. ";

%feature("docstring")  CasADi::GSL::symbolic "Matrix< SX >
CasADi::symbolic(const std::string &name, int n=1, int m=1)

Create an n-by-m matrix with symbolic variables. ";

%feature("docstring")  CasADi::GSL::symbolic "Matrix< SX >
CasADi::symbolic(const std::string &name, const std::pair< int, int >
&nm)

Create an n-by-m matrix with symbolic variables. ";

%feature("docstring")  CasADi::GSL::symbolic "Matrix< SX >
CasADi::symbolic(const std::string &name, const CRSSparsity &sp)

Create an matrix with symbolic variables, given a sparsity pattern. ";

%feature("docstring")  CasADi::GSL::symbolic "std::vector< Matrix< SX
> > CasADi::symbolic(const std::string &name, int n, int m, int p)

Create a vector of length p with n-by-m matrices with symbolic
variables. ";

%feature("docstring")  CasADi::GSL::create_symbolic "vector<SX>
CasADi::create_symbolic(const string &name) ";

%feature("docstring")  CasADi::GSL::create_symbolic "vector<SX>
CasADi::create_symbolic(const string &name, int n) ";

%feature("docstring")  CasADi::GSL::create_symbolic "std::vector<
std::vector< SX > > CasADi::create_symbolic(const std::string &name,
int n, int m)

Create a two-dimensional stl vector of length n-by-m with symbolic
variables. ";

%feature("docstring")  CasADi::GSL::create_symbolic "std::vector<
std::vector< std::vector< SX > > > CasADi::create_symbolic(const
std::string &name, int n, int m, int p)

Create a three-dimensional stl vector of length n-by-m-by-p with
symbolic variables. ";

%feature("docstring")  CasADi::GSL::taylor "Matrix< SX >
CasADi::taylor(const Matrix< SX > &ex, const SX &x, const SX
&a=casadi_limits< SX >::zero, int order=1)

univariate taylor series expansion

Calculate the taylor expansion of expression 'ex' up to order 'order'
with repsect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:>>   x ";

%feature("docstring")  CasADi::GSL::mtaylor "Matrix< SX >
CasADi::mtaylor(const Matrix< SX > &ex, const Matrix< SX > &x, const
Matrix< SX > &a, int order=1)

multivariate taylor series expansion

Do taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$. ";

%feature("docstring")  CasADi::GSL::for "CasADi::for(int i=0;i<
x.size();i++) ";

%feature("docstring")  CasADi::GSL::make_symbolic "void
CasADi::make_symbolic(std::vector< A > &v, const std::string &name)

Make a vector/matrix of symbolic variables - higher dimension
recursively. ";

%feature("docstring")  CasADi::GSL::create_symbolic "std::vector<SX>
CasADi::create_symbolic(const std::string &name, int n)

Create a one-dimensional stl vector of length n with symbolic
variables. ";

%feature("docstring")  CasADi::GSL::create_symbolic "std::vector<SX>
CasADi::create_symbolic(const std::string &name)

Create a one-dimensional stl vector of symbolic variables, whose names
are given in space-separated form Python example: ";

%feature("docstring")  CasADi::GSL::make_symbolic "void
CasADi::make_symbolic(iter_type first, func_type last, const
std::string &name)

Make a vector/matrix of symbolic variables. ";

%feature("docstring")  CasADi::GSL::contains "bool
CasADi::contains(const Matrix< SX > &list, const Matrix< SX > &e)

Returns true if at least one element in list contains the scalar e. ";

%feature("docstring")  CasADi::GSL::if_else "T CasADi::if_else(const
SX &cond, const T &if_true, const T &if_false)

Make the expression smooth by replacing non-smooth nodes with binary
variables.

Substitute derivatives with variables void
replaceDerivatives(Matrix<SX> &ex, const Matrix<SX> &var, const
Matrix<SX> &dvar); ";

%feature("docstring")  CasADi::GSL::blockmatrix "Matrix<SX>
CasADi::blockmatrix(Matrix< SX > array[n][m])

Create a block matrix.

Return matrix

loop over rows

Create a row

append components to the row

append row to matrix ";

%feature("docstring")  CasADi::GSL::blockmatrix "Matrix<SX>
CasADi::blockmatrix(Matrix< SX > array[n])

Create a block matrix (vector)

Return matrix

loop over rows

append components ";

%feature("docstring")  CasADi::GSL::mtaylor "Matrix<SX>
CasADi::mtaylor(const Matrix< SX > &ex, const Matrix< SX > &x, const
Matrix< SX > &a, int order, const std::vector< int >
&order_contributions)

multivariate taylor series expansion

Do taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

The argument order_contributions can denote how match each variable
contributes to the aggregated order. If x=[x,y] and
order_contributions=[1,2], then the aggregated order of $x^n y^m$
equals $1n+2m$.

Example usage

$ \\\\sin(b+a)+\\\\cos(b+a)(x-a)+\\\\cos(b+a)(y-b) $ $ y+x-(x^3+3y
x^2+3 y^2 x+y^3)/6 $ $ (-3 x^2 y-x^3)/6+y+x $ ";

%feature("docstring")  CasADi::GSL::evaluateConstants "Matrix<SX>
CasADi::evaluateConstants(const Matrix< SX > &ex)

Eliminate constants Eliminate constants from an expression. This will
make the graph of the expression smaller, meaning less operations need
to be evaluated at runtime. At the same time, it degrate the cache
utilization. ";

%feature("docstring")  CasADi::GSL::countNodes "int
CasADi::countNodes(const Matrix< SX > &A)

Count number of nodes ";

%feature("docstring")  CasADi::GSL::print_dat "void
CasADi::print_dat(std::ostream &stream, const std::string &name, const
std::vector< A > &v)

Write a vector valued entry to file ";

%feature("docstring")  CasADi::GSL::print_dat "void
CasADi::print_dat(std::ostream &stream, const std::string &name, const
A &v)

Write a scalar valued entry to file ";

%feature("docstring")  CasADi::GSL::print_dat "void
CasADi::print_dat(std::ostream &stream, const std::string &name, const
A &v, I i)

Write a scalar/vector valued entry with an index argument to file ";

%feature("docstring")  CasADi::GSL::print_dat "void
CasADi::print_dat(std::ostream &stream, const std::string &name, const
A &v, I1 i1, I2 i2)

Write a scalar/vector valued entry with two index arguments to file ";

%feature("docstring")  CasADi::GSL::getFunctionPtrs "void
CasADi::getFunctionPtrs(muscodFunctionPtr *v) ";

%feature("docstring")  CasADi::GSL::getFunctionPtrs< 0 > " void
CasADi::getFunctionPtrs< 0 >(muscodFunctionPtr *v) ";

%feature("docstring")  CasADi::GSL::fcn_template "void
CasADi::fcn_template(double *t, double *xd, double *xa, double *u,
double *p, double *rhs, double *rwh, long *iwh, long *info)

Each class instance must have its own function pointer, it is not
possible to pass pointers to member functions. ";


// File: namespaceCasADi_1_1GSL.xml


// File: namespaceCasADi_1_1Interfaces.xml
%feature("docstring")  CasADi::Interfaces::dgetrf_ "void
CasADi::Interfaces::dgetrf_(int *m, int *n, double *a, int *lda, int
*ipiv, int *info)

LU-Factorize dense matrix (lapack) ";

%feature("docstring")  CasADi::Interfaces::dgetrs_ "void
CasADi::Interfaces::dgetrs_(char *trans, int *n, int *nrhs, double *a,
int *lda, int *ipiv, double *b, int *ldb, int *info)

Solve a system of equation using an LU-factorized matrix (lapack) ";

%feature("docstring")  CasADi::Interfaces::dgeequ_ "void
CasADi::Interfaces::dgeequ_(int *m, int *n, double *a, int *lda,
double *r, double *c, double *rowcnd, double *colcnd, double *amax,
int *info)

Calculate row and column scalings. ";

%feature("docstring")  CasADi::Interfaces::dlaqge_ "void
CasADi::Interfaces::dlaqge_(int *m, int *n, double *a, int *lda,
double *r, double *c, double *rowcnd, double *colcnd, double *amax,
char *equed)

Equilibriate the system. ";

%feature("docstring")  CasADi::Interfaces::dgeqrf_ "void
CasADi::Interfaces::dgeqrf_(int *m, int *n, double *a, int *lda,
double *tau, double *work, int *lwork, int *info)

QR-factorize dense matrix (lapack) ";

%feature("docstring")  CasADi::Interfaces::dormqr_ "void
CasADi::Interfaces::dormqr_(char *side, char *trans, int *n, int *m,
int *k, double *a, int *lda, double *tau, double *c, int *ldc, double
*work, int *lwork, int *info)

Multiply right hand side with Q-transpose (lapack) ";

%feature("docstring")  CasADi::Interfaces::dtrsm_ "void
CasADi::Interfaces::dtrsm_(char *side, char *uplo, char *transa, char
*diag, int *m, int *n, double *alpha, double *a, int *lda, double *b,
int *ldb)

Solve upper triangular system (lapack) ";


// File: namespaceCasADi_1_1OptimalControl.xml
%feature("docstring")  CasADi::OptimalControl::get_collocation_coeff "void CasADi::OptimalControl::get_collocation_coeff(int K, vector<
vector< double > > &C, vector< double > &D, CollocationPoints cp) ";

%feature("docstring")  CasADi::OptimalControl::collocate "void
CasADi::OptimalControl::collocate(const SXMatrix &var, vector<
SXMatrix > &VAR, int N) ";

%feature("docstring")  CasADi::OptimalControl::collocate "void
CasADi::OptimalControl::collocate(const SXMatrix &var, vector< vector<
SXMatrix > > &VAR, int N, int K) ";

%feature("docstring")  CasADi::OptimalControl::collocate_final "void
CasADi::OptimalControl::collocate_final(const SXMatrix &var, SXMatrix
&VARF) ";

%feature("docstring")  CasADi::OptimalControl::tarjan "void
CasADi::OptimalControl::tarjan(const std::vector< SX > &x, const
std::vector< SX > &xdot, const std::vector< SX > &z, const
std::vector< SX > &dae)

Tarjan's algorithm. ";

%feature("docstring")  CasADi::OptimalControl::get_collocation_coeff "void CasADi::OptimalControl::get_collocation_coeff(int K, std::vector<
std::vector< double > > &C, std::vector< double > &D,
CollocationPoints cp) ";

%feature("docstring")  CasADi::OptimalControl::collocate "void
CasADi::OptimalControl::collocate(const SXMatrix &var, std::vector<
SXMatrix > &VAR, int N) ";

%feature("docstring")  CasADi::OptimalControl::collocate "void
CasADi::OptimalControl::collocate(const SXMatrix &var, std::vector<
std::vector< SXMatrix > > &VAR, int N, int K) ";

%feature("docstring")  CasADi::OptimalControl::var "vector<SX>
CasADi::OptimalControl::var(const vector< Variable > v) ";

%feature("docstring")  CasADi::OptimalControl::der "vector<SX>
CasADi::OptimalControl::der(const vector< Variable > v) ";

%feature("docstring")  CasADi::OptimalControl::getNominal "vector<double> CasADi::OptimalControl::getNominal(const vector<
Variable > v) ";

%feature("docstring")  CasADi::OptimalControl::getAll "std::vector<
double > CasADi::OptimalControl::getAll(double(Variable::*fcn)()
const, const std::vector< Variable > v, bool nominal=false)

Call a member function for all members of a vector (note: fcn pointer
to member function) ";

%feature("docstring")  CasADi::OptimalControl::getStart "vector<double> CasADi::OptimalControl::getStart(const vector< Variable
> v, bool nominal) ";

%feature("docstring")  CasADi::OptimalControl::getDerivativeStart "vector<double> CasADi::OptimalControl::getDerivativeStart(const
vector< Variable > v, bool nominal) ";

%feature("docstring")  CasADi::OptimalControl::getMin "vector<double>
CasADi::OptimalControl::getMin(const vector< Variable > v, bool
nominal) ";

%feature("docstring")  CasADi::OptimalControl::getMax "vector<double>
CasADi::OptimalControl::getMax(const vector< Variable > v, bool
nominal) ";

%feature("docstring")  CasADi::OptimalControl::var "std::vector<SX>
CasADi::OptimalControl::var(const std::vector< Variable > v)

Get a vector of expressions from a vector of variables. ";

%feature("docstring")  CasADi::OptimalControl::der "std::vector<SX>
CasADi::OptimalControl::der(const std::vector< Variable > v)

Get a vector of derivative expressions from a vector of variables. ";

%feature("docstring")  CasADi::OptimalControl::getNominal "std::vector<double> CasADi::OptimalControl::getNominal(const
std::vector< Variable > v)

Get a vector of the nominal values of a vector of variables. ";

%feature("docstring")  CasADi::OptimalControl::getStart "std::vector<double> CasADi::OptimalControl::getStart(const
std::vector< Variable > v, bool nominal=false)

Get a vector of the values at the initial time for a vector of
variables. ";

%feature("docstring")  CasADi::OptimalControl::getDerivativeStart "std::vector<double> CasADi::OptimalControl::getDerivativeStart(const
std::vector< Variable > v, bool nominal=false)

Get a vector of the values of the derivative at the initial time for a
vector of variables. ";

%feature("docstring")  CasADi::OptimalControl::getMax "std::vector<double> CasADi::OptimalControl::getMax(const std::vector<
Variable > v, bool nominal=false)

Get a upper bounds. ";

%feature("docstring")  CasADi::OptimalControl::getMin "std::vector<double> CasADi::OptimalControl::getMin(const std::vector<
Variable > v, bool nominal=false)

Get a lower bounds. ";


// File: namespaceCasADi_1_1Sundials.xml


// File: namespaceIpopt.xml


// File: namespaceKINEMATICS.xml
%feature("docstring")  KINEMATICS::norm "SXMatrix
KINEMATICS::norm(const SXMatrix &v) ";

%feature("docstring")  KINEMATICS::Rperm "SXMatrix
KINEMATICS::Rperm(int a, int b, int c)

Make a 3x3 rotation matrix that expresses a permutation of the axes.

Make a 3x3 rotation matrix that expresses a permutation if the axes.

Axes x,y,z are labeled as integers 1,2,3. A minus sign indicates a
reversed direction

Parameters:
-----------

a:  The new 1-axis is the old a-axis

a:  The new 2-axis is the old b-axis

a:  The new 3-axis is the old c-axis

The following example expresses a mirror operation around the z=0
plane: Note that this would shift handedness of the frame. Not a good
idea in mechanics. Better stick to conventional right-handed frames.
";

%feature("docstring")  KINEMATICS::cosquadrant "SX
KINEMATICS::cosquadrant(const int quadrant) ";

%feature("docstring")  KINEMATICS::sinquadrant "SX
KINEMATICS::sinquadrant(const int quadrant) ";

%feature("docstring")  KINEMATICS::Rxp "SXMatrix
KINEMATICS::Rxp(const int quadrant)

creates a 3x3 rotation matrix for a rotation about the x-axis with an
angle that is a multiple of PI/2

Parameters:
-----------

quadrant:  rotate over PI/2*quadrant ";

%feature("docstring")  KINEMATICS::Rx "SXMatrix KINEMATICS::Rx(const
SXMatrix &angle)

creates a 3x3 rotation matrix for a rotation about the x-axis

SXMatrix rotate(AXIS X,const SXMatrix &angle); // Rotate about an
axis.

creates 3x3 rotation matrix for a rotation about the x-axis

Parameters:
-----------

angle:  angle for which to rotate in radians Looking from the origin
towards the endpoint of the x-defining unit vector, a positive
rotation is clockwise

ca = cos(angle) sa = sin(angle)

creates a 3x3 rotation matrix for a rotation about the x-axis

creates 3x3 rotation matrix for a rotation about the x-axis

Parameters:
-----------

angle:  angle for which to rotate in radians Looking from the origin
towards the endpoint of the x-defining unit vector, a positive
rotation is clockwise

ca = cos(angle) sa = sin(angle) ";

%feature("docstring")  KINEMATICS::Ryp "SXMatrix
KINEMATICS::Ryp(const int quadrant)

creates a 3x3 rotation matrix for a rotation about the y-axis with an
angle that is a multiple of PI/2

Parameters:
-----------

quadrant:  rotate over PI/2*quadrant ";

%feature("docstring")  KINEMATICS::Ry "SXMatrix KINEMATICS::Ry(const
SXMatrix &angle)

creates a 3x3 rotation matrix for a rotation about the y-axis

creates 3x3 rotation matrix for a rotation about the y-axis

Parameters:
-----------

angle:  angle for which to rotate in radians Looking from the origin
towards the endpoint of the y-defining unit vector, a positive
rotation is clockwise

ca = cos(angle) sa = sin(angle) ";

%feature("docstring")  KINEMATICS::Rzp "SXMatrix
KINEMATICS::Rzp(const int quadrant)

creates a 3x3 rotation matrix for a rotation about the z-axis with an
angle that is a multiple of PI/2

Parameters:
-----------

quadrant:  rotate over PI/2*quadrant ";

%feature("docstring")  KINEMATICS::Rz "SXMatrix KINEMATICS::Rz(const
SXMatrix &angle)

creates a 3x3 rotation matrix for a rotation about the z-axis

creates 3x3 rotation matrix for a rotation about the z-axis

Parameters:
-----------

angle:  angle for which to rotate in radians Looking from the origin
towards the endpoint of the z-defining unit vector, a positive
rotation is clockwise

ca = cos(angle) sa = sin(angle) ";

%feature("docstring")  KINEMATICS::TRx "SXMatrix
KINEMATICS::TRx(const SXMatrix &angle) ";

%feature("docstring")  KINEMATICS::TRy "SXMatrix
KINEMATICS::TRy(const SXMatrix &angle) ";

%feature("docstring")  KINEMATICS::TRz "SXMatrix
KINEMATICS::TRz(const SXMatrix &angle) ";

%feature("docstring")  KINEMATICS::TRxp "SXMatrix
KINEMATICS::TRxp(const int quadrant) ";

%feature("docstring")  KINEMATICS::TRyp "SXMatrix
KINEMATICS::TRyp(const int quadrant) ";

%feature("docstring")  KINEMATICS::TRzp "SXMatrix
KINEMATICS::TRzp(const int quadrant) ";

%feature("docstring")  KINEMATICS::TRperm "SXMatrix
KINEMATICS::TRperm(int a, int b, int c)

Make a 4x4 transformation matrix that expresses a permutation of the
axes.

The new 1-axis is the old a-axis.

See:   Rperm(int a,int b,int c)  The new 2-axis is the old b-axis The
new 3-axis is the old c-axis Make a 4x4 transformation matrix that
expresses a permutation of the axes

See:   Rperm(int a,int b,int c) ";

%feature("docstring")  KINEMATICS::tr "SXMatrix KINEMATICS::tr(const
SXMatrix &x, const SXMatrix &y, const SXMatrix &z)

shorter notation for translate() ";

%feature("docstring")  KINEMATICS::translate "SXMatrix
KINEMATICS::translate(const SXMatrix &x, const SXMatrix &y, const
SXMatrix &z)

creates a 4x4 transformation matrix for a translation

Parameters:
-----------

x:  The amount to shift over the x-axis

y:  The amount to shift over the y-axis

z:  The amount to shift over the z-axis ";

%feature("docstring")  KINEMATICS::pos "KinVec KINEMATICS::pos(const
Frame &f, const Frame &ei)

Create a kinvec.

Get properties of the origin Get the 1-vector that defines the
position a frame f expressed it in another frame ei

Get the 1-vector that defines the position a frame f expressed it in
another frame ei

Example usage: ";

%feature("docstring")  KINEMATICS::vel "KinVec KINEMATICS::vel(const
Frame &f, const Frame &wt, const Frame &ei, const SXMatrix &q, const
SXMatrix &dq, const SXMatrix &ddq)

Get the linear velocity of the origin of frame f with respect to frame
wt, expressed in frame ei.

Get the velocity of the origin of frame f with respect to frame wt,
expressed in frame ei

Parameters:
-----------

q:  nx1 expression containg the n time-dependant symbols

dq:  nx1 expression containg the derivatives of the n time-dependant
symbols

ddq:  nx1 expression containg the second derivatives of the n time-
dependant variables ";

%feature("docstring")  KINEMATICS::acc "KinVec KINEMATICS::acc(const
Frame &f, const Frame &wt, const Frame &ei, const SXMatrix &q, const
SXMatrix &dq, const SXMatrix &ddq) ";

%feature("docstring")  KINEMATICS::rotVel "KinVec
KINEMATICS::rotVel(const Frame &f, const Frame &wt, const Frame &ei,
const SXMatrix &q, const SXMatrix &dq, const SXMatrix &ddq) ";

%feature("docstring")  KINEMATICS::rotAcc "KinVec
KINEMATICS::rotAcc(const Frame &f, const Frame &wt, const Frame &ei,
const SXMatrix &q, const SXMatrix &dq, const SXMatrix &ddq) ";

%feature("docstring")  KINEMATICS::vel "KinVec KINEMATICS::vel(const
Frame &f, const Frame &wt, const Frame &ei)

Get the linear velocity of the origin of frame f with respect to frame
wt, expressed in frame ei using default time-dependence.

Get the velocity of the origin of frame f with respect to frame wt,
expressed in frame ei

The default time-dependant symbols are taking from the world frame

Example usage:

Note that - in general - velocity is not just the component-wise time
derivative of positition. This only holds if ei equals wt ";

%feature("docstring")  KINEMATICS::acc "KinVec KINEMATICS::acc(const
Frame &f, const Frame &wt, const Frame &ei)

Get the linear acceleration of the origin of frame f with respect to
frame wt, expressed in frame ei using default time-dependence.

Get the linear acceleration of the origin of frame f with respect to
frame wt, expressed in frame ei

The default time-dependant symbols are taking from the world frame

Note that - in general - acceleration is not just the component-wise
time derivative of velocity. This only holds if ei equals wt ";

%feature("docstring")  KINEMATICS::rotVel "KinVec
KINEMATICS::rotVel(const Frame &f, const Frame &wt, const Frame &ei)

Get the rotational velocity of the origin of frame f with respect to
frame wt, expressed in frame ei using default time-dependence.

Get the rotational of the origin of frame f with respect to frame wt,
expressed in frame ei

The default time-dependant symbols are taking from the world frame.

The rotational velocity is defined by its skew-symmetric matrix form:
W_10 = dot(R_10)*R_01

with R_10 the 3x3 rotation matrix that transforms from frame 0 to 1.
";

%feature("docstring")  KINEMATICS::rotAcc "KinVec
KINEMATICS::rotAcc(const Frame &f, const Frame &wt, const Frame &ei)

Get the rotational acceleration of the origin of frame f with respect
to frame wt, expressed in frame ei using default time-dependence.

Get the rotational acceleration of the origin of frame f with respect
to frame wt, expressed in frame ei

The default time-dependant symbols are taking from the world frame

Note that - contrary to the case with linear acceleration - rotational
acceleration IS just the component-wise time derivative of rotational
velocity. ";

%feature("docstring")  KINEMATICS::ex "KinVec KINEMATICS::ex(const
Frame &f)

Get the 0-vector that defines the x-axis of a frame f.

Get the 0-vector that defines the x-axis of a frame f ";

%feature("docstring")  KINEMATICS::ey "KinVec KINEMATICS::ey(const
Frame &f)

Get the 0-vector that defines the y-axis of a frame f.

Get the 0-vector that defines the x-axis of a frame f ";

%feature("docstring")  KINEMATICS::ez "KinVec KINEMATICS::ez(const
Frame &f)

Get the 0-vector that defines the z-axis of a frame f.

Get the 0-vector that defines the x-axis of a frame f ";

%feature("docstring")  KINEMATICS::ex "KinVec KINEMATICS::ex(const
Frame &f, const Frame &ei)

Get the 0-vector that defines the x-axis of a frame f, but express it
in another frame ei.

Get the 0-vector that defines the x-axis of a frame f, but express it
in another frame ei ";

%feature("docstring")  KINEMATICS::ey "KinVec KINEMATICS::ey(const
Frame &f, const Frame &ei)

Get the 0-vector that defines the y-axis of a frame f, but express it
in another frame ei.

Get the 0-vector that defines the y-axis of a frame f, but express it
in another frame ei ";

%feature("docstring")  KINEMATICS::ez "KinVec KINEMATICS::ez(const
Frame &f, const Frame &ei)

Get the 0-vector that defines the z-axis of a frame f, but express it
in another frame ei.

Get the 0-vector that defines the z-axis of a frame f, but express it
in another frame ei ";

%feature("docstring")  KINEMATICS::expressCommon "Frame
KINEMATICS::expressCommon(KinVec &a, KinVec &b)

Take two vectors, express them in a common frame and return this
common frame.

Will change the KinVecs passed to it ";

%feature("docstring")  KINEMATICS::norm "SXMatrix
KINEMATICS::norm(const KinVec &v) ";

%feature("docstring")  KINEMATICS::cross "KinVec
KINEMATICS::cross(const KinVec &a, const KinVec &b) ";

%feature("docstring")  KINEMATICS::acc "KinVec KINEMATICS::acc(const
Frame &f, const Frame &wt, const Frame &ei, const SXMatrix &q, const
SXMatrix &dq)

Get the linear acceleration of the origin of frame f with respect to
frame wt, expressed in frame ei.

Get the acceleration of the origin of frame f with respect to frame
wt, expressed in frame ei

Parameters:
-----------

q:  nx1 expression containg the n time-dependant symbols

dq:  nx1 expression containg the derivatives of the n time-dependant
symbols

ddq:  nx1 expression containg the second derivatives of the n time-
dependant variables ";

%feature("docstring")  KINEMATICS::rotVel "KinVec
KINEMATICS::rotVel(const Frame &f, const Frame &wt, const Frame &ei,
const SXMatrix &q, const SXMatrix &dq)

Get the rotational velocity of the origin of frame f with respect to
frame wt, expressed in frame ei.

Get the rotational velocity of the origin of frame f with respect to
frame wt, expressed in frame ei

Parameters:
-----------

q:  nx1 expression containg the n time-dependant symbols

dq:  nx1 expression containg the derivatives of the n time-dependant
symbols

ddq:  nx1 expression containg the second derivatives of the n time-
dependant variables ";

%feature("docstring")  KINEMATICS::rotAcc "KinVec
KINEMATICS::rotAcc(const Frame &f, const Frame &wt, const Frame &ei,
const SXMatrix &q, const SXMatrix &dq)

Get the rotational acceleration of the origin of frame f with respect
to frame wt, expressed in frame ei.

Get the rotational acceleration of the origin of frame f with respect
to frame wt, expressed in frame ei

Parameters:
-----------

q:  nx1 expression containg the n time-dependant symbols

dq:  nx1 expression containg the derivatives of the n time-dependant
symbols

ddq:  nx1 expression containg the second derivatives of the n time-
dependant variables ";

%feature("docstring")  KINEMATICS::ff1 "SXMatrix
KINEMATICS::ff1(const SXMatrix &a, const SXMatrix &b) ";

%feature("docstring")  KINEMATICS::ff2 "SXMatrix
KINEMATICS::ff2(const SXMatrix &a, const SXMatrix &b) ";

%feature("docstring")  KINEMATICS::splitdep "void
KINEMATICS::splitdep(const KinVec &k, int i, KinVec &v1, KinVec &v2)
";

%feature("docstring")  KINEMATICS::ode "SXMatrix
KINEMATICS::ode(const SX &t_, const SXMatrix &q_, const SXMatrix &p_,
const SXMatrix &d_, const SXMatrix &u_, SXMatrix &h_)

Parameters:
-----------

t:  time

q:  states of the system delta, r, phi, theta, R, P, Y; ddelta, dr,
dphi, dtheta, dR, dP, dY; E; mu,nu

p:  parameters of the system

d:  disturbances on the system

u:  Input of the system dddelta,ddr,dmu,dnu

h:  internal expressions which the user may wish to inspect ";


// File: namespaceOPTICON.xml


// File: namespaceqpOASES.xml


// File: namespacestd.xml
%feature("docstring")  std::sqrt "MX std::sqrt(const MX &x)

Pre-C99 elementary functions from the math.h (cmath) header. ";

%feature("docstring")  std::sin "MX std::sin(const MX &x) ";

%feature("docstring")  std::cos "MX std::cos(const MX &x) ";

%feature("docstring")  std::tan "MX std::tan(const MX &x) ";

%feature("docstring")  std::atan "MX std::atan(const MX &x) ";

%feature("docstring")  std::asin "MX std::asin(const MX &x) ";

%feature("docstring")  std::acos "MX std::acos(const MX &x) ";

%feature("docstring")  std::exp "MX std::exp(const MX &x) ";

%feature("docstring")  std::log "MX std::log(const MX &x) ";

%feature("docstring")  std::log10 "MX std::log10(const MX &x) ";

%feature("docstring")  std::constpow "MX std::constpow(const MX &x,
const MX &n) ";

%feature("docstring")  std::pow "MX std::pow(const MX &x, const MX
&n) ";

%feature("docstring")  std::abs "MX std::abs(const MX &x) ";

%feature("docstring")  std::fabs "MX std::fabs(const MX &x) ";

%feature("docstring")  std::floor "MX std::floor(const MX &x) ";

%feature("docstring")  std::ceil "MX std::ceil(const MX &x) ";

%feature("docstring")  std::sinh "MX std::sinh(const MX &x) ";

%feature("docstring")  std::cosh "MX std::cosh(const MX &x) ";

%feature("docstring")  std::tanh "MX std::tanh(const MX &x) ";

%feature("docstring")  std::printme "MX std::printme(const MX &x,
const MX &y) ";

%feature("docstring")  std::sin "CasADi::Matrix<T> std::sin(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::cos "CasADi::Matrix<T> std::cos(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::tan "CasADi::Matrix<T> std::tan(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::asin "CasADi::Matrix<T> std::asin(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::acos "CasADi::Matrix<T> std::acos(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::atan "CasADi::Matrix<T> std::atan(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::sinh "CasADi::Matrix<T> std::sinh(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::cosh "CasADi::Matrix<T> std::cosh(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::tanh "CasADi::Matrix<T> std::tanh(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::exp "CasADi::Matrix<T> std::exp(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::log "CasADi::Matrix<T> std::log(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::log10 "CasADi::Matrix<T> std::log10(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::sqrt "CasADi::Matrix<T> std::sqrt(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::floor "CasADi::Matrix<T> std::floor(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::ceil "CasADi::Matrix<T> std::ceil(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::fabs "CasADi::Matrix<T> std::fabs(const
CasADi::Matrix< T > &x) ";

%feature("docstring")  std::pow "CasADi::Matrix<T> std::pow(const
CasADi::Matrix< T > &x, const CasADi::Matrix< T > &y) ";

%feature("docstring")  std::constpow "CasADi::Matrix<T>
std::constpow(const CasADi::Matrix< T > &x, const CasADi::Matrix< T >
&y) ";

%feature("docstring")  std::printme "CasADi::Matrix<T>
std::printme(const CasADi::Matrix< T > &x, const CasADi::Matrix< T >
&y) ";

%feature("docstring")  std::exp "MX std::exp(const MX &x) ";

%feature("docstring")  std::log "MX std::log(const MX &x) ";

%feature("docstring")  std::log10 "MX std::log10(const MX &x) ";

%feature("docstring")  std::sqrt "MX std::sqrt(const MX &x) ";

%feature("docstring")  std::sin "MX std::sin(const MX &x) ";

%feature("docstring")  std::cos "MX std::cos(const MX &x) ";

%feature("docstring")  std::tan "MX std::tan(const MX &x) ";

%feature("docstring")  std::atan "MX std::atan(const MX &x) ";

%feature("docstring")  std::asin "MX std::asin(const MX &x) ";

%feature("docstring")  std::acos "MX std::acos(const MX &x) ";

%feature("docstring")  std::sinh "MX std::sinh(const MX &x) ";

%feature("docstring")  std::cosh "MX std::cosh(const MX &x) ";

%feature("docstring")  std::tanh "MX std::tanh(const MX &x) ";

%feature("docstring")  std::pow "MX std::pow(const MX &x, const MX
&n) ";

%feature("docstring")  std::constpow "MX std::constpow(const MX &x,
const MX &n) ";

%feature("docstring")  std::floor "MX std::floor(const MX &x) ";

%feature("docstring")  std::ceil "MX std::ceil(const MX &x) ";

%feature("docstring")  std::sqrt "SX std::sqrt(const SX &x) ";

%feature("docstring")  std::sin "SX std::sin(const SX &x) ";

%feature("docstring")  std::cos "SX std::cos(const SX &x) ";

%feature("docstring")  std::tan "SX std::tan(const SX &x) ";

%feature("docstring")  std::atan "SX std::atan(const SX &x) ";

%feature("docstring")  std::asin "SX std::asin(const SX &x) ";

%feature("docstring")  std::acos "SX std::acos(const SX &x) ";

%feature("docstring")  std::sinh "SX std::sinh(const SX &x) ";

%feature("docstring")  std::cosh "SX std::cosh(const SX &x) ";

%feature("docstring")  std::tanh "SX std::tanh(const SX &x) ";

%feature("docstring")  std::exp "SX std::exp(const SX &x) ";

%feature("docstring")  std::log "SX std::log(const SX &x) ";

%feature("docstring")  std::pow "SX std::pow(const SX &x, const SX
&n) ";

%feature("docstring")  std::constpow "SX std::constpow(const SX &x,
const SX &n) ";

%feature("docstring")  std::abs "SX std::abs(const SX &x) ";

%feature("docstring")  std::fabs "SX std::fabs(const SX &x) ";

%feature("docstring")  std::floor "SX std::floor(const SX &x) ";

%feature("docstring")  std::ceil "SX std::ceil(const SX &x) ";


// File: 01_8dox.xml


// File: 02_8dox.xml


// File: 03_8dox.xml


// File: 04_8dox.xml


// File: 05_8dox.xml


// File: 06_8dox.xml


// File: a0__schemes_8hpp.xml


// File: acado__function_8cpp.xml


// File: acado__function_8hpp.xml


// File: acado__integrator__backend_8cpp.xml


// File: acado__integrator__backend_8hpp.xml


// File: acado__interface_8cpp.xml


// File: acado__interface_8hpp.xml


// File: acado__internal_8cpp.xml


// File: acado__internal_8hpp.xml


// File: aeroplane_8cpp.xml
%feature("docstring")  main "int main(int argc, char *argv[]) ";


// File: b0__options_8hpp.xml


// File: binary__op_8cpp.xml


// File: binary__op_8hpp.xml


// File: binary__sx__node_8cpp.xml


// File: binary__sx__node_8hpp.xml


// File: c0__monitors_8hpp.xml


// File: c__function_8cpp.xml


// File: c__function_8hpp.xml


// File: c__function__internal_8cpp.xml


// File: c__function__internal_8hpp.xml


// File: cartpendulum_8cpp.xml
%feature("docstring")  main "int main(int argc, char *argv[]) ";


// File: casadi_8hpp.xml


// File: casadi__common_8hpp.xml


// File: casadi__exception_8hpp.xml


// File: casadi__lifter_8cpp.xml


// File: casadi__lifter_8hpp.xml


// File: casadi__limits_8hpp.xml


// File: casadi__math_8hpp.xml


// File: casadi__operators_8hpp.xml
%feature("docstring")  CasADi::erf "MX erf(const MX &x)

C99 elementary functions from the math.h header. ";

%feature("docstring")  CasADi::fmin "MX fmin(const MX &a, const MX
&b) ";

%feature("docstring")  CasADi::fmax "MX fmax(const MX &a, const MX
&b) ";


// File: casadi__types_8cpp.xml


// File: casadi__types_8hpp.xml


// File: constant__sx__node_8hpp.xml


// File: countNodes_8hpp.xml


// File: cplex__internal_8cpp.xml


// File: cplex__internal_8hpp.xml


// File: cplex__solver_8cpp.xml


// File: cplex__solver_8hpp.xml


// File: createParent_8hpp.xml


// File: crs__sparsity_8cpp.xml


// File: crs__sparsity_8hpp.xml


// File: csparse_8cpp.xml


// File: csparse_8hpp.xml


// File: csparse__internal_8cpp.xml


// File: csparse__internal_8hpp.xml


// File: csparse__tools_8cpp.xml


// File: csparse__tools_8hpp.xml


// File: ctemplate_8cpp.xml
%feature("docstring")  main "main(int argc, char *argv[])

This file does absolutely nothing but including all headers ";


// File: cvodes__integrator_8cpp.xml


// File: cvodes__integrator_8hpp.xml


// File: cvodes__internal_8cpp.xml


// File: cvodes__internal_8hpp.xml


// File: d0__stats_8hpp.xml


// File: densification_8cpp.xml


// File: densification_8hpp.xml


// File: evaluation_8cpp.xml


// File: evaluation_8hpp.xml


// File: exacthessian_8hpp.xml


// File: expand_8hpp.xml


// File: expression__tools_8hpp.xml


// File: external__function_8cpp.xml


// File: external__function_8hpp.xml


// File: external__function__internal_8cpp.xml


// File: external__function__internal_8hpp.xml


// File: fmi__parser_8cpp.xml


// File: fmi__parser_8hpp.xml


// File: fmi__parser__internal_8cpp.xml


// File: fmi__parser__internal_8hpp.xml


// File: frame_8cpp.xml


// File: frame_8hpp.xml


// File: frame__node_8cpp.xml


// File: frame__node_8hpp.xml


// File: function__io_8cpp.xml


// File: function__io_8hpp.xml


// File: fx_8cpp.xml


// File: fx_8hpp.xml


// File: fx__internal_8cpp.xml


// File: fx__internal_8hpp.xml


// File: fx__tools_8cpp.xml


// File: fx__tools_8hpp.xml


// File: generateCode_8hpp.xml


// File: generic__type_8cpp.xml


// File: generic__type_8hpp.xml


// File: generic__type__internal_8cpp.xml


// File: generic__type__internal_8hpp.xml


// File: gsl__integrator_8cpp.xml


// File: gsl__integrator_8hpp.xml


// File: gsl__internal_8cpp.xml


// File: gsl__internal_8hpp.xml


// File: idas_8hpp.xml


// File: idas__integrator_8cpp.xml


// File: idas__integrator_8hpp.xml


// File: idas__internal_8cpp.xml


// File: idas__internal_8hpp.xml


// File: if__else__node_8cpp.xml


// File: if__else__node_8hpp.xml


// File: implicit__function_8cpp.xml


// File: implicit__function_8hpp.xml


// File: implicit__function__internal_8cpp.xml


// File: implicit__function__internal_8hpp.xml


// File: import__xml__file_8cpp.xml
%feature("docstring")  OPTICON::main "int main(int argc, char
*argv[]) ";


// File: integrator_8cpp.xml


// File: integrator_8hpp.xml


// File: integrator__internal_8cpp.xml


// File: integrator__internal_8hpp.xml


// File: inverse__mapping_8cpp.xml


// File: inverse__mapping_8hpp.xml


// File: ipopt_8hpp.xml


// File: ipopt__internal_8cpp.xml


// File: ipopt__internal_8hpp.xml


// File: ipopt__nlp_8cpp.xml


// File: ipopt__nlp_8hpp.xml


// File: ipopt__qp__internal_8cpp.xml


// File: ipopt__qp__internal_8hpp.xml


// File: ipopt__qp__solver_8cpp.xml


// File: ipopt__qp__solver_8hpp.xml


// File: ipopt__solver_8cpp.xml


// File: ipopt__solver_8hpp.xml


// File: jacobian_8cpp.xml


// File: jacobian_8hpp.xml


// File: jacobian__internal_8cpp.xml


// File: jacobian__internal_8hpp.xml


// File: jacobian__reference_8cpp.xml


// File: jacobian__reference_8hpp.xml


// File: jacSparsity_8hpp.xml


// File: kinetics_8cpp.xml


// File: kinetics_8hpp.xml


// File: kinsol__internal_8cpp.xml


// File: kinsol__internal_8hpp.xml


// File: kinsol__solver_8cpp.xml


// File: kinsol__solver_8hpp.xml


// File: KinsolSolver_8hpp.xml


// File: kinvec_8cpp.xml


// File: kinvec_8hpp.xml


// File: kite_8cpp.xml
%feature("docstring")  ff1 "SXMatrix ff1(const SXMatrix &a, const
SXMatrix &b) ";

%feature("docstring")  ff2 "SXMatrix ff2(const SXMatrix &a, const
SXMatrix &b) ";

%feature("docstring")  splitdep "void splitdep(const KinVec &k, int
i, KinVec &v1, KinVec &v2) ";

%feature("docstring")  numeval "void numeval(const KinVec &v, const
SXMatrix &q, const SXMatrix &dq, const SXMatrix &ddq) ";

%feature("docstring")  numeval "void numeval(const SXMatrix &v, const
SXMatrix &q, const SXMatrix &dq, const SXMatrix &ddq) ";

%feature("docstring")  main "int main(int argc, char *argv[]) ";


// File: kite__integrate_8cpp.xml
%feature("docstring")  main "int main() ";


// File: kiteode_8cpp.xml


// File: kiteode_8hpp.xml


// File: knitro__internal_8cpp.xml


// File: knitro__internal_8hpp.xml


// File: knitro__solver_8cpp.xml


// File: knitro__solver_8hpp.xml


// File: lapack__lu__dense_8cpp.xml


// File: lapack__lu__dense_8hpp.xml


// File: lapack__qr__dense_8cpp.xml


// File: lapack__qr__dense_8hpp.xml


// File: liftopt__internal_8cpp.xml


// File: liftopt__internal_8hpp.xml


// File: liftopt__solver_8cpp.xml


// File: liftopt__solver_8hpp.xml


// File: limitPrinting__c_8hpp.xml


// File: linear__solver_8cpp.xml


// File: linear__solver_8hpp.xml


// File: linear__solver__internal_8cpp.xml


// File: linear__solver__internal_8hpp.xml


// File: LinearSolver_8hpp.xml


// File: main_8dox.xml


// File: mapping_8cpp.xml


// File: casadi_2mx_2mapping_8hpp.xml


// File: documentation_2examples_2MX_2mapping_8hpp.xml


// File: matrix_8hpp.xml


// File: matrix__tools_8cpp.xml


// File: matrix__tools_8hpp.xml
%feature("docstring")  CasADi::fmin "CasADi::Matrix<T> fmin(const
CasADi::Matrix< T > &x, const CasADi::Matrix< T > &y) ";

%feature("docstring")  CasADi::fmax "CasADi::Matrix<T> fmax(const
CasADi::Matrix< T > &x, const CasADi::Matrix< T > &y) ";

%feature("docstring")  CasADi::erf "CasADi::Matrix<T> erf(const
CasADi::Matrix< T > &x) ";


// File: MX_2minmax_8hpp.xml


// File: SX_2minmax_8hpp.xml


// File: multiple__output_8cpp.xml


// File: multiple__output_8hpp.xml


// File: multiple__shooting_8cpp.xml


// File: multiple__shooting_8hpp.xml


// File: multiple__shooting__internal_8cpp.xml


// File: multiple__shooting__internal_8hpp.xml


// File: multiplication_8cpp.xml


// File: multiplication_8hpp.xml


// File: muscod__aux_8cpp.xml


// File: muscod__aux_8hpp.xml


// File: muscod__function_8cpp.xml


// File: muscod__function_8hpp.xml


// File: muscod__interface_8cpp.xml


// File: muscod__interface_8hpp.xml


// File: muscod__internal_8cpp.xml


// File: muscod__internal_8hpp.xml


// File: mx_8cpp.xml
%feature("docstring")  CasADi::erf "MX erf(const MX &x) ";

%feature("docstring")  CasADi::fmin "MX fmin(const MX &x, const MX
&y) ";

%feature("docstring")  CasADi::fmax "MX fmax(const MX &x, const MX
&y) ";

%feature("docstring")  CasADi::printme "MX printme(const MX &x, const
MX &y) ";


// File: mx_8hpp.xml


// File: mx__constant_8cpp.xml


// File: mx__constant_8hpp.xml


// File: mx__function_8cpp.xml


// File: mx__function_8hpp.xml


// File: mx__function__internal_8cpp.xml


// File: mx__function__internal_8hpp.xml


// File: mx__node_8cpp.xml


// File: mx__node_8hpp.xml


// File: mx__tools_8cpp.xml


// File: mx__tools_8hpp.xml


// File: nlp__solver_8cpp.xml


// File: nlp__solver_8hpp.xml


// File: nlp__solver__internal_8cpp.xml


// File: nlp__solver__internal_8hpp.xml


// File: nonzeros_8hpp.xml


// File: norm_8cpp.xml


// File: norm_8hpp.xml


// File: ocp__solver_8cpp.xml


// File: ocp__solver_8hpp.xml


// File: ocp__solver__internal_8cpp.xml


// File: ocp__solver__internal_8hpp.xml


// File: ocp__tools_8cpp.xml


// File: ocp__tools_8hpp.xml


// File: ooqp__internal_8cpp.xml


// File: ooqp__internal_8hpp.xml


// File: ooqp__solver_8cpp.xml


// File: ooqp__solver_8hpp.xml


// File: optimica__ocp_8cpp.xml


// File: optimica__ocp_8hpp.xml


// File: options__functionality_8cpp.xml


// File: options__functionality_8hpp.xml


// File: parallelizer_8cpp.xml


// File: parallelizer_8hpp.xml


// File: parallelizer__internal_8cpp.xml


// File: parallelizer__internal_8hpp.xml


// File: pre__c99__support_8cpp.xml
%feature("docstring")  isnan "int isnan(double x)  throw ()";

%feature("docstring")  isinf "int isinf(double x)  throw ()";

%feature("docstring")  erf "double erf(double x)  throw ()";

%feature("docstring")  fmin "double fmin(double x, double y)  throw
()";

%feature("docstring")  fmax "double fmax(double x, double y)  throw
()";


// File: pre__c99__support_8hpp.xml
%feature("docstring")  isnan "int isnan(double x)  throw ()";

%feature("docstring")  isinf "int isinf(double x)  throw ()";

%feature("docstring")  erf "double erf(double x)  throw ()";

%feature("docstring")  fmin "double fmin(double x, double y)  throw
()";

%feature("docstring")  fmax "double fmax(double x, double y)  throw
()";


// File: printable__object_8cpp.xml


// File: printable__object_8hpp.xml


// File: printme_8hpp.xml


// File: pyfunction_8hpp.xml


// File: qp__solver_8cpp.xml


// File: qp__solver_8hpp.xml


// File: qp__solver__internal_8cpp.xml


// File: qp__solver__internal_8hpp.xml


// File: qpoases__internal_8cpp.xml


// File: qpoases__internal_8hpp.xml


// File: qpoases__solver_8cpp.xml


// File: qpoases__solver_8hpp.xml


// File: shared__object_8cpp.xml


// File: shared__object_8hpp.xml


// File: casadi_2fx_2simulator_8cpp.xml


// File: toolboxes_2kinematics_2test_2simulator_8cpp.xml
%feature("docstring")  main "int main() ";


// File: casadi_2fx_2simulator_8hpp.xml


// File: toolboxes_2kinematics_2test_2simulator_8hpp.xml


// File: documentation_2examples_2integrators_2simulator_8hpp.xml


// File: simulator__internal_8cpp.xml


// File: simulator__internal_8hpp.xml


// File: slice_8cpp.xml


// File: slice_8hpp.xml


// File: sparsity__tools_8cpp.xml


// File: sparsity__tools_8hpp.xml


// File: spinningtop_8cpp.xml
%feature("docstring")  main "int main(int argc, char *argv[]) ";


// File: stl__vector__tools_8cpp.xml


// File: stl__vector__tools_8hpp.xml


// File: submatrix_8hpp.xml


// File: superlu_8cpp.xml


// File: superlu_8hpp.xml


// File: superlu__internal_8cpp.xml


// File: superlu__internal_8hpp.xml


// File: sx_8cpp.xml


// File: sx_8hpp.xml
%feature("docstring")  CasADi::erf "SX erf(const SX &x)

C99 elementary functions from the math.h header. ";

%feature("docstring")  CasADi::fmin "SX fmin(const SX &x, const SX
&y) ";

%feature("docstring")  CasADi::fmax "SX fmax(const SX &x, const SX
&y) ";

%feature("docstring")  CasADi::printme "SX printme(const SX &x, const
SX &y) ";


// File: sx__function_8cpp.xml


// File: sx__function_8hpp.xml


// File: sx__function__internal_8cpp.xml


// File: sx__function__internal_8hpp.xml


// File: sx__node_8cpp.xml


// File: sx__node_8hpp.xml


// File: sx__tools_8cpp.xml
%feature("docstring")  CasADi::mtaylor "Matrix<SX> mtaylor(const
Matrix< SX > &ex, const Matrix< SX > &x, const Matrix< SX > &a, int
order, const std::vector< int > &order_contributions) ";

%feature("docstring")  CasADi::evaluateConstants "Matrix<SX>
evaluateConstants(const Matrix< SX > &ex) ";

%feature("docstring")  CasADi::countNodes "int countNodes(const
Matrix< SX > &A) ";


// File: sx__tools_8hpp.xml


// File: SXaddition_8hpp.xml


// File: SXFunction__constr__oct_8hpp.xml


// File: SXFunction__constr__py_8hpp.xml


// File: symbolic__mx__node_8cpp.xml


// File: symbolic__mx__node_8hpp.xml


// File: symbolic__sx__node_8hpp.xml


// File: symbolicsubstitution_8hpp.xml


// File: test__frames_8cpp.xml
%feature("docstring")  main "int main(int argc, char *argv[]) ";


// File: test__kinvec_8cpp.xml
%feature("docstring")  main "int main(int argc, char *argv[]) ";


// File: tolerance_8hpp.xml


// File: unary__op_8cpp.xml


// File: unary__op_8hpp.xml


// File: unittest__kinvec_8cpp.xml
%feature("docstring")  utest "void utest(const std::string &name,
const KinVec &v, const SXMatrix &q, const SXMatrix &dq, const SXMatrix
&ddq) ";

%feature("docstring")  main "int main(int argc, char *argv[]) ";


// File: variable_8cpp.xml


// File: variable_8hpp.xml


// File: variable__internal_8cpp.xml


// File: variable__internal_8hpp.xml


// File: variable__tools_8cpp.xml


// File: variable__tools_8hpp.xml


// File: veccat_8hpp.xml


// File: x__function_8cpp.xml


// File: x__function_8hpp.xml


// File: x__function__internal_8cpp.xml


// File: x__function__internal_8hpp.xml


// File: xml__arg_8cpp.xml


// File: xml__arg_8hpp.xml


// File: xml__node_8cpp.xml


// File: xml__node_8hpp.xml


// File: chapter1.xml


// File: chapter2.xml


// File: chapter3.xml


// File: chapter4.xml


// File: chapter5.xml


// File: chapter6.xml


// File: dir_a51786397c36d6b57308245d29983693.xml


// File: dir_44278afa8362399f60c3e75c59412fef.xml


// File: dir_e6e492fd9590da9a959db53feb6584ac.xml


// File: dir_8b27272122fd4621a20a46a19ba893ff.xml


// File: dir_486e08794d2b6b6e73718bb4758e32e3.xml


// File: dir_528fbe1843b4eaec5d5e6b64be56ef07.xml


// File: dir_2dff923adead5133c783d0f92dd5442f.xml


// File: dir_fd7704b7dc284756ea3685c48ef0790c.xml


// File: dir_60e8af7a706334bf1665912ee1e070de.xml


// File: dir_809093120ca8056469217a75dba03b96.xml


// File: dir_25827974c27c7a82d9c55354f37df65a.xml


// File: dir_32b8619070e9782b5121e45ec993864a.xml


// File: dir_580751f974173c86697bdcd1140c3ad2.xml


// File: dir_a11692568406942108fb0158b80c6160.xml


// File: dir_b7a9a86806b80da897bc7b19e3ef3f76.xml


// File: dir_57b63843bcb8508c0137ecb37329001d.xml


// File: dir_91836411ea5c33e978a9684a769f9e64.xml


// File: dir_0bbea47d3615864252f4b49b4fe158bd.xml


// File: dir_098ba6662d922b28c1812f004068ef6c.xml


// File: dir_dda7f0ca02730a1504f960c1ad838714.xml


// File: dir_0be15970a30c9cf8089ee19721f4908b.xml


// File: dir_6b0c34d093f5b5a42edd5c0ba0016687.xml


// File: dir_dc4426f66442f6e29a54616f0b6a539f.xml


// File: dir_8871dd931da7e4bfcff87a5641d427d0.xml


// File: dir_67113a6d3675cbddfa7a019d5a056d94.xml


// File: dir_5ccff051cb0f2733df13b03ffc913b3f.xml


// File: dir_0e503752524e672338342137a93547fa.xml


// File: dir_707d985626d5da7d624688a7ed4ccd53.xml


// File: dir_a2f3d388c75e2fd04dc4a1d8bc34ef38.xml


// File: dir_6553319f7dab705580e073be38745c85.xml


// File: dir_79c32bc44c94504aa30df53bad2865bc.xml


// File: dir_5eedc2e77e40610b7088f5c58c45f6cd.xml


// File: dir_0b50c49a95d4007b185b1bbe4adc4ffa.xml


// File: dir_28e981431a1604fb6ccc3afa690c32df.xml


// File: dir_629fbaf1bb540f51b1519c9cabd9b440.xml


// File: dir_f8faa3a90d59c4750d4c7f78c64a3ce3.xml


// File: dir_c84e1b8ec7baef3d237679cf5805bf3b.xml


// File: dir_e8c3cb1c9b8c67bcba787c317daa3a5f.xml


// File: algebra_2LinearSolver_8py-example.xml


// File: FX_2expand_8py-example.xml


// File: FX_2pyfunction_8py-example.xml


// File: integrators_2idas_8py-example.xml


// File: integrators_2simulator_8py-example.xml


// File: integrators_2tolerance_8py-example.xml


// File: misc_2limitPrinting_c_8cc-example.xml


// File: misc_2printme_8py-example.xml


// File: MX_2createParent_8py-example.xml


// File: MX_2mapping_8py-example.xml


// File: MX_2veccat_8py-example.xml


// File: operators_2MX_2minmax_8py-example.xml


// File: operators_2SX_2minmax_8py-example.xml


// File: solvers_2exacthessian_8py-example.xml


// File: solvers_2ipopt_8py-example.xml


// File: solvers_2KinsolSolver_8py-example.xml


// File: SX_2countNodes_8py-example.xml


// File: SX_2generateCode_8py-example.xml


// File: SX_2jacSparsity_8py-example.xml


// File: SX_2SXaddition_8cc-example.xml


// File: SX_2SXFunction_constr_oct_8m-example.xml


// File: SX_2SXFunction_constr_py_8py-example.xml


// File: SX_2symbolicsubstitution_8py-example.xml


// File: indexpage.xml

